
finalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d17c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800d310  0800d310  0001d310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd80  0800dd80  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd80  0800dd80  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd80  0800dd80  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd80  0800dd80  0001dd80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd84  0800dd84  0001dd84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800dd88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a4  2**0
                  CONTENTS
 10 .bss          00000768  200001a8  200001a8  000201a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000910  20000910  000201a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d5ff  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c3  00000000  00000000  0003d7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  00040c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001758  00000000  00000000  000424c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020bf5  00000000  00000000  00043c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f5b5  00000000  00000000  0006480d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c778e  00000000  00000000  00083dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b550  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000709c  00000000  00000000  0014b5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a8 	.word	0x200001a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d2f4 	.word	0x0800d2f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ac 	.word	0x200001ac
 80001cc:	0800d2f4 	.word	0x0800d2f4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	; 0x38
 8000ba0:	af0a      	add	r7, sp, #40	; 0x28
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4603      	mov	r3, r0
 8000bac:	817b      	strh	r3, [r7, #10]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	813b      	strh	r3, [r7, #8]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <LiquidCrystal+0x90>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d019      	beq.n	8000bf2 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000bbe:	8939      	ldrh	r1, [r7, #8]
 8000bc0:	897a      	ldrh	r2, [r7, #10]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	9308      	str	r3, [sp, #32]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	9307      	str	r3, [sp, #28]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9306      	str	r3, [sp, #24]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9305      	str	r3, [sp, #20]
 8000bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bd4:	9304      	str	r3, [sp, #16]
 8000bd6:	8c3b      	ldrh	r3, [r7, #32]
 8000bd8:	9303      	str	r3, [sp, #12]
 8000bda:	8bbb      	ldrh	r3, [r7, #28]
 8000bdc:	9302      	str	r3, [sp, #8]
 8000bde:	8b3b      	ldrh	r3, [r7, #24]
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	460b      	mov	r3, r1
 8000be8:	68f9      	ldr	r1, [r7, #12]
 8000bea:	2001      	movs	r0, #1
 8000bec:	f000 f820 	bl	8000c30 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000bf0:	e018      	b.n	8000c24 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000bf2:	8939      	ldrh	r1, [r7, #8]
 8000bf4:	897a      	ldrh	r2, [r7, #10]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9308      	str	r3, [sp, #32]
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	9307      	str	r3, [sp, #28]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9306      	str	r3, [sp, #24]
 8000c02:	2300      	movs	r3, #0
 8000c04:	9305      	str	r3, [sp, #20]
 8000c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c08:	9304      	str	r3, [sp, #16]
 8000c0a:	8c3b      	ldrh	r3, [r7, #32]
 8000c0c:	9303      	str	r3, [sp, #12]
 8000c0e:	8bbb      	ldrh	r3, [r7, #28]
 8000c10:	9302      	str	r3, [sp, #8]
 8000c12:	8b3b      	ldrh	r3, [r7, #24]
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	68f9      	ldr	r1, [r7, #12]
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 f806 	bl	8000c30 <init>
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000000 	.word	0x20000000

08000c30 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	460b      	mov	r3, r1
 8000c42:	81bb      	strh	r3, [r7, #12]
 8000c44:	4613      	mov	r3, r2
 8000c46:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000c48:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <init+0x84>)
 8000c4a:	89bb      	ldrh	r3, [r7, #12]
 8000c4c:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000c4e:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <init+0x88>)
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000c54:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <init+0x8c>)
 8000c56:	8b3b      	ldrh	r3, [r7, #24]
 8000c58:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000c5a:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <init+0x90>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000c60:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <init+0x94>)
 8000c62:	8bbb      	ldrh	r3, [r7, #28]
 8000c64:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000c66:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <init+0x94>)
 8000c68:	8c3b      	ldrh	r3, [r7, #32]
 8000c6a:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000c6c:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <init+0x94>)
 8000c6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c70:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000c72:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <init+0x94>)
 8000c74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c76:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000c78:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <init+0x94>)
 8000c7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c7c:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000c7e:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <init+0x94>)
 8000c80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000c82:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000c84:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <init+0x94>)
 8000c86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c88:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <init+0x94>)
 8000c8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c8e:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <init+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e002      	b.n	8000ca4 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <init+0x98>)
 8000ca0:	2210      	movs	r2, #16
 8000ca2:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	2010      	movs	r0, #16
 8000ca8:	f000 f810 	bl	8000ccc <begin>
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200001c6 	.word	0x200001c6
 8000cb8:	200001c8 	.word	0x200001c8
 8000cbc:	200001ca 	.word	0x200001ca
 8000cc0:	200001dc 	.word	0x200001dc
 8000cc4:	200001cc 	.word	0x200001cc
 8000cc8:	200001e0 	.word	0x200001e0

08000ccc <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	460a      	mov	r2, r1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d906      	bls.n	8000cf0 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000ce2:	4b77      	ldr	r3, [pc, #476]	; (8000ec0 <begin+0x1f4>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b74      	ldr	r3, [pc, #464]	; (8000ec0 <begin+0x1f4>)
 8000cee:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000cf0:	4a74      	ldr	r2, [pc, #464]	; (8000ec4 <begin+0x1f8>)
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	3340      	adds	r3, #64	; 0x40
 8000cfc:	2140      	movs	r1, #64	; 0x40
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f988 	bl	8001014 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000d04:	4b70      	ldr	r3, [pc, #448]	; (8000ec8 <begin+0x1fc>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d009      	beq.n	8000d20 <begin+0x54>
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d106      	bne.n	8000d20 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000d12:	4b6b      	ldr	r3, [pc, #428]	; (8000ec0 <begin+0x1f4>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b68      	ldr	r3, [pc, #416]	; (8000ec0 <begin+0x1f4>)
 8000d1e:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000d20:	f000 f8e4 	bl	8000eec <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000d2c:	4b67      	ldr	r3, [pc, #412]	; (8000ecc <begin+0x200>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d01b      	beq.n	8000d6c <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000d34:	4b66      	ldr	r3, [pc, #408]	; (8000ed0 <begin+0x204>)
 8000d36:	881a      	ldrh	r2, [r3, #0]
 8000d38:	4b66      	ldr	r3, [pc, #408]	; (8000ed4 <begin+0x208>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b65      	ldr	r3, [pc, #404]	; (8000ed8 <begin+0x20c>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	4b64      	ldr	r3, [pc, #400]	; (8000edc <begin+0x210>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4b62      	ldr	r3, [pc, #392]	; (8000edc <begin+0x210>)
 8000d52:	885b      	ldrh	r3, [r3, #2]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b60      	ldr	r3, [pc, #384]	; (8000edc <begin+0x210>)
 8000d5a:	889b      	ldrh	r3, [r3, #4]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b5e      	ldr	r3, [pc, #376]	; (8000edc <begin+0x210>)
 8000d62:	88db      	ldrh	r3, [r3, #6]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	e02a      	b.n	8000dc2 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d6c:	4b58      	ldr	r3, [pc, #352]	; (8000ed0 <begin+0x204>)
 8000d6e:	881a      	ldrh	r2, [r3, #0]
 8000d70:	4b58      	ldr	r3, [pc, #352]	; (8000ed4 <begin+0x208>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b57      	ldr	r3, [pc, #348]	; (8000ed8 <begin+0x20c>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d80:	4b56      	ldr	r3, [pc, #344]	; (8000edc <begin+0x210>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d88:	4b54      	ldr	r3, [pc, #336]	; (8000edc <begin+0x210>)
 8000d8a:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d90:	4b52      	ldr	r3, [pc, #328]	; (8000edc <begin+0x210>)
 8000d92:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d98:	4b50      	ldr	r3, [pc, #320]	; (8000edc <begin+0x210>)
 8000d9a:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b4e      	ldr	r3, [pc, #312]	; (8000edc <begin+0x210>)
 8000da2:	891b      	ldrh	r3, [r3, #8]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <begin+0x210>)
 8000daa:	895b      	ldrh	r3, [r3, #10]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b4a      	ldr	r3, [pc, #296]	; (8000edc <begin+0x210>)
 8000db2:	899b      	ldrh	r3, [r3, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b48      	ldr	r3, [pc, #288]	; (8000edc <begin+0x210>)
 8000dba:	89db      	ldrh	r3, [r3, #14]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000dc0:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 8000dc2:	4b47      	ldr	r3, [pc, #284]	; (8000ee0 <begin+0x214>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f107 020c 	add.w	r2, r7, #12
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f006 faf9 	bl	80073c4 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 8000dd2:	2032      	movs	r0, #50	; 0x32
 8000dd4:	f004 fe1e 	bl	8005a14 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000dd8:	4b41      	ldr	r3, [pc, #260]	; (8000ee0 <begin+0x214>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a3c      	ldr	r2, [pc, #240]	; (8000ed0 <begin+0x204>)
 8000dde:	8811      	ldrh	r1, [r2, #0]
 8000de0:	2200      	movs	r2, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f006 fc80 	bl	80076e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000de8:	4b3d      	ldr	r3, [pc, #244]	; (8000ee0 <begin+0x214>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a3a      	ldr	r2, [pc, #232]	; (8000ed8 <begin+0x20c>)
 8000dee:	8811      	ldrh	r1, [r2, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f006 fc78 	bl	80076e8 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8000df8:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <begin+0x208>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	2bff      	cmp	r3, #255	; 0xff
 8000dfe:	d007      	beq.n	8000e10 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000e00:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <begin+0x214>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a33      	ldr	r2, [pc, #204]	; (8000ed4 <begin+0x208>)
 8000e06:	8811      	ldrh	r1, [r2, #0]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f006 fc6c 	bl	80076e8 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000e10:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <begin+0x1f4>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d115      	bne.n	8000e48 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 fa31 	bl	8001284 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000e22:	2005      	movs	r0, #5
 8000e24:	f004 fdf6 	bl	8005a14 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 fa2b 	bl	8001284 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f004 fdf0 	bl	8005a14 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 fa25 	bl	8001284 <write4bits>
    HAL_Delay(1);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f004 fdea 	bl	8005a14 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000e40:	2002      	movs	r0, #2
 8000e42:	f000 fa1f 	bl	8001284 <write4bits>
 8000e46:	e01d      	b.n	8000e84 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <begin+0x1f4>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	f043 0320 	orr.w	r3, r3, #32
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f991 	bl	800117a <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000e58:	2005      	movs	r0, #5
 8000e5a:	f004 fddb 	bl	8005a14 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <begin+0x1f4>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f043 0320 	orr.w	r3, r3, #32
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f986 	bl	800117a <command>
    HAL_Delay(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f004 fdd0 	bl	8005a14 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <begin+0x1f4>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f043 0320 	orr.w	r3, r3, #32
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f97b 	bl	800117a <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <begin+0x1f4>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	f043 0320 	orr.w	r3, r3, #32
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f973 	bl	800117a <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <begin+0x218>)
 8000e96:	2204      	movs	r2, #4
 8000e98:	701a      	strb	r2, [r3, #0]
  display();
 8000e9a:	f000 f92d 	bl	80010f8 <display>

  // clear it off
  clear();
 8000e9e:	f000 f8d9 	bl	8001054 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <begin+0x21c>)
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <begin+0x21c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f961 	bl	800117a <command>

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200001e0 	.word	0x200001e0
 8000ec4:	200001e3 	.word	0x200001e3
 8000ec8:	200001c4 	.word	0x200001c4
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	200001c6 	.word	0x200001c6
 8000ed4:	200001c8 	.word	0x200001c8
 8000ed8:	200001ca 	.word	0x200001ca
 8000edc:	200001cc 	.word	0x200001cc
 8000ee0:	200001dc 	.word	0x200001dc
 8000ee4:	200001e1 	.word	0x200001e1
 8000ee8:	200001e2 	.word	0x200001e2

08000eec <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8000ef2:	4b41      	ldr	r3, [pc, #260]	; (8000ff8 <enableClock+0x10c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000efa:	d10c      	bne.n	8000f16 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b3f      	ldr	r3, [pc, #252]	; (8000ffc <enableClock+0x110>)
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	4a3e      	ldr	r2, [pc, #248]	; (8000ffc <enableClock+0x110>)
 8000f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f06:	6153      	str	r3, [r2, #20]
 8000f08:	4b3c      	ldr	r3, [pc, #240]	; (8000ffc <enableClock+0x110>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000f14:	e06a      	b.n	8000fec <enableClock+0x100>
  else if(_port == GPIOB)
 8000f16:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <enableClock+0x10c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a39      	ldr	r2, [pc, #228]	; (8001000 <enableClock+0x114>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d10c      	bne.n	8000f3a <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <enableClock+0x110>)
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	4a35      	ldr	r2, [pc, #212]	; (8000ffc <enableClock+0x110>)
 8000f26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2a:	6153      	str	r3, [r2, #20]
 8000f2c:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <enableClock+0x110>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	69bb      	ldr	r3, [r7, #24]
}
 8000f38:	e058      	b.n	8000fec <enableClock+0x100>
  else if(_port == GPIOB)
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <enableClock+0x10c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a30      	ldr	r2, [pc, #192]	; (8001000 <enableClock+0x114>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d10c      	bne.n	8000f5e <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <enableClock+0x110>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4a2c      	ldr	r2, [pc, #176]	; (8000ffc <enableClock+0x110>)
 8000f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4e:	6153      	str	r3, [r2, #20]
 8000f50:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <enableClock+0x110>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697b      	ldr	r3, [r7, #20]
}
 8000f5c:	e046      	b.n	8000fec <enableClock+0x100>
	else if(_port == GPIOC)
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <enableClock+0x10c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a28      	ldr	r2, [pc, #160]	; (8001004 <enableClock+0x118>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d10c      	bne.n	8000f82 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f68:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <enableClock+0x110>)
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	4a23      	ldr	r2, [pc, #140]	; (8000ffc <enableClock+0x110>)
 8000f6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f72:	6153      	str	r3, [r2, #20]
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <enableClock+0x110>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]
}
 8000f80:	e034      	b.n	8000fec <enableClock+0x100>
	else if(_port == GPIOD)
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <enableClock+0x10c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a20      	ldr	r2, [pc, #128]	; (8001008 <enableClock+0x11c>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d10c      	bne.n	8000fa6 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <enableClock+0x110>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	4a1a      	ldr	r2, [pc, #104]	; (8000ffc <enableClock+0x110>)
 8000f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f96:	6153      	str	r3, [r2, #20]
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <enableClock+0x110>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	e022      	b.n	8000fec <enableClock+0x100>
	else if(_port == GPIOE)
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <enableClock+0x10c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a18      	ldr	r2, [pc, #96]	; (800100c <enableClock+0x120>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d10c      	bne.n	8000fca <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <enableClock+0x110>)
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <enableClock+0x110>)
 8000fb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fba:	6153      	str	r3, [r2, #20]
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <enableClock+0x110>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
}
 8000fc8:	e010      	b.n	8000fec <enableClock+0x100>
	else if(_port == GPIOF)
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <enableClock+0x10c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <enableClock+0x124>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d10b      	bne.n	8000fec <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <enableClock+0x110>)
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <enableClock+0x110>)
 8000fda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fde:	6153      	str	r3, [r2, #20]
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <enableClock+0x110>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
}
 8000fec:	bf00      	nop
 8000fee:	3724      	adds	r7, #36	; 0x24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	200001dc 	.word	0x200001dc
 8000ffc:	40021000 	.word	0x40021000
 8001000:	48000400 	.word	0x48000400
 8001004:	48000800 	.word	0x48000800
 8001008:	48000c00 	.word	0x48000c00
 800100c:	48001000 	.word	0x48001000
 8001010:	48001400 	.word	0x48001400

08001014 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <setRowOffsets+0x3c>)
 8001028:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <setRowOffsets+0x3c>)
 8001030:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <setRowOffsets+0x3c>)
 8001038:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <setRowOffsets+0x3c>)
 8001040:	70da      	strb	r2, [r3, #3]
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200001e4 	.word	0x200001e4

08001054 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8001058:	2001      	movs	r0, #1
 800105a:	f000 f88e 	bl	800117a <command>
  HAL_Delay(2);  // this command takes a long time!
 800105e:	2002      	movs	r0, #2
 8001060:	f004 fcd8 	bl	8005a14 <HAL_Delay>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	460a      	mov	r2, r1
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	4613      	mov	r3, r2
 8001076:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8001078:	2304      	movs	r3, #4
 800107a:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d803      	bhi.n	800108c <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	3b01      	subs	r3, #1
 800108a:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <setCursor+0x5c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	79ba      	ldrb	r2, [r7, #6]
 8001092:	429a      	cmp	r2, r3
 8001094:	d303      	bcc.n	800109e <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <setCursor+0x5c>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	3b01      	subs	r3, #1
 800109c:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <setCursor+0x60>)
 80010a2:	5cd2      	ldrb	r2, [r2, r3]
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	4413      	add	r3, r2
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f860 	bl	800117a <command>
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200001e3 	.word	0x200001e3
 80010c8:	200001e4 	.word	0x200001e4

080010cc <noDisplay>:

// Turn the display on/off (quickly)
void noDisplay(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  _displaycontrol &= ~LCD_DISPLAYON;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <noDisplay+0x28>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	f023 0304 	bic.w	r3, r3, #4
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <noDisplay+0x28>)
 80010dc:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <noDisplay+0x28>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f846 	bl	800117a <command>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001e1 	.word	0x200001e1

080010f8 <display>:
void display(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <display+0x28>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <display+0x28>)
 8001108:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <display+0x28>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f043 0308 	orr.w	r3, r3, #8
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f830 	bl	800117a <command>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001e1 	.word	0x200001e1

08001124 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <print+0x12>
 8001132:	2300      	movs	r3, #0
 8001134:	e01d      	b.n	8001172 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff f852 	bl	80001e4 <strlen>
 8001140:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8001146:	e00c      	b.n	8001162 <print+0x3e>
    if (write(*buffer++)) n++;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	617a      	str	r2, [r7, #20]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f820 	bl	8001196 <write>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d008      	beq.n	800116e <print+0x4a>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1e5a      	subs	r2, r3, #1
 8001166:	613a      	str	r2, [r7, #16]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1ed      	bne.n	8001148 <print+0x24>
 800116c:	e000      	b.n	8001170 <print+0x4c>
    else break;
 800116e:	bf00      	nop
  }
  return n;
 8001170:	68fb      	ldr	r3, [r7, #12]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f813 	bl	80011b4 <send>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <write>:

inline size_t write(uint8_t value) {
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2101      	movs	r1, #1
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 f805 	bl	80011b4 <send>
  return 1; // assume sucess
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <send+0x6c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a16      	ldr	r2, [pc, #88]	; (8001224 <send+0x70>)
 80011ca:	8811      	ldrh	r1, [r2, #0]
 80011cc:	79ba      	ldrb	r2, [r7, #6]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f006 fa8a 	bl	80076e8 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <send+0x74>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	2bff      	cmp	r3, #255	; 0xff
 80011da:	d007      	beq.n	80011ec <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <send+0x6c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a11      	ldr	r2, [pc, #68]	; (8001228 <send+0x74>)
 80011e2:	8811      	ldrh	r1, [r2, #0]
 80011e4:	2200      	movs	r2, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f006 fa7e 	bl	80076e8 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <send+0x78>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <send+0x4e>
    write8bits(value); 
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f86c 	bl	80012d8 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8001200:	e009      	b.n	8001216 <send+0x62>
    write4bits(value>>4);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f83b 	bl	8001284 <write4bits>
    write4bits(value);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f837 	bl	8001284 <write4bits>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200001dc 	.word	0x200001dc
 8001224:	200001c6 	.word	0x200001c6
 8001228:	200001c8 	.word	0x200001c8
 800122c:	200001e0 	.word	0x200001e0

08001230 <pulseEnable>:

void pulseEnable(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <pulseEnable+0x4c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a11      	ldr	r2, [pc, #68]	; (8001280 <pulseEnable+0x50>)
 800123a:	8811      	ldrh	r1, [r2, #0]
 800123c:	2200      	movs	r2, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f006 fa52 	bl	80076e8 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8001244:	2001      	movs	r0, #1
 8001246:	f004 fbe5 	bl	8005a14 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <pulseEnable+0x4c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <pulseEnable+0x50>)
 8001250:	8811      	ldrh	r1, [r2, #0]
 8001252:	2201      	movs	r2, #1
 8001254:	4618      	mov	r0, r3
 8001256:	f006 fa47 	bl	80076e8 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 800125a:	2001      	movs	r0, #1
 800125c:	f004 fbda 	bl	8005a14 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <pulseEnable+0x4c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <pulseEnable+0x50>)
 8001266:	8811      	ldrh	r1, [r2, #0]
 8001268:	2200      	movs	r2, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f006 fa3c 	bl	80076e8 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8001270:	2001      	movs	r0, #1
 8001272:	f004 fbcf 	bl	8005a14 <HAL_Delay>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200001dc 	.word	0x200001dc
 8001280:	200001ca 	.word	0x200001ca

08001284 <write4bits>:

void write4bits(uint8_t value) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	e013      	b.n	80012bc <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <write4bits+0x4c>)
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <write4bits+0x50>)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80012a0:	79fa      	ldrb	r2, [r7, #7]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	fa42 f303 	asr.w	r3, r2, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	f006 fa19 	bl	80076e8 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3301      	adds	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	dde8      	ble.n	8001294 <write4bits+0x10>
  }

  pulseEnable();
 80012c2:	f7ff ffb5 	bl	8001230 <pulseEnable>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200001dc 	.word	0x200001dc
 80012d4:	200001cc 	.word	0x200001cc

080012d8 <write8bits>:

void write8bits(uint8_t value) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	e013      	b.n	8001310 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <write8bits+0x4c>)
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <write8bits+0x50>)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	fa42 f303 	asr.w	r3, r2, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	f006 f9ef 	bl	80076e8 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3301      	adds	r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b07      	cmp	r3, #7
 8001314:	dde8      	ble.n	80012e8 <write8bits+0x10>
  }
  
  pulseEnable();
 8001316:	f7ff ff8b 	bl	8001230 <pulseEnable>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200001dc 	.word	0x200001dc
 8001328:	200001cc 	.word	0x200001cc

0800132c <buzzerInit>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
TIM_HandleTypeDef *buzzerPwmTimer;
uint32_t buzzerPwmChannel;
TIM_HandleTypeDef htim2;
void buzzerInit() {
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
    buzzerPwmTimer = &htim2;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <buzzerInit+0x24>)
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <buzzerInit+0x28>)
 8001334:	601a      	str	r2, [r3, #0]
    buzzerPwmChannel = TIM_CHANNEL_1;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <buzzerInit+0x2c>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Start(buzzerPwmTimer, buzzerPwmChannel);
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <buzzerInit+0x24>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a05      	ldr	r2, [pc, #20]	; (8001358 <buzzerInit+0x2c>)
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f008 fa1a 	bl	8009780 <HAL_TIM_PWM_Start>
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000078c 	.word	0x2000078c
 8001354:	20000338 	.word	0x20000338
 8001358:	20000790 	.word	0x20000790

0800135c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001362:	f004 faf1 	bl	8005948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001366:	f000 f85f 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136a:	f000 fb5b 	bl	8001a24 <MX_GPIO_Init>
  MX_I2C1_Init();
 800136e:	f000 f98f 	bl	8001690 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001372:	f000 f9cd 	bl	8001710 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001376:	f000 fa09 	bl	800178c <MX_TIM2_Init>
  MX_TIM3_Init();
 800137a:	f000 fa7d 	bl	8001878 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800137e:	f000 faff 	bl	8001980 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8001382:	f000 fb2d 	bl	80019e0 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8001386:	f000 f8b5 	bl	80014f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800138a:	f000 f923 	bl	80015d4 <MX_ADC2_Init>
  MX_TIM6_Init();
 800138e:	f000 fac1 	bl	8001914 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	buzzerInit();
 8001392:	f7ff ffcb 	bl	800132c <buzzerInit>
    HAL_ADC_Start_IT(&hadc1);//light
 8001396:	481e      	ldr	r0, [pc, #120]	; (8001410 <main+0xb4>)
 8001398:	f004 fd5e 	bl	8005e58 <HAL_ADC_Start_IT>
    HAL_ADC_Start_IT(&hadc2);
 800139c:	481d      	ldr	r0, [pc, #116]	; (8001414 <main+0xb8>)
 800139e:	f004 fd5b 	bl	8005e58 <HAL_ADC_Start_IT>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80013a2:	2201      	movs	r2, #1
 80013a4:	2101      	movs	r1, #1
 80013a6:	481c      	ldr	r0, [pc, #112]	; (8001418 <main+0xbc>)
 80013a8:	f006 f99e 	bl	80076e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2102      	movs	r1, #2
 80013b0:	4819      	ldr	r0, [pc, #100]	; (8001418 <main+0xbc>)
 80013b2:	f006 f999 	bl	80076e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2104      	movs	r1, #4
 80013ba:	4817      	ldr	r0, [pc, #92]	; (8001418 <main+0xbc>)
 80013bc:	f006 f994 	bl	80076e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2108      	movs	r1, #8
 80013c4:	4814      	ldr	r0, [pc, #80]	; (8001418 <main+0xbc>)
 80013c6:	f006 f98f 	bl	80076e8 <HAL_GPIO_WritePin>
	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 80013ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ce:	9303      	str	r3, [sp, #12]
 80013d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ee:	480a      	ldr	r0, [pc, #40]	; (8001418 <main+0xbc>)
 80013f0:	f7ff fbd4 	bl	8000b9c <LiquidCrystal>
    begin(20,4);
 80013f4:	2104      	movs	r1, #4
 80013f6:	2014      	movs	r0, #20
 80013f8:	f7ff fc68 	bl	8000ccc <begin>
	HAL_TIM_Base_Start_IT(&htim6);
 80013fc:	4807      	ldr	r0, [pc, #28]	; (800141c <main+0xc0>)
 80013fe:	f008 f8f3 	bl	80095e8 <HAL_TIM_Base_Start_IT>

    HAL_TIM_Base_Start_IT(&htim3);
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <main+0xc4>)
 8001404:	f008 f8f0 	bl	80095e8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim2);
 8001408:	4806      	ldr	r0, [pc, #24]	; (8001424 <main+0xc8>)
 800140a:	f008 f8ed 	bl	80095e8 <HAL_TIM_Base_Start_IT>
//    print(">> ControlPanel");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800140e:	e7fe      	b.n	800140e <main+0xb2>
 8001410:	200001e8 	.word	0x200001e8
 8001414:	20000238 	.word	0x20000238
 8001418:	48000c00 	.word	0x48000c00
 800141c:	200003d0 	.word	0x200003d0
 8001420:	20000384 	.word	0x20000384
 8001424:	20000338 	.word	0x20000338

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b09e      	sub	sp, #120	; 0x78
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001432:	2228      	movs	r2, #40	; 0x28
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f00a fa90 	bl	800b95c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	223c      	movs	r2, #60	; 0x3c
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f00a fa82 	bl	800b95c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001458:	2303      	movs	r3, #3
 800145a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800145c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001460:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001466:	2301      	movs	r3, #1
 8001468:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146a:	2310      	movs	r3, #16
 800146c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146e:	2302      	movs	r3, #2
 8001470:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001476:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001478:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800147c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001482:	4618      	mov	r0, r3
 8001484:	f006 fb8a 	bl	8007b9c <HAL_RCC_OscConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800148e:	f000 fbc1 	bl	8001c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001492:	230f      	movs	r3, #15
 8001494:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001496:	2302      	movs	r3, #2
 8001498:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800149e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014ac:	2101      	movs	r1, #1
 80014ae:	4618      	mov	r0, r3
 80014b0:	f007 fbb2 	bl	8008c18 <HAL_RCC_ClockConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014ba:	f000 fbab 	bl	8001c14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <SystemClock_Config+0xc8>)
 80014c0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80014c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80014d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d6:	463b      	mov	r3, r7
 80014d8:	4618      	mov	r0, r3
 80014da:	f007 fdd3 	bl	8009084 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014e4:	f000 fb96 	bl	8001c14 <Error_Handler>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3778      	adds	r7, #120	; 0x78
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	000200a2 	.word	0x000200a2

080014f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001518:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800151c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800151e:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800152a:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001532:	2200      	movs	r2, #0
 8001534:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001536:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001540:	2200      	movs	r2, #0
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001546:	2201      	movs	r2, #1
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001552:	2201      	movs	r2, #1
 8001554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001560:	2204      	movs	r2, #4
 8001562:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001566:	2200      	movs	r2, #0
 8001568:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800156c:	2200      	movs	r2, #0
 800156e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001570:	4817      	ldr	r0, [pc, #92]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001572:	f004 fa91 	bl	8005a98 <HAL_ADC_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800157c:	f000 fb4a 	bl	8001c14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4811      	ldr	r0, [pc, #68]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800158c:	f005 fbd6 	bl	8006d3c <HAL_ADCEx_MultiModeConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001596:	f000 fb3d 	bl	8001c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800159a:	2302      	movs	r3, #2
 800159c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800159e:	2301      	movs	r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80015a6:	2307      	movs	r3, #7
 80015a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_ADC1_Init+0xdc>)
 80015b8:	f005 f8d4 	bl	8006764 <HAL_ADC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80015c2:	f000 fb27 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200001e8 	.word	0x200001e8

080015d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015da:	463b      	mov	r3, r7
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
 80015e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80015ea:	4b27      	ldr	r3, [pc, #156]	; (8001688 <MX_ADC2_Init+0xb4>)
 80015ec:	4a27      	ldr	r2, [pc, #156]	; (800168c <MX_ADC2_Init+0xb8>)
 80015ee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <MX_ADC2_Init+0xb4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015f6:	4b24      	ldr	r3, [pc, #144]	; (8001688 <MX_ADC2_Init+0xb4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <MX_ADC2_Init+0xb4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001604:	2200      	movs	r2, #0
 8001606:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <MX_ADC2_Init+0xb4>)
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001612:	2200      	movs	r2, #0
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001618:	2201      	movs	r2, #1
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <MX_ADC2_Init+0xb4>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001624:	2201      	movs	r2, #1
 8001626:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <MX_ADC2_Init+0xb4>)
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001632:	2204      	movs	r2, #4
 8001634:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001638:	2200      	movs	r2, #0
 800163a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <MX_ADC2_Init+0xb4>)
 800163e:	2200      	movs	r2, #0
 8001640:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001642:	4811      	ldr	r0, [pc, #68]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001644:	f004 fa28 	bl	8005a98 <HAL_ADC_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800164e:	f000 fae1 	bl	8001c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001652:	2301      	movs	r3, #1
 8001654:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001656:	2301      	movs	r3, #1
 8001658:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800165e:	2307      	movs	r3, #7
 8001660:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001670:	f005 f878 	bl	8006764 <HAL_ADC_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800167a:	f000 facb 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000238 	.word	0x20000238
 800168c:	50000100 	.word	0x50000100

08001690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <MX_I2C1_Init+0x74>)
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <MX_I2C1_Init+0x78>)
 8001698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_I2C1_Init+0x74>)
 800169c:	4a1b      	ldr	r2, [pc, #108]	; (800170c <MX_I2C1_Init+0x7c>)
 800169e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <MX_I2C1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_I2C1_Init+0x74>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <MX_I2C1_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_I2C1_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_I2C1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_I2C1_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_I2C1_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ca:	480e      	ldr	r0, [pc, #56]	; (8001704 <MX_I2C1_Init+0x74>)
 80016cc:	f006 f861 	bl	8007792 <HAL_I2C_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016d6:	f000 fa9d 	bl	8001c14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016da:	2100      	movs	r1, #0
 80016dc:	4809      	ldr	r0, [pc, #36]	; (8001704 <MX_I2C1_Init+0x74>)
 80016de:	f006 f8e7 	bl	80078b0 <HAL_I2CEx_ConfigAnalogFilter>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016e8:	f000 fa94 	bl	8001c14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016ec:	2100      	movs	r1, #0
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_I2C1_Init+0x74>)
 80016f0:	f006 f929 	bl	8007946 <HAL_I2CEx_ConfigDigitalFilter>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016fa:	f000 fa8b 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000288 	.word	0x20000288
 8001708:	40005400 	.word	0x40005400
 800170c:	2000090e 	.word	0x2000090e

08001710 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_SPI1_Init+0x74>)
 8001716:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <MX_SPI1_Init+0x78>)
 8001718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_SPI1_Init+0x74>)
 800171c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_SPI1_Init+0x74>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_SPI1_Init+0x74>)
 800172a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800172e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_SPI1_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <MX_SPI1_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_SPI1_Init+0x74>)
 800173e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001742:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_SPI1_Init+0x74>)
 8001746:	2208      	movs	r2, #8
 8001748:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_SPI1_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_SPI1_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_SPI1_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_SPI1_Init+0x74>)
 800175e:	2207      	movs	r2, #7
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_SPI1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_SPI1_Init+0x74>)
 800176a:	2208      	movs	r2, #8
 800176c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_SPI1_Init+0x74>)
 8001770:	f007 fe38 	bl	80093e4 <HAL_SPI_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800177a:	f000 fa4b 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200002d4 	.word	0x200002d4
 8001788:	40013000 	.word	0x40013000

0800178c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08e      	sub	sp, #56	; 0x38
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ac:	463b      	mov	r3, r7
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	615a      	str	r2, [r3, #20]
 80017bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <MX_TIM2_Init+0xe8>)
 80017c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017c6:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <MX_TIM2_Init+0xe8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b29      	ldr	r3, [pc, #164]	; (8001874 <MX_TIM2_Init+0xe8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017d2:	4b28      	ldr	r3, [pc, #160]	; (8001874 <MX_TIM2_Init+0xe8>)
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017da:	4b26      	ldr	r3, [pc, #152]	; (8001874 <MX_TIM2_Init+0xe8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e0:	4b24      	ldr	r3, [pc, #144]	; (8001874 <MX_TIM2_Init+0xe8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017e6:	4823      	ldr	r0, [pc, #140]	; (8001874 <MX_TIM2_Init+0xe8>)
 80017e8:	f007 fea7 	bl	800953a <HAL_TIM_Base_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80017f2:	f000 fa0f 	bl	8001c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001800:	4619      	mov	r1, r3
 8001802:	481c      	ldr	r0, [pc, #112]	; (8001874 <MX_TIM2_Init+0xe8>)
 8001804:	f008 faf0 	bl	8009de8 <HAL_TIM_ConfigClockSource>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800180e:	f000 fa01 	bl	8001c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001812:	4818      	ldr	r0, [pc, #96]	; (8001874 <MX_TIM2_Init+0xe8>)
 8001814:	f007 ff52 	bl	80096bc <HAL_TIM_PWM_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800181e:	f000 f9f9 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	4810      	ldr	r0, [pc, #64]	; (8001874 <MX_TIM2_Init+0xe8>)
 8001832:	f008 fffb 	bl	800a82c <HAL_TIMEx_MasterConfigSynchronization>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800183c:	f000 f9ea 	bl	8001c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001840:	2360      	movs	r3, #96	; 0x60
 8001842:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	2200      	movs	r2, #0
 8001854:	4619      	mov	r1, r3
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <MX_TIM2_Init+0xe8>)
 8001858:	f008 f9b2 	bl	8009bc0 <HAL_TIM_PWM_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001862:	f000 f9d7 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001866:	4803      	ldr	r0, [pc, #12]	; (8001874 <MX_TIM2_Init+0xe8>)
 8001868:	f000 fb6e 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 800186c:	bf00      	nop
 800186e:	3738      	adds	r7, #56	; 0x38
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000338 	.word	0x20000338

08001878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <MX_TIM3_Init+0x94>)
 8001898:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <MX_TIM3_Init+0x98>)
 800189a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4799;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <MX_TIM3_Init+0x94>)
 800189e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80018a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <MX_TIM3_Init+0x94>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <MX_TIM3_Init+0x94>)
 80018ac:	2264      	movs	r2, #100	; 0x64
 80018ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_TIM3_Init+0x94>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <MX_TIM3_Init+0x94>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018bc:	4813      	ldr	r0, [pc, #76]	; (800190c <MX_TIM3_Init+0x94>)
 80018be:	f007 fe3c 	bl	800953a <HAL_TIM_Base_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80018c8:	f000 f9a4 	bl	8001c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	4619      	mov	r1, r3
 80018d8:	480c      	ldr	r0, [pc, #48]	; (800190c <MX_TIM3_Init+0x94>)
 80018da:	f008 fa85 	bl	8009de8 <HAL_TIM_ConfigClockSource>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80018e4:	f000 f996 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_TIM3_Init+0x94>)
 80018f6:	f008 ff99 	bl	800a82c <HAL_TIMEx_MasterConfigSynchronization>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001900:	f000 f988 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000384 	.word	0x20000384
 8001910:	40000400 	.word	0x40000400

08001914 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_TIM6_Init+0x64>)
 8001926:	4a15      	ldr	r2, [pc, #84]	; (800197c <MX_TIM6_Init+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4799;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <MX_TIM6_Init+0x64>)
 800192c:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001930:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_TIM6_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_TIM6_Init+0x64>)
 800193a:	2264      	movs	r2, #100	; 0x64
 800193c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_TIM6_Init+0x64>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <MX_TIM6_Init+0x64>)
 8001946:	f007 fdf8 	bl	800953a <HAL_TIM_Base_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001950:	f000 f960 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_TIM6_Init+0x64>)
 8001962:	f008 ff63 	bl	800a82c <HAL_TIMEx_MasterConfigSynchronization>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800196c:	f000 f952 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200003d0 	.word	0x200003d0
 800197c:	40001000 	.word	0x40001000

08001980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 8001986:	4a15      	ldr	r2, [pc, #84]	; (80019dc <MX_USART2_UART_Init+0x5c>)
 8001988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 800198c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019be:	2200      	movs	r2, #0
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019c4:	f008 ffd0 	bl	800a968 <HAL_UART_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019ce:	f000 f921 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000041c 	.word	0x2000041c
 80019dc:	40004400 	.word	0x40004400

080019e0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <MX_USB_PCD_Init+0x3c>)
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <MX_USB_PCD_Init+0x40>)
 80019e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_USB_PCD_Init+0x3c>)
 80019ec:	2208      	movs	r2, #8
 80019ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <MX_USB_PCD_Init+0x3c>)
 80019f2:	2202      	movs	r2, #2
 80019f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_USB_PCD_Init+0x3c>)
 80019f8:	2202      	movs	r2, #2
 80019fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <MX_USB_PCD_Init+0x3c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_USB_PCD_Init+0x3c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <MX_USB_PCD_Init+0x3c>)
 8001a0a:	f005 ffe8 	bl	80079de <HAL_PCD_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001a14:	f000 f8fe 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	200004a0 	.word	0x200004a0
 8001a20:	40005c00 	.word	0x40005c00

08001a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a3a:	4b71      	ldr	r3, [pc, #452]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	4a70      	ldr	r2, [pc, #448]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a44:	6153      	str	r3, [r2, #20]
 8001a46:	4b6e      	ldr	r3, [pc, #440]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	4b6b      	ldr	r3, [pc, #428]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	4a6a      	ldr	r2, [pc, #424]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001a58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a5c:	6153      	str	r3, [r2, #20]
 8001a5e:	4b68      	ldr	r3, [pc, #416]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a6a:	4b65      	ldr	r3, [pc, #404]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	4a64      	ldr	r2, [pc, #400]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001a70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a74:	6153      	str	r3, [r2, #20]
 8001a76:	4b62      	ldr	r3, [pc, #392]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	4b5f      	ldr	r3, [pc, #380]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	4a5e      	ldr	r2, [pc, #376]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8c:	6153      	str	r3, [r2, #20]
 8001a8e:	4b5c      	ldr	r3, [pc, #368]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	4b59      	ldr	r3, [pc, #356]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa4:	6153      	str	r3, [r2, #20]
 8001aa6:	4b56      	ldr	r3, [pc, #344]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab2:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	4a52      	ldr	r2, [pc, #328]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001abc:	6153      	str	r3, [r2, #20]
 8001abe:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <MX_GPIO_Init+0x1dc>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001aca:	2200      	movs	r2, #0
 8001acc:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001ad0:	484c      	ldr	r0, [pc, #304]	; (8001c04 <MX_GPIO_Init+0x1e0>)
 8001ad2:	f005 fe09 	bl	80076e8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led2_Pin|led3_Pin|led4_Pin, GPIO_PIN_RESET);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001adc:	484a      	ldr	r0, [pc, #296]	; (8001c08 <MX_GPIO_Init+0x1e4>)
 8001ade:	f005 fe03 	bl	80076e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_Pin|LCDD9_Pin|LCDD10_Pin|LCDD11_Pin
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f647 710f 	movw	r1, #32527	; 0x7f0f
 8001ae8:	4848      	ldr	r0, [pc, #288]	; (8001c0c <MX_GPIO_Init+0x1e8>)
 8001aea:	f005 fdfd 	bl	80076e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001aee:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001af2:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	2301      	movs	r3, #1
 8001af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	483f      	ldr	r0, [pc, #252]	; (8001c04 <MX_GPIO_Init+0x1e0>)
 8001b08:	f005 fc5c 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : keyPad_Pin PC1 PC2 PC3
                           PC5 */
  GPIO_InitStruct.Pin = keyPad_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b0c:	232f      	movs	r3, #47	; 0x2f
 8001b0e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b16:	2302      	movs	r3, #2
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	4619      	mov	r1, r3
 8001b20:	483b      	ldr	r0, [pc, #236]	; (8001c10 <MX_GPIO_Init+0x1ec>)
 8001b22:	f005 fc4f 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3c:	f005 fc42 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 8001b40:	2310      	movs	r3, #16
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	482e      	ldr	r0, [pc, #184]	; (8001c10 <MX_GPIO_Init+0x1ec>)
 8001b56:	f005 fc35 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin led2_Pin led3_Pin led4_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin|led4_Pin;
 8001b5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4619      	mov	r1, r3
 8001b72:	4825      	ldr	r0, [pc, #148]	; (8001c08 <MX_GPIO_Init+0x1e4>)
 8001b74:	f005 fc26 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Pin LCDD9_Pin LCDD10_Pin LCDD11_Pin
                           LCDD12_Pin LCDD13_Pin LCDD14_Pin keyPadO_Pin
                           PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = LCD_Pin|LCDD9_Pin|LCDD10_Pin|LCDD11_Pin
 8001b78:	f647 730f 	movw	r3, #32527	; 0x7f0f
 8001b7c:	61fb      	str	r3, [r7, #28]
                          |LCDD12_Pin|LCDD13_Pin|LCDD14_Pin|keyPadO_Pin
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	481e      	ldr	r0, [pc, #120]	; (8001c0c <MX_GPIO_Init+0x1e8>)
 8001b92:	f005 fc17 	bl	80073c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2101      	movs	r1, #1
 8001b9a:	2006      	movs	r0, #6
 8001b9c:	f005 fb65 	bl	800726a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ba0:	2006      	movs	r0, #6
 8001ba2:	f005 fb7e 	bl	80072a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2101      	movs	r1, #1
 8001baa:	2007      	movs	r0, #7
 8001bac:	f005 fb5d 	bl	800726a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001bb0:	2007      	movs	r0, #7
 8001bb2:	f005 fb76 	bl	80072a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 1, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2101      	movs	r1, #1
 8001bba:	2008      	movs	r0, #8
 8001bbc:	f005 fb55 	bl	800726a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001bc0:	2008      	movs	r0, #8
 8001bc2:	f005 fb6e 	bl	80072a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2101      	movs	r1, #1
 8001bca:	2009      	movs	r0, #9
 8001bcc:	f005 fb4d 	bl	800726a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001bd0:	2009      	movs	r0, #9
 8001bd2:	f005 fb66 	bl	80072a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2101      	movs	r1, #1
 8001bda:	200a      	movs	r0, #10
 8001bdc:	f005 fb45 	bl	800726a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001be0:	200a      	movs	r0, #10
 8001be2:	f005 fb5e 	bl	80072a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2101      	movs	r1, #1
 8001bea:	2017      	movs	r0, #23
 8001bec:	f005 fb3d 	bl	800726a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001bf0:	2017      	movs	r0, #23
 8001bf2:	f005 fb56 	bl	80072a2 <HAL_NVIC_EnableIRQ>

}
 8001bf6:	bf00      	nop
 8001bf8:	3730      	adds	r7, #48	; 0x30
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000
 8001c04:	48001000 	.word	0x48001000
 8001c08:	48000400 	.word	0x48000400
 8001c0c:	48000c00 	.word	0x48000c00
 8001c10:	48000800 	.word	0x48000800

08001c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c18:	b672      	cpsid	i
}
 8001c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <Error_Handler+0x8>
	...

08001c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_MspInit+0x44>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_MspInit+0x44>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6193      	str	r3, [r2, #24]
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_MspInit+0x44>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_MspInit+0x44>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_MspInit+0x44>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	61d3      	str	r3, [r2, #28]
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_MspInit+0x44>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001c56:	2006      	movs	r0, #6
 8001c58:	f005 fafc 	bl	8007254 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000

08001c68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c88:	d136      	bne.n	8001cf8 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_ADC_MspInit+0x110>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	4a39      	ldr	r2, [pc, #228]	; (8001d78 <HAL_ADC_MspInit+0x110>)
 8001c92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c94:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <HAL_ADC_MspInit+0x110>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c9c:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_ADC_MspInit+0x114>)
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	4a36      	ldr	r2, [pc, #216]	; (8001d7c <HAL_ADC_MspInit+0x114>)
 8001ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	6153      	str	r3, [r2, #20]
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <HAL_ADC_MspInit+0x114>)
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <HAL_ADC_MspInit+0x114>)
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	4a30      	ldr	r2, [pc, #192]	; (8001d7c <HAL_ADC_MspInit+0x114>)
 8001cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbe:	6153      	str	r3, [r2, #20]
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_ADC_MspInit+0x114>)
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = LUM_Pin;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LUM_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce2:	f005 fb6f 	bl	80073c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2012      	movs	r0, #18
 8001cec:	f005 fabd 	bl	800726a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001cf0:	2012      	movs	r0, #18
 8001cf2:	f005 fad6 	bl	80072a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001cf6:	e03a      	b.n	8001d6e <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <HAL_ADC_MspInit+0x118>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d135      	bne.n	8001d6e <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_ADC_MspInit+0x110>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <HAL_ADC_MspInit+0x110>)
 8001d0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <HAL_ADC_MspInit+0x110>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d10b      	bne.n	8001d2c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_ADC_MspInit+0x114>)
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <HAL_ADC_MspInit+0x114>)
 8001d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	6153      	str	r3, [r2, #20]
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_ADC_MspInit+0x114>)
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_ADC_MspInit+0x114>)
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_ADC_MspInit+0x114>)
 8001d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d36:	6153      	str	r3, [r2, #20]
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_ADC_MspInit+0x114>)
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TEM_Pin;
 8001d44:	2310      	movs	r3, #16
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TEM_GPIO_Port, &GPIO_InitStruct);
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	4619      	mov	r1, r3
 8001d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5a:	f005 fb33 	bl	80073c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	2012      	movs	r0, #18
 8001d64:	f005 fa81 	bl	800726a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d68:	2012      	movs	r0, #18
 8001d6a:	f005 fa9a 	bl	80072a2 <HAL_NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3730      	adds	r7, #48	; 0x30
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000794 	.word	0x20000794
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	50000100 	.word	0x50000100

08001d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <HAL_I2C_MspInit+0x7c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d127      	bne.n	8001df6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_I2C_MspInit+0x80>)
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <HAL_I2C_MspInit+0x80>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6153      	str	r3, [r2, #20]
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_I2C_MspInit+0x80>)
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001dbe:	23c0      	movs	r3, #192	; 0xc0
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc2:	2312      	movs	r3, #18
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480b      	ldr	r0, [pc, #44]	; (8001e08 <HAL_I2C_MspInit+0x84>)
 8001dda:	f005 faf3 	bl	80073c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_I2C_MspInit+0x80>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <HAL_I2C_MspInit+0x80>)
 8001de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_I2C_MspInit+0x80>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	; 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40005400 	.word	0x40005400
 8001e04:	40021000 	.word	0x40021000
 8001e08:	48000400 	.word	0x48000400

08001e0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <HAL_SPI_MspInit+0x7c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d128      	bne.n	8001e80 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e38:	6193      	str	r3, [r2, #24]
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	6153      	str	r3, [r2, #20]
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001e5e:	23e0      	movs	r3, #224	; 0xe0
 8001e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e6e:	2305      	movs	r3, #5
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7c:	f005 faa2 	bl	80073c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e80:	bf00      	nop
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40013000 	.word	0x40013000
 8001e8c:	40021000 	.word	0x40021000

08001e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea0:	d114      	bne.n	8001ecc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_TIM_Base_MspInit+0xac>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	4a25      	ldr	r2, [pc, #148]	; (8001f3c <HAL_TIM_Base_MspInit+0xac>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	61d3      	str	r3, [r2, #28]
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <HAL_TIM_Base_MspInit+0xac>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	201c      	movs	r0, #28
 8001ec0:	f005 f9d3 	bl	800726a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ec4:	201c      	movs	r0, #28
 8001ec6:	f005 f9ec 	bl	80072a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001eca:	e032      	b.n	8001f32 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1b      	ldr	r2, [pc, #108]	; (8001f40 <HAL_TIM_Base_MspInit+0xb0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d114      	bne.n	8001f00 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HAL_TIM_Base_MspInit+0xac>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a18      	ldr	r2, [pc, #96]	; (8001f3c <HAL_TIM_Base_MspInit+0xac>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	61d3      	str	r3, [r2, #28]
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <HAL_TIM_Base_MspInit+0xac>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	201d      	movs	r0, #29
 8001ef4:	f005 f9b9 	bl	800726a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ef8:	201d      	movs	r0, #29
 8001efa:	f005 f9d2 	bl	80072a2 <HAL_NVIC_EnableIRQ>
}
 8001efe:	e018      	b.n	8001f32 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <HAL_TIM_Base_MspInit+0xb4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d113      	bne.n	8001f32 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_TIM_Base_MspInit+0xac>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <HAL_TIM_Base_MspInit+0xac>)
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	61d3      	str	r3, [r2, #28]
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_TIM_Base_MspInit+0xac>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2101      	movs	r1, #1
 8001f26:	2036      	movs	r0, #54	; 0x36
 8001f28:	f005 f99f 	bl	800726a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f2c:	2036      	movs	r0, #54	; 0x36
 8001f2e:	f005 f9b8 	bl	80072a2 <HAL_NVIC_EnableIRQ>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40001000 	.word	0x40001000

08001f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f68:	d11d      	bne.n	8001fa6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_TIM_MspPostInit+0x68>)
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	4a10      	ldr	r2, [pc, #64]	; (8001fb0 <HAL_TIM_MspPostInit+0x68>)
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f74:	6153      	str	r3, [r2, #20]
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_TIM_MspPostInit+0x68>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f94:	2301      	movs	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa2:	f005 fa0f 	bl	80073c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fa6:	bf00      	nop
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <HAL_UART_MspInit+0x8c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d130      	bne.n	8002038 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_UART_MspInit+0x90>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a1a      	ldr	r2, [pc, #104]	; (8002044 <HAL_UART_MspInit+0x90>)
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_UART_MspInit+0x90>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_UART_MspInit+0x90>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	4a14      	ldr	r2, [pc, #80]	; (8002044 <HAL_UART_MspInit+0x90>)
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff8:	6153      	str	r3, [r2, #20]
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_UART_MspInit+0x90>)
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002006:	230c      	movs	r3, #12
 8002008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002012:	2303      	movs	r3, #3
 8002014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002016:	2307      	movs	r3, #7
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002024:	f005 f9ce 	bl	80073c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2100      	movs	r1, #0
 800202c:	2026      	movs	r0, #38	; 0x26
 800202e:	f005 f91c 	bl	800726a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002032:	2026      	movs	r0, #38	; 0x26
 8002034:	f005 f935 	bl	80072a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002038:	bf00      	nop
 800203a:	3728      	adds	r7, #40	; 0x28
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40004400 	.word	0x40004400
 8002044:	40021000 	.word	0x40021000

08002048 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <HAL_PCD_MspInit+0x80>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d129      	bne.n	80020be <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_PCD_MspInit+0x84>)
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	4a17      	ldr	r2, [pc, #92]	; (80020cc <HAL_PCD_MspInit+0x84>)
 8002070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002074:	6153      	str	r3, [r2, #20]
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_PCD_MspInit+0x84>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002082:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002094:	230e      	movs	r3, #14
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a2:	f005 f98f 	bl	80073c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_PCD_MspInit+0x84>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <HAL_PCD_MspInit+0x84>)
 80020ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020b0:	61d3      	str	r3, [r2, #28]
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_PCD_MspInit+0x84>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	; 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40005c00 	.word	0x40005c00
 80020cc:	40021000 	.word	0x40021000

080020d0 <createNode>:
    struct TreeNode* child8;
    struct TreeNode* parent;
    struct menuScreen screen;
};

struct TreeNode* createNode(struct menuScreen screen, struct TreeNode* parent) {
 80020d0:	b084      	sub	sp, #16
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	f107 0c10 	add.w	ip, r7, #16
 80020dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
 80020e0:	f44f 709a 	mov.w	r0, #308	; 0x134
 80020e4:	f009 fc24 	bl	800b930 <malloc>
 80020e8:	4603      	mov	r3, r0
 80020ea:	607b      	str	r3, [r7, #4]
    newNode->child1 = NULL;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
    newNode->child2 = NULL;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
    newNode->child3 = NULL;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
    newNode->child4 = NULL;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	60da      	str	r2, [r3, #12]
    newNode->child5 = NULL;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
    newNode->child6 = NULL;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]
    newNode->child7 = NULL;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
    newNode->child8 = NULL;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	61da      	str	r2, [r3, #28]
    newNode->parent = parent;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002122:	621a      	str	r2, [r3, #32]
    newNode->screen = screen;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3324      	adds	r3, #36	; 0x24
 8002128:	f107 0110 	add.w	r1, r7, #16
 800212c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002130:	4618      	mov	r0, r3
 8002132:	f009 fc05 	bl	800b940 <memcpy>
    return newNode;
 8002136:	687b      	ldr	r3, [r7, #4]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002142:	b004      	add	sp, #16
 8002144:	4770      	bx	lr
	...

08002148 <GenerateMenu>:
struct TreeNode* node19;
struct TreeNode* node_1;

struct TreeNode* currentNode;

void GenerateMenu(){
 8002148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214a:	f5ad 5dba 	sub.w	sp, sp, #5952	; 0x1740
 800214e:	b087      	sub	sp, #28
 8002150:	af42      	add	r7, sp, #264	; 0x108
	struct menuScreen mainMenu = {0, 1, 1, {">> ControlPanel   "}, ""};
 8002152:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002156:	f103 0310 	add.w	r3, r3, #16
 800215a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800215e:	4618      	mov	r0, r3
 8002160:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002164:	461a      	mov	r2, r3
 8002166:	2100      	movs	r1, #0
 8002168:	f009 fbf8 	bl	800b95c <memset>
 800216c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002170:	f103 0310 	add.w	r3, r3, #16
 8002174:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002178:	2201      	movs	r2, #1
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002180:	f103 0310 	add.w	r3, r3, #16
 8002184:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002188:	2201      	movs	r2, #1
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002190:	f103 0310 	add.w	r3, r3, #16
 8002194:	f5a3 7688 	sub.w	r6, r3, #272	; 0x110
 8002198:	4bd8      	ldr	r3, [pc, #864]	; (80024fc <GenerateMenu+0x3b4>)
 800219a:	f106 040c 	add.w	r4, r6, #12
 800219e:	461d      	mov	r5, r3
 80021a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a4:	682b      	ldr	r3, [r5, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	8022      	strh	r2, [r4, #0]
 80021aa:	3402      	adds	r4, #2
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	7023      	strb	r3, [r4, #0]
 80021b0:	2300      	movs	r3, #0
 80021b2:	77f3      	strb	r3, [r6, #31]
    struct menuScreen controlPanel = {1, 7, 1, {">> Temperature   ", "> Security       ", "> Lights       ", "> Scenarios    ", "> StartSetting   ","> AddScenario   ","> ShutDown   "}, ""};
 80021b4:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80021b8:	f103 0310 	add.w	r3, r3, #16
 80021bc:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80021c0:	4618      	mov	r0, r3
 80021c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80021c6:	461a      	mov	r2, r3
 80021c8:	2100      	movs	r1, #0
 80021ca:	f009 fbc7 	bl	800b95c <memset>
 80021ce:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80021d2:	f103 0310 	add.w	r3, r3, #16
 80021d6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80021e2:	f103 0310 	add.w	r3, r3, #16
 80021e6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80021ea:	2207      	movs	r2, #7
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80021f2:	f103 0310 	add.w	r3, r3, #16
 80021f6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80021fa:	2201      	movs	r2, #1
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002202:	f103 0310 	add.w	r3, r3, #16
 8002206:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 800220a:	4bbd      	ldr	r3, [pc, #756]	; (8002500 <GenerateMenu+0x3b8>)
 800220c:	f106 040c 	add.w	r4, r6, #12
 8002210:	461d      	mov	r5, r3
 8002212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002216:	682b      	ldr	r3, [r5, #0]
 8002218:	8023      	strh	r3, [r4, #0]
 800221a:	2300      	movs	r3, #0
 800221c:	83f3      	strh	r3, [r6, #30]
 800221e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002222:	f103 0310 	add.w	r3, r3, #16
 8002226:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 800222a:	4bb6      	ldr	r3, [pc, #728]	; (8002504 <GenerateMenu+0x3bc>)
 800222c:	f106 0420 	add.w	r4, r6, #32
 8002230:	461d      	mov	r5, r3
 8002232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002236:	682b      	ldr	r3, [r5, #0]
 8002238:	8023      	strh	r3, [r4, #0]
 800223a:	2300      	movs	r3, #0
 800223c:	8673      	strh	r3, [r6, #50]	; 0x32
 800223e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002242:	f103 0310 	add.w	r3, r3, #16
 8002246:	f5a3 7408 	sub.w	r4, r3, #544	; 0x220
 800224a:	4baf      	ldr	r3, [pc, #700]	; (8002508 <GenerateMenu+0x3c0>)
 800224c:	f104 0534 	add.w	r5, r4, #52	; 0x34
 8002250:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002252:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002256:	2300      	movs	r3, #0
 8002258:	6463      	str	r3, [r4, #68]	; 0x44
 800225a:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800225e:	f103 0310 	add.w	r3, r3, #16
 8002262:	f5a3 7408 	sub.w	r4, r3, #544	; 0x220
 8002266:	4ba9      	ldr	r3, [pc, #676]	; (800250c <GenerateMenu+0x3c4>)
 8002268:	f104 0548 	add.w	r5, r4, #72	; 0x48
 800226c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800226e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002272:	2300      	movs	r3, #0
 8002274:	65a3      	str	r3, [r4, #88]	; 0x58
 8002276:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800227a:	f103 0310 	add.w	r3, r3, #16
 800227e:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 8002282:	4ba3      	ldr	r3, [pc, #652]	; (8002510 <GenerateMenu+0x3c8>)
 8002284:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 8002288:	461d      	mov	r5, r3
 800228a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800228c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800228e:	682b      	ldr	r3, [r5, #0]
 8002290:	8023      	strh	r3, [r4, #0]
 8002292:	2300      	movs	r3, #0
 8002294:	f8a6 306e 	strh.w	r3, [r6, #110]	; 0x6e
 8002298:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800229c:	f103 0310 	add.w	r3, r3, #16
 80022a0:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 80022a4:	4b9b      	ldr	r3, [pc, #620]	; (8002514 <GenerateMenu+0x3cc>)
 80022a6:	f106 0470 	add.w	r4, r6, #112	; 0x70
 80022aa:	461d      	mov	r5, r3
 80022ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b0:	682b      	ldr	r3, [r5, #0]
 80022b2:	7023      	strb	r3, [r4, #0]
 80022b4:	f106 0381 	add.w	r3, r6, #129	; 0x81
 80022b8:	2200      	movs	r2, #0
 80022ba:	801a      	strh	r2, [r3, #0]
 80022bc:	709a      	strb	r2, [r3, #2]
 80022be:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80022c2:	f103 0310 	add.w	r3, r3, #16
 80022c6:	f5a3 7508 	sub.w	r5, r3, #544	; 0x220
 80022ca:	4b93      	ldr	r3, [pc, #588]	; (8002518 <GenerateMenu+0x3d0>)
 80022cc:	f105 0484 	add.w	r4, r5, #132	; 0x84
 80022d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022d2:	c407      	stmia	r4!, {r0, r1, r2}
 80022d4:	8023      	strh	r3, [r4, #0]
 80022d6:	f105 0392 	add.w	r3, r5, #146	; 0x92
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	809a      	strh	r2, [r3, #4]
    struct menuScreen temperature = {2, 2, 1, {">> Threshold    ", "> AlarmSound   "}, ""};
 80022e0:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80022e4:	f103 0310 	add.w	r3, r3, #16
 80022e8:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80022ec:	4618      	mov	r0, r3
 80022ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80022f2:	461a      	mov	r2, r3
 80022f4:	2100      	movs	r1, #0
 80022f6:	f009 fb31 	bl	800b95c <memset>
 80022fa:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80022fe:	f103 0310 	add.w	r3, r3, #16
 8002302:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8002306:	2202      	movs	r2, #2
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800230e:	f103 0310 	add.w	r3, r3, #16
 8002312:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8002316:	2202      	movs	r2, #2
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800231e:	f103 0310 	add.w	r3, r3, #16
 8002322:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8002326:	2201      	movs	r2, #1
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800232e:	f103 0310 	add.w	r3, r3, #16
 8002332:	f5a3 764c 	sub.w	r6, r3, #816	; 0x330
 8002336:	4b79      	ldr	r3, [pc, #484]	; (800251c <GenerateMenu+0x3d4>)
 8002338:	f106 040c 	add.w	r4, r6, #12
 800233c:	461d      	mov	r5, r3
 800233e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002342:	682b      	ldr	r3, [r5, #0]
 8002344:	7023      	strb	r3, [r4, #0]
 8002346:	f106 031d 	add.w	r3, r6, #29
 800234a:	2200      	movs	r2, #0
 800234c:	801a      	strh	r2, [r3, #0]
 800234e:	709a      	strb	r2, [r3, #2]
 8002350:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002354:	f103 0310 	add.w	r3, r3, #16
 8002358:	f5a3 744c 	sub.w	r4, r3, #816	; 0x330
 800235c:	4b70      	ldr	r3, [pc, #448]	; (8002520 <GenerateMenu+0x3d8>)
 800235e:	f104 0520 	add.w	r5, r4, #32
 8002362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002364:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002368:	2300      	movs	r3, #0
 800236a:	6323      	str	r3, [r4, #48]	; 0x30
    struct menuScreen security = {3, 2, 1, {">> Activation   ", "> AlarmSound   "}, ""};
 800236c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002370:	f103 0310 	add.w	r3, r3, #16
 8002374:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002378:	4618      	mov	r0, r3
 800237a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800237e:	461a      	mov	r2, r3
 8002380:	2100      	movs	r1, #0
 8002382:	f009 faeb 	bl	800b95c <memset>
 8002386:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800238a:	f103 0310 	add.w	r3, r3, #16
 800238e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002392:	2203      	movs	r2, #3
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800239a:	f103 0310 	add.w	r3, r3, #16
 800239e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80023a2:	2202      	movs	r2, #2
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80023aa:	f103 0310 	add.w	r3, r3, #16
 80023ae:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80023b2:	2201      	movs	r2, #1
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80023ba:	f103 0310 	add.w	r3, r3, #16
 80023be:	f5a3 6688 	sub.w	r6, r3, #1088	; 0x440
 80023c2:	4b58      	ldr	r3, [pc, #352]	; (8002524 <GenerateMenu+0x3dc>)
 80023c4:	f106 040c 	add.w	r4, r6, #12
 80023c8:	461d      	mov	r5, r3
 80023ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ce:	682b      	ldr	r3, [r5, #0]
 80023d0:	7023      	strb	r3, [r4, #0]
 80023d2:	f106 031d 	add.w	r3, r6, #29
 80023d6:	2200      	movs	r2, #0
 80023d8:	801a      	strh	r2, [r3, #0]
 80023da:	709a      	strb	r2, [r3, #2]
 80023dc:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80023e0:	f103 0310 	add.w	r3, r3, #16
 80023e4:	f5a3 6488 	sub.w	r4, r3, #1088	; 0x440
 80023e8:	4b4d      	ldr	r3, [pc, #308]	; (8002520 <GenerateMenu+0x3d8>)
 80023ea:	f104 0520 	add.w	r5, r4, #32
 80023ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80023f4:	2300      	movs	r3, #0
 80023f6:	6323      	str	r3, [r4, #48]	; 0x30
    struct menuScreen lightsControl = {4, 0, 0, {""}, "X  X  X  X"};
 80023f8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80023fc:	f103 0310 	add.w	r3, r3, #16
 8002400:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8002404:	4618      	mov	r0, r3
 8002406:	f44f 7388 	mov.w	r3, #272	; 0x110
 800240a:	461a      	mov	r2, r3
 800240c:	2100      	movs	r1, #0
 800240e:	f009 faa5 	bl	800b95c <memset>
 8002412:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002416:	f103 0310 	add.w	r3, r3, #16
 800241a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800241e:	2204      	movs	r2, #4
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002426:	f103 0310 	add.w	r3, r3, #16
 800242a:	f5a3 64aa 	sub.w	r4, r3, #1360	; 0x550
 800242e:	4a3e      	ldr	r2, [pc, #248]	; (8002528 <GenerateMenu+0x3e0>)
 8002430:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8002434:	ca07      	ldmia	r2, {r0, r1, r2}
 8002436:	c303      	stmia	r3!, {r0, r1}
 8002438:	801a      	strh	r2, [r3, #0]
 800243a:	3302      	adds	r3, #2
 800243c:	0c12      	lsrs	r2, r2, #16
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	f104 03b7 	add.w	r3, r4, #183	; 0xb7
 8002444:	2259      	movs	r2, #89	; 0x59
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f009 fa87 	bl	800b95c <memset>
    struct menuScreen scenarios = {5, 2, 1, {">> Scenario 1   ", "> Scenario 2   "}, ""};
 800244e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002452:	f103 0310 	add.w	r3, r3, #16
 8002456:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800245a:	4618      	mov	r0, r3
 800245c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002460:	461a      	mov	r2, r3
 8002462:	2100      	movs	r1, #0
 8002464:	f009 fa7a 	bl	800b95c <memset>
 8002468:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800246c:	f103 0310 	add.w	r3, r3, #16
 8002470:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8002474:	2205      	movs	r2, #5
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800247c:	f103 0310 	add.w	r3, r3, #16
 8002480:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8002484:	2202      	movs	r2, #2
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800248c:	f103 0310 	add.w	r3, r3, #16
 8002490:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8002494:	2201      	movs	r2, #1
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800249c:	f103 0310 	add.w	r3, r3, #16
 80024a0:	f5a3 66cc 	sub.w	r6, r3, #1632	; 0x660
 80024a4:	4b21      	ldr	r3, [pc, #132]	; (800252c <GenerateMenu+0x3e4>)
 80024a6:	f106 040c 	add.w	r4, r6, #12
 80024aa:	461d      	mov	r5, r3
 80024ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b0:	682b      	ldr	r3, [r5, #0]
 80024b2:	7023      	strb	r3, [r4, #0]
 80024b4:	f106 031d 	add.w	r3, r6, #29
 80024b8:	2200      	movs	r2, #0
 80024ba:	801a      	strh	r2, [r3, #0]
 80024bc:	709a      	strb	r2, [r3, #2]
 80024be:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80024c2:	f103 0310 	add.w	r3, r3, #16
 80024c6:	f5a3 64cc 	sub.w	r4, r3, #1632	; 0x660
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <GenerateMenu+0x3e8>)
 80024cc:	f104 0520 	add.w	r5, r4, #32
 80024d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80024d6:	2300      	movs	r3, #0
 80024d8:	6323      	str	r3, [r4, #48]	; 0x30
    struct menuScreen nameSet = {6, 1, 0, {"write your phrase"}," " };
 80024da:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80024de:	f103 0310 	add.w	r3, r3, #16
 80024e2:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 80024e6:	4618      	mov	r0, r3
 80024e8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80024ec:	461a      	mov	r2, r3
 80024ee:	2100      	movs	r1, #0
 80024f0:	f009 fa34 	bl	800b95c <memset>
 80024f4:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80024f8:	e01c      	b.n	8002534 <GenerateMenu+0x3ec>
 80024fa:	bf00      	nop
 80024fc:	0800d310 	.word	0x0800d310
 8002500:	0800d324 	.word	0x0800d324
 8002504:	0800d338 	.word	0x0800d338
 8002508:	0800d34c 	.word	0x0800d34c
 800250c:	0800d360 	.word	0x0800d360
 8002510:	0800d374 	.word	0x0800d374
 8002514:	0800d388 	.word	0x0800d388
 8002518:	0800d39c 	.word	0x0800d39c
 800251c:	0800d3b0 	.word	0x0800d3b0
 8002520:	0800d3c4 	.word	0x0800d3c4
 8002524:	0800d3d8 	.word	0x0800d3d8
 8002528:	0800d3ec 	.word	0x0800d3ec
 800252c:	0800d450 	.word	0x0800d450
 8002530:	0800d464 	.word	0x0800d464
 8002534:	f103 0310 	add.w	r3, r3, #16
 8002538:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 800253c:	2206      	movs	r2, #6
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002544:	f103 0310 	add.w	r3, r3, #16
 8002548:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 800254c:	2201      	movs	r2, #1
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002554:	f103 0310 	add.w	r3, r3, #16
 8002558:	f5a3 66ee 	sub.w	r6, r3, #1904	; 0x770
 800255c:	4bde      	ldr	r3, [pc, #888]	; (80028d8 <GenerateMenu+0x790>)
 800255e:	f106 040c 	add.w	r4, r6, #12
 8002562:	461d      	mov	r5, r3
 8002564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002568:	682b      	ldr	r3, [r5, #0]
 800256a:	8023      	strh	r3, [r4, #0]
 800256c:	2300      	movs	r3, #0
 800256e:	83f3      	strh	r3, [r6, #30]
 8002570:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002574:	f103 0310 	add.w	r3, r3, #16
 8002578:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 800257c:	2220      	movs	r2, #32
 800257e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8002582:	33b0      	adds	r3, #176	; 0xb0
 8002584:	2260      	movs	r2, #96	; 0x60
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f009 f9e7 	bl	800b95c <memset>
    struct menuScreen temThresh = {7, 0, 0, {""}, "<  35  >"};
 800258e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002592:	f103 0310 	add.w	r3, r3, #16
 8002596:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 800259a:	4618      	mov	r0, r3
 800259c:	f44f 7388 	mov.w	r3, #272	; 0x110
 80025a0:	461a      	mov	r2, r3
 80025a2:	2100      	movs	r1, #0
 80025a4:	f009 f9da 	bl	800b95c <memset>
 80025a8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80025ac:	f103 0310 	add.w	r3, r3, #16
 80025b0:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 80025b4:	2207      	movs	r2, #7
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80025bc:	f103 0310 	add.w	r3, r3, #16
 80025c0:	f5a3 6408 	sub.w	r4, r3, #2176	; 0x880
 80025c4:	4ac5      	ldr	r2, [pc, #788]	; (80028dc <GenerateMenu+0x794>)
 80025c6:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 80025ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80025cc:	c303      	stmia	r3!, {r0, r1}
 80025ce:	701a      	strb	r2, [r3, #0]
 80025d0:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 80025d4:	225b      	movs	r2, #91	; 0x5b
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f009 f9bf 	bl	800b95c <memset>
    struct menuScreen temAlarm = {8, 0, 0, {""}, "<  on  >"};
 80025de:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80025e2:	f103 0310 	add.w	r3, r3, #16
 80025e6:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 80025ea:	4618      	mov	r0, r3
 80025ec:	f44f 7388 	mov.w	r3, #272	; 0x110
 80025f0:	461a      	mov	r2, r3
 80025f2:	2100      	movs	r1, #0
 80025f4:	f009 f9b2 	bl	800b95c <memset>
 80025f8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80025fc:	f103 0310 	add.w	r3, r3, #16
 8002600:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 8002604:	2208      	movs	r2, #8
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800260c:	f103 0310 	add.w	r3, r3, #16
 8002610:	f5a3 6419 	sub.w	r4, r3, #2448	; 0x990
 8002614:	4ab2      	ldr	r2, [pc, #712]	; (80028e0 <GenerateMenu+0x798>)
 8002616:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 800261a:	ca07      	ldmia	r2, {r0, r1, r2}
 800261c:	c303      	stmia	r3!, {r0, r1}
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8002624:	225b      	movs	r2, #91	; 0x5b
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f009 f997 	bl	800b95c <memset>
    struct menuScreen securityActivation = {9, 0, 0, {""}, "<  on  >"};
 800262e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002632:	f103 0310 	add.w	r3, r3, #16
 8002636:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 800263a:	4618      	mov	r0, r3
 800263c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002640:	461a      	mov	r2, r3
 8002642:	2100      	movs	r1, #0
 8002644:	f009 f98a 	bl	800b95c <memset>
 8002648:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800264c:	f103 0310 	add.w	r3, r3, #16
 8002650:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 8002654:	2209      	movs	r2, #9
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800265c:	f103 0310 	add.w	r3, r3, #16
 8002660:	f5a3 642a 	sub.w	r4, r3, #2720	; 0xaa0
 8002664:	4a9e      	ldr	r2, [pc, #632]	; (80028e0 <GenerateMenu+0x798>)
 8002666:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 800266a:	ca07      	ldmia	r2, {r0, r1, r2}
 800266c:	c303      	stmia	r3!, {r0, r1}
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8002674:	225b      	movs	r2, #91	; 0x5b
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f009 f96f 	bl	800b95c <memset>
    struct menuScreen securityAlarm = {10, 0, 0, {""}, "<  on  >"};
 800267e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002682:	f103 0310 	add.w	r3, r3, #16
 8002686:	f5a3 633b 	sub.w	r3, r3, #2992	; 0xbb0
 800268a:	4618      	mov	r0, r3
 800268c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002690:	461a      	mov	r2, r3
 8002692:	2100      	movs	r1, #0
 8002694:	f009 f962 	bl	800b95c <memset>
 8002698:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800269c:	f103 0310 	add.w	r3, r3, #16
 80026a0:	f5a3 633b 	sub.w	r3, r3, #2992	; 0xbb0
 80026a4:	220a      	movs	r2, #10
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80026ac:	f103 0310 	add.w	r3, r3, #16
 80026b0:	f5a3 643b 	sub.w	r4, r3, #2992	; 0xbb0
 80026b4:	4a8a      	ldr	r2, [pc, #552]	; (80028e0 <GenerateMenu+0x798>)
 80026b6:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 80026ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80026bc:	c303      	stmia	r3!, {r0, r1}
 80026be:	701a      	strb	r2, [r3, #0]
 80026c0:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 80026c4:	225b      	movs	r2, #91	; 0x5b
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f009 f947 	bl	800b95c <memset>
    struct menuScreen scenario1 = {11, 8, 0, {"temTHreshold=22","temAlarm=on","securityAlarm=off","securityAlert=on","light1=on","light2=on","light3=off","light4=off"}, "<  off  >"};
 80026ce:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80026d2:	f103 0310 	add.w	r3, r3, #16
 80026d6:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 80026da:	4a82      	ldr	r2, [pc, #520]	; (80028e4 <GenerateMenu+0x79c>)
 80026dc:	4618      	mov	r0, r3
 80026de:	4611      	mov	r1, r2
 80026e0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80026e4:	461a      	mov	r2, r3
 80026e6:	f009 f92b 	bl	800b940 <memcpy>
    struct menuScreen scenario2 = {12, 8, 0, {"temTHreshold=35","temAlarm=on","securityAlarm=on","securityAlert=on","light1=off","light2=off","light3=off","light4=off"}, "<  off  >"};
 80026ea:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80026ee:	f103 0310 	add.w	r3, r3, #16
 80026f2:	f5a3 635d 	sub.w	r3, r3, #3536	; 0xdd0
 80026f6:	4a7c      	ldr	r2, [pc, #496]	; (80028e8 <GenerateMenu+0x7a0>)
 80026f8:	4618      	mov	r0, r3
 80026fa:	4611      	mov	r1, r2
 80026fc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002700:	461a      	mov	r2, r3
 8002702:	f009 f91d 	bl	800b940 <memcpy>

    struct menuScreen AddScenario= {13, 6, 1, {">> temTHreshold    ","> temAlarm    ","> securityAlarm   ","> securityAlert   ","> lights        ","> create         "}, ""};
 8002706:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800270a:	f103 0310 	add.w	r3, r3, #16
 800270e:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8002712:	4618      	mov	r0, r3
 8002714:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002718:	461a      	mov	r2, r3
 800271a:	2100      	movs	r1, #0
 800271c:	f009 f91e 	bl	800b95c <memset>
 8002720:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002724:	f103 0310 	add.w	r3, r3, #16
 8002728:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 800272c:	220d      	movs	r2, #13
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002734:	f103 0310 	add.w	r3, r3, #16
 8002738:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 800273c:	2206      	movs	r2, #6
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002744:	f103 0310 	add.w	r3, r3, #16
 8002748:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 800274c:	2201      	movs	r2, #1
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002754:	f103 0310 	add.w	r3, r3, #16
 8002758:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 800275c:	4a63      	ldr	r2, [pc, #396]	; (80028ec <GenerateMenu+0x7a4>)
 800275e:	f103 040c 	add.w	r4, r3, #12
 8002762:	4615      	mov	r5, r2
 8002764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002768:	682b      	ldr	r3, [r5, #0]
 800276a:	6023      	str	r3, [r4, #0]
 800276c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002770:	f103 0310 	add.w	r3, r3, #16
 8002774:	f5a3 656e 	sub.w	r5, r3, #3808	; 0xee0
 8002778:	4b5d      	ldr	r3, [pc, #372]	; (80028f0 <GenerateMenu+0x7a8>)
 800277a:	f105 0420 	add.w	r4, r5, #32
 800277e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002780:	c407      	stmia	r4!, {r0, r1, r2}
 8002782:	8023      	strh	r3, [r4, #0]
 8002784:	3402      	adds	r4, #2
 8002786:	0c1b      	lsrs	r3, r3, #16
 8002788:	7023      	strb	r3, [r4, #0]
 800278a:	f105 032f 	add.w	r3, r5, #47	; 0x2f
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	711a      	strb	r2, [r3, #4]
 8002794:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002798:	f103 0310 	add.w	r3, r3, #16
 800279c:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 80027a0:	4b54      	ldr	r3, [pc, #336]	; (80028f4 <GenerateMenu+0x7ac>)
 80027a2:	f106 0434 	add.w	r4, r6, #52	; 0x34
 80027a6:	461d      	mov	r5, r3
 80027a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ac:	682b      	ldr	r3, [r5, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	8022      	strh	r2, [r4, #0]
 80027b2:	3402      	adds	r4, #2
 80027b4:	0c1b      	lsrs	r3, r3, #16
 80027b6:	7023      	strb	r3, [r4, #0]
 80027b8:	2300      	movs	r3, #0
 80027ba:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
 80027be:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80027c2:	f103 0310 	add.w	r3, r3, #16
 80027c6:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 80027ca:	4b4b      	ldr	r3, [pc, #300]	; (80028f8 <GenerateMenu+0x7b0>)
 80027cc:	f106 0448 	add.w	r4, r6, #72	; 0x48
 80027d0:	461d      	mov	r5, r3
 80027d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027d6:	682b      	ldr	r3, [r5, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	8022      	strh	r2, [r4, #0]
 80027dc:	3402      	adds	r4, #2
 80027de:	0c1b      	lsrs	r3, r3, #16
 80027e0:	7023      	strb	r3, [r4, #0]
 80027e2:	2300      	movs	r3, #0
 80027e4:	f886 305b 	strb.w	r3, [r6, #91]	; 0x5b
 80027e8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80027ec:	f103 0310 	add.w	r3, r3, #16
 80027f0:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 80027f4:	4b41      	ldr	r3, [pc, #260]	; (80028fc <GenerateMenu+0x7b4>)
 80027f6:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 80027fa:	461d      	mov	r5, r3
 80027fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002800:	682b      	ldr	r3, [r5, #0]
 8002802:	7023      	strb	r3, [r4, #0]
 8002804:	f106 036d 	add.w	r3, r6, #109	; 0x6d
 8002808:	2200      	movs	r2, #0
 800280a:	801a      	strh	r2, [r3, #0]
 800280c:	709a      	strb	r2, [r3, #2]
 800280e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002812:	f103 0310 	add.w	r3, r3, #16
 8002816:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 800281a:	4b39      	ldr	r3, [pc, #228]	; (8002900 <GenerateMenu+0x7b8>)
 800281c:	f106 0470 	add.w	r4, r6, #112	; 0x70
 8002820:	461d      	mov	r5, r3
 8002822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002826:	682b      	ldr	r3, [r5, #0]
 8002828:	8023      	strh	r3, [r4, #0]
 800282a:	2300      	movs	r3, #0
 800282c:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
    struct menuScreen scenTemThreshold = {14,0,0, {""}, "<  10  >"};
 8002830:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002834:	f103 0310 	add.w	r3, r3, #16
 8002838:	f5a3 637f 	sub.w	r3, r3, #4080	; 0xff0
 800283c:	4618      	mov	r0, r3
 800283e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002842:	461a      	mov	r2, r3
 8002844:	2100      	movs	r1, #0
 8002846:	f009 f889 	bl	800b95c <memset>
 800284a:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800284e:	f103 0310 	add.w	r3, r3, #16
 8002852:	f5a3 637f 	sub.w	r3, r3, #4080	; 0xff0
 8002856:	220e      	movs	r2, #14
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800285e:	f103 0310 	add.w	r3, r3, #16
 8002862:	f5a3 647f 	sub.w	r4, r3, #4080	; 0xff0
 8002866:	4a27      	ldr	r2, [pc, #156]	; (8002904 <GenerateMenu+0x7bc>)
 8002868:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 800286c:	ca07      	ldmia	r2, {r0, r1, r2}
 800286e:	c303      	stmia	r3!, {r0, r1}
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8002876:	225b      	movs	r2, #91	; 0x5b
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f009 f86e 	bl	800b95c <memset>
    struct menuScreen scenTemAlarm = {15, 0, 0, {""}, "<  on  >"};
 8002880:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002884:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002888:	4618      	mov	r0, r3
 800288a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800288e:	461a      	mov	r2, r3
 8002890:	2100      	movs	r1, #0
 8002892:	f009 f863 	bl	800b95c <memset>
 8002896:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800289a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800289e:	220f      	movs	r2, #15
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80028a6:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 80028aa:	4a0d      	ldr	r2, [pc, #52]	; (80028e0 <GenerateMenu+0x798>)
 80028ac:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 80028b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028b2:	c303      	stmia	r3!, {r0, r1}
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 80028ba:	225b      	movs	r2, #91	; 0x5b
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f009 f84c 	bl	800b95c <memset>
	struct menuScreen scenSecAlarm = {16, 0, 0, {""}, "<  on  >"};
 80028c4:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80028c8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80028cc:	4618      	mov	r0, r3
 80028ce:	f44f 7388 	mov.w	r3, #272	; 0x110
 80028d2:	461a      	mov	r2, r3
 80028d4:	2100      	movs	r1, #0
 80028d6:	e017      	b.n	8002908 <GenerateMenu+0x7c0>
 80028d8:	0800d478 	.word	0x0800d478
 80028dc:	0800d48c 	.word	0x0800d48c
 80028e0:	0800d4f0 	.word	0x0800d4f0
 80028e4:	0800d554 	.word	0x0800d554
 80028e8:	0800d664 	.word	0x0800d664
 80028ec:	0800d774 	.word	0x0800d774
 80028f0:	0800d788 	.word	0x0800d788
 80028f4:	0800d79c 	.word	0x0800d79c
 80028f8:	0800d7b0 	.word	0x0800d7b0
 80028fc:	0800d7c4 	.word	0x0800d7c4
 8002900:	0800d7d8 	.word	0x0800d7d8
 8002904:	0800d7ec 	.word	0x0800d7ec
 8002908:	f009 f828 	bl	800b95c <memset>
 800290c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002910:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002914:	2210      	movs	r2, #16
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800291c:	f5a3 7404 	sub.w	r4, r3, #528	; 0x210
 8002920:	4ad6      	ldr	r2, [pc, #856]	; (8002c7c <GenerateMenu+0xb34>)
 8002922:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8002926:	ca07      	ldmia	r2, {r0, r1, r2}
 8002928:	c303      	stmia	r3!, {r0, r1}
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8002930:	225b      	movs	r2, #91	; 0x5b
 8002932:	2100      	movs	r1, #0
 8002934:	4618      	mov	r0, r3
 8002936:	f009 f811 	bl	800b95c <memset>
	struct menuScreen scenSecAlert = {17, 0, 0, {""}, "<  on  >"};
 800293a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800293e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8002942:	4618      	mov	r0, r3
 8002944:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002948:	461a      	mov	r2, r3
 800294a:	2100      	movs	r1, #0
 800294c:	f009 f806 	bl	800b95c <memset>
 8002950:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002954:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8002958:	2211      	movs	r2, #17
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002960:	f5a3 7448 	sub.w	r4, r3, #800	; 0x320
 8002964:	4ac5      	ldr	r2, [pc, #788]	; (8002c7c <GenerateMenu+0xb34>)
 8002966:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 800296a:	ca07      	ldmia	r2, {r0, r1, r2}
 800296c:	c303      	stmia	r3!, {r0, r1}
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8002974:	225b      	movs	r2, #91	; 0x5b
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f008 ffef 	bl	800b95c <memset>
	struct menuScreen scenLight = {18, 0, 0, {""}, "X  X  X  X"};
 800297e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002982:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8002986:	4618      	mov	r0, r3
 8002988:	f44f 7388 	mov.w	r3, #272	; 0x110
 800298c:	461a      	mov	r2, r3
 800298e:	2100      	movs	r1, #0
 8002990:	f008 ffe4 	bl	800b95c <memset>
 8002994:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002998:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800299c:	2212      	movs	r2, #18
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80029a4:	f5a3 6486 	sub.w	r4, r3, #1072	; 0x430
 80029a8:	4ab5      	ldr	r2, [pc, #724]	; (8002c80 <GenerateMenu+0xb38>)
 80029aa:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 80029ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80029b0:	c303      	stmia	r3!, {r0, r1}
 80029b2:	801a      	strh	r2, [r3, #0]
 80029b4:	3302      	adds	r3, #2
 80029b6:	0c12      	lsrs	r2, r2, #16
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	f104 03b7 	add.w	r3, r4, #183	; 0xb7
 80029be:	2259      	movs	r2, #89	; 0x59
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f008 ffca 	bl	800b95c <memset>
	struct menuScreen create = {19, 0, 0, {""}, "new scenario created"};
 80029c8:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80029cc:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 80029d0:	4618      	mov	r0, r3
 80029d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80029d6:	461a      	mov	r2, r3
 80029d8:	2100      	movs	r1, #0
 80029da:	f008 ffbf 	bl	800b95c <memset>
 80029de:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80029e2:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 80029e6:	2213      	movs	r2, #19
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80029ee:	f5a3 66a8 	sub.w	r6, r3, #1344	; 0x540
 80029f2:	4ba4      	ldr	r3, [pc, #656]	; (8002c84 <GenerateMenu+0xb3c>)
 80029f4:	f106 04ac 	add.w	r4, r6, #172	; 0xac
 80029f8:	461d      	mov	r5, r3
 80029fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a02:	6020      	str	r0, [r4, #0]
 8002a04:	3404      	adds	r4, #4
 8002a06:	7021      	strb	r1, [r4, #0]
 8002a08:	f106 03c1 	add.w	r3, r6, #193	; 0xc1
 8002a0c:	224f      	movs	r2, #79	; 0x4f
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f008 ffa3 	bl	800b95c <memset>

	struct menuScreen shutDown = {-1, 0, 0, {""}, "Turning Off... "};
 8002a16:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002a1a:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002a24:	461a      	mov	r2, r3
 8002a26:	2100      	movs	r1, #0
 8002a28:	f008 ff98 	bl	800b95c <memset>
 8002a2c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002a30:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002a3e:	f5a3 64ca 	sub.w	r4, r3, #1616	; 0x650
 8002a42:	4b91      	ldr	r3, [pc, #580]	; (8002c88 <GenerateMenu+0xb40>)
 8002a44:	f104 05ac 	add.w	r5, r4, #172	; 0xac
 8002a48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a4a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a4e:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8002a52:	2254      	movs	r2, #84	; 0x54
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f008 ff80 	bl	800b95c <memset>


    lastId = 19;
 8002a5c:	4b8b      	ldr	r3, [pc, #556]	; (8002c8c <GenerateMenu+0xb44>)
 8002a5e:	2213      	movs	r2, #19
 8002a60:	601a      	str	r2, [r3, #0]
    lastPagesId = 19;
 8002a62:	4b8b      	ldr	r3, [pc, #556]	; (8002c90 <GenerateMenu+0xb48>)
 8002a64:	2213      	movs	r2, #19
 8002a66:	601a      	str	r2, [r3, #0]

    root = createNode(mainMenu, NULL);
 8002a68:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002a6c:	f103 0310 	add.w	r3, r3, #16
 8002a70:	f5a3 7488 	sub.w	r4, r3, #272	; 0x110
 8002a74:	2300      	movs	r3, #0
 8002a76:	9340      	str	r3, [sp, #256]	; 0x100
 8002a78:	4668      	mov	r0, sp
 8002a7a:	f104 0310 	add.w	r3, r4, #16
 8002a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a82:	4619      	mov	r1, r3
 8002a84:	f008 ff5c 	bl	800b940 <memcpy>
 8002a88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a8c:	f7ff fb20 	bl	80020d0 <createNode>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4a80      	ldr	r2, [pc, #512]	; (8002c94 <GenerateMenu+0xb4c>)
 8002a94:	6013      	str	r3, [r2, #0]
    node1 = createNode(controlPanel, root);
 8002a96:	4b7f      	ldr	r3, [pc, #508]	; (8002c94 <GenerateMenu+0xb4c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002a9e:	f102 0210 	add.w	r2, r2, #16
 8002aa2:	f5a2 7408 	sub.w	r4, r2, #544	; 0x220
 8002aa6:	9340      	str	r3, [sp, #256]	; 0x100
 8002aa8:	4668      	mov	r0, sp
 8002aaa:	f104 0310 	add.w	r3, r4, #16
 8002aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f008 ff44 	bl	800b940 <memcpy>
 8002ab8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002abc:	f7ff fb08 	bl	80020d0 <createNode>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4a75      	ldr	r2, [pc, #468]	; (8002c98 <GenerateMenu+0xb50>)
 8002ac4:	6013      	str	r3, [r2, #0]
    node2 = createNode(temperature, node1);
 8002ac6:	4b74      	ldr	r3, [pc, #464]	; (8002c98 <GenerateMenu+0xb50>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002ace:	f102 0210 	add.w	r2, r2, #16
 8002ad2:	f5a2 744c 	sub.w	r4, r2, #816	; 0x330
 8002ad6:	9340      	str	r3, [sp, #256]	; 0x100
 8002ad8:	4668      	mov	r0, sp
 8002ada:	f104 0310 	add.w	r3, r4, #16
 8002ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f008 ff2c 	bl	800b940 <memcpy>
 8002ae8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002aec:	f7ff faf0 	bl	80020d0 <createNode>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4a6a      	ldr	r2, [pc, #424]	; (8002c9c <GenerateMenu+0xb54>)
 8002af4:	6013      	str	r3, [r2, #0]
    node3 = createNode(security, node1);
 8002af6:	4b68      	ldr	r3, [pc, #416]	; (8002c98 <GenerateMenu+0xb50>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002afe:	f102 0210 	add.w	r2, r2, #16
 8002b02:	f5a2 6488 	sub.w	r4, r2, #1088	; 0x440
 8002b06:	9340      	str	r3, [sp, #256]	; 0x100
 8002b08:	4668      	mov	r0, sp
 8002b0a:	f104 0310 	add.w	r3, r4, #16
 8002b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b12:	4619      	mov	r1, r3
 8002b14:	f008 ff14 	bl	800b940 <memcpy>
 8002b18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b1c:	f7ff fad8 	bl	80020d0 <createNode>
 8002b20:	4603      	mov	r3, r0
 8002b22:	4a5f      	ldr	r2, [pc, #380]	; (8002ca0 <GenerateMenu+0xb58>)
 8002b24:	6013      	str	r3, [r2, #0]
    node4 = createNode(lightsControl, node1);
 8002b26:	4b5c      	ldr	r3, [pc, #368]	; (8002c98 <GenerateMenu+0xb50>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002b2e:	f102 0210 	add.w	r2, r2, #16
 8002b32:	f5a2 64aa 	sub.w	r4, r2, #1360	; 0x550
 8002b36:	9340      	str	r3, [sp, #256]	; 0x100
 8002b38:	4668      	mov	r0, sp
 8002b3a:	f104 0310 	add.w	r3, r4, #16
 8002b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b42:	4619      	mov	r1, r3
 8002b44:	f008 fefc 	bl	800b940 <memcpy>
 8002b48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b4c:	f7ff fac0 	bl	80020d0 <createNode>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4a54      	ldr	r2, [pc, #336]	; (8002ca4 <GenerateMenu+0xb5c>)
 8002b54:	6013      	str	r3, [r2, #0]
    node5 = createNode(scenarios, node1);
 8002b56:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <GenerateMenu+0xb50>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002b5e:	f102 0210 	add.w	r2, r2, #16
 8002b62:	f5a2 64cc 	sub.w	r4, r2, #1632	; 0x660
 8002b66:	9340      	str	r3, [sp, #256]	; 0x100
 8002b68:	4668      	mov	r0, sp
 8002b6a:	f104 0310 	add.w	r3, r4, #16
 8002b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b72:	4619      	mov	r1, r3
 8002b74:	f008 fee4 	bl	800b940 <memcpy>
 8002b78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b7c:	f7ff faa8 	bl	80020d0 <createNode>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4a49      	ldr	r2, [pc, #292]	; (8002ca8 <GenerateMenu+0xb60>)
 8002b84:	6013      	str	r3, [r2, #0]
    node6 = createNode(nameSet, node1);
 8002b86:	4b44      	ldr	r3, [pc, #272]	; (8002c98 <GenerateMenu+0xb50>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002b8e:	f102 0210 	add.w	r2, r2, #16
 8002b92:	f5a2 64ee 	sub.w	r4, r2, #1904	; 0x770
 8002b96:	9340      	str	r3, [sp, #256]	; 0x100
 8002b98:	4668      	mov	r0, sp
 8002b9a:	f104 0310 	add.w	r3, r4, #16
 8002b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f008 fecc 	bl	800b940 <memcpy>
 8002ba8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002bac:	f7ff fa90 	bl	80020d0 <createNode>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4a3e      	ldr	r2, [pc, #248]	; (8002cac <GenerateMenu+0xb64>)
 8002bb4:	6013      	str	r3, [r2, #0]
    node7 = createNode(temThresh, node2);
 8002bb6:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <GenerateMenu+0xb54>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002bbe:	f102 0210 	add.w	r2, r2, #16
 8002bc2:	f5a2 6408 	sub.w	r4, r2, #2176	; 0x880
 8002bc6:	9340      	str	r3, [sp, #256]	; 0x100
 8002bc8:	4668      	mov	r0, sp
 8002bca:	f104 0310 	add.w	r3, r4, #16
 8002bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f008 feb4 	bl	800b940 <memcpy>
 8002bd8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002bdc:	f7ff fa78 	bl	80020d0 <createNode>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4a33      	ldr	r2, [pc, #204]	; (8002cb0 <GenerateMenu+0xb68>)
 8002be4:	6013      	str	r3, [r2, #0]
    node8 = createNode(temAlarm, node2);
 8002be6:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <GenerateMenu+0xb54>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002bee:	f102 0210 	add.w	r2, r2, #16
 8002bf2:	f5a2 6419 	sub.w	r4, r2, #2448	; 0x990
 8002bf6:	9340      	str	r3, [sp, #256]	; 0x100
 8002bf8:	4668      	mov	r0, sp
 8002bfa:	f104 0310 	add.w	r3, r4, #16
 8002bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c02:	4619      	mov	r1, r3
 8002c04:	f008 fe9c 	bl	800b940 <memcpy>
 8002c08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c0c:	f7ff fa60 	bl	80020d0 <createNode>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4a28      	ldr	r2, [pc, #160]	; (8002cb4 <GenerateMenu+0xb6c>)
 8002c14:	6013      	str	r3, [r2, #0]
    node9 = createNode(securityActivation, node3);
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <GenerateMenu+0xb58>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002c1e:	f102 0210 	add.w	r2, r2, #16
 8002c22:	f5a2 642a 	sub.w	r4, r2, #2720	; 0xaa0
 8002c26:	9340      	str	r3, [sp, #256]	; 0x100
 8002c28:	4668      	mov	r0, sp
 8002c2a:	f104 0310 	add.w	r3, r4, #16
 8002c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c32:	4619      	mov	r1, r3
 8002c34:	f008 fe84 	bl	800b940 <memcpy>
 8002c38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c3c:	f7ff fa48 	bl	80020d0 <createNode>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4a1d      	ldr	r2, [pc, #116]	; (8002cb8 <GenerateMenu+0xb70>)
 8002c44:	6013      	str	r3, [r2, #0]
    node10 = createNode(securityAlarm, node3);
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <GenerateMenu+0xb58>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002c4e:	f102 0210 	add.w	r2, r2, #16
 8002c52:	f5a2 643b 	sub.w	r4, r2, #2992	; 0xbb0
 8002c56:	9340      	str	r3, [sp, #256]	; 0x100
 8002c58:	4668      	mov	r0, sp
 8002c5a:	f104 0310 	add.w	r3, r4, #16
 8002c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c62:	4619      	mov	r1, r3
 8002c64:	f008 fe6c 	bl	800b940 <memcpy>
 8002c68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c6c:	f7ff fa30 	bl	80020d0 <createNode>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <GenerateMenu+0xb74>)
 8002c74:	6013      	str	r3, [r2, #0]
    node11 = createNode(scenario1, node5);
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <GenerateMenu+0xb60>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	e021      	b.n	8002cc0 <GenerateMenu+0xb78>
 8002c7c:	0800d4f0 	.word	0x0800d4f0
 8002c80:	0800d3ec 	.word	0x0800d3ec
 8002c84:	0800d850 	.word	0x0800d850
 8002c88:	0800d8b4 	.word	0x0800d8b4
 8002c8c:	20000878 	.word	0x20000878
 8002c90:	2000087c 	.word	0x2000087c
 8002c94:	20000890 	.word	0x20000890
 8002c98:	20000894 	.word	0x20000894
 8002c9c:	20000898 	.word	0x20000898
 8002ca0:	2000089c 	.word	0x2000089c
 8002ca4:	200008a0 	.word	0x200008a0
 8002ca8:	200008a4 	.word	0x200008a4
 8002cac:	200008a8 	.word	0x200008a8
 8002cb0:	200008ac 	.word	0x200008ac
 8002cb4:	200008b0 	.word	0x200008b0
 8002cb8:	200008b4 	.word	0x200008b4
 8002cbc:	200008b8 	.word	0x200008b8
 8002cc0:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002cc4:	f102 0210 	add.w	r2, r2, #16
 8002cc8:	f5a2 644c 	sub.w	r4, r2, #3264	; 0xcc0
 8002ccc:	9340      	str	r3, [sp, #256]	; 0x100
 8002cce:	4668      	mov	r0, sp
 8002cd0:	f104 0310 	add.w	r3, r4, #16
 8002cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f008 fe31 	bl	800b940 <memcpy>
 8002cde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ce2:	f7ff f9f5 	bl	80020d0 <createNode>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a9d      	ldr	r2, [pc, #628]	; (8002f60 <GenerateMenu+0xe18>)
 8002cea:	6013      	str	r3, [r2, #0]
    node12 = createNode(scenario2, node5);
 8002cec:	4b9d      	ldr	r3, [pc, #628]	; (8002f64 <GenerateMenu+0xe1c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002cf4:	f102 0210 	add.w	r2, r2, #16
 8002cf8:	f5a2 645d 	sub.w	r4, r2, #3536	; 0xdd0
 8002cfc:	9340      	str	r3, [sp, #256]	; 0x100
 8002cfe:	4668      	mov	r0, sp
 8002d00:	f104 0310 	add.w	r3, r4, #16
 8002d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f008 fe19 	bl	800b940 <memcpy>
 8002d0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d12:	f7ff f9dd 	bl	80020d0 <createNode>
 8002d16:	4603      	mov	r3, r0
 8002d18:	4a93      	ldr	r2, [pc, #588]	; (8002f68 <GenerateMenu+0xe20>)
 8002d1a:	6013      	str	r3, [r2, #0]

    node13 = createNode(AddScenario, node1);
 8002d1c:	4b93      	ldr	r3, [pc, #588]	; (8002f6c <GenerateMenu+0xe24>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002d24:	f102 0210 	add.w	r2, r2, #16
 8002d28:	f5a2 646e 	sub.w	r4, r2, #3808	; 0xee0
 8002d2c:	9340      	str	r3, [sp, #256]	; 0x100
 8002d2e:	4668      	mov	r0, sp
 8002d30:	f104 0310 	add.w	r3, r4, #16
 8002d34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f008 fe01 	bl	800b940 <memcpy>
 8002d3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d42:	f7ff f9c5 	bl	80020d0 <createNode>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4a89      	ldr	r2, [pc, #548]	; (8002f70 <GenerateMenu+0xe28>)
 8002d4a:	6013      	str	r3, [r2, #0]
    node14 = createNode(scenTemThreshold, node13);
 8002d4c:	4b88      	ldr	r3, [pc, #544]	; (8002f70 <GenerateMenu+0xe28>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002d54:	f102 0210 	add.w	r2, r2, #16
 8002d58:	f5a2 647f 	sub.w	r4, r2, #4080	; 0xff0
 8002d5c:	9340      	str	r3, [sp, #256]	; 0x100
 8002d5e:	4668      	mov	r0, sp
 8002d60:	f104 0310 	add.w	r3, r4, #16
 8002d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f008 fde9 	bl	800b940 <memcpy>
 8002d6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d72:	f7ff f9ad 	bl	80020d0 <createNode>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a7e      	ldr	r2, [pc, #504]	; (8002f74 <GenerateMenu+0xe2c>)
 8002d7a:	6013      	str	r3, [r2, #0]
    node15 = createNode(scenTemAlarm, node13);
 8002d7c:	4b7c      	ldr	r3, [pc, #496]	; (8002f70 <GenerateMenu+0xe28>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002d84:	f5a2 7480 	sub.w	r4, r2, #256	; 0x100
 8002d88:	9340      	str	r3, [sp, #256]	; 0x100
 8002d8a:	4668      	mov	r0, sp
 8002d8c:	f104 0310 	add.w	r3, r4, #16
 8002d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d94:	4619      	mov	r1, r3
 8002d96:	f008 fdd3 	bl	800b940 <memcpy>
 8002d9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d9e:	f7ff f997 	bl	80020d0 <createNode>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4a74      	ldr	r2, [pc, #464]	; (8002f78 <GenerateMenu+0xe30>)
 8002da6:	6013      	str	r3, [r2, #0]
    node16 = createNode(scenSecAlarm, node13);
 8002da8:	4b71      	ldr	r3, [pc, #452]	; (8002f70 <GenerateMenu+0xe28>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002db0:	f5a2 7404 	sub.w	r4, r2, #528	; 0x210
 8002db4:	9340      	str	r3, [sp, #256]	; 0x100
 8002db6:	4668      	mov	r0, sp
 8002db8:	f104 0310 	add.w	r3, r4, #16
 8002dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f008 fdbd 	bl	800b940 <memcpy>
 8002dc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002dca:	f7ff f981 	bl	80020d0 <createNode>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4a6a      	ldr	r2, [pc, #424]	; (8002f7c <GenerateMenu+0xe34>)
 8002dd2:	6013      	str	r3, [r2, #0]
    node17 = createNode(scenSecAlert, node13);
 8002dd4:	4b66      	ldr	r3, [pc, #408]	; (8002f70 <GenerateMenu+0xe28>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002ddc:	f5a2 7448 	sub.w	r4, r2, #800	; 0x320
 8002de0:	9340      	str	r3, [sp, #256]	; 0x100
 8002de2:	4668      	mov	r0, sp
 8002de4:	f104 0310 	add.w	r3, r4, #16
 8002de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dec:	4619      	mov	r1, r3
 8002dee:	f008 fda7 	bl	800b940 <memcpy>
 8002df2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002df6:	f7ff f96b 	bl	80020d0 <createNode>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4a60      	ldr	r2, [pc, #384]	; (8002f80 <GenerateMenu+0xe38>)
 8002dfe:	6013      	str	r3, [r2, #0]
    node18 = createNode(scenLight, node13);
 8002e00:	4b5b      	ldr	r3, [pc, #364]	; (8002f70 <GenerateMenu+0xe28>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002e08:	f5a2 6486 	sub.w	r4, r2, #1072	; 0x430
 8002e0c:	9340      	str	r3, [sp, #256]	; 0x100
 8002e0e:	4668      	mov	r0, sp
 8002e10:	f104 0310 	add.w	r3, r4, #16
 8002e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f008 fd91 	bl	800b940 <memcpy>
 8002e1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e22:	f7ff f955 	bl	80020d0 <createNode>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4a56      	ldr	r2, [pc, #344]	; (8002f84 <GenerateMenu+0xe3c>)
 8002e2a:	6013      	str	r3, [r2, #0]
    node19 = createNode(create, node13);
 8002e2c:	4b50      	ldr	r3, [pc, #320]	; (8002f70 <GenerateMenu+0xe28>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002e34:	f5a2 64a8 	sub.w	r4, r2, #1344	; 0x540
 8002e38:	9340      	str	r3, [sp, #256]	; 0x100
 8002e3a:	4668      	mov	r0, sp
 8002e3c:	f104 0310 	add.w	r3, r4, #16
 8002e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e44:	4619      	mov	r1, r3
 8002e46:	f008 fd7b 	bl	800b940 <memcpy>
 8002e4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e4e:	f7ff f93f 	bl	80020d0 <createNode>
 8002e52:	4603      	mov	r3, r0
 8002e54:	4a4c      	ldr	r2, [pc, #304]	; (8002f88 <GenerateMenu+0xe40>)
 8002e56:	6013      	str	r3, [r2, #0]

    node_1 = createNode(shutDown, node1);
 8002e58:	4b44      	ldr	r3, [pc, #272]	; (8002f6c <GenerateMenu+0xe24>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002e60:	f5a2 64ca 	sub.w	r4, r2, #1616	; 0x650
 8002e64:	9340      	str	r3, [sp, #256]	; 0x100
 8002e66:	4668      	mov	r0, sp
 8002e68:	f104 0310 	add.w	r3, r4, #16
 8002e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e70:	4619      	mov	r1, r3
 8002e72:	f008 fd65 	bl	800b940 <memcpy>
 8002e76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e7a:	f7ff f929 	bl	80020d0 <createNode>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4a42      	ldr	r2, [pc, #264]	; (8002f8c <GenerateMenu+0xe44>)
 8002e82:	6013      	str	r3, [r2, #0]


    root->child1 = node1;
 8002e84:	4b42      	ldr	r3, [pc, #264]	; (8002f90 <GenerateMenu+0xe48>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a38      	ldr	r2, [pc, #224]	; (8002f6c <GenerateMenu+0xe24>)
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	601a      	str	r2, [r3, #0]
    node1->child1 = node2;
 8002e8e:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <GenerateMenu+0xe24>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a40      	ldr	r2, [pc, #256]	; (8002f94 <GenerateMenu+0xe4c>)
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	601a      	str	r2, [r3, #0]
    node1->child2 = node3;
 8002e98:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <GenerateMenu+0xe24>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a3e      	ldr	r2, [pc, #248]	; (8002f98 <GenerateMenu+0xe50>)
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
    node1->child3 = node4;
 8002ea2:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <GenerateMenu+0xe24>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a3d      	ldr	r2, [pc, #244]	; (8002f9c <GenerateMenu+0xe54>)
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	609a      	str	r2, [r3, #8]
    node1->child4 = node5;
 8002eac:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <GenerateMenu+0xe24>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a2c      	ldr	r2, [pc, #176]	; (8002f64 <GenerateMenu+0xe1c>)
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	60da      	str	r2, [r3, #12]
    node1->child5 = node6;
 8002eb6:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <GenerateMenu+0xe24>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a39      	ldr	r2, [pc, #228]	; (8002fa0 <GenerateMenu+0xe58>)
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	611a      	str	r2, [r3, #16]
    node1->child6 = node13;
 8002ec0:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <GenerateMenu+0xe24>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <GenerateMenu+0xe28>)
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	615a      	str	r2, [r3, #20]
    node1->child7 = node_1;
 8002eca:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <GenerateMenu+0xe24>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a2f      	ldr	r2, [pc, #188]	; (8002f8c <GenerateMenu+0xe44>)
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	619a      	str	r2, [r3, #24]


    node2->child1 = node7;
 8002ed4:	4b2f      	ldr	r3, [pc, #188]	; (8002f94 <GenerateMenu+0xe4c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a32      	ldr	r2, [pc, #200]	; (8002fa4 <GenerateMenu+0xe5c>)
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	601a      	str	r2, [r3, #0]
    node2->child2 = node8;
 8002ede:	4b2d      	ldr	r3, [pc, #180]	; (8002f94 <GenerateMenu+0xe4c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a31      	ldr	r2, [pc, #196]	; (8002fa8 <GenerateMenu+0xe60>)
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	605a      	str	r2, [r3, #4]

    node3->child1 = node9;
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <GenerateMenu+0xe50>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2f      	ldr	r2, [pc, #188]	; (8002fac <GenerateMenu+0xe64>)
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	601a      	str	r2, [r3, #0]
    node3->child2 = node10;
 8002ef2:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <GenerateMenu+0xe50>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2e      	ldr	r2, [pc, #184]	; (8002fb0 <GenerateMenu+0xe68>)
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	605a      	str	r2, [r3, #4]

    node5->child1 = node11;
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <GenerateMenu+0xe1c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <GenerateMenu+0xe18>)
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	601a      	str	r2, [r3, #0]
    node5->child2 = node12;
 8002f06:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <GenerateMenu+0xe1c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <GenerateMenu+0xe20>)
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	605a      	str	r2, [r3, #4]

    node13->child1 = node14;
 8002f10:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <GenerateMenu+0xe28>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <GenerateMenu+0xe2c>)
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	601a      	str	r2, [r3, #0]
    node13->child2 = node15;
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <GenerateMenu+0xe28>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <GenerateMenu+0xe30>)
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	605a      	str	r2, [r3, #4]
    node13->child3 = node16;
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <GenerateMenu+0xe28>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <GenerateMenu+0xe34>)
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	609a      	str	r2, [r3, #8]
    node13->child4 = node17;
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <GenerateMenu+0xe28>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a13      	ldr	r2, [pc, #76]	; (8002f80 <GenerateMenu+0xe38>)
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	60da      	str	r2, [r3, #12]
    node13->child5 = node18;
 8002f38:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <GenerateMenu+0xe28>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <GenerateMenu+0xe3c>)
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	611a      	str	r2, [r3, #16]
    node13->child6 = node19;
 8002f42:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <GenerateMenu+0xe28>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <GenerateMenu+0xe40>)
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	615a      	str	r2, [r3, #20]

    currentNode = root;
 8002f4c:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <GenerateMenu+0xe48>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <GenerateMenu+0xe6c>)
 8002f52:	6013      	str	r3, [r2, #0]

}
 8002f54:	bf00      	nop
 8002f56:	f507 57b2 	add.w	r7, r7, #5696	; 0x1640
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f60:	200008bc 	.word	0x200008bc
 8002f64:	200008a4 	.word	0x200008a4
 8002f68:	200008c0 	.word	0x200008c0
 8002f6c:	20000894 	.word	0x20000894
 8002f70:	200008c4 	.word	0x200008c4
 8002f74:	200008c8 	.word	0x200008c8
 8002f78:	200008cc 	.word	0x200008cc
 8002f7c:	200008d0 	.word	0x200008d0
 8002f80:	200008d4 	.word	0x200008d4
 8002f84:	200008d8 	.word	0x200008d8
 8002f88:	200008dc 	.word	0x200008dc
 8002f8c:	200008e0 	.word	0x200008e0
 8002f90:	20000890 	.word	0x20000890
 8002f94:	20000898 	.word	0x20000898
 8002f98:	2000089c 	.word	0x2000089c
 8002f9c:	200008a0 	.word	0x200008a0
 8002fa0:	200008a8 	.word	0x200008a8
 8002fa4:	200008ac 	.word	0x200008ac
 8002fa8:	200008b0 	.word	0x200008b0
 8002fac:	200008b4 	.word	0x200008b4
 8002fb0:	200008b8 	.word	0x200008b8
 8002fb4:	200008e4 	.word	0x200008e4

08002fb8 <createScenario>:
void createScenario() {
 8002fb8:	b5b0      	push	{r4, r5, r7, lr}
 8002fba:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 8002fbe:	af42      	add	r7, sp, #264	; 0x108
    lastId++;
 8002fc0:	4bb0      	ldr	r3, [pc, #704]	; (8003284 <createScenario+0x2cc>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	4aaf      	ldr	r2, [pc, #700]	; (8003284 <createScenario+0x2cc>)
 8002fc8:	6013      	str	r3, [r2, #0]

    char str1[20] ="";
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8002fd0:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
	char str2[20]="";
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002fe4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
	char str3[20]="";
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002ff8:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
	char str4[20]="";
 8003006:	2300      	movs	r3, #0
 8003008:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800300c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
    char str5[4][20]={"","","",""};
 800301a:	4a9b      	ldr	r2, [pc, #620]	; (8003288 <createScenario+0x2d0>)
 800301c:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003020:	4611      	mov	r1, r2
 8003022:	2250      	movs	r2, #80	; 0x50
 8003024:	4618      	mov	r0, r3
 8003026:	f008 fc8b 	bl	800b940 <memcpy>
    sprintf(str1, "temThreshold=%d", newSceneTemThreshold);
 800302a:	4b98      	ldr	r3, [pc, #608]	; (800328c <createScenario+0x2d4>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003032:	4997      	ldr	r1, [pc, #604]	; (8003290 <createScenario+0x2d8>)
 8003034:	4618      	mov	r0, r3
 8003036:	f008 fd89 	bl	800bb4c <siprintf>

    if (newSceneTemAlarm == 1)
 800303a:	4b96      	ldr	r3, [pc, #600]	; (8003294 <createScenario+0x2dc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d106      	bne.n	8003050 <createScenario+0x98>
        strcpy(str2, "temAlarm=on");
 8003042:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8003046:	4a94      	ldr	r2, [pc, #592]	; (8003298 <createScenario+0x2e0>)
 8003048:	ca07      	ldmia	r2, {r0, r1, r2}
 800304a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800304e:	e007      	b.n	8003060 <createScenario+0xa8>
    else
        strcpy(str2, "temAlarm=off");
 8003050:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8003054:	4a91      	ldr	r2, [pc, #580]	; (800329c <createScenario+0x2e4>)
 8003056:	461c      	mov	r4, r3
 8003058:	4613      	mov	r3, r2
 800305a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800305c:	c407      	stmia	r4!, {r0, r1, r2}
 800305e:	7023      	strb	r3, [r4, #0]

    if (newScenesecurityAlarm == 1)
 8003060:	4b8f      	ldr	r3, [pc, #572]	; (80032a0 <createScenario+0x2e8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d109      	bne.n	800307c <createScenario+0xc4>
        strcpy(str3, "securityAlarm=on");
 8003068:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800306c:	4a8d      	ldr	r2, [pc, #564]	; (80032a4 <createScenario+0x2ec>)
 800306e:	461c      	mov	r4, r3
 8003070:	4615      	mov	r5, r2
 8003072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003076:	682b      	ldr	r3, [r5, #0]
 8003078:	7023      	strb	r3, [r4, #0]
 800307a:	e008      	b.n	800308e <createScenario+0xd6>
    else
        strcpy(str3, "securityAlarm=off");
 800307c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003080:	4a89      	ldr	r2, [pc, #548]	; (80032a8 <createScenario+0x2f0>)
 8003082:	461c      	mov	r4, r3
 8003084:	4615      	mov	r5, r2
 8003086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800308a:	682b      	ldr	r3, [r5, #0]
 800308c:	8023      	strh	r3, [r4, #0]

    if (newSceneSecurityAlert == 1)
 800308e:	4b87      	ldr	r3, [pc, #540]	; (80032ac <createScenario+0x2f4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d109      	bne.n	80030aa <createScenario+0xf2>
        strcpy(str4, "securityAlert=on");
 8003096:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800309a:	4a85      	ldr	r2, [pc, #532]	; (80032b0 <createScenario+0x2f8>)
 800309c:	461c      	mov	r4, r3
 800309e:	4615      	mov	r5, r2
 80030a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030a4:	682b      	ldr	r3, [r5, #0]
 80030a6:	7023      	strb	r3, [r4, #0]
 80030a8:	e008      	b.n	80030bc <createScenario+0x104>
    else
        strcpy(str4, "securityAlert=off");
 80030aa:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80030ae:	4a81      	ldr	r2, [pc, #516]	; (80032b4 <createScenario+0x2fc>)
 80030b0:	461c      	mov	r4, r3
 80030b2:	4615      	mov	r5, r2
 80030b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	8023      	strh	r3, [r4, #0]

    for (int i = 0; i < 4; i++) {
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80030c2:	e02a      	b.n	800311a <createScenario+0x162>
        if (newScenarioLights[i] == 1)
 80030c4:	4a7c      	ldr	r2, [pc, #496]	; (80032b8 <createScenario+0x300>)
 80030c6:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80030ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d10f      	bne.n	80030f2 <createScenario+0x13a>
            sprintf(str5[i], "Light%d=on", i);
 80030d2:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 80030d6:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80030e8:	4974      	ldr	r1, [pc, #464]	; (80032bc <createScenario+0x304>)
 80030ea:	4618      	mov	r0, r3
 80030ec:	f008 fd2e 	bl	800bb4c <siprintf>
 80030f0:	e00e      	b.n	8003110 <createScenario+0x158>
        else
            sprintf(str5[i], "Light%d=off", i);
 80030f2:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 80030f6:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8003108:	496d      	ldr	r1, [pc, #436]	; (80032c0 <createScenario+0x308>)
 800310a:	4618      	mov	r0, r3
 800310c:	f008 fd1e 	bl	800bb4c <siprintf>
    for (int i = 0; i < 4; i++) {
 8003110:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8003114:	3301      	adds	r3, #1
 8003116:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800311a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800311e:	2b03      	cmp	r3, #3
 8003120:	ddd0      	ble.n	80030c4 <createScenario+0x10c>
    }

    addedScenarios[lastScenarioIndex][0] = newSceneTemThreshold;
 8003122:	4b68      	ldr	r3, [pc, #416]	; (80032c4 <createScenario+0x30c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a59      	ldr	r2, [pc, #356]	; (800328c <createScenario+0x2d4>)
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	4967      	ldr	r1, [pc, #412]	; (80032c8 <createScenario+0x310>)
 800312c:	015b      	lsls	r3, r3, #5
 800312e:	440b      	add	r3, r1
 8003130:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][1] = newSceneTemAlarm;
 8003132:	4b64      	ldr	r3, [pc, #400]	; (80032c4 <createScenario+0x30c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a57      	ldr	r2, [pc, #348]	; (8003294 <createScenario+0x2dc>)
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	4963      	ldr	r1, [pc, #396]	; (80032c8 <createScenario+0x310>)
 800313c:	015b      	lsls	r3, r3, #5
 800313e:	440b      	add	r3, r1
 8003140:	3304      	adds	r3, #4
 8003142:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][2] = newScenesecurityAlarm;
 8003144:	4b5f      	ldr	r3, [pc, #380]	; (80032c4 <createScenario+0x30c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a55      	ldr	r2, [pc, #340]	; (80032a0 <createScenario+0x2e8>)
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	495e      	ldr	r1, [pc, #376]	; (80032c8 <createScenario+0x310>)
 800314e:	015b      	lsls	r3, r3, #5
 8003150:	440b      	add	r3, r1
 8003152:	3308      	adds	r3, #8
 8003154:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][3] = newSceneSecurityAlert;
 8003156:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <createScenario+0x30c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a54      	ldr	r2, [pc, #336]	; (80032ac <createScenario+0x2f4>)
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	495a      	ldr	r1, [pc, #360]	; (80032c8 <createScenario+0x310>)
 8003160:	015b      	lsls	r3, r3, #5
 8003162:	440b      	add	r3, r1
 8003164:	330c      	adds	r3, #12
 8003166:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][4] = newScenarioLights[0];
 8003168:	4b56      	ldr	r3, [pc, #344]	; (80032c4 <createScenario+0x30c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a52      	ldr	r2, [pc, #328]	; (80032b8 <createScenario+0x300>)
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	4955      	ldr	r1, [pc, #340]	; (80032c8 <createScenario+0x310>)
 8003172:	015b      	lsls	r3, r3, #5
 8003174:	440b      	add	r3, r1
 8003176:	3310      	adds	r3, #16
 8003178:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][5] = newScenarioLights[1];
 800317a:	4b52      	ldr	r3, [pc, #328]	; (80032c4 <createScenario+0x30c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a4e      	ldr	r2, [pc, #312]	; (80032b8 <createScenario+0x300>)
 8003180:	6852      	ldr	r2, [r2, #4]
 8003182:	4951      	ldr	r1, [pc, #324]	; (80032c8 <createScenario+0x310>)
 8003184:	015b      	lsls	r3, r3, #5
 8003186:	440b      	add	r3, r1
 8003188:	3314      	adds	r3, #20
 800318a:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][6] = newScenarioLights[2];
 800318c:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <createScenario+0x30c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a49      	ldr	r2, [pc, #292]	; (80032b8 <createScenario+0x300>)
 8003192:	6892      	ldr	r2, [r2, #8]
 8003194:	494c      	ldr	r1, [pc, #304]	; (80032c8 <createScenario+0x310>)
 8003196:	015b      	lsls	r3, r3, #5
 8003198:	440b      	add	r3, r1
 800319a:	3318      	adds	r3, #24
 800319c:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][7] = newScenarioLights[3];
 800319e:	4b49      	ldr	r3, [pc, #292]	; (80032c4 <createScenario+0x30c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a45      	ldr	r2, [pc, #276]	; (80032b8 <createScenario+0x300>)
 80031a4:	68d2      	ldr	r2, [r2, #12]
 80031a6:	4948      	ldr	r1, [pc, #288]	; (80032c8 <createScenario+0x310>)
 80031a8:	015b      	lsls	r3, r3, #5
 80031aa:	440b      	add	r3, r1
 80031ac:	331c      	adds	r3, #28
 80031ae:	601a      	str	r2, [r3, #0]

    char strArray[8][20]; // Array to hold str1 to str4

    strcpy(strArray[0], str1);
 80031b0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80031b4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f008 fcf5 	bl	800bbaa <strcpy>
    strcpy(strArray[1], str2);
 80031c0:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 80031c4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80031c8:	3314      	adds	r3, #20
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f008 fcec 	bl	800bbaa <strcpy>
    strcpy(strArray[2], str3);
 80031d2:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80031d6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80031da:	3328      	adds	r3, #40	; 0x28
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f008 fce3 	bl	800bbaa <strcpy>
    strcpy(strArray[3], str4);
 80031e4:	f507 7205 	add.w	r2, r7, #532	; 0x214
 80031e8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80031ec:	333c      	adds	r3, #60	; 0x3c
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f008 fcda 	bl	800bbaa <strcpy>
    strcpy(strArray[4], str5[0]);
 80031f6:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 80031fa:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80031fe:	3350      	adds	r3, #80	; 0x50
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f008 fcd1 	bl	800bbaa <strcpy>
    strcpy(strArray[5], str5[1]);
 8003208:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800320c:	f103 0214 	add.w	r2, r3, #20
 8003210:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003214:	3364      	adds	r3, #100	; 0x64
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f008 fcc6 	bl	800bbaa <strcpy>
    strcpy(strArray[6], str5[2]);
 800321e:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003222:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003226:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800322a:	3378      	adds	r3, #120	; 0x78
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f008 fcbb 	bl	800bbaa <strcpy>
    strcpy(strArray[7], str5[3]);
 8003234:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003238:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800323c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003240:	338c      	adds	r3, #140	; 0x8c
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f008 fcb0 	bl	800bbaa <strcpy>

    struct menuScreen newScenario = {lastId, 8, 0};
 800324a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800324e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003252:	4618      	mov	r0, r3
 8003254:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003258:	461a      	mov	r2, r3
 800325a:	2100      	movs	r1, #0
 800325c:	f008 fb7e 	bl	800b95c <memset>
 8003260:	4b08      	ldr	r3, [pc, #32]	; (8003284 <createScenario+0x2cc>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8003268:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8003272:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003276:	2208      	movs	r2, #8
 8003278:	605a      	str	r2, [r3, #4]

    for (int i = 0; i < 8; i++) {
 800327a:	2300      	movs	r3, #0
 800327c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8003280:	e040      	b.n	8003304 <createScenario+0x34c>
 8003282:	bf00      	nop
 8003284:	20000878 	.word	0x20000878
 8003288:	0800d9c8 	.word	0x0800d9c8
 800328c:	20000018 	.word	0x20000018
 8003290:	0800d918 	.word	0x0800d918
 8003294:	2000001c 	.word	0x2000001c
 8003298:	0800d928 	.word	0x0800d928
 800329c:	0800d934 	.word	0x0800d934
 80032a0:	20000020 	.word	0x20000020
 80032a4:	0800d944 	.word	0x0800d944
 80032a8:	0800d958 	.word	0x0800d958
 80032ac:	20000024 	.word	0x20000024
 80032b0:	0800d96c 	.word	0x0800d96c
 80032b4:	0800d980 	.word	0x0800d980
 80032b8:	20000844 	.word	0x20000844
 80032bc:	0800d994 	.word	0x0800d994
 80032c0:	0800d9a0 	.word	0x0800d9a0
 80032c4:	2000082c 	.word	0x2000082c
 80032c8:	200007ac 	.word	0x200007ac
        strcpy(newScenario.menuItems[i], strArray[i]);
 80032cc:	f107 0114 	add.w	r1, r7, #20
 80032d0:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	3308      	adds	r3, #8
 80032de:	440b      	add	r3, r1
 80032e0:	1d18      	adds	r0, r3, #4
 80032e2:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80032e6:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	4619      	mov	r1, r3
 80032f6:	f008 fc58 	bl	800bbaa <strcpy>
    for (int i = 0; i < 8; i++) {
 80032fa:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80032fe:	3301      	adds	r3, #1
 8003300:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8003304:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8003308:	2b07      	cmp	r3, #7
 800330a:	dddf      	ble.n	80032cc <createScenario+0x314>
    }

    strcpy(newScenario.content, "<  off  >");
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	33ac      	adds	r3, #172	; 0xac
 8003312:	4a34      	ldr	r2, [pc, #208]	; (80033e4 <createScenario+0x42c>)
 8003314:	ca07      	ldmia	r2, {r0, r1, r2}
 8003316:	c303      	stmia	r3!, {r0, r1}
 8003318:	801a      	strh	r2, [r3, #0]

//    struct menuScreen newScenario = {lastId, 8, 0, strArray, "<  off  >"};

    struct TreeNode* newNode = createNode(newScenario, node5);
 800331a:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <createScenario+0x430>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8003322:	f5a2 7417 	sub.w	r4, r2, #604	; 0x25c
 8003326:	9340      	str	r3, [sp, #256]	; 0x100
 8003328:	4668      	mov	r0, sp
 800332a:	f104 0310 	add.w	r3, r4, #16
 800332e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003332:	4619      	mov	r1, r3
 8003334:	f008 fb04 	bl	800b940 <memcpy>
 8003338:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800333c:	f7fe fec8 	bl	80020d0 <createNode>
 8003340:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264

    switch (lastScenarioIndex) {
 8003344:	4b29      	ldr	r3, [pc, #164]	; (80033ec <createScenario+0x434>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d823      	bhi.n	8003394 <createScenario+0x3dc>
 800334c:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <createScenario+0x39c>)
 800334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003352:	bf00      	nop
 8003354:	08003365 	.word	0x08003365
 8003358:	08003371 	.word	0x08003371
 800335c:	0800337d 	.word	0x0800337d
 8003360:	08003389 	.word	0x08003389
        case 0:
            node5->child3 = newNode;
 8003364:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <createScenario+0x430>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800336c:	609a      	str	r2, [r3, #8]
            break;
 800336e:	e011      	b.n	8003394 <createScenario+0x3dc>
        case 1:
            node5->child4 = newNode;
 8003370:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <createScenario+0x430>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8003378:	60da      	str	r2, [r3, #12]
            break;
 800337a:	e00b      	b.n	8003394 <createScenario+0x3dc>
        case 2:
            node5->child5 = newNode;
 800337c:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <createScenario+0x430>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8003384:	611a      	str	r2, [r3, #16]
            break;
 8003386:	e005      	b.n	8003394 <createScenario+0x3dc>
        case 3:
            node5->child6 = newNode;
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <createScenario+0x430>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8003390:	615a      	str	r2, [r3, #20]
            break;
 8003392:	bf00      	nop
    }
    char newStr[20];
    sprintf(newStr,"> scenario %d",lastScenarioIndex+3);
 8003394:	4b15      	ldr	r3, [pc, #84]	; (80033ec <createScenario+0x434>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	1cda      	adds	r2, r3, #3
 800339a:	463b      	mov	r3, r7
 800339c:	4914      	ldr	r1, [pc, #80]	; (80033f0 <createScenario+0x438>)
 800339e:	4618      	mov	r0, r3
 80033a0:	f008 fbd4 	bl	800bb4c <siprintf>
    strcpy(node5->screen.menuItems[node5->screen.optionCount],newStr);
 80033a4:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <createScenario+0x430>)
 80033a6:	6819      	ldr	r1, [r3, #0]
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <createScenario+0x430>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	3328      	adds	r3, #40	; 0x28
 80033b8:	440b      	add	r3, r1
 80033ba:	3308      	adds	r3, #8
 80033bc:	463a      	mov	r2, r7
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f008 fbf2 	bl	800bbaa <strcpy>
    node5->screen.optionCount++;
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <createScenario+0x430>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033cc:	3201      	adds	r2, #1
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
    lastScenarioIndex++;
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <createScenario+0x434>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3301      	adds	r3, #1
 80033d6:	4a05      	ldr	r2, [pc, #20]	; (80033ec <createScenario+0x434>)
 80033d8:	6013      	str	r3, [r2, #0]
}
 80033da:	bf00      	nop
 80033dc:	f507 771c 	add.w	r7, r7, #624	; 0x270
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bdb0      	pop	{r4, r5, r7, pc}
 80033e4:	0800d9ac 	.word	0x0800d9ac
 80033e8:	200008a4 	.word	0x200008a4
 80033ec:	2000082c 	.word	0x2000082c
 80033f0:	0800d9b8 	.word	0x0800d9b8

080033f4 <ShowMenu>:

void ShowMenu(){
 80033f4:	b5b0      	push	{r4, r5, r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
	int p = page * 4;
 80033fa:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <ShowMenu+0xe0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	617b      	str	r3, [r7, #20]
//    clear();
	char temp[20] = "                   ";
 8003402:	4b35      	ldr	r3, [pc, #212]	; (80034d8 <ShowMenu+0xe4>)
 8003404:	463c      	mov	r4, r7
 8003406:	461d      	mov	r5, r3
 8003408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800340a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	6023      	str	r3, [r4, #0]
    setCursor(0,0);
 8003410:	2100      	movs	r1, #0
 8003412:	2000      	movs	r0, #0
 8003414:	f7fd fe28 	bl	8001068 <setCursor>
    print(currentMenu[p]);
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4a2e      	ldr	r2, [pc, #184]	; (80034dc <ShowMenu+0xe8>)
 8003424:	4413      	add	r3, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd fe7c 	bl	8001124 <print>
    setCursor(0,1);
 800342c:	2101      	movs	r1, #1
 800342e:	2000      	movs	r0, #0
 8003430:	f7fd fe1a 	bl	8001068 <setCursor>
    if(p+1 >= MenuoptionCounts)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	4b29      	ldr	r3, [pc, #164]	; (80034e0 <ShowMenu+0xec>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	db04      	blt.n	800344a <ShowMenu+0x56>
        print(temp);
 8003440:	463b      	mov	r3, r7
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd fe6e 	bl	8001124 <print>
 8003448:	e00a      	b.n	8003460 <ShowMenu+0x6c>
    else
    	print(currentMenu[p+1]);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4a21      	ldr	r2, [pc, #132]	; (80034dc <ShowMenu+0xe8>)
 8003458:	4413      	add	r3, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fe62 	bl	8001124 <print>
    setCursor(0,2);
 8003460:	2102      	movs	r1, #2
 8003462:	2000      	movs	r0, #0
 8003464:	f7fd fe00 	bl	8001068 <setCursor>
    if(p+2 >= MenuoptionCounts)
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	1c9a      	adds	r2, r3, #2
 800346c:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <ShowMenu+0xec>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	db04      	blt.n	800347e <ShowMenu+0x8a>
        print(temp);
 8003474:	463b      	mov	r3, r7
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd fe54 	bl	8001124 <print>
 800347c:	e00a      	b.n	8003494 <ShowMenu+0xa0>
    else
    	print(currentMenu[p+2]);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	1c9a      	adds	r2, r3, #2
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4a14      	ldr	r2, [pc, #80]	; (80034dc <ShowMenu+0xe8>)
 800348c:	4413      	add	r3, r2
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd fe48 	bl	8001124 <print>
    setCursor(0,3);
 8003494:	2103      	movs	r1, #3
 8003496:	2000      	movs	r0, #0
 8003498:	f7fd fde6 	bl	8001068 <setCursor>
    if(p+3 >= MenuoptionCounts)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	1cda      	adds	r2, r3, #3
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <ShowMenu+0xec>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	db04      	blt.n	80034b2 <ShowMenu+0xbe>
        print(temp);
 80034a8:	463b      	mov	r3, r7
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd fe3a 	bl	8001124 <print>
 80034b0:	e00a      	b.n	80034c8 <ShowMenu+0xd4>
    else
    	print(currentMenu[p+3]);
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1cda      	adds	r2, r3, #3
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4a07      	ldr	r2, [pc, #28]	; (80034dc <ShowMenu+0xe8>)
 80034c0:	4413      	add	r3, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd fe2e 	bl	8001124 <print>
    display();
 80034c8:	f7fd fe16 	bl	80010f8 <display>
}
 80034cc:	bf00      	nop
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bdb0      	pop	{r4, r5, r7, pc}
 80034d4:	20000868 	.word	0x20000868
 80034d8:	0800da18 	.word	0x0800da18
 80034dc:	2000003c 	.word	0x2000003c
 80034e0:	20000864 	.word	0x20000864

080034e4 <ShowInfo>:
void ShowInfo(struct menuScreen info){
 80034e4:	b084      	sub	sp, #16
 80034e6:	b5b0      	push	{r4, r5, r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80034f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int p = page * 3;
 80034f4:	4b34      	ldr	r3, [pc, #208]	; (80035c8 <ShowInfo+0xe4>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
    clear();
 8003500:	f7fd fda8 	bl	8001054 <clear>
	char temp[20] = "                   ";
 8003504:	4b31      	ldr	r3, [pc, #196]	; (80035cc <ShowInfo+0xe8>)
 8003506:	463c      	mov	r4, r7
 8003508:	461d      	mov	r5, r3
 800350a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800350c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800350e:	682b      	ldr	r3, [r5, #0]
 8003510:	6023      	str	r3, [r4, #0]
    setCursor(0,0);
 8003512:	2100      	movs	r1, #0
 8003514:	2000      	movs	r0, #0
 8003516:	f7fd fda7 	bl	8001068 <setCursor>
    print(info.content);
 800351a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd fe00 	bl	8001124 <print>
    setCursor(0,1);
 8003524:	2101      	movs	r1, #1
 8003526:	2000      	movs	r0, #0
 8003528:	f7fd fd9e 	bl	8001068 <setCursor>
    print(info.menuItems[p]);
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	3308      	adds	r3, #8
 8003538:	3328      	adds	r3, #40	; 0x28
 800353a:	443b      	add	r3, r7
 800353c:	3304      	adds	r3, #4
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd fdf0 	bl	8001124 <print>
    setCursor(0,2);
 8003544:	2102      	movs	r1, #2
 8003546:	2000      	movs	r0, #0
 8003548:	f7fd fd8e 	bl	8001068 <setCursor>
    if(p+1 >= MenuoptionCounts)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <ShowInfo+0xec>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	db04      	blt.n	8003562 <ShowInfo+0x7e>
        print(temp);
 8003558:	463b      	mov	r3, r7
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd fde2 	bl	8001124 <print>
 8003560:	e00c      	b.n	800357c <ShowInfo+0x98>
	else
		print(info.menuItems[p+1]);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	3308      	adds	r3, #8
 8003570:	3328      	adds	r3, #40	; 0x28
 8003572:	443b      	add	r3, r7
 8003574:	3304      	adds	r3, #4
 8003576:	4618      	mov	r0, r3
 8003578:	f7fd fdd4 	bl	8001124 <print>
    setCursor(0,3);
 800357c:	2103      	movs	r1, #3
 800357e:	2000      	movs	r0, #0
 8003580:	f7fd fd72 	bl	8001068 <setCursor>
    if(p+2 >= MenuoptionCounts)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	1c9a      	adds	r2, r3, #2
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <ShowInfo+0xec>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	db04      	blt.n	800359a <ShowInfo+0xb6>
        print(temp);
 8003590:	463b      	mov	r3, r7
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd fdc6 	bl	8001124 <print>
 8003598:	e00c      	b.n	80035b4 <ShowInfo+0xd0>
	else
		print(info.menuItems[p+2]);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	1c9a      	adds	r2, r3, #2
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	3308      	adds	r3, #8
 80035a8:	3328      	adds	r3, #40	; 0x28
 80035aa:	443b      	add	r3, r7
 80035ac:	3304      	adds	r3, #4
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd fdb8 	bl	8001124 <print>
    display();
 80035b4:	f7fd fda0 	bl	80010f8 <display>
}
 80035b8:	bf00      	nop
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80035c2:	b004      	add	sp, #16
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000868 	.word	0x20000868
 80035cc:	0800da18 	.word	0x0800da18
 80035d0:	20000864 	.word	0x20000864

080035d4 <changeOption>:
void changeOption(int down){
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b08d      	sub	sp, #52	; 0x34
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	char newStr[20] = ">";
 80035dc:	233e      	movs	r3, #62	; 0x3e
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	f107 0310 	add.w	r3, r7, #16
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
	strcat(newStr,currentMenu[CurrentMenuOption]);
 80035ee:	4b58      	ldr	r3, [pc, #352]	; (8003750 <changeOption+0x17c>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4a56      	ldr	r2, [pc, #344]	; (8003754 <changeOption+0x180>)
 80035fc:	441a      	add	r2, r3
 80035fe:	f107 030c 	add.w	r3, r7, #12
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f008 fac1 	bl	800bb8c <strcat>
	strcpy(currentMenu[CurrentMenuOption],newStr);
 800360a:	4b51      	ldr	r3, [pc, #324]	; (8003750 <changeOption+0x17c>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4a4f      	ldr	r2, [pc, #316]	; (8003754 <changeOption+0x180>)
 8003618:	4413      	add	r3, r2
 800361a:	f107 020c 	add.w	r2, r7, #12
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f008 fac2 	bl	800bbaa <strcpy>
	if(down == 1){
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d145      	bne.n	80036b8 <changeOption+0xe4>
		if(CurrentMenuOption > 0){
 800362c:	4b48      	ldr	r3, [pc, #288]	; (8003750 <changeOption+0x17c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f340 8087 	ble.w	8003744 <changeOption+0x170>
			int length  = strlen(currentMenu[CurrentMenuOption - 1]) - 1;
 8003636:	4b46      	ldr	r3, [pc, #280]	; (8003750 <changeOption+0x17c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	1e5a      	subs	r2, r3, #1
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4a43      	ldr	r2, [pc, #268]	; (8003754 <changeOption+0x180>)
 8003646:	4413      	add	r3, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f7fc fdcb 	bl	80001e4 <strlen>
 800364e:	4603      	mov	r3, r0
 8003650:	3b01      	subs	r3, #1
 8003652:	623b      	str	r3, [r7, #32]
			for (int i = 0; i< length ;i++)
 8003654:	2300      	movs	r3, #0
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003658:	e01c      	b.n	8003694 <changeOption+0xc0>
			{
				currentMenu[CurrentMenuOption - 1][i] = currentMenu[CurrentMenuOption - 1][i+1];
 800365a:	4b3d      	ldr	r3, [pc, #244]	; (8003750 <changeOption+0x17c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	1e59      	subs	r1, r3, #1
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	1c58      	adds	r0, r3, #1
 8003664:	4b3a      	ldr	r3, [pc, #232]	; (8003750 <changeOption+0x17c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	1e5a      	subs	r2, r3, #1
 800366a:	4c3a      	ldr	r4, [pc, #232]	; (8003754 <changeOption+0x180>)
 800366c:	460b      	mov	r3, r1
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4423      	add	r3, r4
 8003676:	4403      	add	r3, r0
 8003678:	7818      	ldrb	r0, [r3, #0]
 800367a:	4936      	ldr	r1, [pc, #216]	; (8003754 <changeOption+0x180>)
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	18ca      	adds	r2, r1, r3
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	4413      	add	r3, r2
 800368a:	4602      	mov	r2, r0
 800368c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i< length ;i++)
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	3301      	adds	r3, #1
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	429a      	cmp	r2, r3
 800369a:	dbde      	blt.n	800365a <changeOption+0x86>
			}
			currentMenu[CurrentMenuOption - 1][length] = '\0';
 800369c:	4b2c      	ldr	r3, [pc, #176]	; (8003750 <changeOption+0x17c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	1e5a      	subs	r2, r3, #1
 80036a2:	492c      	ldr	r1, [pc, #176]	; (8003754 <changeOption+0x180>)
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	18ca      	adds	r2, r1, r3
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	4413      	add	r3, r2
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	e045      	b.n	8003744 <changeOption+0x170>
		}
	}
	else{
		if(CurrentMenuOption < MenuoptionCounts){
 80036b8:	4b25      	ldr	r3, [pc, #148]	; (8003750 <changeOption+0x17c>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4b26      	ldr	r3, [pc, #152]	; (8003758 <changeOption+0x184>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	da3f      	bge.n	8003744 <changeOption+0x170>
			int length  = strlen(currentMenu[CurrentMenuOption + 1]) - 1;
 80036c4:	4b22      	ldr	r3, [pc, #136]	; (8003750 <changeOption+0x17c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4a20      	ldr	r2, [pc, #128]	; (8003754 <changeOption+0x180>)
 80036d4:	4413      	add	r3, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fc fd84 	bl	80001e4 <strlen>
 80036dc:	4603      	mov	r3, r0
 80036de:	3b01      	subs	r3, #1
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
			for (int i = 0; i< length ;i++)
 80036e2:	2300      	movs	r3, #0
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e6:	e01c      	b.n	8003722 <changeOption+0x14e>
			{
				currentMenu[CurrentMenuOption + 1][i] = currentMenu[CurrentMenuOption + 1][i+1];
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <changeOption+0x17c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	1c59      	adds	r1, r3, #1
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	1c58      	adds	r0, r3, #1
 80036f2:	4b17      	ldr	r3, [pc, #92]	; (8003750 <changeOption+0x17c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	4c16      	ldr	r4, [pc, #88]	; (8003754 <changeOption+0x180>)
 80036fa:	460b      	mov	r3, r1
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4423      	add	r3, r4
 8003704:	4403      	add	r3, r0
 8003706:	7818      	ldrb	r0, [r3, #0]
 8003708:	4912      	ldr	r1, [pc, #72]	; (8003754 <changeOption+0x180>)
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	18ca      	adds	r2, r1, r3
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	4413      	add	r3, r2
 8003718:	4602      	mov	r2, r0
 800371a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i< length ;i++)
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	3301      	adds	r3, #1
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28
 8003722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	429a      	cmp	r2, r3
 8003728:	dbde      	blt.n	80036e8 <changeOption+0x114>
			}
			currentMenu[CurrentMenuOption + 1][length] = '\0';
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <changeOption+0x17c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	4908      	ldr	r1, [pc, #32]	; (8003754 <changeOption+0x180>)
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	18ca      	adds	r2, r1, r3
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	4413      	add	r3, r2
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
		}
	}
	ShowMenu();
 8003744:	f7ff fe56 	bl	80033f4 <ShowMenu>
}
 8003748:	bf00      	nop
 800374a:	3734      	adds	r7, #52	; 0x34
 800374c:	46bd      	mov	sp, r7
 800374e:	bd90      	pop	{r4, r7, pc}
 8003750:	20000860 	.word	0x20000860
 8003754:	2000003c 	.word	0x2000003c
 8003758:	20000864 	.word	0x20000864

0800375c <SetMenu>:
void SetMenu(char MenuItems[][20]){
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 12 ; i++){
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e00b      	b.n	8003782 <SetMenu+0x26>
	    strcpy(currentMenu[i],"");
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4a15      	ldr	r2, [pc, #84]	; (80037cc <SetMenu+0x70>)
 8003776:	4413      	add	r3, r2
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 12 ; i++){
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3301      	adds	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b0b      	cmp	r3, #11
 8003786:	ddf0      	ble.n	800376a <SetMenu+0xe>
	}
	for(int i = 0; i < MenuoptionCounts; i++){
 8003788:	2300      	movs	r3, #0
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	e014      	b.n	80037b8 <SetMenu+0x5c>
	    strcpy(currentMenu[i],MenuItems[i]);
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4a0c      	ldr	r2, [pc, #48]	; (80037cc <SetMenu+0x70>)
 800379a:	1898      	adds	r0, r3, r2
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	461a      	mov	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4413      	add	r3, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	f008 f9fc 	bl	800bbaa <strcpy>
	for(int i = 0; i < MenuoptionCounts; i++){
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	3301      	adds	r3, #1
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <SetMenu+0x74>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	429a      	cmp	r2, r3
 80037c0:	dbe5      	blt.n	800378e <SetMenu+0x32>
	}
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	2000003c 	.word	0x2000003c
 80037d0:	20000864 	.word	0x20000864

080037d4 <messageSetter>:
void messageSetter(struct TreeNode* node, char* newChar){
 80037d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
	if(strcmp(newChar,"null") != 0 && strcmp(newChar,"dell") != 0){
 80037e0:	4933      	ldr	r1, [pc, #204]	; (80038b0 <messageSetter+0xdc>)
 80037e2:	6838      	ldr	r0, [r7, #0]
 80037e4:	f7fc fcf4 	bl	80001d0 <strcmp>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d03d      	beq.n	800386a <messageSetter+0x96>
 80037ee:	4931      	ldr	r1, [pc, #196]	; (80038b4 <messageSetter+0xe0>)
 80037f0:	6838      	ldr	r0, [r7, #0]
 80037f2:	f7fc fced 	bl	80001d0 <strcmp>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d036      	beq.n	800386a <messageSetter+0x96>
		int len = strlen(node->screen.content);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	33d0      	adds	r3, #208	; 0xd0
 8003800:	4618      	mov	r0, r3
 8003802:	f7fc fcef 	bl	80001e4 <strlen>
 8003806:	4603      	mov	r3, r0
 8003808:	60fb      	str	r3, [r7, #12]
		if(HAL_GetTick()- lastPress < 800  && sameKeyPressed){
 800380a:	f002 f8f7 	bl	80059fc <HAL_GetTick>
 800380e:	4603      	mov	r3, r0
 8003810:	2200      	movs	r2, #0
 8003812:	4698      	mov	r8, r3
 8003814:	4691      	mov	r9, r2
 8003816:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <messageSetter+0xe4>)
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	ebb8 0402 	subs.w	r4, r8, r2
 8003820:	eb69 0503 	sbc.w	r5, r9, r3
 8003824:	f5b4 7f48 	cmp.w	r4, #800	; 0x320
 8003828:	f175 0300 	sbcs.w	r3, r5, #0
 800382c:	d20d      	bcs.n	800384a <messageSetter+0x76>
 800382e:	4b23      	ldr	r3, [pc, #140]	; (80038bc <messageSetter+0xe8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d009      	beq.n	800384a <messageSetter+0x76>
			node->screen.content[len - 1] = newChar[0];
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3b01      	subs	r3, #1
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	7811      	ldrb	r1, [r2, #0]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	460a      	mov	r2, r1
 8003844:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	if(strcmp(newChar,"null") != 0 && strcmp(newChar,"dell") != 0){
 8003848:	e027      	b.n	800389a <messageSetter+0xc6>
		}
		else{
			node->screen.content[len] = newChar[0];
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	7819      	ldrb	r1, [r3, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	33d0      	adds	r3, #208	; 0xd0
 8003856:	460a      	mov	r2, r1
 8003858:	701a      	strb	r2, [r3, #0]
			node->screen.content[len+1] = '\0';
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3301      	adds	r3, #1
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	2200      	movs	r2, #0
 8003864:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	if(strcmp(newChar,"null") != 0 && strcmp(newChar,"dell") != 0){
 8003868:	e017      	b.n	800389a <messageSetter+0xc6>
		}
	}
	else if(strcmp(newChar,"dell") == 0){
 800386a:	4912      	ldr	r1, [pc, #72]	; (80038b4 <messageSetter+0xe0>)
 800386c:	6838      	ldr	r0, [r7, #0]
 800386e:	f7fc fcaf 	bl	80001d0 <strcmp>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d110      	bne.n	800389a <messageSetter+0xc6>
		int len = strlen(node->screen.content);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	33d0      	adds	r3, #208	; 0xd0
 800387c:	4618      	mov	r0, r3
 800387e:	f7fc fcb1 	bl	80001e4 <strlen>
 8003882:	4603      	mov	r3, r0
 8003884:	60bb      	str	r3, [r7, #8]
		if(len >0){
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	dd06      	ble.n	800389a <messageSetter+0xc6>
			node->screen.content[len - 1] = '\0';
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	3b01      	subs	r3, #1
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	4413      	add	r3, r2
 8003894:	2200      	movs	r2, #0
 8003896:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
		}
	}
	strcpy(startMassage,node->screen.content);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	33d0      	adds	r3, #208	; 0xd0
 800389e:	4619      	mov	r1, r3
 80038a0:	4807      	ldr	r0, [pc, #28]	; (80038c0 <messageSetter+0xec>)
 80038a2:	f008 f982 	bl	800bbaa <strcpy>
}
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038b0:	0800da2c 	.word	0x0800da2c
 80038b4:	0800da34 	.word	0x0800da34
 80038b8:	20000858 	.word	0x20000858
 80038bc:	20000874 	.word	0x20000874
 80038c0:	20000830 	.word	0x20000830

080038c4 <setOn>:
void setOn(struct menuScreen* screen){
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	b08b      	sub	sp, #44	; 0x2c
 80038c8:	af04      	add	r7, sp, #16
 80038ca:	60f8      	str	r0, [r7, #12]
	if(strcmp(screen->content,"<  on  >") != 0 ){
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	33ac      	adds	r3, #172	; 0xac
 80038d0:	4979      	ldr	r1, [pc, #484]	; (8003ab8 <setOn+0x1f4>)
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fc fc7c 	bl	80001d0 <strcmp>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80a8 	beq.w	8003a30 <setOn+0x16c>
		strcpy(screen->content,"<  on  >");
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	33ac      	adds	r3, #172	; 0xac
 80038e4:	4974      	ldr	r1, [pc, #464]	; (8003ab8 <setOn+0x1f4>)
 80038e6:	461a      	mov	r2, r3
 80038e8:	460b      	mov	r3, r1
 80038ea:	cb03      	ldmia	r3!, {r0, r1}
 80038ec:	6010      	str	r0, [r2, #0]
 80038ee:	6051      	str	r1, [r2, #4]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	7213      	strb	r3, [r2, #8]
		if(screen->id > lastPagesId){
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4b70      	ldr	r3, [pc, #448]	; (8003abc <setOn+0x1f8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	dd43      	ble.n	8003988 <setOn+0xc4>
			int index = screen->id - lastPagesId - 1;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4b6d      	ldr	r3, [pc, #436]	; (8003abc <setOn+0x1f8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	617b      	str	r3, [r7, #20]
			setScenario(addedScenarios[index][0], addedScenarios[index][1], addedScenarios[index][2], addedScenarios[index][3], addedScenarios[index][4], addedScenarios[index][5], addedScenarios[index][6], addedScenarios[index][7]);
 800390e:	4a6c      	ldr	r2, [pc, #432]	; (8003ac0 <setOn+0x1fc>)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	015b      	lsls	r3, r3, #5
 8003914:	4413      	add	r3, r2
 8003916:	681c      	ldr	r4, [r3, #0]
 8003918:	4a69      	ldr	r2, [pc, #420]	; (8003ac0 <setOn+0x1fc>)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	015b      	lsls	r3, r3, #5
 800391e:	4413      	add	r3, r2
 8003920:	3304      	adds	r3, #4
 8003922:	681d      	ldr	r5, [r3, #0]
 8003924:	4a66      	ldr	r2, [pc, #408]	; (8003ac0 <setOn+0x1fc>)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	015b      	lsls	r3, r3, #5
 800392a:	4413      	add	r3, r2
 800392c:	3308      	adds	r3, #8
 800392e:	681e      	ldr	r6, [r3, #0]
 8003930:	4a63      	ldr	r2, [pc, #396]	; (8003ac0 <setOn+0x1fc>)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	015b      	lsls	r3, r3, #5
 8003936:	4413      	add	r3, r2
 8003938:	330c      	adds	r3, #12
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	4a60      	ldr	r2, [pc, #384]	; (8003ac0 <setOn+0x1fc>)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	015b      	lsls	r3, r3, #5
 8003944:	4413      	add	r3, r2
 8003946:	3310      	adds	r3, #16
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	495d      	ldr	r1, [pc, #372]	; (8003ac0 <setOn+0x1fc>)
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	0152      	lsls	r2, r2, #5
 8003950:	440a      	add	r2, r1
 8003952:	3214      	adds	r2, #20
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	4859      	ldr	r0, [pc, #356]	; (8003ac0 <setOn+0x1fc>)
 800395a:	6979      	ldr	r1, [r7, #20]
 800395c:	0149      	lsls	r1, r1, #5
 800395e:	4401      	add	r1, r0
 8003960:	3118      	adds	r1, #24
 8003962:	6809      	ldr	r1, [r1, #0]
 8003964:	4856      	ldr	r0, [pc, #344]	; (8003ac0 <setOn+0x1fc>)
 8003966:	4602      	mov	r2, r0
 8003968:	6978      	ldr	r0, [r7, #20]
 800396a:	0140      	lsls	r0, r0, #5
 800396c:	4410      	add	r0, r2
 800396e:	301c      	adds	r0, #28
 8003970:	6800      	ldr	r0, [r0, #0]
 8003972:	9003      	str	r0, [sp, #12]
 8003974:	9102      	str	r1, [sp, #8]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	9201      	str	r2, [sp, #4]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4632      	mov	r2, r6
 8003980:	4629      	mov	r1, r5
 8003982:	4620      	mov	r0, r4
 8003984:	f000 fa66 	bl	8003e54 <setScenario>
		}
		switch(screen->id){
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3b08      	subs	r3, #8
 800398e:	2b09      	cmp	r3, #9
 8003990:	f200 808d 	bhi.w	8003aae <setOn+0x1ea>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <setOn+0xd8>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039c5 	.word	0x080039c5
 80039a0:	080039cd 	.word	0x080039cd
 80039a4:	080039d5 	.word	0x080039d5
 80039a8:	080039dd 	.word	0x080039dd
 80039ac:	080039fb 	.word	0x080039fb
 80039b0:	08003aaf 	.word	0x08003aaf
 80039b4:	08003aaf 	.word	0x08003aaf
 80039b8:	08003a19 	.word	0x08003a19
 80039bc:	08003a21 	.word	0x08003a21
 80039c0:	08003a29 	.word	0x08003a29
			case 8:
				temAlarm = 1;
 80039c4:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <setOn+0x200>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
				break;
 80039ca:	e070      	b.n	8003aae <setOn+0x1ea>
			case 9:
				securityAlert = 1;
 80039cc:	4b3e      	ldr	r3, [pc, #248]	; (8003ac8 <setOn+0x204>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
				break;
 80039d2:	e06c      	b.n	8003aae <setOn+0x1ea>
			case 10:
				securityAlarm = 1;
 80039d4:	4b3d      	ldr	r3, [pc, #244]	; (8003acc <setOn+0x208>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
				break;
 80039da:	e068      	b.n	8003aae <setOn+0x1ea>
			case 11: // scenario 1: entering the house
				setScenario(22, 1, 0, 1, 1, 1, 0, 0);
 80039dc:	2300      	movs	r3, #0
 80039de:	9303      	str	r3, [sp, #12]
 80039e0:	2300      	movs	r3, #0
 80039e2:	9302      	str	r3, [sp, #8]
 80039e4:	2301      	movs	r3, #1
 80039e6:	9301      	str	r3, [sp, #4]
 80039e8:	2301      	movs	r3, #1
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	2301      	movs	r3, #1
 80039ee:	2200      	movs	r2, #0
 80039f0:	2101      	movs	r1, #1
 80039f2:	2016      	movs	r0, #22
 80039f4:	f000 fa2e 	bl	8003e54 <setScenario>
				break;
 80039f8:	e059      	b.n	8003aae <setOn+0x1ea>
			case 12:// scenario 2: leaving the house
				setScenario(35, 1, 1, 1, 0, 0, 0, 0);
 80039fa:	2300      	movs	r3, #0
 80039fc:	9303      	str	r3, [sp, #12]
 80039fe:	2300      	movs	r3, #0
 8003a00:	9302      	str	r3, [sp, #8]
 8003a02:	2300      	movs	r3, #0
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	2300      	movs	r3, #0
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	2101      	movs	r1, #1
 8003a10:	2023      	movs	r0, #35	; 0x23
 8003a12:	f000 fa1f 	bl	8003e54 <setScenario>
				break;
 8003a16:	e04a      	b.n	8003aae <setOn+0x1ea>
			case 15:
				newSceneTemAlarm = 1;
 8003a18:	4b2d      	ldr	r3, [pc, #180]	; (8003ad0 <setOn+0x20c>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
				break;
 8003a1e:	e046      	b.n	8003aae <setOn+0x1ea>
			case 16:
				newScenesecurityAlarm = 1;
 8003a20:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <setOn+0x210>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
				break;
 8003a26:	e042      	b.n	8003aae <setOn+0x1ea>
			case 17:
				newSceneSecurityAlert = 1;
 8003a28:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <setOn+0x214>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
				break;
 8003a2e:	e03e      	b.n	8003aae <setOn+0x1ea>
		}

	}
	else{
		strcpy(screen->content,"<  off  >");
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	33ac      	adds	r3, #172	; 0xac
 8003a34:	4929      	ldr	r1, [pc, #164]	; (8003adc <setOn+0x218>)
 8003a36:	461a      	mov	r2, r3
 8003a38:	460b      	mov	r3, r1
 8003a3a:	cb03      	ldmia	r3!, {r0, r1}
 8003a3c:	6010      	str	r0, [r2, #0]
 8003a3e:	6051      	str	r1, [r2, #4]
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	8113      	strh	r3, [r2, #8]
		switch(screen->id){
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3b08      	subs	r3, #8
 8003a4a:	2b09      	cmp	r3, #9
 8003a4c:	d82f      	bhi.n	8003aae <setOn+0x1ea>
 8003a4e:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <setOn+0x190>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003a7d 	.word	0x08003a7d
 8003a58:	08003a85 	.word	0x08003a85
 8003a5c:	08003a8d 	.word	0x08003a8d
 8003a60:	08003aad 	.word	0x08003aad
 8003a64:	08003aad 	.word	0x08003aad
 8003a68:	08003aaf 	.word	0x08003aaf
 8003a6c:	08003aaf 	.word	0x08003aaf
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003a9d 	.word	0x08003a9d
 8003a78:	08003aa5 	.word	0x08003aa5
			case 8:
				temAlarm = 0;
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <setOn+0x200>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
				break;
 8003a82:	e014      	b.n	8003aae <setOn+0x1ea>
			case 9:
				securityAlert = 0;
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <setOn+0x204>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
				break;
 8003a8a:	e010      	b.n	8003aae <setOn+0x1ea>
			case 10:
				securityAlarm = 0;
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <setOn+0x208>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
				break;
 8003a92:	e00c      	b.n	8003aae <setOn+0x1ea>
			case 11:
				break;
			case 12:
				break;
			case 15:
				newSceneTemAlarm = 0;
 8003a94:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <setOn+0x20c>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
				break;
 8003a9a:	e008      	b.n	8003aae <setOn+0x1ea>
			case 16:
				newScenesecurityAlarm = 0;
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <setOn+0x210>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
				break;
 8003aa2:	e004      	b.n	8003aae <setOn+0x1ea>
			case 17:
				newSceneSecurityAlert = 0;
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <setOn+0x214>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
				break;
 8003aaa:	e000      	b.n	8003aae <setOn+0x1ea>
				break;
 8003aac:	bf00      	nop
		}
	}
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	0800da3c 	.word	0x0800da3c
 8003abc:	2000087c 	.word	0x2000087c
 8003ac0:	200007ac 	.word	0x200007ac
 8003ac4:	2000000c 	.word	0x2000000c
 8003ac8:	20000014 	.word	0x20000014
 8003acc:	20000010 	.word	0x20000010
 8003ad0:	2000001c 	.word	0x2000001c
 8003ad4:	20000020 	.word	0x20000020
 8003ad8:	20000024 	.word	0x20000024
 8003adc:	0800d9ac 	.word	0x0800d9ac

08003ae0 <setExactOn>:
void setExactOn(struct menuScreen* screen,int value){
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
	if(value == 1){
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d13d      	bne.n	8003b6c <setExactOn+0x8c>
			strcpy(screen->content,"<  on  >");
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	33ac      	adds	r3, #172	; 0xac
 8003af4:	493f      	ldr	r1, [pc, #252]	; (8003bf4 <setExactOn+0x114>)
 8003af6:	461a      	mov	r2, r3
 8003af8:	460b      	mov	r3, r1
 8003afa:	cb03      	ldmia	r3!, {r0, r1}
 8003afc:	6010      	str	r0, [r2, #0]
 8003afe:	6051      	str	r1, [r2, #4]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	7213      	strb	r3, [r2, #8]
			switch(screen->id){
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3b08      	subs	r3, #8
 8003b0a:	2b09      	cmp	r3, #9
 8003b0c:	d86c      	bhi.n	8003be8 <setExactOn+0x108>
 8003b0e:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <setExactOn+0x34>)
 8003b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b14:	08003b3d 	.word	0x08003b3d
 8003b18:	08003b45 	.word	0x08003b45
 8003b1c:	08003b4d 	.word	0x08003b4d
 8003b20:	08003be9 	.word	0x08003be9
 8003b24:	08003be9 	.word	0x08003be9
 8003b28:	08003be9 	.word	0x08003be9
 8003b2c:	08003be9 	.word	0x08003be9
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003b5d 	.word	0x08003b5d
 8003b38:	08003b65 	.word	0x08003b65
				case 8:
					temAlarm = 1;
 8003b3c:	4b2e      	ldr	r3, [pc, #184]	; (8003bf8 <setExactOn+0x118>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
					break;
 8003b42:	e051      	b.n	8003be8 <setExactOn+0x108>
				case 9:
					securityAlert = 1;
 8003b44:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <setExactOn+0x11c>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
					break;
 8003b4a:	e04d      	b.n	8003be8 <setExactOn+0x108>
				case 10:
					securityAlarm = 1;
 8003b4c:	4b2c      	ldr	r3, [pc, #176]	; (8003c00 <setExactOn+0x120>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
					break;
 8003b52:	e049      	b.n	8003be8 <setExactOn+0x108>
				case 15:
					newSceneTemAlarm = 1;
 8003b54:	4b2b      	ldr	r3, [pc, #172]	; (8003c04 <setExactOn+0x124>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
					break;
 8003b5a:	e045      	b.n	8003be8 <setExactOn+0x108>
				case 16:
					newScenesecurityAlarm = 1;
 8003b5c:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <setExactOn+0x128>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
					break;
 8003b62:	e041      	b.n	8003be8 <setExactOn+0x108>
				case 17:
					newSceneSecurityAlert = 1;
 8003b64:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <setExactOn+0x12c>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
					break;
 8003b6a:	e03d      	b.n	8003be8 <setExactOn+0x108>
			}
		}
		else{
			strcpy(screen->content,"<  off  >");
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	33ac      	adds	r3, #172	; 0xac
 8003b70:	4927      	ldr	r1, [pc, #156]	; (8003c10 <setExactOn+0x130>)
 8003b72:	461a      	mov	r2, r3
 8003b74:	460b      	mov	r3, r1
 8003b76:	cb03      	ldmia	r3!, {r0, r1}
 8003b78:	6010      	str	r0, [r2, #0]
 8003b7a:	6051      	str	r1, [r2, #4]
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	8113      	strh	r3, [r2, #8]
			switch(screen->id){
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3b08      	subs	r3, #8
 8003b86:	2b09      	cmp	r3, #9
 8003b88:	d82e      	bhi.n	8003be8 <setExactOn+0x108>
 8003b8a:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <setExactOn+0xb0>)
 8003b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b90:	08003bb9 	.word	0x08003bb9
 8003b94:	08003bc1 	.word	0x08003bc1
 8003b98:	08003bc9 	.word	0x08003bc9
 8003b9c:	08003be9 	.word	0x08003be9
 8003ba0:	08003be9 	.word	0x08003be9
 8003ba4:	08003be9 	.word	0x08003be9
 8003ba8:	08003be9 	.word	0x08003be9
 8003bac:	08003bd1 	.word	0x08003bd1
 8003bb0:	08003bd9 	.word	0x08003bd9
 8003bb4:	08003be1 	.word	0x08003be1
				case 8:
					temAlarm = 0;
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <setExactOn+0x118>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
					break;
 8003bbe:	e013      	b.n	8003be8 <setExactOn+0x108>
				case 9:
					securityAlert = 0;
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <setExactOn+0x11c>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
					break;
 8003bc6:	e00f      	b.n	8003be8 <setExactOn+0x108>
				case 10:
					securityAlarm = 0;
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <setExactOn+0x120>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
					break;
 8003bce:	e00b      	b.n	8003be8 <setExactOn+0x108>
				case 15:
					newSceneTemAlarm = 0;
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <setExactOn+0x124>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
					break;
 8003bd6:	e007      	b.n	8003be8 <setExactOn+0x108>
				case 16:
					newScenesecurityAlarm = 0;
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <setExactOn+0x128>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
					break;
 8003bde:	e003      	b.n	8003be8 <setExactOn+0x108>
				case 17:
					newSceneSecurityAlert = 0;
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <setExactOn+0x12c>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
					break;
 8003be6:	bf00      	nop
			}
		}
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	0800da3c 	.word	0x0800da3c
 8003bf8:	2000000c 	.word	0x2000000c
 8003bfc:	20000014 	.word	0x20000014
 8003c00:	20000010 	.word	0x20000010
 8003c04:	2000001c 	.word	0x2000001c
 8003c08:	20000020 	.word	0x20000020
 8003c0c:	20000024 	.word	0x20000024
 8003c10:	0800d9ac 	.word	0x0800d9ac

08003c14 <setThreshold>:
void setThreshold(struct menuScreen* screen, int increase, int temperId){
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
	if(temperId == 0){
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d11a      	bne.n	8003c5c <setThreshold+0x48>
		if(increase && temThreshold > 0)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d009      	beq.n	8003c40 <setThreshold+0x2c>
 8003c2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ca0 <setThreshold+0x8c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	dd05      	ble.n	8003c40 <setThreshold+0x2c>
			temThreshold++;
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <setThreshold+0x8c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	4a19      	ldr	r2, [pc, #100]	; (8003ca0 <setThreshold+0x8c>)
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e004      	b.n	8003c4a <setThreshold+0x36>
		else
			temThreshold--;
 8003c40:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <setThreshold+0x8c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <setThreshold+0x8c>)
 8003c48:	6013      	str	r3, [r2, #0]

	    sprintf(screen->content,"<  %d  >", temThreshold);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	33ac      	adds	r3, #172	; 0xac
 8003c4e:	4a14      	ldr	r2, [pc, #80]	; (8003ca0 <setThreshold+0x8c>)
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	4914      	ldr	r1, [pc, #80]	; (8003ca4 <setThreshold+0x90>)
 8003c54:	4618      	mov	r0, r3
 8003c56:	f007 ff79 	bl	800bb4c <siprintf>
			newSceneTemThreshold--;
	    sprintf(screen->content,"<  %d  >", newSceneTemThreshold);

	}

}
 8003c5a:	e01c      	b.n	8003c96 <setThreshold+0x82>
	else if(temperId == 1){
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d119      	bne.n	8003c96 <setThreshold+0x82>
		if(increase && newSceneTemThreshold > 0)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d009      	beq.n	8003c7c <setThreshold+0x68>
 8003c68:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <setThreshold+0x94>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	dd05      	ble.n	8003c7c <setThreshold+0x68>
			newSceneTemThreshold++;
 8003c70:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <setThreshold+0x94>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <setThreshold+0x94>)
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e004      	b.n	8003c86 <setThreshold+0x72>
			newSceneTemThreshold--;
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <setThreshold+0x94>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <setThreshold+0x94>)
 8003c84:	6013      	str	r3, [r2, #0]
	    sprintf(screen->content,"<  %d  >", newSceneTemThreshold);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	33ac      	adds	r3, #172	; 0xac
 8003c8a:	4a07      	ldr	r2, [pc, #28]	; (8003ca8 <setThreshold+0x94>)
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	4905      	ldr	r1, [pc, #20]	; (8003ca4 <setThreshold+0x90>)
 8003c90:	4618      	mov	r0, r3
 8003c92:	f007 ff5b 	bl	800bb4c <siprintf>
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000008 	.word	0x20000008
 8003ca4:	0800da48 	.word	0x0800da48
 8003ca8:	20000018 	.word	0x20000018

08003cac <setExcactThreshold>:
void setExcactThreshold(struct menuScreen* screen, int threshold){
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
	temThreshold = threshold;
 8003cb6:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <setExcactThreshold+0x28>)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	6013      	str	r3, [r2, #0]
    sprintf(screen->content,"<  %d  >", temThreshold);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	33ac      	adds	r3, #172	; 0xac
 8003cc0:	4a04      	ldr	r2, [pc, #16]	; (8003cd4 <setExcactThreshold+0x28>)
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	4904      	ldr	r1, [pc, #16]	; (8003cd8 <setExcactThreshold+0x2c>)
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f007 ff40 	bl	800bb4c <siprintf>
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000008 	.word	0x20000008
 8003cd8:	0800da48 	.word	0x0800da48

08003cdc <setLigthToggle>:
void setLigthToggle(struct menuScreen* screen, int index,int* lights){
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
	lights[index] = 1 - lights[index];
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	4413      	add	r3, r2
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	440b      	add	r3, r1
 8003cfa:	f1c2 0201 	rsb	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
	if(lights[index] == 1)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4413      	add	r3, r2
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d109      	bne.n	8003d22 <setLigthToggle+0x46>
		screen->content[index * 3] = 'O';
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	4613      	mov	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4413      	add	r3, r2
 8003d1a:	224f      	movs	r2, #79	; 0x4f
 8003d1c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003d20:	e008      	b.n	8003d34 <setLigthToggle+0x58>
	else
		screen->content[index * 3] = 'X';
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	4613      	mov	r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	4413      	add	r3, r2
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	2258      	movs	r2, #88	; 0x58
 8003d30:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
if(screen->id != 18){
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b12      	cmp	r3, #18
 8003d3a:	d025      	beq.n	8003d88 <setLigthToggle+0xac>
	switch(index){
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d823      	bhi.n	8003d8a <setLigthToggle+0xae>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <setLigthToggle+0x6c>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d59 	.word	0x08003d59
 8003d4c:	08003d65 	.word	0x08003d65
 8003d50:	08003d71 	.word	0x08003d71
 8003d54:	08003d7d 	.word	0x08003d7d
		case 0:HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8003d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d5c:	480d      	ldr	r0, [pc, #52]	; (8003d94 <setLigthToggle+0xb8>)
 8003d5e:	f003 fcdb 	bl	8007718 <HAL_GPIO_TogglePin>
			break;
 8003d62:	e012      	b.n	8003d8a <setLigthToggle+0xae>
		case 1:HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8003d64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d68:	480a      	ldr	r0, [pc, #40]	; (8003d94 <setLigthToggle+0xb8>)
 8003d6a:	f003 fcd5 	bl	8007718 <HAL_GPIO_TogglePin>
			break;
 8003d6e:	e00c      	b.n	8003d8a <setLigthToggle+0xae>
		case 2:HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8003d70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d74:	4807      	ldr	r0, [pc, #28]	; (8003d94 <setLigthToggle+0xb8>)
 8003d76:	f003 fccf 	bl	8007718 <HAL_GPIO_TogglePin>
			break;
 8003d7a:	e006      	b.n	8003d8a <setLigthToggle+0xae>
		case 3:HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8003d7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d80:	4804      	ldr	r0, [pc, #16]	; (8003d94 <setLigthToggle+0xb8>)
 8003d82:	f003 fcc9 	bl	8007718 <HAL_GPIO_TogglePin>
			break;
 8003d86:	e000      	b.n	8003d8a <setLigthToggle+0xae>
	}
}
 8003d88:	bf00      	nop

}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	48000400 	.word	0x48000400

08003d98 <setExactLight>:
void setExactLight(struct menuScreen* screen, int index,int value){
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
	Lights[index] = value;
 8003da4:	4929      	ldr	r1, [pc, #164]	; (8003e4c <setExactLight+0xb4>)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(Lights[index] == 1)
 8003dae:	4a27      	ldr	r2, [pc, #156]	; (8003e4c <setExactLight+0xb4>)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d109      	bne.n	8003dce <setExactLight+0x36>
			screen->content[index * 3] = 'O';
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	4413      	add	r3, r2
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	224f      	movs	r2, #79	; 0x4f
 8003dc8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003dcc:	e008      	b.n	8003de0 <setExactLight+0x48>
		else
			screen->content[index * 3] = 'X';
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4413      	add	r3, r2
 8003dda:	2258      	movs	r2, #88	; 0x58
 8003ddc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	switch(index){
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d82e      	bhi.n	8003e44 <setExactLight+0xac>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <setExactLight+0x54>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003dfd 	.word	0x08003dfd
 8003df0:	08003e0f 	.word	0x08003e0f
 8003df4:	08003e21 	.word	0x08003e21
 8003df8:	08003e33 	.word	0x08003e33
		case 0:HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,value);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e06:	4812      	ldr	r0, [pc, #72]	; (8003e50 <setExactLight+0xb8>)
 8003e08:	f003 fc6e 	bl	80076e8 <HAL_GPIO_WritePin>
			break;
 8003e0c:	e01a      	b.n	8003e44 <setExactLight+0xac>
		case 1:HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,value);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e18:	480d      	ldr	r0, [pc, #52]	; (8003e50 <setExactLight+0xb8>)
 8003e1a:	f003 fc65 	bl	80076e8 <HAL_GPIO_WritePin>
			break;
 8003e1e:	e011      	b.n	8003e44 <setExactLight+0xac>
		case 2:HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,value);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	461a      	mov	r2, r3
 8003e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e2a:	4809      	ldr	r0, [pc, #36]	; (8003e50 <setExactLight+0xb8>)
 8003e2c:	f003 fc5c 	bl	80076e8 <HAL_GPIO_WritePin>
			break;
 8003e30:	e008      	b.n	8003e44 <setExactLight+0xac>
		case 3:HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,value);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	461a      	mov	r2, r3
 8003e38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e3c:	4804      	ldr	r0, [pc, #16]	; (8003e50 <setExactLight+0xb8>)
 8003e3e:	f003 fc53 	bl	80076e8 <HAL_GPIO_WritePin>
			break;
 8003e42:	bf00      	nop
	}

}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	2000079c 	.word	0x2000079c
 8003e50:	48000400 	.word	0x48000400

08003e54 <setScenario>:
void setScenario(int temperatureThreshold, int temperatureAlarm,int secAlarm, int secAlert, int l1,int l2, int l3, int l4){
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
	// calling previous functions
	setExcactThreshold(&(node7->screen),temperatureThreshold);
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <setScenario+0x90>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3324      	adds	r3, #36	; 0x24
 8003e68:	68f9      	ldr	r1, [r7, #12]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff ff1e 	bl	8003cac <setExcactThreshold>
	setExactLight(&(node4->screen),0,l1);
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <setScenario+0x94>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3324      	adds	r3, #36	; 0x24
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ff8c 	bl	8003d98 <setExactLight>
	setExactLight(&(node4->screen),1,l2);
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <setScenario+0x94>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3324      	adds	r3, #36	; 0x24
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff ff84 	bl	8003d98 <setExactLight>
	setExactLight(&(node4->screen),2,l3);
 8003e90:	4b15      	ldr	r3, [pc, #84]	; (8003ee8 <setScenario+0x94>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3324      	adds	r3, #36	; 0x24
 8003e96:	6a3a      	ldr	r2, [r7, #32]
 8003e98:	2102      	movs	r1, #2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff ff7c 	bl	8003d98 <setExactLight>
	setExactLight(&(node4->screen),3,l4);
 8003ea0:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <setScenario+0x94>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3324      	adds	r3, #36	; 0x24
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea8:	2103      	movs	r1, #3
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff ff74 	bl	8003d98 <setExactLight>
	setExactOn(&(node8->screen),temperatureAlarm);
 8003eb0:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <setScenario+0x98>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3324      	adds	r3, #36	; 0x24
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fe11 	bl	8003ae0 <setExactOn>
	setExactOn(&(node10->screen),secAlarm);
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <setScenario+0x9c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3324      	adds	r3, #36	; 0x24
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fe0a 	bl	8003ae0 <setExactOn>
	setExactOn(&(node9->screen),secAlert);
 8003ecc:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <setScenario+0xa0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3324      	adds	r3, #36	; 0x24
 8003ed2:	6839      	ldr	r1, [r7, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fe03 	bl	8003ae0 <setExactOn>
}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	200008ac 	.word	0x200008ac
 8003ee8:	200008a0 	.word	0x200008a0
 8003eec:	200008b0 	.word	0x200008b0
 8003ef0:	200008b8 	.word	0x200008b8
 8003ef4:	200008b4 	.word	0x200008b4

08003ef8 <charSelector>:
char* charSelector(int key, int count) {
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
    switch (key) {
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	2b0d      	cmp	r3, #13
 8003f08:	f200 810f 	bhi.w	800412a <charSelector+0x232>
 8003f0c:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <charSelector+0x1c>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f4d 	.word	0x08003f4d
 8003f18:	08003f75 	.word	0x08003f75
 8003f1c:	08003fa5 	.word	0x08003fa5
 8003f20:	0800412b 	.word	0x0800412b
 8003f24:	08003fd5 	.word	0x08003fd5
 8003f28:	08004005 	.word	0x08004005
 8003f2c:	08004035 	.word	0x08004035
 8003f30:	0800412b 	.word	0x0800412b
 8003f34:	08004065 	.word	0x08004065
 8003f38:	0800409d 	.word	0x0800409d
 8003f3c:	080040cd 	.word	0x080040cd
 8003f40:	0800412b 	.word	0x0800412b
 8003f44:	0800412b 	.word	0x0800412b
 8003f48:	08004105 	.word	0x08004105
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d00e      	beq.n	8003f70 <charSelector+0x78>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	f300 80d7 	bgt.w	8004108 <charSelector+0x210>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d003      	beq.n	8003f68 <charSelector+0x70>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d002      	beq.n	8003f6c <charSelector+0x74>
                case 2:
                    return "1";
                case 3:
                    return " ";
            }
            break;
 8003f66:	e0cf      	b.n	8004108 <charSelector+0x210>
                    return "0";
 8003f68:	4b73      	ldr	r3, [pc, #460]	; (8004138 <charSelector+0x240>)
 8003f6a:	e0df      	b.n	800412c <charSelector+0x234>
                    return "1";
 8003f6c:	4b73      	ldr	r3, [pc, #460]	; (800413c <charSelector+0x244>)
 8003f6e:	e0dd      	b.n	800412c <charSelector+0x234>
                    return " ";
 8003f70:	4b73      	ldr	r3, [pc, #460]	; (8004140 <charSelector+0x248>)
 8003f72:	e0db      	b.n	800412c <charSelector+0x234>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	f200 80c7 	bhi.w	800410c <charSelector+0x214>
 8003f7e:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <charSelector+0x8c>)
 8003f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f84:	08003f95 	.word	0x08003f95
 8003f88:	08003f99 	.word	0x08003f99
 8003f8c:	08003f9d 	.word	0x08003f9d
 8003f90:	08003fa1 	.word	0x08003fa1
        case 2:
            switch (count) {
                case 1:
                    return "2";
 8003f94:	4b6b      	ldr	r3, [pc, #428]	; (8004144 <charSelector+0x24c>)
 8003f96:	e0c9      	b.n	800412c <charSelector+0x234>
                case 2:
                    return "a";
 8003f98:	4b6b      	ldr	r3, [pc, #428]	; (8004148 <charSelector+0x250>)
 8003f9a:	e0c7      	b.n	800412c <charSelector+0x234>
                case 3:
                    return "b";
 8003f9c:	4b6b      	ldr	r3, [pc, #428]	; (800414c <charSelector+0x254>)
 8003f9e:	e0c5      	b.n	800412c <charSelector+0x234>
                case 4:
                    return "c";
 8003fa0:	4b6b      	ldr	r3, [pc, #428]	; (8004150 <charSelector+0x258>)
 8003fa2:	e0c3      	b.n	800412c <charSelector+0x234>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	f200 80b1 	bhi.w	8004110 <charSelector+0x218>
 8003fae:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <charSelector+0xbc>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	08003fc5 	.word	0x08003fc5
 8003fb8:	08003fc9 	.word	0x08003fc9
 8003fbc:	08003fcd 	.word	0x08003fcd
 8003fc0:	08003fd1 	.word	0x08003fd1
            }
            break;
        case 3:
            switch (count) {
                case 1:
                    return "3";
 8003fc4:	4b63      	ldr	r3, [pc, #396]	; (8004154 <charSelector+0x25c>)
 8003fc6:	e0b1      	b.n	800412c <charSelector+0x234>
                case 2:
                    return "d";
 8003fc8:	4b63      	ldr	r3, [pc, #396]	; (8004158 <charSelector+0x260>)
 8003fca:	e0af      	b.n	800412c <charSelector+0x234>
                case 3:
                    return "e";
 8003fcc:	4b63      	ldr	r3, [pc, #396]	; (800415c <charSelector+0x264>)
 8003fce:	e0ad      	b.n	800412c <charSelector+0x234>
                case 4:
                    return "f";
 8003fd0:	4b63      	ldr	r3, [pc, #396]	; (8004160 <charSelector+0x268>)
 8003fd2:	e0ab      	b.n	800412c <charSelector+0x234>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	f200 809b 	bhi.w	8004114 <charSelector+0x21c>
 8003fde:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <charSelector+0xec>)
 8003fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe4:	08003ff5 	.word	0x08003ff5
 8003fe8:	08003ff9 	.word	0x08003ff9
 8003fec:	08003ffd 	.word	0x08003ffd
 8003ff0:	08004001 	.word	0x08004001
            }
            break;
        case 5:
            switch (count) {
                case 1:
                    return "4";
 8003ff4:	4b5b      	ldr	r3, [pc, #364]	; (8004164 <charSelector+0x26c>)
 8003ff6:	e099      	b.n	800412c <charSelector+0x234>
                case 2:
                    return "g";
 8003ff8:	4b5b      	ldr	r3, [pc, #364]	; (8004168 <charSelector+0x270>)
 8003ffa:	e097      	b.n	800412c <charSelector+0x234>
                case 3:
                    return "h";
 8003ffc:	4b5b      	ldr	r3, [pc, #364]	; (800416c <charSelector+0x274>)
 8003ffe:	e095      	b.n	800412c <charSelector+0x234>
                case 4:
                    return "i";
 8004000:	4b5b      	ldr	r3, [pc, #364]	; (8004170 <charSelector+0x278>)
 8004002:	e093      	b.n	800412c <charSelector+0x234>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	3b01      	subs	r3, #1
 8004008:	2b03      	cmp	r3, #3
 800400a:	f200 8085 	bhi.w	8004118 <charSelector+0x220>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <charSelector+0x11c>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	08004025 	.word	0x08004025
 8004018:	08004029 	.word	0x08004029
 800401c:	0800402d 	.word	0x0800402d
 8004020:	08004031 	.word	0x08004031
            }
            break;
        case 6:
            switch (count) {
                case 1:
                    return "5";
 8004024:	4b53      	ldr	r3, [pc, #332]	; (8004174 <charSelector+0x27c>)
 8004026:	e081      	b.n	800412c <charSelector+0x234>
                case 2:
                    return "j";
 8004028:	4b53      	ldr	r3, [pc, #332]	; (8004178 <charSelector+0x280>)
 800402a:	e07f      	b.n	800412c <charSelector+0x234>
                case 3:
                    return "k";
 800402c:	4b53      	ldr	r3, [pc, #332]	; (800417c <charSelector+0x284>)
 800402e:	e07d      	b.n	800412c <charSelector+0x234>
                case 4:
                    return "l";
 8004030:	4b53      	ldr	r3, [pc, #332]	; (8004180 <charSelector+0x288>)
 8004032:	e07b      	b.n	800412c <charSelector+0x234>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	3b01      	subs	r3, #1
 8004038:	2b03      	cmp	r3, #3
 800403a:	d86f      	bhi.n	800411c <charSelector+0x224>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <charSelector+0x14c>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004055 	.word	0x08004055
 8004048:	08004059 	.word	0x08004059
 800404c:	0800405d 	.word	0x0800405d
 8004050:	08004061 	.word	0x08004061
            }
            break;
        case 7:
            switch (count) {
                case 1:
                    return "6";
 8004054:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <charSelector+0x28c>)
 8004056:	e069      	b.n	800412c <charSelector+0x234>
                case 2:
                    return "m";
 8004058:	4b4b      	ldr	r3, [pc, #300]	; (8004188 <charSelector+0x290>)
 800405a:	e067      	b.n	800412c <charSelector+0x234>
                case 3:
                    return "n";
 800405c:	4b4b      	ldr	r3, [pc, #300]	; (800418c <charSelector+0x294>)
 800405e:	e065      	b.n	800412c <charSelector+0x234>
                case 4:
                    return "o";
 8004060:	4b4b      	ldr	r3, [pc, #300]	; (8004190 <charSelector+0x298>)
 8004062:	e063      	b.n	800412c <charSelector+0x234>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	3b01      	subs	r3, #1
 8004068:	2b04      	cmp	r3, #4
 800406a:	d859      	bhi.n	8004120 <charSelector+0x228>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <charSelector+0x17c>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004089 	.word	0x08004089
 8004078:	0800408d 	.word	0x0800408d
 800407c:	08004091 	.word	0x08004091
 8004080:	08004095 	.word	0x08004095
 8004084:	08004099 	.word	0x08004099
            }
            break;
        case 9:
            switch (count) {
                case 1:
                    return "7";
 8004088:	4b42      	ldr	r3, [pc, #264]	; (8004194 <charSelector+0x29c>)
 800408a:	e04f      	b.n	800412c <charSelector+0x234>
                case 2:
                    return "p";
 800408c:	4b42      	ldr	r3, [pc, #264]	; (8004198 <charSelector+0x2a0>)
 800408e:	e04d      	b.n	800412c <charSelector+0x234>
                case 3:
                    return "q";
 8004090:	4b42      	ldr	r3, [pc, #264]	; (800419c <charSelector+0x2a4>)
 8004092:	e04b      	b.n	800412c <charSelector+0x234>
                case 4:
                    return "r";
 8004094:	4b42      	ldr	r3, [pc, #264]	; (80041a0 <charSelector+0x2a8>)
 8004096:	e049      	b.n	800412c <charSelector+0x234>
                case 5:
                    return "s";
 8004098:	4b42      	ldr	r3, [pc, #264]	; (80041a4 <charSelector+0x2ac>)
 800409a:	e047      	b.n	800412c <charSelector+0x234>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	3b01      	subs	r3, #1
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d83f      	bhi.n	8004124 <charSelector+0x22c>
 80040a4:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <charSelector+0x1b4>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	080040bd 	.word	0x080040bd
 80040b0:	080040c1 	.word	0x080040c1
 80040b4:	080040c5 	.word	0x080040c5
 80040b8:	080040c9 	.word	0x080040c9
            }
            break;
        case 10:
            switch (count) {
                case 1:
                    return "8";
 80040bc:	4b3a      	ldr	r3, [pc, #232]	; (80041a8 <charSelector+0x2b0>)
 80040be:	e035      	b.n	800412c <charSelector+0x234>
                case 2:
                    return "t";
 80040c0:	4b3a      	ldr	r3, [pc, #232]	; (80041ac <charSelector+0x2b4>)
 80040c2:	e033      	b.n	800412c <charSelector+0x234>
                case 3:
                    return "u";
 80040c4:	4b3a      	ldr	r3, [pc, #232]	; (80041b0 <charSelector+0x2b8>)
 80040c6:	e031      	b.n	800412c <charSelector+0x234>
                case 4:
                    return "v";
 80040c8:	4b3a      	ldr	r3, [pc, #232]	; (80041b4 <charSelector+0x2bc>)
 80040ca:	e02f      	b.n	800412c <charSelector+0x234>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d829      	bhi.n	8004128 <charSelector+0x230>
 80040d4:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <charSelector+0x1e4>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	080040f1 	.word	0x080040f1
 80040e0:	080040f5 	.word	0x080040f5
 80040e4:	080040f9 	.word	0x080040f9
 80040e8:	080040fd 	.word	0x080040fd
 80040ec:	08004101 	.word	0x08004101
            }
            break;
        case 11:
            switch (count) {
                case 1:
                    return "9";
 80040f0:	4b31      	ldr	r3, [pc, #196]	; (80041b8 <charSelector+0x2c0>)
 80040f2:	e01b      	b.n	800412c <charSelector+0x234>
                case 2:
                    return "w";
 80040f4:	4b31      	ldr	r3, [pc, #196]	; (80041bc <charSelector+0x2c4>)
 80040f6:	e019      	b.n	800412c <charSelector+0x234>
                case 3:
                    return "x";
 80040f8:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <charSelector+0x2c8>)
 80040fa:	e017      	b.n	800412c <charSelector+0x234>
                case 4:
                    return "y";
 80040fc:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <charSelector+0x2cc>)
 80040fe:	e015      	b.n	800412c <charSelector+0x234>
                case 5:
                    return "z";
 8004100:	4b31      	ldr	r3, [pc, #196]	; (80041c8 <charSelector+0x2d0>)
 8004102:	e013      	b.n	800412c <charSelector+0x234>
            }
            break;
        case 14:
            return "dell";
 8004104:	4b31      	ldr	r3, [pc, #196]	; (80041cc <charSelector+0x2d4>)
 8004106:	e011      	b.n	800412c <charSelector+0x234>
            break;
 8004108:	bf00      	nop
 800410a:	e00e      	b.n	800412a <charSelector+0x232>
            break;
 800410c:	bf00      	nop
 800410e:	e00c      	b.n	800412a <charSelector+0x232>
            break;
 8004110:	bf00      	nop
 8004112:	e00a      	b.n	800412a <charSelector+0x232>
            break;
 8004114:	bf00      	nop
 8004116:	e008      	b.n	800412a <charSelector+0x232>
            break;
 8004118:	bf00      	nop
 800411a:	e006      	b.n	800412a <charSelector+0x232>
            break;
 800411c:	bf00      	nop
 800411e:	e004      	b.n	800412a <charSelector+0x232>
            break;
 8004120:	bf00      	nop
 8004122:	e002      	b.n	800412a <charSelector+0x232>
            break;
 8004124:	bf00      	nop
 8004126:	e000      	b.n	800412a <charSelector+0x232>
            break;
 8004128:	bf00      	nop
    }

    return "null";
 800412a:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <charSelector+0x2d8>)
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	0800da54 	.word	0x0800da54
 800413c:	0800da58 	.word	0x0800da58
 8004140:	0800da5c 	.word	0x0800da5c
 8004144:	0800da60 	.word	0x0800da60
 8004148:	0800da64 	.word	0x0800da64
 800414c:	0800da68 	.word	0x0800da68
 8004150:	0800da6c 	.word	0x0800da6c
 8004154:	0800da70 	.word	0x0800da70
 8004158:	0800da74 	.word	0x0800da74
 800415c:	0800da78 	.word	0x0800da78
 8004160:	0800da7c 	.word	0x0800da7c
 8004164:	0800da80 	.word	0x0800da80
 8004168:	0800da84 	.word	0x0800da84
 800416c:	0800da88 	.word	0x0800da88
 8004170:	0800da8c 	.word	0x0800da8c
 8004174:	0800da90 	.word	0x0800da90
 8004178:	0800da94 	.word	0x0800da94
 800417c:	0800da98 	.word	0x0800da98
 8004180:	0800da9c 	.word	0x0800da9c
 8004184:	0800daa0 	.word	0x0800daa0
 8004188:	0800daa4 	.word	0x0800daa4
 800418c:	0800daa8 	.word	0x0800daa8
 8004190:	0800daac 	.word	0x0800daac
 8004194:	0800dab0 	.word	0x0800dab0
 8004198:	0800dab4 	.word	0x0800dab4
 800419c:	0800dab8 	.word	0x0800dab8
 80041a0:	0800dabc 	.word	0x0800dabc
 80041a4:	0800dac0 	.word	0x0800dac0
 80041a8:	0800dac4 	.word	0x0800dac4
 80041ac:	0800dac8 	.word	0x0800dac8
 80041b0:	0800dacc 	.word	0x0800dacc
 80041b4:	0800dad0 	.word	0x0800dad0
 80041b8:	0800dad4 	.word	0x0800dad4
 80041bc:	0800dad8 	.word	0x0800dad8
 80041c0:	0800dadc 	.word	0x0800dadc
 80041c4:	0800dae0 	.word	0x0800dae0
 80041c8:	0800dae4 	.word	0x0800dae4
 80041cc:	0800da34 	.word	0x0800da34
 80041d0:	0800da2c 	.word	0x0800da2c

080041d4 <stateCountsForEachKey>:
int stateCountsForEachKey(int key){
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
		switch(key){
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	2b0a      	cmp	r3, #10
 80041e2:	d82b      	bhi.n	800423c <stateCountsForEachKey+0x68>
 80041e4:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <stateCountsForEachKey+0x18>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	08004219 	.word	0x08004219
 80041f0:	0800421d 	.word	0x0800421d
 80041f4:	08004221 	.word	0x08004221
 80041f8:	0800423d 	.word	0x0800423d
 80041fc:	08004225 	.word	0x08004225
 8004200:	08004229 	.word	0x08004229
 8004204:	0800422d 	.word	0x0800422d
 8004208:	0800423d 	.word	0x0800423d
 800420c:	08004231 	.word	0x08004231
 8004210:	08004235 	.word	0x08004235
 8004214:	08004239 	.word	0x08004239
		case 1:
			return 3;
 8004218:	2303      	movs	r3, #3
 800421a:	e010      	b.n	800423e <stateCountsForEachKey+0x6a>
		case 2:
			return 4;
 800421c:	2304      	movs	r3, #4
 800421e:	e00e      	b.n	800423e <stateCountsForEachKey+0x6a>
		case 3:
			return 4;
 8004220:	2304      	movs	r3, #4
 8004222:	e00c      	b.n	800423e <stateCountsForEachKey+0x6a>
		case 5:
			return 4;
 8004224:	2304      	movs	r3, #4
 8004226:	e00a      	b.n	800423e <stateCountsForEachKey+0x6a>
		case 6:
			return 4;
 8004228:	2304      	movs	r3, #4
 800422a:	e008      	b.n	800423e <stateCountsForEachKey+0x6a>
		case 7:
			return 4;
 800422c:	2304      	movs	r3, #4
 800422e:	e006      	b.n	800423e <stateCountsForEachKey+0x6a>
		case 9:
			return 5;
 8004230:	2305      	movs	r3, #5
 8004232:	e004      	b.n	800423e <stateCountsForEachKey+0x6a>
		case 10:
			return 4;
 8004234:	2304      	movs	r3, #4
 8004236:	e002      	b.n	800423e <stateCountsForEachKey+0x6a>
		case 11:
			return 5;
 8004238:	2305      	movs	r3, #5
 800423a:	e000      	b.n	800423e <stateCountsForEachKey+0x6a>

	}
		return 0;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop

0800424c <nextCurrentNode>:
void nextCurrentNode(){
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
	switch(CurrentMenuOption){
 8004250:	4b26      	ldr	r3, [pc, #152]	; (80042ec <nextCurrentNode+0xa0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b07      	cmp	r3, #7
 8004256:	d843      	bhi.n	80042e0 <nextCurrentNode+0x94>
 8004258:	a201      	add	r2, pc, #4	; (adr r2, 8004260 <nextCurrentNode+0x14>)
 800425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425e:	bf00      	nop
 8004260:	08004281 	.word	0x08004281
 8004264:	0800428d 	.word	0x0800428d
 8004268:	08004299 	.word	0x08004299
 800426c:	080042a5 	.word	0x080042a5
 8004270:	080042b1 	.word	0x080042b1
 8004274:	080042bd 	.word	0x080042bd
 8004278:	080042c9 	.word	0x080042c9
 800427c:	080042d5 	.word	0x080042d5
		case 0:
			currentNode = currentNode->child1;
 8004280:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <nextCurrentNode+0xa4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1a      	ldr	r2, [pc, #104]	; (80042f0 <nextCurrentNode+0xa4>)
 8004288:	6013      	str	r3, [r2, #0]
			break;
 800428a:	e029      	b.n	80042e0 <nextCurrentNode+0x94>
		case 1:
			currentNode = currentNode->child2;
 800428c:	4b18      	ldr	r3, [pc, #96]	; (80042f0 <nextCurrentNode+0xa4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <nextCurrentNode+0xa4>)
 8004294:	6013      	str	r3, [r2, #0]
			break;
 8004296:	e023      	b.n	80042e0 <nextCurrentNode+0x94>
		case 2:
			currentNode = currentNode->child3;
 8004298:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <nextCurrentNode+0xa4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <nextCurrentNode+0xa4>)
 80042a0:	6013      	str	r3, [r2, #0]
			break;
 80042a2:	e01d      	b.n	80042e0 <nextCurrentNode+0x94>
		case 3:
			currentNode = currentNode->child4;
 80042a4:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <nextCurrentNode+0xa4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	4a11      	ldr	r2, [pc, #68]	; (80042f0 <nextCurrentNode+0xa4>)
 80042ac:	6013      	str	r3, [r2, #0]
			break;
 80042ae:	e017      	b.n	80042e0 <nextCurrentNode+0x94>
		case 4:
			currentNode = currentNode->child5;
 80042b0:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <nextCurrentNode+0xa4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	4a0e      	ldr	r2, [pc, #56]	; (80042f0 <nextCurrentNode+0xa4>)
 80042b8:	6013      	str	r3, [r2, #0]
			break;
 80042ba:	e011      	b.n	80042e0 <nextCurrentNode+0x94>
		case 5:
			currentNode = currentNode->child6;
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <nextCurrentNode+0xa4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	4a0b      	ldr	r2, [pc, #44]	; (80042f0 <nextCurrentNode+0xa4>)
 80042c4:	6013      	str	r3, [r2, #0]
			break;
 80042c6:	e00b      	b.n	80042e0 <nextCurrentNode+0x94>
		case 6:
			currentNode = currentNode->child7;
 80042c8:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <nextCurrentNode+0xa4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	4a08      	ldr	r2, [pc, #32]	; (80042f0 <nextCurrentNode+0xa4>)
 80042d0:	6013      	str	r3, [r2, #0]
			break;
 80042d2:	e005      	b.n	80042e0 <nextCurrentNode+0x94>
		case 7:
			currentNode = currentNode->child8;
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <nextCurrentNode+0xa4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	4a05      	ldr	r2, [pc, #20]	; (80042f0 <nextCurrentNode+0xa4>)
 80042dc:	6013      	str	r3, [r2, #0]
			break;
 80042de:	bf00      	nop
	}
}
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000860 	.word	0x20000860
 80042f0:	200008e4 	.word	0x200008e4

080042f4 <keyHandler>:
	print("                   ");
	display();
}


void keyHandler(){
 80042f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042f8:	b0c2      	sub	sp, #264	; 0x108
 80042fa:	af40      	add	r7, sp, #256	; 0x100
	int key = row * 4 + col +1;
 80042fc:	4b8a      	ldr	r3, [pc, #552]	; (8004528 <keyHandler+0x234>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	009a      	lsls	r2, r3, #2
 8004302:	4b8a      	ldr	r3, [pc, #552]	; (800452c <keyHandler+0x238>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4413      	add	r3, r2
 8004308:	3301      	adds	r3, #1
 800430a:	607b      	str	r3, [r7, #4]
	if(startState == 2){
 800430c:	4b88      	ldr	r3, [pc, #544]	; (8004530 <keyHandler+0x23c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b02      	cmp	r3, #2
 8004312:	f040 83c7 	bne.w	8004aa4 <keyHandler+0x7b0>
		if(HAL_GetTick()- lastPress<300 ) return;
 8004316:	f001 fb71 	bl	80059fc <HAL_GetTick>
 800431a:	4603      	mov	r3, r0
 800431c:	2200      	movs	r2, #0
 800431e:	4698      	mov	r8, r3
 8004320:	4691      	mov	r9, r2
 8004322:	4b84      	ldr	r3, [pc, #528]	; (8004534 <keyHandler+0x240>)
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	ebb8 0402 	subs.w	r4, r8, r2
 800432c:	eb69 0503 	sbc.w	r5, r9, r3
 8004330:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 8004334:	f175 0300 	sbcs.w	r3, r5, #0
 8004338:	f0c0 83d6 	bcc.w	8004ae8 <keyHandler+0x7f4>
		if(!generateMenu){
 800433c:	4b7e      	ldr	r3, [pc, #504]	; (8004538 <keyHandler+0x244>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d104      	bne.n	800434e <keyHandler+0x5a>
			GenerateMenu();
 8004344:	f7fd ff00 	bl	8002148 <GenerateMenu>
			generateMenu = 1;
 8004348:	4b7b      	ldr	r3, [pc, #492]	; (8004538 <keyHandler+0x244>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]
		}

		if(currentNode->screen.id == 19){
 800434e:	4b7b      	ldr	r3, [pc, #492]	; (800453c <keyHandler+0x248>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	2b13      	cmp	r3, #19
 8004356:	d102      	bne.n	800435e <keyHandler+0x6a>
			createScenario();
 8004358:	f7fe fe2e 	bl	8002fb8 <createScenario>
 800435c:	e045      	b.n	80043ea <keyHandler+0xf6>
		}
		else if(currentNode->screen.id == 6){
 800435e:	4b77      	ldr	r3, [pc, #476]	; (800453c <keyHandler+0x248>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	2b06      	cmp	r3, #6
 8004366:	d140      	bne.n	80043ea <keyHandler+0xf6>
			if(key != lastKeyPressed){
 8004368:	4b75      	ldr	r3, [pc, #468]	; (8004540 <keyHandler+0x24c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	429a      	cmp	r2, r3
 8004370:	d009      	beq.n	8004386 <keyHandler+0x92>
				lastKeyPressed = key;
 8004372:	4a73      	ldr	r2, [pc, #460]	; (8004540 <keyHandler+0x24c>)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6013      	str	r3, [r2, #0]
				typingCount = 1;
 8004378:	4b72      	ldr	r3, [pc, #456]	; (8004544 <keyHandler+0x250>)
 800437a:	2201      	movs	r2, #1
 800437c:	601a      	str	r2, [r3, #0]
				sameKeyPressed = 0;
 800437e:	4b72      	ldr	r3, [pc, #456]	; (8004548 <keyHandler+0x254>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e015      	b.n	80043b2 <keyHandler+0xbe>
			}
			else{
				sameKeyPressed = 1;
 8004386:	4b70      	ldr	r3, [pc, #448]	; (8004548 <keyHandler+0x254>)
 8004388:	2201      	movs	r2, #1
 800438a:	601a      	str	r2, [r3, #0]
				typingCount++;
 800438c:	4b6d      	ldr	r3, [pc, #436]	; (8004544 <keyHandler+0x250>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3301      	adds	r3, #1
 8004392:	4a6c      	ldr	r2, [pc, #432]	; (8004544 <keyHandler+0x250>)
 8004394:	6013      	str	r3, [r2, #0]
				typingCount = typingCount % (stateCountsForEachKey(key)+1);
 8004396:	4b6b      	ldr	r3, [pc, #428]	; (8004544 <keyHandler+0x250>)
 8004398:	681c      	ldr	r4, [r3, #0]
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff ff1a 	bl	80041d4 <stateCountsForEachKey>
 80043a0:	4603      	mov	r3, r0
 80043a2:	3301      	adds	r3, #1
 80043a4:	fb94 f2f3 	sdiv	r2, r4, r3
 80043a8:	fb02 f303 	mul.w	r3, r2, r3
 80043ac:	1ae3      	subs	r3, r4, r3
 80043ae:	4a65      	ldr	r2, [pc, #404]	; (8004544 <keyHandler+0x250>)
 80043b0:	6013      	str	r3, [r2, #0]
			}
			messageSetter(currentNode, charSelector(key, typingCount));
 80043b2:	4b62      	ldr	r3, [pc, #392]	; (800453c <keyHandler+0x248>)
 80043b4:	681c      	ldr	r4, [r3, #0]
 80043b6:	4b63      	ldr	r3, [pc, #396]	; (8004544 <keyHandler+0x250>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4619      	mov	r1, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff fd9b 	bl	8003ef8 <charSelector>
 80043c2:	4603      	mov	r3, r0
 80043c4:	4619      	mov	r1, r3
 80043c6:	4620      	mov	r0, r4
 80043c8:	f7ff fa04 	bl	80037d4 <messageSetter>
			ShowInfo(currentNode->screen);
 80043cc:	4b5b      	ldr	r3, [pc, #364]	; (800453c <keyHandler+0x248>)
 80043ce:	681c      	ldr	r4, [r3, #0]
 80043d0:	4668      	mov	r0, sp
 80043d2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80043d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043da:	4619      	mov	r1, r3
 80043dc:	f007 fab0 	bl	800b940 <memcpy>
 80043e0:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80043e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043e6:	f7ff f87d 	bl	80034e4 <ShowInfo>
		}
		switch (key) {
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3b02      	subs	r3, #2
 80043ee:	2b0e      	cmp	r3, #14
 80043f0:	f200 838f 	bhi.w	8004b12 <keyHandler+0x81e>
 80043f4:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <keyHandler+0x108>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	08004439 	.word	0x08004439
 8004400:	08004b13 	.word	0x08004b13
 8004404:	080044b1 	.word	0x080044b1
 8004408:	08004561 	.word	0x08004561
 800440c:	08004661 	.word	0x08004661
 8004410:	080046ed 	.word	0x080046ed
 8004414:	08004809 	.word	0x08004809
 8004418:	08004b13 	.word	0x08004b13
 800441c:	08004b13 	.word	0x08004b13
 8004420:	08004b13 	.word	0x08004b13
 8004424:	0800487f 	.word	0x0800487f
 8004428:	080048f5 	.word	0x080048f5
 800442c:	08004b13 	.word	0x08004b13
 8004430:	08004979 	.word	0x08004979
 8004434:	08004a09 	.word	0x08004a09
			case 2: // up key
				if(inMenu && CurrentMenuOption > 0){
 8004438:	4b44      	ldr	r3, [pc, #272]	; (800454c <keyHandler+0x258>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d018      	beq.n	8004472 <keyHandler+0x17e>
 8004440:	4b43      	ldr	r3, [pc, #268]	; (8004550 <keyHandler+0x25c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	dd14      	ble.n	8004472 <keyHandler+0x17e>
					if(inMenu && CurrentMenuOption == 4)
 8004448:	4b40      	ldr	r3, [pc, #256]	; (800454c <keyHandler+0x258>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <keyHandler+0x16e>
 8004450:	4b3f      	ldr	r3, [pc, #252]	; (8004550 <keyHandler+0x25c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b04      	cmp	r3, #4
 8004456:	d104      	bne.n	8004462 <keyHandler+0x16e>
						page--;
 8004458:	4b3e      	ldr	r3, [pc, #248]	; (8004554 <keyHandler+0x260>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3b01      	subs	r3, #1
 800445e:	4a3d      	ldr	r2, [pc, #244]	; (8004554 <keyHandler+0x260>)
 8004460:	6013      	str	r3, [r2, #0]
					CurrentMenuOption--;
 8004462:	4b3b      	ldr	r3, [pc, #236]	; (8004550 <keyHandler+0x25c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3b01      	subs	r3, #1
 8004468:	4a39      	ldr	r2, [pc, #228]	; (8004550 <keyHandler+0x25c>)
 800446a:	6013      	str	r3, [r2, #0]
					changeOption(0);
 800446c:	2000      	movs	r0, #0
 800446e:	f7ff f8b1 	bl	80035d4 <changeOption>
				}
				if(!inMenu && page>0){
 8004472:	4b36      	ldr	r3, [pc, #216]	; (800454c <keyHandler+0x258>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 8338 	bne.w	8004aec <keyHandler+0x7f8>
 800447c:	4b35      	ldr	r3, [pc, #212]	; (8004554 <keyHandler+0x260>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	f340 8333 	ble.w	8004aec <keyHandler+0x7f8>
					page--;
 8004486:	4b33      	ldr	r3, [pc, #204]	; (8004554 <keyHandler+0x260>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3b01      	subs	r3, #1
 800448c:	4a31      	ldr	r2, [pc, #196]	; (8004554 <keyHandler+0x260>)
 800448e:	6013      	str	r3, [r2, #0]
					ShowInfo(currentNode->screen);
 8004490:	4b2a      	ldr	r3, [pc, #168]	; (800453c <keyHandler+0x248>)
 8004492:	681c      	ldr	r4, [r3, #0]
 8004494:	4668      	mov	r0, sp
 8004496:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800449a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800449e:	4619      	mov	r1, r3
 80044a0:	f007 fa4e 	bl	800b940 <memcpy>
 80044a4:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80044a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044aa:	f7ff f81b 	bl	80034e4 <ShowInfo>
				}
				break;
 80044ae:	e31d      	b.n	8004aec <keyHandler+0x7f8>

			case 4:
				if(currentNode->screen.id == 4 ){
 80044b0:	4b22      	ldr	r3, [pc, #136]	; (800453c <keyHandler+0x248>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d117      	bne.n	80044ea <keyHandler+0x1f6>
					setLigthToggle(&(currentNode->screen),0,Lights);
 80044ba:	4b20      	ldr	r3, [pc, #128]	; (800453c <keyHandler+0x248>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3324      	adds	r3, #36	; 0x24
 80044c0:	4a25      	ldr	r2, [pc, #148]	; (8004558 <keyHandler+0x264>)
 80044c2:	2100      	movs	r1, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff fc09 	bl	8003cdc <setLigthToggle>
					ShowInfo(currentNode->screen);
 80044ca:	4b1c      	ldr	r3, [pc, #112]	; (800453c <keyHandler+0x248>)
 80044cc:	681c      	ldr	r4, [r3, #0]
 80044ce:	4668      	mov	r0, sp
 80044d0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80044d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044d8:	4619      	mov	r1, r3
 80044da:	f007 fa31 	bl	800b940 <memcpy>
 80044de:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80044e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044e4:	f7fe fffe 	bl	80034e4 <ShowInfo>
				}
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),0,newScenarioLights);
					ShowInfo(currentNode->screen);
				}
				break;
 80044e8:	e302      	b.n	8004af0 <keyHandler+0x7fc>
				else if(currentNode->screen.id == 18){
 80044ea:	4b14      	ldr	r3, [pc, #80]	; (800453c <keyHandler+0x248>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	2b12      	cmp	r3, #18
 80044f2:	f040 82fd 	bne.w	8004af0 <keyHandler+0x7fc>
					setLigthToggle(&(currentNode->screen),0,newScenarioLights);
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <keyHandler+0x248>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3324      	adds	r3, #36	; 0x24
 80044fc:	4a17      	ldr	r2, [pc, #92]	; (800455c <keyHandler+0x268>)
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fbeb 	bl	8003cdc <setLigthToggle>
					ShowInfo(currentNode->screen);
 8004506:	4b0d      	ldr	r3, [pc, #52]	; (800453c <keyHandler+0x248>)
 8004508:	681c      	ldr	r4, [r3, #0]
 800450a:	4668      	mov	r0, sp
 800450c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004514:	4619      	mov	r1, r3
 8004516:	f007 fa13 	bl	800b940 <memcpy>
 800451a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800451e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004520:	f7fe ffe0 	bl	80034e4 <ShowInfo>
				break;
 8004524:	e2e4      	b.n	8004af0 <keyHandler+0x7fc>
 8004526:	bf00      	nop
 8004528:	20000038 	.word	0x20000038
 800452c:	20000034 	.word	0x20000034
 8004530:	20000880 	.word	0x20000880
 8004534:	20000858 	.word	0x20000858
 8004538:	2000086c 	.word	0x2000086c
 800453c:	200008e4 	.word	0x200008e4
 8004540:	20000870 	.word	0x20000870
 8004544:	20000130 	.word	0x20000130
 8004548:	20000874 	.word	0x20000874
 800454c:	2000012c 	.word	0x2000012c
 8004550:	20000860 	.word	0x20000860
 8004554:	20000868 	.word	0x20000868
 8004558:	2000079c 	.word	0x2000079c
 800455c:	20000844 	.word	0x20000844

			case 5: // left key
				if(currentNode->screen.id == 8 ||currentNode->screen.id == 9 || currentNode->screen.id == 10 || currentNode->screen.id == 11 || currentNode->screen.id == 12 || currentNode->screen.id == 15 || currentNode->screen.id == 16 || currentNode->screen.id == 17 ||currentNode->screen.id >lastPagesId){
 8004560:	4b93      	ldr	r3, [pc, #588]	; (80047b0 <keyHandler+0x4bc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2b08      	cmp	r3, #8
 8004568:	d029      	beq.n	80045be <keyHandler+0x2ca>
 800456a:	4b91      	ldr	r3, [pc, #580]	; (80047b0 <keyHandler+0x4bc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2b09      	cmp	r3, #9
 8004572:	d024      	beq.n	80045be <keyHandler+0x2ca>
 8004574:	4b8e      	ldr	r3, [pc, #568]	; (80047b0 <keyHandler+0x4bc>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	2b0a      	cmp	r3, #10
 800457c:	d01f      	beq.n	80045be <keyHandler+0x2ca>
 800457e:	4b8c      	ldr	r3, [pc, #560]	; (80047b0 <keyHandler+0x4bc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	2b0b      	cmp	r3, #11
 8004586:	d01a      	beq.n	80045be <keyHandler+0x2ca>
 8004588:	4b89      	ldr	r3, [pc, #548]	; (80047b0 <keyHandler+0x4bc>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	2b0c      	cmp	r3, #12
 8004590:	d015      	beq.n	80045be <keyHandler+0x2ca>
 8004592:	4b87      	ldr	r3, [pc, #540]	; (80047b0 <keyHandler+0x4bc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	2b0f      	cmp	r3, #15
 800459a:	d010      	beq.n	80045be <keyHandler+0x2ca>
 800459c:	4b84      	ldr	r3, [pc, #528]	; (80047b0 <keyHandler+0x4bc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d00b      	beq.n	80045be <keyHandler+0x2ca>
 80045a6:	4b82      	ldr	r3, [pc, #520]	; (80047b0 <keyHandler+0x4bc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	2b11      	cmp	r3, #17
 80045ae:	d006      	beq.n	80045be <keyHandler+0x2ca>
 80045b0:	4b7f      	ldr	r3, [pc, #508]	; (80047b0 <keyHandler+0x4bc>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045b6:	4b7f      	ldr	r3, [pc, #508]	; (80047b4 <keyHandler+0x4c0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	dd15      	ble.n	80045ea <keyHandler+0x2f6>
					setOn(&(currentNode->screen));
 80045be:	4b7c      	ldr	r3, [pc, #496]	; (80047b0 <keyHandler+0x4bc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3324      	adds	r3, #36	; 0x24
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff f97d 	bl	80038c4 <setOn>
					ShowInfo(currentNode->screen);
 80045ca:	4b79      	ldr	r3, [pc, #484]	; (80047b0 <keyHandler+0x4bc>)
 80045cc:	681c      	ldr	r4, [r3, #0]
 80045ce:	4668      	mov	r0, sp
 80045d0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80045d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045d8:	4619      	mov	r1, r3
 80045da:	f007 f9b1 	bl	800b940 <memcpy>
 80045de:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80045e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045e4:	f7fe ff7e 	bl	80034e4 <ShowInfo>
				}
				else if(currentNode->screen.id == 14){
					setThreshold(&(currentNode->screen), 0,1);
					ShowInfo(currentNode->screen);
				}
				break;
 80045e8:	e284      	b.n	8004af4 <keyHandler+0x800>
				else if(currentNode->screen.id == 7 ){
 80045ea:	4b71      	ldr	r3, [pc, #452]	; (80047b0 <keyHandler+0x4bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	2b07      	cmp	r3, #7
 80045f2:	d117      	bne.n	8004624 <keyHandler+0x330>
					setThreshold(&(currentNode->screen), 0,0);
 80045f4:	4b6e      	ldr	r3, [pc, #440]	; (80047b0 <keyHandler+0x4bc>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3324      	adds	r3, #36	; 0x24
 80045fa:	2200      	movs	r2, #0
 80045fc:	2100      	movs	r1, #0
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fb08 	bl	8003c14 <setThreshold>
					ShowInfo(currentNode->screen);
 8004604:	4b6a      	ldr	r3, [pc, #424]	; (80047b0 <keyHandler+0x4bc>)
 8004606:	681c      	ldr	r4, [r3, #0]
 8004608:	4668      	mov	r0, sp
 800460a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800460e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004612:	4619      	mov	r1, r3
 8004614:	f007 f994 	bl	800b940 <memcpy>
 8004618:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800461c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800461e:	f7fe ff61 	bl	80034e4 <ShowInfo>
				break;
 8004622:	e267      	b.n	8004af4 <keyHandler+0x800>
				else if(currentNode->screen.id == 14){
 8004624:	4b62      	ldr	r3, [pc, #392]	; (80047b0 <keyHandler+0x4bc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	2b0e      	cmp	r3, #14
 800462c:	f040 8262 	bne.w	8004af4 <keyHandler+0x800>
					setThreshold(&(currentNode->screen), 0,1);
 8004630:	4b5f      	ldr	r3, [pc, #380]	; (80047b0 <keyHandler+0x4bc>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3324      	adds	r3, #36	; 0x24
 8004636:	2201      	movs	r2, #1
 8004638:	2100      	movs	r1, #0
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff faea 	bl	8003c14 <setThreshold>
					ShowInfo(currentNode->screen);
 8004640:	4b5b      	ldr	r3, [pc, #364]	; (80047b0 <keyHandler+0x4bc>)
 8004642:	681c      	ldr	r4, [r3, #0]
 8004644:	4668      	mov	r0, sp
 8004646:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800464a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800464e:	4619      	mov	r1, r3
 8004650:	f007 f976 	bl	800b940 <memcpy>
 8004654:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800465a:	f7fe ff43 	bl	80034e4 <ShowInfo>
				break;
 800465e:	e249      	b.n	8004af4 <keyHandler+0x800>
			case 6: // down key
				if(inMenu && CurrentMenuOption < MenuoptionCounts - 1) {
 8004660:	4b55      	ldr	r3, [pc, #340]	; (80047b8 <keyHandler+0x4c4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d019      	beq.n	800469c <keyHandler+0x3a8>
 8004668:	4b54      	ldr	r3, [pc, #336]	; (80047bc <keyHandler+0x4c8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	1e5a      	subs	r2, r3, #1
 800466e:	4b54      	ldr	r3, [pc, #336]	; (80047c0 <keyHandler+0x4cc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	dd12      	ble.n	800469c <keyHandler+0x3a8>
					if(inMenu && CurrentMenuOption == 3)
 8004676:	4b50      	ldr	r3, [pc, #320]	; (80047b8 <keyHandler+0x4c4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d006      	beq.n	800468c <keyHandler+0x398>
 800467e:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <keyHandler+0x4cc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b03      	cmp	r3, #3
 8004684:	d102      	bne.n	800468c <keyHandler+0x398>
						page = 1;
 8004686:	4b4f      	ldr	r3, [pc, #316]	; (80047c4 <keyHandler+0x4d0>)
 8004688:	2201      	movs	r2, #1
 800468a:	601a      	str	r2, [r3, #0]
					CurrentMenuOption++;
 800468c:	4b4c      	ldr	r3, [pc, #304]	; (80047c0 <keyHandler+0x4cc>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3301      	adds	r3, #1
 8004692:	4a4b      	ldr	r2, [pc, #300]	; (80047c0 <keyHandler+0x4cc>)
 8004694:	6013      	str	r3, [r2, #0]
					changeOption(1);
 8004696:	2001      	movs	r0, #1
 8004698:	f7fe ff9c 	bl	80035d4 <changeOption>
				}
				if(!inMenu && page < (currentNode->screen.optionCount-1) / 3){
 800469c:	4b46      	ldr	r3, [pc, #280]	; (80047b8 <keyHandler+0x4c4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 8229 	bne.w	8004af8 <keyHandler+0x804>
 80046a6:	4b42      	ldr	r3, [pc, #264]	; (80047b0 <keyHandler+0x4bc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ac:	3b01      	subs	r3, #1
 80046ae:	4a46      	ldr	r2, [pc, #280]	; (80047c8 <keyHandler+0x4d4>)
 80046b0:	fb82 1203 	smull	r1, r2, r2, r3
 80046b4:	17db      	asrs	r3, r3, #31
 80046b6:	1ad2      	subs	r2, r2, r3
 80046b8:	4b42      	ldr	r3, [pc, #264]	; (80047c4 <keyHandler+0x4d0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	f340 821b 	ble.w	8004af8 <keyHandler+0x804>
					page++;
 80046c2:	4b40      	ldr	r3, [pc, #256]	; (80047c4 <keyHandler+0x4d0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3301      	adds	r3, #1
 80046c8:	4a3e      	ldr	r2, [pc, #248]	; (80047c4 <keyHandler+0x4d0>)
 80046ca:	6013      	str	r3, [r2, #0]
					ShowInfo(currentNode->screen);
 80046cc:	4b38      	ldr	r3, [pc, #224]	; (80047b0 <keyHandler+0x4bc>)
 80046ce:	681c      	ldr	r4, [r3, #0]
 80046d0:	4668      	mov	r0, sp
 80046d2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80046d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046da:	4619      	mov	r1, r3
 80046dc:	f007 f930 	bl	800b940 <memcpy>
 80046e0:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80046e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046e6:	f7fe fefd 	bl	80034e4 <ShowInfo>

				}

				break;
 80046ea:	e205      	b.n	8004af8 <keyHandler+0x804>
			case 7: // right key

				if(currentNode->screen.id == 8 ||currentNode->screen.id == 9 || currentNode->screen.id == 10 || currentNode->screen.id == 11 || currentNode->screen.id == 12 || currentNode->screen.id == 15 || currentNode->screen.id == 16 || currentNode->screen.id == 17 ||currentNode->screen.id >lastPagesId){
 80046ec:	4b30      	ldr	r3, [pc, #192]	; (80047b0 <keyHandler+0x4bc>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d029      	beq.n	800474a <keyHandler+0x456>
 80046f6:	4b2e      	ldr	r3, [pc, #184]	; (80047b0 <keyHandler+0x4bc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	2b09      	cmp	r3, #9
 80046fe:	d024      	beq.n	800474a <keyHandler+0x456>
 8004700:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <keyHandler+0x4bc>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b0a      	cmp	r3, #10
 8004708:	d01f      	beq.n	800474a <keyHandler+0x456>
 800470a:	4b29      	ldr	r3, [pc, #164]	; (80047b0 <keyHandler+0x4bc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	2b0b      	cmp	r3, #11
 8004712:	d01a      	beq.n	800474a <keyHandler+0x456>
 8004714:	4b26      	ldr	r3, [pc, #152]	; (80047b0 <keyHandler+0x4bc>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d015      	beq.n	800474a <keyHandler+0x456>
 800471e:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <keyHandler+0x4bc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	2b0f      	cmp	r3, #15
 8004726:	d010      	beq.n	800474a <keyHandler+0x456>
 8004728:	4b21      	ldr	r3, [pc, #132]	; (80047b0 <keyHandler+0x4bc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b10      	cmp	r3, #16
 8004730:	d00b      	beq.n	800474a <keyHandler+0x456>
 8004732:	4b1f      	ldr	r3, [pc, #124]	; (80047b0 <keyHandler+0x4bc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	2b11      	cmp	r3, #17
 800473a:	d006      	beq.n	800474a <keyHandler+0x456>
 800473c:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <keyHandler+0x4bc>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004742:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <keyHandler+0x4c0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	dd15      	ble.n	8004776 <keyHandler+0x482>
					setOn(&(currentNode->screen));
 800474a:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <keyHandler+0x4bc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3324      	adds	r3, #36	; 0x24
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff f8b7 	bl	80038c4 <setOn>
					ShowInfo(currentNode->screen);
 8004756:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <keyHandler+0x4bc>)
 8004758:	681c      	ldr	r4, [r3, #0]
 800475a:	4668      	mov	r0, sp
 800475c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004764:	4619      	mov	r1, r3
 8004766:	f007 f8eb 	bl	800b940 <memcpy>
 800476a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800476e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004770:	f7fe feb8 	bl	80034e4 <ShowInfo>
				}
				else if(currentNode->screen.id == 14){
					setThreshold(&(currentNode->screen), 1,1);
					ShowInfo(currentNode->screen);
				}
				break;
 8004774:	e1c2      	b.n	8004afc <keyHandler+0x808>
				else if(currentNode->screen.id == 7){
 8004776:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <keyHandler+0x4bc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	2b07      	cmp	r3, #7
 800477e:	d125      	bne.n	80047cc <keyHandler+0x4d8>
					setThreshold(&(currentNode->screen), 1,0);
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <keyHandler+0x4bc>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3324      	adds	r3, #36	; 0x24
 8004786:	2200      	movs	r2, #0
 8004788:	2101      	movs	r1, #1
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff fa42 	bl	8003c14 <setThreshold>
					ShowInfo(currentNode->screen);
 8004790:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <keyHandler+0x4bc>)
 8004792:	681c      	ldr	r4, [r3, #0]
 8004794:	4668      	mov	r0, sp
 8004796:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800479a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800479e:	4619      	mov	r1, r3
 80047a0:	f007 f8ce 	bl	800b940 <memcpy>
 80047a4:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80047a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047aa:	f7fe fe9b 	bl	80034e4 <ShowInfo>
				break;
 80047ae:	e1a5      	b.n	8004afc <keyHandler+0x808>
 80047b0:	200008e4 	.word	0x200008e4
 80047b4:	2000087c 	.word	0x2000087c
 80047b8:	2000012c 	.word	0x2000012c
 80047bc:	20000864 	.word	0x20000864
 80047c0:	20000860 	.word	0x20000860
 80047c4:	20000868 	.word	0x20000868
 80047c8:	55555556 	.word	0x55555556
				else if(currentNode->screen.id == 14){
 80047cc:	4bab      	ldr	r3, [pc, #684]	; (8004a7c <keyHandler+0x788>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	2b0e      	cmp	r3, #14
 80047d4:	f040 8192 	bne.w	8004afc <keyHandler+0x808>
					setThreshold(&(currentNode->screen), 1,1);
 80047d8:	4ba8      	ldr	r3, [pc, #672]	; (8004a7c <keyHandler+0x788>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3324      	adds	r3, #36	; 0x24
 80047de:	2201      	movs	r2, #1
 80047e0:	2101      	movs	r1, #1
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff fa16 	bl	8003c14 <setThreshold>
					ShowInfo(currentNode->screen);
 80047e8:	4ba4      	ldr	r3, [pc, #656]	; (8004a7c <keyHandler+0x788>)
 80047ea:	681c      	ldr	r4, [r3, #0]
 80047ec:	4668      	mov	r0, sp
 80047ee:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80047f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047f6:	4619      	mov	r1, r3
 80047f8:	f007 f8a2 	bl	800b940 <memcpy>
 80047fc:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004800:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004802:	f7fe fe6f 	bl	80034e4 <ShowInfo>
				break;
 8004806:	e179      	b.n	8004afc <keyHandler+0x808>
			case 8:
				if(currentNode->screen.id == 4){
 8004808:	4b9c      	ldr	r3, [pc, #624]	; (8004a7c <keyHandler+0x788>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	2b04      	cmp	r3, #4
 8004810:	d117      	bne.n	8004842 <keyHandler+0x54e>
					setLigthToggle(&(currentNode->screen),1,Lights);
 8004812:	4b9a      	ldr	r3, [pc, #616]	; (8004a7c <keyHandler+0x788>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3324      	adds	r3, #36	; 0x24
 8004818:	4a99      	ldr	r2, [pc, #612]	; (8004a80 <keyHandler+0x78c>)
 800481a:	2101      	movs	r1, #1
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fa5d 	bl	8003cdc <setLigthToggle>
					ShowInfo(currentNode->screen);
 8004822:	4b96      	ldr	r3, [pc, #600]	; (8004a7c <keyHandler+0x788>)
 8004824:	681c      	ldr	r4, [r3, #0]
 8004826:	4668      	mov	r0, sp
 8004828:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800482c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004830:	4619      	mov	r1, r3
 8004832:	f007 f885 	bl	800b940 <memcpy>
 8004836:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800483a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800483c:	f7fe fe52 	bl	80034e4 <ShowInfo>
				}
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),1,newScenarioLights);
					ShowInfo(currentNode->screen);
				}
				break;
 8004840:	e15e      	b.n	8004b00 <keyHandler+0x80c>
				else if(currentNode->screen.id == 18){
 8004842:	4b8e      	ldr	r3, [pc, #568]	; (8004a7c <keyHandler+0x788>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	2b12      	cmp	r3, #18
 800484a:	f040 8159 	bne.w	8004b00 <keyHandler+0x80c>
					setLigthToggle(&(currentNode->screen),1,newScenarioLights);
 800484e:	4b8b      	ldr	r3, [pc, #556]	; (8004a7c <keyHandler+0x788>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3324      	adds	r3, #36	; 0x24
 8004854:	4a8b      	ldr	r2, [pc, #556]	; (8004a84 <keyHandler+0x790>)
 8004856:	2101      	movs	r1, #1
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff fa3f 	bl	8003cdc <setLigthToggle>
					ShowInfo(currentNode->screen);
 800485e:	4b87      	ldr	r3, [pc, #540]	; (8004a7c <keyHandler+0x788>)
 8004860:	681c      	ldr	r4, [r3, #0]
 8004862:	4668      	mov	r0, sp
 8004864:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800486c:	4619      	mov	r1, r3
 800486e:	f007 f867 	bl	800b940 <memcpy>
 8004872:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004878:	f7fe fe34 	bl	80034e4 <ShowInfo>
				break;
 800487c:	e140      	b.n	8004b00 <keyHandler+0x80c>
			case 12:
				if(currentNode->screen.id == 4){
 800487e:	4b7f      	ldr	r3, [pc, #508]	; (8004a7c <keyHandler+0x788>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	2b04      	cmp	r3, #4
 8004886:	d117      	bne.n	80048b8 <keyHandler+0x5c4>
					setLigthToggle(&(currentNode->screen),2,Lights);
 8004888:	4b7c      	ldr	r3, [pc, #496]	; (8004a7c <keyHandler+0x788>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3324      	adds	r3, #36	; 0x24
 800488e:	4a7c      	ldr	r2, [pc, #496]	; (8004a80 <keyHandler+0x78c>)
 8004890:	2102      	movs	r1, #2
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fa22 	bl	8003cdc <setLigthToggle>
					ShowInfo(currentNode->screen);
 8004898:	4b78      	ldr	r3, [pc, #480]	; (8004a7c <keyHandler+0x788>)
 800489a:	681c      	ldr	r4, [r3, #0]
 800489c:	4668      	mov	r0, sp
 800489e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80048a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048a6:	4619      	mov	r1, r3
 80048a8:	f007 f84a 	bl	800b940 <memcpy>
 80048ac:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80048b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048b2:	f7fe fe17 	bl	80034e4 <ShowInfo>
				}
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),2,newScenarioLights);
					ShowInfo(currentNode->screen);
				}
				break;
 80048b6:	e125      	b.n	8004b04 <keyHandler+0x810>
				else if(currentNode->screen.id == 18){
 80048b8:	4b70      	ldr	r3, [pc, #448]	; (8004a7c <keyHandler+0x788>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2b12      	cmp	r3, #18
 80048c0:	f040 8120 	bne.w	8004b04 <keyHandler+0x810>
					setLigthToggle(&(currentNode->screen),2,newScenarioLights);
 80048c4:	4b6d      	ldr	r3, [pc, #436]	; (8004a7c <keyHandler+0x788>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3324      	adds	r3, #36	; 0x24
 80048ca:	4a6e      	ldr	r2, [pc, #440]	; (8004a84 <keyHandler+0x790>)
 80048cc:	2102      	movs	r1, #2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff fa04 	bl	8003cdc <setLigthToggle>
					ShowInfo(currentNode->screen);
 80048d4:	4b69      	ldr	r3, [pc, #420]	; (8004a7c <keyHandler+0x788>)
 80048d6:	681c      	ldr	r4, [r3, #0]
 80048d8:	4668      	mov	r0, sp
 80048da:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80048de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048e2:	4619      	mov	r1, r3
 80048e4:	f007 f82c 	bl	800b940 <memcpy>
 80048e8:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80048ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048ee:	f7fe fdf9 	bl	80034e4 <ShowInfo>
				break;
 80048f2:	e107      	b.n	8004b04 <keyHandler+0x810>
			case 13: // back key
				if(currentNode != root){
 80048f4:	4b61      	ldr	r3, [pc, #388]	; (8004a7c <keyHandler+0x788>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	4b63      	ldr	r3, [pc, #396]	; (8004a88 <keyHandler+0x794>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	f000 8103 	beq.w	8004b08 <keyHandler+0x814>
					clear();
 8004902:	f7fc fba7 	bl	8001054 <clear>
					page = 0;
 8004906:	4b61      	ldr	r3, [pc, #388]	; (8004a8c <keyHandler+0x798>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
					MenuoptionCounts = currentNode->screen.optionCount;
 800490c:	4b5b      	ldr	r3, [pc, #364]	; (8004a7c <keyHandler+0x788>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	4a5f      	ldr	r2, [pc, #380]	; (8004a90 <keyHandler+0x79c>)
 8004914:	6013      	str	r3, [r2, #0]
					currentNode = currentNode->parent;
 8004916:	4b59      	ldr	r3, [pc, #356]	; (8004a7c <keyHandler+0x788>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	4a57      	ldr	r2, [pc, #348]	; (8004a7c <keyHandler+0x788>)
 800491e:	6013      	str	r3, [r2, #0]
					if(currentNode->screen.isMenu){
 8004920:	4b56      	ldr	r3, [pc, #344]	; (8004a7c <keyHandler+0x788>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d013      	beq.n	8004952 <keyHandler+0x65e>
						CurrentMenuOption = 0;
 800492a:	4b5a      	ldr	r3, [pc, #360]	; (8004a94 <keyHandler+0x7a0>)
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
						MenuoptionCounts = currentNode->screen.optionCount;
 8004930:	4b52      	ldr	r3, [pc, #328]	; (8004a7c <keyHandler+0x788>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004936:	4a56      	ldr	r2, [pc, #344]	; (8004a90 <keyHandler+0x79c>)
 8004938:	6013      	str	r3, [r2, #0]
						SetMenu(currentNode->screen.menuItems);
 800493a:	4b50      	ldr	r3, [pc, #320]	; (8004a7c <keyHandler+0x788>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3330      	adds	r3, #48	; 0x30
 8004940:	4618      	mov	r0, r3
 8004942:	f7fe ff0b 	bl	800375c <SetMenu>
						ShowMenu();
 8004946:	f7fe fd55 	bl	80033f4 <ShowMenu>
						inMenu = 1;
 800494a:	4b53      	ldr	r3, [pc, #332]	; (8004a98 <keyHandler+0x7a4>)
 800494c:	2201      	movs	r2, #1
 800494e:	601a      	str	r2, [r3, #0]
						ShowInfo(currentNode->screen);
						inMenu = 0;
					}
				}

				break;
 8004950:	e0da      	b.n	8004b08 <keyHandler+0x814>
						ShowInfo(currentNode->screen);
 8004952:	4b4a      	ldr	r3, [pc, #296]	; (8004a7c <keyHandler+0x788>)
 8004954:	681c      	ldr	r4, [r3, #0]
 8004956:	4668      	mov	r0, sp
 8004958:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800495c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004960:	4619      	mov	r1, r3
 8004962:	f006 ffed 	bl	800b940 <memcpy>
 8004966:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800496a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800496c:	f7fe fdba 	bl	80034e4 <ShowInfo>
						inMenu = 0;
 8004970:	4b49      	ldr	r3, [pc, #292]	; (8004a98 <keyHandler+0x7a4>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
				break;
 8004976:	e0c7      	b.n	8004b08 <keyHandler+0x814>
			case 15: // okay key
				if(inMenu){
 8004978:	4b47      	ldr	r3, [pc, #284]	; (8004a98 <keyHandler+0x7a4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80c5 	beq.w	8004b0c <keyHandler+0x818>
					page = 0;
 8004982:	4b42      	ldr	r3, [pc, #264]	; (8004a8c <keyHandler+0x798>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
					nextCurrentNode();
 8004988:	f7ff fc60 	bl	800424c <nextCurrentNode>
					MenuoptionCounts = currentNode->screen.optionCount;
 800498c:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <keyHandler+0x788>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	4a3f      	ldr	r2, [pc, #252]	; (8004a90 <keyHandler+0x79c>)
 8004994:	6013      	str	r3, [r2, #0]
					if(currentNode->screen.isMenu){
 8004996:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <keyHandler+0x788>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00e      	beq.n	80049be <keyHandler+0x6ca>
						CurrentMenuOption = 0;
 80049a0:	4b3c      	ldr	r3, [pc, #240]	; (8004a94 <keyHandler+0x7a0>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
						SetMenu(currentNode->screen.menuItems);
 80049a6:	4b35      	ldr	r3, [pc, #212]	; (8004a7c <keyHandler+0x788>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3330      	adds	r3, #48	; 0x30
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fe fed5 	bl	800375c <SetMenu>
						ShowMenu();
 80049b2:	f7fe fd1f 	bl	80033f4 <ShowMenu>
						inMenu = 1;
 80049b6:	4b38      	ldr	r3, [pc, #224]	; (8004a98 <keyHandler+0x7a4>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	601a      	str	r2, [r3, #0]
							startStateLastTime = HAL_GetTick();
						}
					}

				}
				break;
 80049bc:	e0a6      	b.n	8004b0c <keyHandler+0x818>
						clear();
 80049be:	f7fc fb49 	bl	8001054 <clear>
						ShowInfo(currentNode->screen);
 80049c2:	4b2e      	ldr	r3, [pc, #184]	; (8004a7c <keyHandler+0x788>)
 80049c4:	681c      	ldr	r4, [r3, #0]
 80049c6:	4668      	mov	r0, sp
 80049c8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80049cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049d0:	4619      	mov	r1, r3
 80049d2:	f006 ffb5 	bl	800b940 <memcpy>
 80049d6:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80049da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049dc:	f7fe fd82 	bl	80034e4 <ShowInfo>
						inMenu = 0;
 80049e0:	4b2d      	ldr	r3, [pc, #180]	; (8004a98 <keyHandler+0x7a4>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
						if(currentNode->screen.id == -1){
 80049e6:	4b25      	ldr	r3, [pc, #148]	; (8004a7c <keyHandler+0x788>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f0:	f040 808c 	bne.w	8004b0c <keyHandler+0x818>
							startState = 3;
 80049f4:	4b29      	ldr	r3, [pc, #164]	; (8004a9c <keyHandler+0x7a8>)
 80049f6:	2203      	movs	r2, #3
 80049f8:	601a      	str	r2, [r3, #0]
							startStateLastTime = HAL_GetTick();
 80049fa:	f000 ffff 	bl	80059fc <HAL_GetTick>
 80049fe:	4603      	mov	r3, r0
 8004a00:	461a      	mov	r2, r3
 8004a02:	4b27      	ldr	r3, [pc, #156]	; (8004aa0 <keyHandler+0x7ac>)
 8004a04:	601a      	str	r2, [r3, #0]
				break;
 8004a06:	e081      	b.n	8004b0c <keyHandler+0x818>
			case 16:
				if(currentNode->screen.id == 4){
 8004a08:	4b1c      	ldr	r3, [pc, #112]	; (8004a7c <keyHandler+0x788>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d117      	bne.n	8004a42 <keyHandler+0x74e>
					setLigthToggle(&(currentNode->screen),3,Lights);
 8004a12:	4b1a      	ldr	r3, [pc, #104]	; (8004a7c <keyHandler+0x788>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3324      	adds	r3, #36	; 0x24
 8004a18:	4a19      	ldr	r2, [pc, #100]	; (8004a80 <keyHandler+0x78c>)
 8004a1a:	2103      	movs	r1, #3
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff f95d 	bl	8003cdc <setLigthToggle>
					ShowInfo(currentNode->screen);
 8004a22:	4b16      	ldr	r3, [pc, #88]	; (8004a7c <keyHandler+0x788>)
 8004a24:	681c      	ldr	r4, [r3, #0]
 8004a26:	4668      	mov	r0, sp
 8004a28:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a30:	4619      	mov	r1, r3
 8004a32:	f006 ff85 	bl	800b940 <memcpy>
 8004a36:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a3c:	f7fe fd52 	bl	80034e4 <ShowInfo>
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),3,newScenarioLights);
					ShowInfo(currentNode->screen);
				}

			break;
 8004a40:	e066      	b.n	8004b10 <keyHandler+0x81c>
				else if(currentNode->screen.id == 18){
 8004a42:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <keyHandler+0x788>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	2b12      	cmp	r3, #18
 8004a4a:	d161      	bne.n	8004b10 <keyHandler+0x81c>
					setLigthToggle(&(currentNode->screen),3,newScenarioLights);
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <keyHandler+0x788>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3324      	adds	r3, #36	; 0x24
 8004a52:	4a0c      	ldr	r2, [pc, #48]	; (8004a84 <keyHandler+0x790>)
 8004a54:	2103      	movs	r1, #3
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff f940 	bl	8003cdc <setLigthToggle>
					ShowInfo(currentNode->screen);
 8004a5c:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <keyHandler+0x788>)
 8004a5e:	681c      	ldr	r4, [r3, #0]
 8004a60:	4668      	mov	r0, sp
 8004a62:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004a66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f006 ff68 	bl	800b940 <memcpy>
 8004a70:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004a74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a76:	f7fe fd35 	bl	80034e4 <ShowInfo>
			break;
 8004a7a:	e049      	b.n	8004b10 <keyHandler+0x81c>
 8004a7c:	200008e4 	.word	0x200008e4
 8004a80:	2000079c 	.word	0x2000079c
 8004a84:	20000844 	.word	0x20000844
 8004a88:	20000890 	.word	0x20000890
 8004a8c:	20000868 	.word	0x20000868
 8004a90:	20000864 	.word	0x20000864
 8004a94:	20000860 	.word	0x20000860
 8004a98:	2000012c 	.word	0x2000012c
 8004a9c:	20000880 	.word	0x20000880
 8004aa0:	20000884 	.word	0x20000884

		}
	}else if(startState == 0 && key == 16){ // blue push button action
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <keyHandler+0x828>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d132      	bne.n	8004b12 <keyHandler+0x81e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b10      	cmp	r3, #16
 8004ab0:	d12f      	bne.n	8004b12 <keyHandler+0x81e>
		setCursor(0,0);
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	f7fc fad7 	bl	8001068 <setCursor>
		if(strlen(startMassage) > 0)
 8004aba:	4b19      	ldr	r3, [pc, #100]	; (8004b20 <keyHandler+0x82c>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <keyHandler+0x7d6>
			print(startMassage);
 8004ac2:	4817      	ldr	r0, [pc, #92]	; (8004b20 <keyHandler+0x82c>)
 8004ac4:	f7fc fb2e 	bl	8001124 <print>
 8004ac8:	e002      	b.n	8004ad0 <keyHandler+0x7dc>
		else
			print("WELLCOME       ");
 8004aca:	4816      	ldr	r0, [pc, #88]	; (8004b24 <keyHandler+0x830>)
 8004acc:	f7fc fb2a 	bl	8001124 <print>
		display();
 8004ad0:	f7fc fb12 	bl	80010f8 <display>
		startState = 1;
 8004ad4:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <keyHandler+0x828>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
		startStateLastTime = HAL_GetTick();
 8004ada:	f000 ff8f 	bl	80059fc <HAL_GetTick>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <keyHandler+0x834>)
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	e014      	b.n	8004b12 <keyHandler+0x81e>
		if(HAL_GetTick()- lastPress<300 ) return;
 8004ae8:	bf00      	nop
 8004aea:	e012      	b.n	8004b12 <keyHandler+0x81e>
				break;
 8004aec:	bf00      	nop
 8004aee:	e010      	b.n	8004b12 <keyHandler+0x81e>
				break;
 8004af0:	bf00      	nop
 8004af2:	e00e      	b.n	8004b12 <keyHandler+0x81e>
				break;
 8004af4:	bf00      	nop
 8004af6:	e00c      	b.n	8004b12 <keyHandler+0x81e>
				break;
 8004af8:	bf00      	nop
 8004afa:	e00a      	b.n	8004b12 <keyHandler+0x81e>
				break;
 8004afc:	bf00      	nop
 8004afe:	e008      	b.n	8004b12 <keyHandler+0x81e>
				break;
 8004b00:	bf00      	nop
 8004b02:	e006      	b.n	8004b12 <keyHandler+0x81e>
				break;
 8004b04:	bf00      	nop
 8004b06:	e004      	b.n	8004b12 <keyHandler+0x81e>
				break;
 8004b08:	bf00      	nop
 8004b0a:	e002      	b.n	8004b12 <keyHandler+0x81e>
				break;
 8004b0c:	bf00      	nop
 8004b0e:	e000      	b.n	8004b12 <keyHandler+0x81e>
			break;
 8004b10:	bf00      	nop
	}

}
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000880 	.word	0x20000880
 8004b20:	20000830 	.word	0x20000830
 8004b24:	0800dae8 	.word	0x0800dae8
 8004b28:	20000884 	.word	0x20000884

08004b2c <buzzerChangeTone>:

extern TIM_HandleTypeDef *buzzerPwmTimer;
extern uint32_t buzzerPwmChannel;
extern TIM_HandleTypeDef htim2;
void buzzerChangeTone(uint16_t freq, uint16_t volume) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	460a      	mov	r2, r1
 8004b36:	80fb      	strh	r3, [r7, #6]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	80bb      	strh	r3, [r7, #4]
    if (freq == 0 || freq > 20000) {
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d004      	beq.n	8004b4c <buzzerChangeTone+0x20>
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d937      	bls.n	8004bbc <buzzerChangeTone+0x90>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, 0);
 8004b4c:	4b52      	ldr	r3, [pc, #328]	; (8004c98 <buzzerChangeTone+0x16c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <buzzerChangeTone+0x34>
 8004b54:	4b51      	ldr	r3, [pc, #324]	; (8004c9c <buzzerChangeTone+0x170>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b5e:	e096      	b.n	8004c8e <buzzerChangeTone+0x162>
 8004b60:	4b4d      	ldr	r3, [pc, #308]	; (8004c98 <buzzerChangeTone+0x16c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d105      	bne.n	8004b74 <buzzerChangeTone+0x48>
 8004b68:	4b4c      	ldr	r3, [pc, #304]	; (8004c9c <buzzerChangeTone+0x170>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6393      	str	r3, [r2, #56]	; 0x38
 8004b72:	e08c      	b.n	8004c8e <buzzerChangeTone+0x162>
 8004b74:	4b48      	ldr	r3, [pc, #288]	; (8004c98 <buzzerChangeTone+0x16c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d105      	bne.n	8004b88 <buzzerChangeTone+0x5c>
 8004b7c:	4b47      	ldr	r3, [pc, #284]	; (8004c9c <buzzerChangeTone+0x170>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	2300      	movs	r3, #0
 8004b84:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004b86:	e082      	b.n	8004c8e <buzzerChangeTone+0x162>
 8004b88:	4b43      	ldr	r3, [pc, #268]	; (8004c98 <buzzerChangeTone+0x16c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b0c      	cmp	r3, #12
 8004b8e:	d105      	bne.n	8004b9c <buzzerChangeTone+0x70>
 8004b90:	4b42      	ldr	r3, [pc, #264]	; (8004c9c <buzzerChangeTone+0x170>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	2300      	movs	r3, #0
 8004b98:	6413      	str	r3, [r2, #64]	; 0x40
 8004b9a:	e078      	b.n	8004c8e <buzzerChangeTone+0x162>
 8004b9c:	4b3e      	ldr	r3, [pc, #248]	; (8004c98 <buzzerChangeTone+0x16c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b10      	cmp	r3, #16
 8004ba2:	d105      	bne.n	8004bb0 <buzzerChangeTone+0x84>
 8004ba4:	4b3d      	ldr	r3, [pc, #244]	; (8004c9c <buzzerChangeTone+0x170>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	2300      	movs	r3, #0
 8004bac:	6593      	str	r3, [r2, #88]	; 0x58
 8004bae:	e06e      	b.n	8004c8e <buzzerChangeTone+0x162>
 8004bb0:	4b3a      	ldr	r3, [pc, #232]	; (8004c9c <buzzerChangeTone+0x170>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004bba:	e068      	b.n	8004c8e <buzzerChangeTone+0x162>
    } else {
        const uint32_t internalClockFreq = HAL_RCC_GetSysClockFreq();
 8004bbc:	f004 f9a8 	bl	8008f10 <HAL_RCC_GetSysClockFreq>
 8004bc0:	61f8      	str	r0, [r7, #28]
        const uint32_t prescaler = 1 + internalClockFreq / freq / 60000;
 8004bc2:	88fb      	ldrh	r3, [r7, #6]
 8004bc4:	69fa      	ldr	r2, [r7, #28]
 8004bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bca:	4a35      	ldr	r2, [pc, #212]	; (8004ca0 <buzzerChangeTone+0x174>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	0b9b      	lsrs	r3, r3, #14
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	61bb      	str	r3, [r7, #24]
        const uint32_t timerClock = internalClockFreq / prescaler;
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bde:	617b      	str	r3, [r7, #20]
        const uint32_t periodCycles = timerClock / freq;
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	613b      	str	r3, [r7, #16]
        const uint32_t pulseWidth = volume * periodCycles / 1000 / 2;
 8004bea:	88bb      	ldrh	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	4a2c      	ldr	r2, [pc, #176]	; (8004ca4 <buzzerChangeTone+0x178>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	09db      	lsrs	r3, r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]

        buzzerPwmTimer->Instance->PSC = prescaler - 1;
 8004bfc:	4b27      	ldr	r3, [pc, #156]	; (8004c9c <buzzerChangeTone+0x170>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	3a01      	subs	r2, #1
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28
        buzzerPwmTimer->Instance->ARR = periodCycles - 1;
 8004c08:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <buzzerChangeTone+0x170>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	3a01      	subs	r2, #1
 8004c12:	62da      	str	r2, [r3, #44]	; 0x2c
        buzzerPwmTimer->Instance->EGR = TIM_EGR_UG;
 8004c14:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <buzzerChangeTone+0x170>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	615a      	str	r2, [r3, #20]

        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8004c1e:	4b1e      	ldr	r3, [pc, #120]	; (8004c98 <buzzerChangeTone+0x16c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d105      	bne.n	8004c32 <buzzerChangeTone+0x106>
 8004c26:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <buzzerChangeTone+0x170>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 8004c30:	e02d      	b.n	8004c8e <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8004c32:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <buzzerChangeTone+0x16c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d105      	bne.n	8004c46 <buzzerChangeTone+0x11a>
 8004c3a:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <buzzerChangeTone+0x170>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004c44:	e023      	b.n	8004c8e <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <buzzerChangeTone+0x16c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b08      	cmp	r3, #8
 8004c4c:	d105      	bne.n	8004c5a <buzzerChangeTone+0x12e>
 8004c4e:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <buzzerChangeTone+0x170>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8004c58:	e019      	b.n	8004c8e <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8004c5a:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <buzzerChangeTone+0x16c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b0c      	cmp	r3, #12
 8004c60:	d105      	bne.n	8004c6e <buzzerChangeTone+0x142>
 8004c62:	4b0e      	ldr	r3, [pc, #56]	; (8004c9c <buzzerChangeTone+0x170>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004c6c:	e00f      	b.n	8004c8e <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <buzzerChangeTone+0x16c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b10      	cmp	r3, #16
 8004c74:	d105      	bne.n	8004c82 <buzzerChangeTone+0x156>
 8004c76:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <buzzerChangeTone+0x170>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8004c80:	e005      	b.n	8004c8e <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <buzzerChangeTone+0x170>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8004c8c:	e7ff      	b.n	8004c8e <buzzerChangeTone+0x162>
 8004c8e:	bf00      	nop
 8004c90:	3720      	adds	r7, #32
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20000790 	.word	0x20000790
 8004c9c:	2000078c 	.word	0x2000078c
 8004ca0:	45e7b273 	.word	0x45e7b273
 8004ca4:	10624dd3 	.word	0x10624dd3

08004ca8 <alarm>:
void alarm(int position ){
 8004ca8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
    static int time = 0 ;
    int frequency;
    int period = 1001;
 8004cb2:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8004cb6:	60bb      	str	r3, [r7, #8]
    switch(position){
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	f200 80ab 	bhi.w	8004e16 <alarm+0x16e>
 8004cc0:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <alarm+0x20>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004cd9 	.word	0x08004cd9
 8004ccc:	08004cdf 	.word	0x08004cdf
 8004cd0:	08004da9 	.word	0x08004da9
 8004cd4:	08004dcb 	.word	0x08004dcb
        case 0:
            frequency = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
            break;
 8004cdc:	e09b      	b.n	8004e16 <alarm+0x16e>
        case 1: frequency =(int)((maxFrequency-minFrequency)*((sin(2*3.14*((float)(time))/(float)(period))+1)/2)+minFrequency);
 8004cde:	4b5e      	ldr	r3, [pc, #376]	; (8004e58 <alarm+0x1b0>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b5e      	ldr	r3, [pc, #376]	; (8004e5c <alarm+0x1b4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fb fc2b 	bl	8000544 <__aeabi_i2d>
 8004cee:	4604      	mov	r4, r0
 8004cf0:	460d      	mov	r5, r1
 8004cf2:	4b5b      	ldr	r3, [pc, #364]	; (8004e60 <alarm+0x1b8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cfe:	ee17 0a90 	vmov	r0, s15
 8004d02:	f7fb fc31 	bl	8000568 <__aeabi_f2d>
 8004d06:	a352      	add	r3, pc, #328	; (adr r3, 8004e50 <alarm+0x1a8>)
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f7fb fc84 	bl	8000618 <__aeabi_dmul>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4690      	mov	r8, r2
 8004d16:	4699      	mov	r9, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d22:	ee17 0a90 	vmov	r0, s15
 8004d26:	f7fb fc1f 	bl	8000568 <__aeabi_f2d>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4640      	mov	r0, r8
 8004d30:	4649      	mov	r1, r9
 8004d32:	f7fb fd9b 	bl	800086c <__aeabi_ddiv>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	ec43 2b17 	vmov	d7, r2, r3
 8004d3e:	eeb0 0a47 	vmov.f32	s0, s14
 8004d42:	eef0 0a67 	vmov.f32	s1, s15
 8004d46:	f007 fa8b 	bl	800c260 <sin>
 8004d4a:	ec51 0b10 	vmov	r0, r1, d0
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	4b44      	ldr	r3, [pc, #272]	; (8004e64 <alarm+0x1bc>)
 8004d54:	f7fb faaa 	bl	80002ac <__adddf3>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4619      	mov	r1, r3
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d68:	f7fb fd80 	bl	800086c <__aeabi_ddiv>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4620      	mov	r0, r4
 8004d72:	4629      	mov	r1, r5
 8004d74:	f7fb fc50 	bl	8000618 <__aeabi_dmul>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4614      	mov	r4, r2
 8004d7e:	461d      	mov	r5, r3
 8004d80:	4b36      	ldr	r3, [pc, #216]	; (8004e5c <alarm+0x1b4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fb fbdd 	bl	8000544 <__aeabi_i2d>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4620      	mov	r0, r4
 8004d90:	4629      	mov	r1, r5
 8004d92:	f7fb fa8b 	bl	80002ac <__adddf3>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	f7fb fed5 	bl	8000b4c <__aeabi_d2iz>
 8004da2:	4603      	mov	r3, r0
 8004da4:	60fb      	str	r3, [r7, #12]
            break;
 8004da6:	e036      	b.n	8004e16 <alarm+0x16e>
        case 2://sqr
            if(time <period/2){
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	0fda      	lsrs	r2, r3, #31
 8004dac:	4413      	add	r3, r2
 8004dae:	105b      	asrs	r3, r3, #1
 8004db0:	461a      	mov	r2, r3
 8004db2:	4b2b      	ldr	r3, [pc, #172]	; (8004e60 <alarm+0x1b8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	dd03      	ble.n	8004dc2 <alarm+0x11a>
                frequency = maxFrequency;
 8004dba:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <alarm+0x1b0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]
            } else{
                frequency = minFrequency;
            }
            break;
 8004dc0:	e029      	b.n	8004e16 <alarm+0x16e>
                frequency = minFrequency;
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <alarm+0x1b4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60fb      	str	r3, [r7, #12]
            break;
 8004dc8:	e025      	b.n	8004e16 <alarm+0x16e>
        case 3://triangie
            frequency =(int) (minFrequency + (((maxFrequency - minFrequency)*((float )time )/ (float )period)));
 8004dca:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <alarm+0x1b4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dd6:	4b20      	ldr	r3, [pc, #128]	; (8004e58 <alarm+0x1b0>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <alarm+0x1b4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	ee07 3a90 	vmov	s15, r3
 8004de4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004de8:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <alarm+0x1b8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004df4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e02:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e0e:	ee17 3a90 	vmov	r3, s15
 8004e12:	60fb      	str	r3, [r7, #12]
            break;
 8004e14:	bf00      	nop
    }
    buzzerChangeTone(frequency,vol);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <alarm+0x1c0>)
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	b292      	uxth	r2, r2
 8004e20:	4611      	mov	r1, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fe82 	bl	8004b2c <buzzerChangeTone>


    time ++;
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <alarm+0x1b8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	4a0c      	ldr	r2, [pc, #48]	; (8004e60 <alarm+0x1b8>)
 8004e30:	6013      	str	r3, [r2, #0]
    if (time >= period)time = 0 ;
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <alarm+0x1b8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	dc02      	bgt.n	8004e42 <alarm+0x19a>
 8004e3c:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <alarm+0x1b8>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]

}
 8004e42:	bf00      	nop
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e4c:	f3af 8000 	nop.w
 8004e50:	51eb851f 	.word	0x51eb851f
 8004e54:	40191eb8 	.word	0x40191eb8
 8004e58:	2000002c 	.word	0x2000002c
 8004e5c:	20000028 	.word	0x20000028
 8004e60:	200008e8 	.word	0x200008e8
 8004e64:	3ff00000 	.word	0x3ff00000
 8004e68:	20000030 	.word	0x20000030

08004e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e70:	e7fe      	b.n	8004e70 <NMI_Handler+0x4>

08004e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e72:	b480      	push	{r7}
 8004e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e76:	e7fe      	b.n	8004e76 <HardFault_Handler+0x4>

08004e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e7c:	e7fe      	b.n	8004e7c <MemManage_Handler+0x4>

08004e7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e82:	e7fe      	b.n	8004e82 <BusFault_Handler+0x4>

08004e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e88:	e7fe      	b.n	8004e88 <UsageFault_Handler+0x4>

08004e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e8e:	bf00      	nop
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e9c:	bf00      	nop
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004eaa:	bf00      	nop
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004eb8:	f000 fd8c 	bl	80059d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ebc:	bf00      	nop
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if(HAL_GetTick() - lastPress >200){
 8004ec8:	f000 fd98 	bl	80059fc <HAL_GetTick>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2200      	movs	r2, #0
 8004ed0:	4698      	mov	r8, r3
 8004ed2:	4691      	mov	r9, r2
 8004ed4:	4b44      	ldr	r3, [pc, #272]	; (8004fe8 <EXTI0_IRQHandler+0x128>)
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	ebb8 0402 	subs.w	r4, r8, r2
 8004ede:	eb69 0503 	sbc.w	r5, r9, r3
 8004ee2:	2cc9      	cmp	r4, #201	; 0xc9
 8004ee4:	f175 0300 	sbcs.w	r3, r5, #0
 8004ee8:	d375      	bcc.n	8004fd6 <EXTI0_IRQHandler+0x116>

				col =0;
 8004eea:	4b40      	ldr	r3, [pc, #256]	; (8004fec <EXTI0_IRQHandler+0x12c>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
				for (int i = 0 ; i < 4 ; i++ ){
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	607b      	str	r3, [r7, #4]
 8004ef4:	e05c      	b.n	8004fb0 <EXTI0_IRQHandler+0xf0>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,GPIO_PIN_RESET);
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	210f      	movs	r1, #15
 8004efa:	483d      	ldr	r0, [pc, #244]	; (8004ff0 <EXTI0_IRQHandler+0x130>)
 8004efc:	f002 fbf4 	bl	80076e8 <HAL_GPIO_WritePin>
					switch (i) {
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d851      	bhi.n	8004faa <EXTI0_IRQHandler+0xea>
 8004f06:	a201      	add	r2, pc, #4	; (adr r2, 8004f0c <EXTI0_IRQHandler+0x4c>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f1d 	.word	0x08004f1d
 8004f10:	08004f3d 	.word	0x08004f3d
 8004f14:	08004f5d 	.word	0x08004f5d
 8004f18:	08004f7d 	.word	0x08004f7d
						case 0:
							   HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,GPIO_PIN_SET);
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4833      	ldr	r0, [pc, #204]	; (8004ff0 <EXTI0_IRQHandler+0x130>)
 8004f22:	f002 fbe1 	bl	80076e8 <HAL_GPIO_WritePin>
							if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 0 ;
 8004f26:	2101      	movs	r1, #1
 8004f28:	4832      	ldr	r0, [pc, #200]	; (8004ff4 <EXTI0_IRQHandler+0x134>)
 8004f2a:	f002 fbc5 	bl	80076b8 <HAL_GPIO_ReadPin>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d033      	beq.n	8004f9c <EXTI0_IRQHandler+0xdc>
 8004f34:	4b30      	ldr	r3, [pc, #192]	; (8004ff8 <EXTI0_IRQHandler+0x138>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
							break;
 8004f3a:	e02f      	b.n	8004f9c <EXTI0_IRQHandler+0xdc>
						case 1:
							HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,GPIO_PIN_SET);
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	2102      	movs	r1, #2
 8004f40:	482b      	ldr	r0, [pc, #172]	; (8004ff0 <EXTI0_IRQHandler+0x130>)
 8004f42:	f002 fbd1 	bl	80076e8 <HAL_GPIO_WritePin>
							if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 1 ;
 8004f46:	2101      	movs	r1, #1
 8004f48:	482a      	ldr	r0, [pc, #168]	; (8004ff4 <EXTI0_IRQHandler+0x134>)
 8004f4a:	f002 fbb5 	bl	80076b8 <HAL_GPIO_ReadPin>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d025      	beq.n	8004fa0 <EXTI0_IRQHandler+0xe0>
 8004f54:	4b28      	ldr	r3, [pc, #160]	; (8004ff8 <EXTI0_IRQHandler+0x138>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
							break;
 8004f5a:	e021      	b.n	8004fa0 <EXTI0_IRQHandler+0xe0>
						case 2:
							HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_SET);
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	2104      	movs	r1, #4
 8004f60:	4823      	ldr	r0, [pc, #140]	; (8004ff0 <EXTI0_IRQHandler+0x130>)
 8004f62:	f002 fbc1 	bl	80076e8 <HAL_GPIO_WritePin>
							if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 2 ;
 8004f66:	2101      	movs	r1, #1
 8004f68:	4822      	ldr	r0, [pc, #136]	; (8004ff4 <EXTI0_IRQHandler+0x134>)
 8004f6a:	f002 fba5 	bl	80076b8 <HAL_GPIO_ReadPin>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d017      	beq.n	8004fa4 <EXTI0_IRQHandler+0xe4>
 8004f74:	4b20      	ldr	r3, [pc, #128]	; (8004ff8 <EXTI0_IRQHandler+0x138>)
 8004f76:	2202      	movs	r2, #2
 8004f78:	601a      	str	r2, [r3, #0]
							break;
 8004f7a:	e013      	b.n	8004fa4 <EXTI0_IRQHandler+0xe4>
						case 3:
							HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,GPIO_PIN_SET);
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	2108      	movs	r1, #8
 8004f80:	481b      	ldr	r0, [pc, #108]	; (8004ff0 <EXTI0_IRQHandler+0x130>)
 8004f82:	f002 fbb1 	bl	80076e8 <HAL_GPIO_WritePin>
							if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 3 ;
 8004f86:	2101      	movs	r1, #1
 8004f88:	481a      	ldr	r0, [pc, #104]	; (8004ff4 <EXTI0_IRQHandler+0x134>)
 8004f8a:	f002 fb95 	bl	80076b8 <HAL_GPIO_ReadPin>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d009      	beq.n	8004fa8 <EXTI0_IRQHandler+0xe8>
 8004f94:	4b18      	ldr	r3, [pc, #96]	; (8004ff8 <EXTI0_IRQHandler+0x138>)
 8004f96:	2203      	movs	r2, #3
 8004f98:	601a      	str	r2, [r3, #0]
							break;
 8004f9a:	e005      	b.n	8004fa8 <EXTI0_IRQHandler+0xe8>
							break;
 8004f9c:	bf00      	nop
 8004f9e:	e004      	b.n	8004faa <EXTI0_IRQHandler+0xea>
							break;
 8004fa0:	bf00      	nop
 8004fa2:	e002      	b.n	8004faa <EXTI0_IRQHandler+0xea>
							break;
 8004fa4:	bf00      	nop
 8004fa6:	e000      	b.n	8004faa <EXTI0_IRQHandler+0xea>
							break;
 8004fa8:	bf00      	nop
				for (int i = 0 ; i < 4 ; i++ ){
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3301      	adds	r3, #1
 8004fae:	607b      	str	r3, [r7, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	dd9f      	ble.n	8004ef6 <EXTI0_IRQHandler+0x36>

					}
				}

				keyHandler();
 8004fb6:	f7ff f99d 	bl	80042f4 <keyHandler>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,GPIO_PIN_SET);
 8004fba:	2201      	movs	r2, #1
 8004fbc:	210f      	movs	r1, #15
 8004fbe:	480c      	ldr	r0, [pc, #48]	; (8004ff0 <EXTI0_IRQHandler+0x130>)
 8004fc0:	f002 fb92 	bl	80076e8 <HAL_GPIO_WritePin>

				lastPress = HAL_GetTick();
 8004fc4:	f000 fd1a 	bl	80059fc <HAL_GetTick>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2200      	movs	r2, #0
 8004fcc:	469a      	mov	sl, r3
 8004fce:	4693      	mov	fp, r2
 8004fd0:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <EXTI0_IRQHandler+0x128>)
 8004fd2:	e9c3 ab00 	strd	sl, fp, [r3]

			}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(keyPad_Pin);
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	f002 fbb8 	bl	800774c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000858 	.word	0x20000858
 8004fec:	20000034 	.word	0x20000034
 8004ff0:	48000c00 	.word	0x48000c00
 8004ff4:	48000800 	.word	0x48000800
 8004ff8:	20000038 	.word	0x20000038

08004ffc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005000:	b082      	sub	sp, #8
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
    if (HAL_GetTick() - lastPress > 200) {
 8005004:	f000 fcfa 	bl	80059fc <HAL_GetTick>
 8005008:	4603      	mov	r3, r0
 800500a:	2200      	movs	r2, #0
 800500c:	4698      	mov	r8, r3
 800500e:	4691      	mov	r9, r2
 8005010:	4b48      	ldr	r3, [pc, #288]	; (8005134 <EXTI1_IRQHandler+0x138>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	ebb8 0402 	subs.w	r4, r8, r2
 800501a:	eb69 0503 	sbc.w	r5, r9, r3
 800501e:	2cc9      	cmp	r4, #201	; 0xc9
 8005020:	f175 0300 	sbcs.w	r3, r5, #0
 8005024:	d375      	bcc.n	8005112 <EXTI1_IRQHandler+0x116>

        col = 1;
 8005026:	4b44      	ldr	r3, [pc, #272]	; (8005138 <EXTI1_IRQHandler+0x13c>)
 8005028:	2201      	movs	r2, #1
 800502a:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < 4; i++) {
 800502c:	2300      	movs	r3, #0
 800502e:	607b      	str	r3, [r7, #4]
 8005030:	e05c      	b.n	80050ec <EXTI1_IRQHandler+0xf0>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 8005032:	2200      	movs	r2, #0
 8005034:	210f      	movs	r1, #15
 8005036:	4841      	ldr	r0, [pc, #260]	; (800513c <EXTI1_IRQHandler+0x140>)
 8005038:	f002 fb56 	bl	80076e8 <HAL_GPIO_WritePin>
            switch (i) {
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b03      	cmp	r3, #3
 8005040:	d851      	bhi.n	80050e6 <EXTI1_IRQHandler+0xea>
 8005042:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <EXTI1_IRQHandler+0x4c>)
 8005044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005048:	08005059 	.word	0x08005059
 800504c:	08005079 	.word	0x08005079
 8005050:	08005099 	.word	0x08005099
 8005054:	080050b9 	.word	0x080050b9
                case 0:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8005058:	2201      	movs	r2, #1
 800505a:	2101      	movs	r1, #1
 800505c:	4837      	ldr	r0, [pc, #220]	; (800513c <EXTI1_IRQHandler+0x140>)
 800505e:	f002 fb43 	bl	80076e8 <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 0;
 8005062:	2102      	movs	r1, #2
 8005064:	4836      	ldr	r0, [pc, #216]	; (8005140 <EXTI1_IRQHandler+0x144>)
 8005066:	f002 fb27 	bl	80076b8 <HAL_GPIO_ReadPin>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d033      	beq.n	80050d8 <EXTI1_IRQHandler+0xdc>
 8005070:	4b34      	ldr	r3, [pc, #208]	; (8005144 <EXTI1_IRQHandler+0x148>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
                    break;
 8005076:	e02f      	b.n	80050d8 <EXTI1_IRQHandler+0xdc>
                case 1:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8005078:	2201      	movs	r2, #1
 800507a:	2102      	movs	r1, #2
 800507c:	482f      	ldr	r0, [pc, #188]	; (800513c <EXTI1_IRQHandler+0x140>)
 800507e:	f002 fb33 	bl	80076e8 <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 1;
 8005082:	2102      	movs	r1, #2
 8005084:	482e      	ldr	r0, [pc, #184]	; (8005140 <EXTI1_IRQHandler+0x144>)
 8005086:	f002 fb17 	bl	80076b8 <HAL_GPIO_ReadPin>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d025      	beq.n	80050dc <EXTI1_IRQHandler+0xe0>
 8005090:	4b2c      	ldr	r3, [pc, #176]	; (8005144 <EXTI1_IRQHandler+0x148>)
 8005092:	2201      	movs	r2, #1
 8005094:	601a      	str	r2, [r3, #0]
                    break;
 8005096:	e021      	b.n	80050dc <EXTI1_IRQHandler+0xe0>
                case 2:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8005098:	2201      	movs	r2, #1
 800509a:	2104      	movs	r1, #4
 800509c:	4827      	ldr	r0, [pc, #156]	; (800513c <EXTI1_IRQHandler+0x140>)
 800509e:	f002 fb23 	bl	80076e8 <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 2;
 80050a2:	2102      	movs	r1, #2
 80050a4:	4826      	ldr	r0, [pc, #152]	; (8005140 <EXTI1_IRQHandler+0x144>)
 80050a6:	f002 fb07 	bl	80076b8 <HAL_GPIO_ReadPin>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d017      	beq.n	80050e0 <EXTI1_IRQHandler+0xe4>
 80050b0:	4b24      	ldr	r3, [pc, #144]	; (8005144 <EXTI1_IRQHandler+0x148>)
 80050b2:	2202      	movs	r2, #2
 80050b4:	601a      	str	r2, [r3, #0]
                    break;
 80050b6:	e013      	b.n	80050e0 <EXTI1_IRQHandler+0xe4>
                case 3:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80050b8:	2201      	movs	r2, #1
 80050ba:	2108      	movs	r1, #8
 80050bc:	481f      	ldr	r0, [pc, #124]	; (800513c <EXTI1_IRQHandler+0x140>)
 80050be:	f002 fb13 	bl	80076e8 <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 3;
 80050c2:	2102      	movs	r1, #2
 80050c4:	481e      	ldr	r0, [pc, #120]	; (8005140 <EXTI1_IRQHandler+0x144>)
 80050c6:	f002 faf7 	bl	80076b8 <HAL_GPIO_ReadPin>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d009      	beq.n	80050e4 <EXTI1_IRQHandler+0xe8>
 80050d0:	4b1c      	ldr	r3, [pc, #112]	; (8005144 <EXTI1_IRQHandler+0x148>)
 80050d2:	2203      	movs	r2, #3
 80050d4:	601a      	str	r2, [r3, #0]
                    break;
 80050d6:	e005      	b.n	80050e4 <EXTI1_IRQHandler+0xe8>
                    break;
 80050d8:	bf00      	nop
 80050da:	e004      	b.n	80050e6 <EXTI1_IRQHandler+0xea>
                    break;
 80050dc:	bf00      	nop
 80050de:	e002      	b.n	80050e6 <EXTI1_IRQHandler+0xea>
                    break;
 80050e0:	bf00      	nop
 80050e2:	e000      	b.n	80050e6 <EXTI1_IRQHandler+0xea>
                    break;
 80050e4:	bf00      	nop
        for (int i = 0; i < 4; i++) {
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3301      	adds	r3, #1
 80050ea:	607b      	str	r3, [r7, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	dd9f      	ble.n	8005032 <EXTI1_IRQHandler+0x36>

            }
        }

        keyHandler();
 80050f2:	f7ff f8ff 	bl	80042f4 <keyHandler>
        lastPress = HAL_GetTick();
 80050f6:	f000 fc81 	bl	80059fc <HAL_GetTick>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2200      	movs	r2, #0
 80050fe:	469a      	mov	sl, r3
 8005100:	4693      	mov	fp, r2
 8005102:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <EXTI1_IRQHandler+0x138>)
 8005104:	e9c3 ab00 	strd	sl, fp, [r3]
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 8005108:	2201      	movs	r2, #1
 800510a:	210f      	movs	r1, #15
 800510c:	480b      	ldr	r0, [pc, #44]	; (800513c <EXTI1_IRQHandler+0x140>)
 800510e:	f002 faeb 	bl	80076e8 <HAL_GPIO_WritePin>
    }
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1));
 8005112:	bf00      	nop
 8005114:	2102      	movs	r1, #2
 8005116:	480a      	ldr	r0, [pc, #40]	; (8005140 <EXTI1_IRQHandler+0x144>)
 8005118:	f002 face 	bl	80076b8 <HAL_GPIO_ReadPin>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f8      	bne.n	8005114 <EXTI1_IRQHandler+0x118>

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005122:	2002      	movs	r0, #2
 8005124:	f002 fb12 	bl	800774c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005128:	bf00      	nop
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005132:	bf00      	nop
 8005134:	20000858 	.word	0x20000858
 8005138:	20000034 	.word	0x20000034
 800513c:	48000c00 	.word	0x48000c00
 8005140:	48000800 	.word	0x48000800
 8005144:	20000038 	.word	0x20000038

08005148 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8005148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */
		if (HAL_GetTick() - lastPress > 200) {
 8005150:	f000 fc54 	bl	80059fc <HAL_GetTick>
 8005154:	4603      	mov	r3, r0
 8005156:	2200      	movs	r2, #0
 8005158:	4698      	mov	r8, r3
 800515a:	4691      	mov	r9, r2
 800515c:	4b48      	ldr	r3, [pc, #288]	; (8005280 <EXTI2_TSC_IRQHandler+0x138>)
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	ebb8 0402 	subs.w	r4, r8, r2
 8005166:	eb69 0503 	sbc.w	r5, r9, r3
 800516a:	2cc9      	cmp	r4, #201	; 0xc9
 800516c:	f175 0300 	sbcs.w	r3, r5, #0
 8005170:	d375      	bcc.n	800525e <EXTI2_TSC_IRQHandler+0x116>

			col = 2;
 8005172:	4b44      	ldr	r3, [pc, #272]	; (8005284 <EXTI2_TSC_IRQHandler+0x13c>)
 8005174:	2202      	movs	r2, #2
 8005176:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8005178:	2300      	movs	r3, #0
 800517a:	607b      	str	r3, [r7, #4]
 800517c:	e05c      	b.n	8005238 <EXTI2_TSC_IRQHandler+0xf0>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 800517e:	2200      	movs	r2, #0
 8005180:	210f      	movs	r1, #15
 8005182:	4841      	ldr	r0, [pc, #260]	; (8005288 <EXTI2_TSC_IRQHandler+0x140>)
 8005184:	f002 fab0 	bl	80076e8 <HAL_GPIO_WritePin>
				switch (i) {
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b03      	cmp	r3, #3
 800518c:	d851      	bhi.n	8005232 <EXTI2_TSC_IRQHandler+0xea>
 800518e:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <EXTI2_TSC_IRQHandler+0x4c>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051a5 	.word	0x080051a5
 8005198:	080051c5 	.word	0x080051c5
 800519c:	080051e5 	.word	0x080051e5
 80051a0:	08005205 	.word	0x08005205
					case 0:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 80051a4:	2201      	movs	r2, #1
 80051a6:	2101      	movs	r1, #1
 80051a8:	4837      	ldr	r0, [pc, #220]	; (8005288 <EXTI2_TSC_IRQHandler+0x140>)
 80051aa:	f002 fa9d 	bl	80076e8 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 0;
 80051ae:	2104      	movs	r1, #4
 80051b0:	4836      	ldr	r0, [pc, #216]	; (800528c <EXTI2_TSC_IRQHandler+0x144>)
 80051b2:	f002 fa81 	bl	80076b8 <HAL_GPIO_ReadPin>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d033      	beq.n	8005224 <EXTI2_TSC_IRQHandler+0xdc>
 80051bc:	4b34      	ldr	r3, [pc, #208]	; (8005290 <EXTI2_TSC_IRQHandler+0x148>)
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
						break;
 80051c2:	e02f      	b.n	8005224 <EXTI2_TSC_IRQHandler+0xdc>
					case 1:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 80051c4:	2201      	movs	r2, #1
 80051c6:	2102      	movs	r1, #2
 80051c8:	482f      	ldr	r0, [pc, #188]	; (8005288 <EXTI2_TSC_IRQHandler+0x140>)
 80051ca:	f002 fa8d 	bl	80076e8 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 1;
 80051ce:	2104      	movs	r1, #4
 80051d0:	482e      	ldr	r0, [pc, #184]	; (800528c <EXTI2_TSC_IRQHandler+0x144>)
 80051d2:	f002 fa71 	bl	80076b8 <HAL_GPIO_ReadPin>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d025      	beq.n	8005228 <EXTI2_TSC_IRQHandler+0xe0>
 80051dc:	4b2c      	ldr	r3, [pc, #176]	; (8005290 <EXTI2_TSC_IRQHandler+0x148>)
 80051de:	2201      	movs	r2, #1
 80051e0:	601a      	str	r2, [r3, #0]
						break;
 80051e2:	e021      	b.n	8005228 <EXTI2_TSC_IRQHandler+0xe0>
					case 2:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80051e4:	2201      	movs	r2, #1
 80051e6:	2104      	movs	r1, #4
 80051e8:	4827      	ldr	r0, [pc, #156]	; (8005288 <EXTI2_TSC_IRQHandler+0x140>)
 80051ea:	f002 fa7d 	bl	80076e8 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 2;
 80051ee:	2104      	movs	r1, #4
 80051f0:	4826      	ldr	r0, [pc, #152]	; (800528c <EXTI2_TSC_IRQHandler+0x144>)
 80051f2:	f002 fa61 	bl	80076b8 <HAL_GPIO_ReadPin>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d017      	beq.n	800522c <EXTI2_TSC_IRQHandler+0xe4>
 80051fc:	4b24      	ldr	r3, [pc, #144]	; (8005290 <EXTI2_TSC_IRQHandler+0x148>)
 80051fe:	2202      	movs	r2, #2
 8005200:	601a      	str	r2, [r3, #0]
						break;
 8005202:	e013      	b.n	800522c <EXTI2_TSC_IRQHandler+0xe4>
					case 3:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8005204:	2201      	movs	r2, #1
 8005206:	2108      	movs	r1, #8
 8005208:	481f      	ldr	r0, [pc, #124]	; (8005288 <EXTI2_TSC_IRQHandler+0x140>)
 800520a:	f002 fa6d 	bl	80076e8 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 3;
 800520e:	2104      	movs	r1, #4
 8005210:	481e      	ldr	r0, [pc, #120]	; (800528c <EXTI2_TSC_IRQHandler+0x144>)
 8005212:	f002 fa51 	bl	80076b8 <HAL_GPIO_ReadPin>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d009      	beq.n	8005230 <EXTI2_TSC_IRQHandler+0xe8>
 800521c:	4b1c      	ldr	r3, [pc, #112]	; (8005290 <EXTI2_TSC_IRQHandler+0x148>)
 800521e:	2203      	movs	r2, #3
 8005220:	601a      	str	r2, [r3, #0]
						break;
 8005222:	e005      	b.n	8005230 <EXTI2_TSC_IRQHandler+0xe8>
						break;
 8005224:	bf00      	nop
 8005226:	e004      	b.n	8005232 <EXTI2_TSC_IRQHandler+0xea>
						break;
 8005228:	bf00      	nop
 800522a:	e002      	b.n	8005232 <EXTI2_TSC_IRQHandler+0xea>
						break;
 800522c:	bf00      	nop
 800522e:	e000      	b.n	8005232 <EXTI2_TSC_IRQHandler+0xea>
						break;
 8005230:	bf00      	nop
			for (int i = 0; i < 4; i++) {
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3301      	adds	r3, #1
 8005236:	607b      	str	r3, [r7, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b03      	cmp	r3, #3
 800523c:	dd9f      	ble.n	800517e <EXTI2_TSC_IRQHandler+0x36>

				}
			}

			keyHandler();
 800523e:	f7ff f859 	bl	80042f4 <keyHandler>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 8005242:	2201      	movs	r2, #1
 8005244:	210f      	movs	r1, #15
 8005246:	4810      	ldr	r0, [pc, #64]	; (8005288 <EXTI2_TSC_IRQHandler+0x140>)
 8005248:	f002 fa4e 	bl	80076e8 <HAL_GPIO_WritePin>

			lastPress = HAL_GetTick();
 800524c:	f000 fbd6 	bl	80059fc <HAL_GetTick>
 8005250:	4603      	mov	r3, r0
 8005252:	2200      	movs	r2, #0
 8005254:	469a      	mov	sl, r3
 8005256:	4693      	mov	fp, r2
 8005258:	4b09      	ldr	r3, [pc, #36]	; (8005280 <EXTI2_TSC_IRQHandler+0x138>)
 800525a:	e9c3 ab00 	strd	sl, fp, [r3]

		}
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2));
 800525e:	bf00      	nop
 8005260:	2104      	movs	r1, #4
 8005262:	480a      	ldr	r0, [pc, #40]	; (800528c <EXTI2_TSC_IRQHandler+0x144>)
 8005264:	f002 fa28 	bl	80076b8 <HAL_GPIO_ReadPin>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f8      	bne.n	8005260 <EXTI2_TSC_IRQHandler+0x118>

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800526e:	2004      	movs	r0, #4
 8005270:	f002 fa6c 	bl	800774c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8005274:	bf00      	nop
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800527e:	bf00      	nop
 8005280:	20000858 	.word	0x20000858
 8005284:	20000034 	.word	0x20000034
 8005288:	48000c00 	.word	0x48000c00
 800528c:	48000800 	.word	0x48000800
 8005290:	20000038 	.word	0x20000038

08005294 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
        if (HAL_GetTick() - lastPress > 200) {
 800529c:	f000 fbae 	bl	80059fc <HAL_GetTick>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2200      	movs	r2, #0
 80052a4:	4698      	mov	r8, r3
 80052a6:	4691      	mov	r9, r2
 80052a8:	4b48      	ldr	r3, [pc, #288]	; (80053cc <EXTI3_IRQHandler+0x138>)
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	ebb8 0402 	subs.w	r4, r8, r2
 80052b2:	eb69 0503 	sbc.w	r5, r9, r3
 80052b6:	2cc9      	cmp	r4, #201	; 0xc9
 80052b8:	f175 0300 	sbcs.w	r3, r5, #0
 80052bc:	d375      	bcc.n	80053aa <EXTI3_IRQHandler+0x116>

            col = 3;
 80052be:	4b44      	ldr	r3, [pc, #272]	; (80053d0 <EXTI3_IRQHandler+0x13c>)
 80052c0:	2203      	movs	r2, #3
 80052c2:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 80052c4:	2300      	movs	r3, #0
 80052c6:	607b      	str	r3, [r7, #4]
 80052c8:	e05c      	b.n	8005384 <EXTI3_IRQHandler+0xf0>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 80052ca:	2200      	movs	r2, #0
 80052cc:	210f      	movs	r1, #15
 80052ce:	4841      	ldr	r0, [pc, #260]	; (80053d4 <EXTI3_IRQHandler+0x140>)
 80052d0:	f002 fa0a 	bl	80076e8 <HAL_GPIO_WritePin>
                switch (i) {
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d851      	bhi.n	800537e <EXTI3_IRQHandler+0xea>
 80052da:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <EXTI3_IRQHandler+0x4c>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	080052f1 	.word	0x080052f1
 80052e4:	08005311 	.word	0x08005311
 80052e8:	08005331 	.word	0x08005331
 80052ec:	08005351 	.word	0x08005351
                    case 0:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 80052f0:	2201      	movs	r2, #1
 80052f2:	2101      	movs	r1, #1
 80052f4:	4837      	ldr	r0, [pc, #220]	; (80053d4 <EXTI3_IRQHandler+0x140>)
 80052f6:	f002 f9f7 	bl	80076e8 <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 0;
 80052fa:	2108      	movs	r1, #8
 80052fc:	4836      	ldr	r0, [pc, #216]	; (80053d8 <EXTI3_IRQHandler+0x144>)
 80052fe:	f002 f9db 	bl	80076b8 <HAL_GPIO_ReadPin>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d033      	beq.n	8005370 <EXTI3_IRQHandler+0xdc>
 8005308:	4b34      	ldr	r3, [pc, #208]	; (80053dc <EXTI3_IRQHandler+0x148>)
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
                        break;
 800530e:	e02f      	b.n	8005370 <EXTI3_IRQHandler+0xdc>
                    case 1:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8005310:	2201      	movs	r2, #1
 8005312:	2102      	movs	r1, #2
 8005314:	482f      	ldr	r0, [pc, #188]	; (80053d4 <EXTI3_IRQHandler+0x140>)
 8005316:	f002 f9e7 	bl	80076e8 <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 1;
 800531a:	2108      	movs	r1, #8
 800531c:	482e      	ldr	r0, [pc, #184]	; (80053d8 <EXTI3_IRQHandler+0x144>)
 800531e:	f002 f9cb 	bl	80076b8 <HAL_GPIO_ReadPin>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d025      	beq.n	8005374 <EXTI3_IRQHandler+0xe0>
 8005328:	4b2c      	ldr	r3, [pc, #176]	; (80053dc <EXTI3_IRQHandler+0x148>)
 800532a:	2201      	movs	r2, #1
 800532c:	601a      	str	r2, [r3, #0]
                        break;
 800532e:	e021      	b.n	8005374 <EXTI3_IRQHandler+0xe0>
                    case 2:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8005330:	2201      	movs	r2, #1
 8005332:	2104      	movs	r1, #4
 8005334:	4827      	ldr	r0, [pc, #156]	; (80053d4 <EXTI3_IRQHandler+0x140>)
 8005336:	f002 f9d7 	bl	80076e8 <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 2;
 800533a:	2108      	movs	r1, #8
 800533c:	4826      	ldr	r0, [pc, #152]	; (80053d8 <EXTI3_IRQHandler+0x144>)
 800533e:	f002 f9bb 	bl	80076b8 <HAL_GPIO_ReadPin>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d017      	beq.n	8005378 <EXTI3_IRQHandler+0xe4>
 8005348:	4b24      	ldr	r3, [pc, #144]	; (80053dc <EXTI3_IRQHandler+0x148>)
 800534a:	2202      	movs	r2, #2
 800534c:	601a      	str	r2, [r3, #0]
                        break;
 800534e:	e013      	b.n	8005378 <EXTI3_IRQHandler+0xe4>
                    case 3:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8005350:	2201      	movs	r2, #1
 8005352:	2108      	movs	r1, #8
 8005354:	481f      	ldr	r0, [pc, #124]	; (80053d4 <EXTI3_IRQHandler+0x140>)
 8005356:	f002 f9c7 	bl	80076e8 <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 3;
 800535a:	2108      	movs	r1, #8
 800535c:	481e      	ldr	r0, [pc, #120]	; (80053d8 <EXTI3_IRQHandler+0x144>)
 800535e:	f002 f9ab 	bl	80076b8 <HAL_GPIO_ReadPin>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d009      	beq.n	800537c <EXTI3_IRQHandler+0xe8>
 8005368:	4b1c      	ldr	r3, [pc, #112]	; (80053dc <EXTI3_IRQHandler+0x148>)
 800536a:	2203      	movs	r2, #3
 800536c:	601a      	str	r2, [r3, #0]
                        break;
 800536e:	e005      	b.n	800537c <EXTI3_IRQHandler+0xe8>
                        break;
 8005370:	bf00      	nop
 8005372:	e004      	b.n	800537e <EXTI3_IRQHandler+0xea>
                        break;
 8005374:	bf00      	nop
 8005376:	e002      	b.n	800537e <EXTI3_IRQHandler+0xea>
                        break;
 8005378:	bf00      	nop
 800537a:	e000      	b.n	800537e <EXTI3_IRQHandler+0xea>
                        break;
 800537c:	bf00      	nop
            for (int i = 0; i < 4; i++) {
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3301      	adds	r3, #1
 8005382:	607b      	str	r3, [r7, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b03      	cmp	r3, #3
 8005388:	dd9f      	ble.n	80052ca <EXTI3_IRQHandler+0x36>

                }
            }

            keyHandler();
 800538a:	f7fe ffb3 	bl	80042f4 <keyHandler>
            lastPress = HAL_GetTick();
 800538e:	f000 fb35 	bl	80059fc <HAL_GetTick>
 8005392:	4603      	mov	r3, r0
 8005394:	2200      	movs	r2, #0
 8005396:	469a      	mov	sl, r3
 8005398:	4693      	mov	fp, r2
 800539a:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <EXTI3_IRQHandler+0x138>)
 800539c:	e9c3 ab00 	strd	sl, fp, [r3]
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 80053a0:	2201      	movs	r2, #1
 80053a2:	210f      	movs	r1, #15
 80053a4:	480b      	ldr	r0, [pc, #44]	; (80053d4 <EXTI3_IRQHandler+0x140>)
 80053a6:	f002 f99f 	bl	80076e8 <HAL_GPIO_WritePin>


        }
        while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3));
 80053aa:	bf00      	nop
 80053ac:	2108      	movs	r1, #8
 80053ae:	480a      	ldr	r0, [pc, #40]	; (80053d8 <EXTI3_IRQHandler+0x144>)
 80053b0:	f002 f982 	bl	80076b8 <HAL_GPIO_ReadPin>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f8      	bne.n	80053ac <EXTI3_IRQHandler+0x118>

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80053ba:	2008      	movs	r0, #8
 80053bc:	f002 f9c6 	bl	800774c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ca:	bf00      	nop
 80053cc:	20000858 	.word	0x20000858
 80053d0:	20000034 	.word	0x20000034
 80053d4:	48000c00 	.word	0x48000c00
 80053d8:	48000800 	.word	0x48000800
 80053dc:	20000038 	.word	0x20000038

080053e0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
someOneClose = 1;
 80053e4:	4b08      	ldr	r3, [pc, #32]	; (8005408 <EXTI4_IRQHandler+0x28>)
 80053e6:	2201      	movs	r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
mSecond = 0;
 80053ea:	4b08      	ldr	r3, [pc, #32]	; (800540c <EXTI4_IRQHandler+0x2c>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80053f0:	2201      	movs	r2, #1
 80053f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053f6:	4806      	ldr	r0, [pc, #24]	; (8005410 <EXTI4_IRQHandler+0x30>)
 80053f8:	f002 f976 	bl	80076e8 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_Pin);
 80053fc:	2010      	movs	r0, #16
 80053fe:	f002 f9a5 	bl	800774c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005402:	bf00      	nop
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000798 	.word	0x20000798
 800540c:	20000888 	.word	0x20000888
 8005410:	48001000 	.word	0x48001000

08005414 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
    static int counter  =  0 ;
    static int temSum = 0;
//    static int lumSum = 0 ;
    counter ++;
 800541a:	4b31      	ldr	r3, [pc, #196]	; (80054e0 <ADC1_2_IRQHandler+0xcc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3301      	adds	r3, #1
 8005420:	4a2f      	ldr	r2, [pc, #188]	; (80054e0 <ADC1_2_IRQHandler+0xcc>)
 8005422:	6013      	str	r3, [r2, #0]
    if(counter %100== 0){
 8005424:	4b2e      	ldr	r3, [pc, #184]	; (80054e0 <ADC1_2_IRQHandler+0xcc>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	4b2e      	ldr	r3, [pc, #184]	; (80054e4 <ADC1_2_IRQHandler+0xd0>)
 800542a:	fb83 1302 	smull	r1, r3, r3, r2
 800542e:	1159      	asrs	r1, r3, #5
 8005430:	17d3      	asrs	r3, r2, #31
 8005432:	1acb      	subs	r3, r1, r3
 8005434:	2164      	movs	r1, #100	; 0x64
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d13f      	bne.n	80054c0 <ADC1_2_IRQHandler+0xac>

//        lumSum +=  (int) ((HAL_ADC_GetValue(&hadc1) * 99) / 1000);
        int Voltage_mv = (int)(HAL_ADC_GetValue(&hadc2) * 3300 / 4095);
 8005440:	4829      	ldr	r0, [pc, #164]	; (80054e8 <ADC1_2_IRQHandler+0xd4>)
 8005442:	f000 fe49 	bl	80060d8 <HAL_ADC_GetValue>
 8005446:	4603      	mov	r3, r0
 8005448:	f640 42e4 	movw	r2, #3300	; 0xce4
 800544c:	fb03 f202 	mul.w	r2, r3, r2
 8005450:	4b26      	ldr	r3, [pc, #152]	; (80054ec <ADC1_2_IRQHandler+0xd8>)
 8005452:	fba3 1302 	umull	r1, r3, r3, r2
 8005456:	1ad2      	subs	r2, r2, r3
 8005458:	0852      	lsrs	r2, r2, #1
 800545a:	4413      	add	r3, r2
 800545c:	0adb      	lsrs	r3, r3, #11
 800545e:	607b      	str	r3, [r7, #4]
        temSum += Voltage_mv / 10;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a23      	ldr	r2, [pc, #140]	; (80054f0 <ADC1_2_IRQHandler+0xdc>)
 8005464:	fb82 1203 	smull	r1, r2, r2, r3
 8005468:	1092      	asrs	r2, r2, #2
 800546a:	17db      	asrs	r3, r3, #31
 800546c:	1ad2      	subs	r2, r2, r3
 800546e:	4b21      	ldr	r3, [pc, #132]	; (80054f4 <ADC1_2_IRQHandler+0xe0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4413      	add	r3, r2
 8005474:	4a1f      	ldr	r2, [pc, #124]	; (80054f4 <ADC1_2_IRQHandler+0xe0>)
 8005476:	6013      	str	r3, [r2, #0]

        if(counter == 900){
 8005478:	4b19      	ldr	r3, [pc, #100]	; (80054e0 <ADC1_2_IRQHandler+0xcc>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8005480:	d11e      	bne.n	80054c0 <ADC1_2_IRQHandler+0xac>

//            int lumCopy = lum;
            int temCopy = temperature;
 8005482:	4b1d      	ldr	r3, [pc, #116]	; (80054f8 <ADC1_2_IRQHandler+0xe4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	603b      	str	r3, [r7, #0]
//            lum = lumSum/10;
            temperature = temSum / 100;
 8005488:	4b1a      	ldr	r3, [pc, #104]	; (80054f4 <ADC1_2_IRQHandler+0xe0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a15      	ldr	r2, [pc, #84]	; (80054e4 <ADC1_2_IRQHandler+0xd0>)
 800548e:	fb82 1203 	smull	r1, r2, r2, r3
 8005492:	1152      	asrs	r2, r2, #5
 8005494:	17db      	asrs	r3, r3, #31
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <ADC1_2_IRQHandler+0xe4>)
 800549a:	6013      	str	r3, [r2, #0]
            counter = 0 ;
 800549c:	4b10      	ldr	r3, [pc, #64]	; (80054e0 <ADC1_2_IRQHandler+0xcc>)
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
            temSum = 0 ;
 80054a2:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <ADC1_2_IRQHandler+0xe0>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
//            lumSum = 0 ;

//            if(lum < lumCopy)HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
            if(temperature > temSum)HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 80054a8:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <ADC1_2_IRQHandler+0xe4>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <ADC1_2_IRQHandler+0xe0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	dd05      	ble.n	80054c0 <ADC1_2_IRQHandler+0xac>
 80054b4:	2200      	movs	r2, #0
 80054b6:	2110      	movs	r1, #16
 80054b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054bc:	f002 f914 	bl	80076e8 <HAL_GPIO_WritePin>
    }




    HAL_ADC_Start_IT(&hadc1);
 80054c0:	480e      	ldr	r0, [pc, #56]	; (80054fc <ADC1_2_IRQHandler+0xe8>)
 80054c2:	f000 fcc9 	bl	8005e58 <HAL_ADC_Start_IT>
    HAL_ADC_Start_IT(&hadc2);
 80054c6:	4808      	ldr	r0, [pc, #32]	; (80054e8 <ADC1_2_IRQHandler+0xd4>)
 80054c8:	f000 fcc6 	bl	8005e58 <HAL_ADC_Start_IT>
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80054cc:	480b      	ldr	r0, [pc, #44]	; (80054fc <ADC1_2_IRQHandler+0xe8>)
 80054ce:	f000 fe11 	bl	80060f4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80054d2:	4805      	ldr	r0, [pc, #20]	; (80054e8 <ADC1_2_IRQHandler+0xd4>)
 80054d4:	f000 fe0e 	bl	80060f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	200008ec 	.word	0x200008ec
 80054e4:	51eb851f 	.word	0x51eb851f
 80054e8:	20000238 	.word	0x20000238
 80054ec:	00100101 	.word	0x00100101
 80054f0:	66666667 	.word	0x66666667
 80054f4:	200008f0 	.word	0x200008f0
 80054f8:	20000004 	.word	0x20000004
 80054fc:	200001e8 	.word	0x200001e8

08005500 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005504:	2020      	movs	r0, #32
 8005506:	f002 f921 	bl	800774c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800550a:	bf00      	nop
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005514:	4803      	ldr	r0, [pc, #12]	; (8005524 <TIM2_IRQHandler+0x14>)
 8005516:	f004 fa33 	bl	8009980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	HAL_TIM_Base_Start_IT(&htim2);
 800551a:	4802      	ldr	r0, [pc, #8]	; (8005524 <TIM2_IRQHandler+0x14>)
 800551c:	f004 f864 	bl	80095e8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM2_IRQn 1 */
}
 8005520:	bf00      	nop
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20000338 	.word	0x20000338

08005528 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
//		shown1 = 1;
//
//	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800552c:	4803      	ldr	r0, [pc, #12]	; (800553c <TIM3_IRQHandler+0x14>)
 800552e:	f004 fa27 	bl	8009980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	HAL_TIM_Base_Start_IT(&htim3);
 8005532:	4802      	ldr	r0, [pc, #8]	; (800553c <TIM3_IRQHandler+0x14>)
 8005534:	f004 f858 	bl	80095e8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_IRQn 1 */
}
 8005538:	bf00      	nop
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20000384 	.word	0x20000384

08005540 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005544:	4802      	ldr	r0, [pc, #8]	; (8005550 <USART2_IRQHandler+0x10>)
 8005546:	f005 fa5d 	bl	800aa04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	2000041c 	.word	0x2000041c

08005554 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005554:	b590      	push	{r4, r7, lr}
 8005556:	b0c3      	sub	sp, #268	; 0x10c
 8005558:	af40      	add	r7, sp, #256	; 0x100
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
static int alarmPosition = 0;
//setCursor(0,0);
char temp2[2] = " ";
 800555a:	2320      	movs	r3, #32
 800555c:	80bb      	strh	r3, [r7, #4]
sprintf(temp2,"%d",temperature);
 800555e:	4b98      	ldr	r3, [pc, #608]	; (80057c0 <TIM6_DAC_IRQHandler+0x26c>)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	1d3b      	adds	r3, r7, #4
 8005564:	4997      	ldr	r1, [pc, #604]	; (80057c4 <TIM6_DAC_IRQHandler+0x270>)
 8005566:	4618      	mov	r0, r3
 8005568:	f006 faf0 	bl	800bb4c <siprintf>
//print(temp2);
		if(startState == 1 && HAL_GetTick() - startStateLastTime >= 1000){
 800556c:	4b96      	ldr	r3, [pc, #600]	; (80057c8 <TIM6_DAC_IRQHandler+0x274>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d121      	bne.n	80055b8 <TIM6_DAC_IRQHandler+0x64>
 8005574:	f000 fa42 	bl	80059fc <HAL_GetTick>
 8005578:	4603      	mov	r3, r0
 800557a:	4a94      	ldr	r2, [pc, #592]	; (80057cc <TIM6_DAC_IRQHandler+0x278>)
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005584:	d318      	bcc.n	80055b8 <TIM6_DAC_IRQHandler+0x64>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,1);
 8005586:	2201      	movs	r2, #1
 8005588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800558c:	4890      	ldr	r0, [pc, #576]	; (80057d0 <TIM6_DAC_IRQHandler+0x27c>)
 800558e:	f002 f8ab 	bl	80076e8 <HAL_GPIO_WritePin>
			clear();
 8005592:	f7fb fd5f 	bl	8001054 <clear>
			setCursor(0,0);
 8005596:	2100      	movs	r1, #0
 8005598:	2000      	movs	r0, #0
 800559a:	f7fb fd65 	bl	8001068 <setCursor>
			print(">> ControlPanel  ");
 800559e:	488d      	ldr	r0, [pc, #564]	; (80057d4 <TIM6_DAC_IRQHandler+0x280>)
 80055a0:	f7fb fdc0 	bl	8001124 <print>
			GenerateMenu();
 80055a4:	f7fc fdd0 	bl	8002148 <GenerateMenu>
			generateMenu = 1;
 80055a8:	4b8b      	ldr	r3, [pc, #556]	; (80057d8 <TIM6_DAC_IRQHandler+0x284>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
			startState = 2;
 80055ae:	4b86      	ldr	r3, [pc, #536]	; (80057c8 <TIM6_DAC_IRQHandler+0x274>)
 80055b0:	2202      	movs	r2, #2
 80055b2:	601a      	str	r2, [r3, #0]
			display();
 80055b4:	f7fb fda0 	bl	80010f8 <display>
		}
		if(startState == 3 && HAL_GetTick() - startStateLastTime >= 1000){
 80055b8:	4b83      	ldr	r3, [pc, #524]	; (80057c8 <TIM6_DAC_IRQHandler+0x274>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d110      	bne.n	80055e2 <TIM6_DAC_IRQHandler+0x8e>
 80055c0:	f000 fa1c 	bl	80059fc <HAL_GetTick>
 80055c4:	4603      	mov	r3, r0
 80055c6:	4a81      	ldr	r2, [pc, #516]	; (80057cc <TIM6_DAC_IRQHandler+0x278>)
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	1a9b      	subs	r3, r3, r2
 80055cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055d0:	d307      	bcc.n	80055e2 <TIM6_DAC_IRQHandler+0x8e>
			startState = 0;
 80055d2:	4b7d      	ldr	r3, [pc, #500]	; (80057c8 <TIM6_DAC_IRQHandler+0x274>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
			generateMenu = 0;
 80055d8:	4b7f      	ldr	r3, [pc, #508]	; (80057d8 <TIM6_DAC_IRQHandler+0x284>)
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
			clear();
 80055de:	f7fb fd39 	bl	8001054 <clear>
		}
		if(temperature <= temThreshold && !someOneClose)
 80055e2:	4b77      	ldr	r3, [pc, #476]	; (80057c0 <TIM6_DAC_IRQHandler+0x26c>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	4b7d      	ldr	r3, [pc, #500]	; (80057dc <TIM6_DAC_IRQHandler+0x288>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	dc06      	bgt.n	80055fc <TIM6_DAC_IRQHandler+0xa8>
 80055ee:	4b7c      	ldr	r3, [pc, #496]	; (80057e0 <TIM6_DAC_IRQHandler+0x28c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <TIM6_DAC_IRQHandler+0xa8>
			alarmPosition = 0;
 80055f6:	4b7b      	ldr	r3, [pc, #492]	; (80057e4 <TIM6_DAC_IRQHandler+0x290>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
		if(temperature > temThreshold || (someOneClose && securityAlert)){
 80055fc:	4b70      	ldr	r3, [pc, #448]	; (80057c0 <TIM6_DAC_IRQHandler+0x26c>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	4b76      	ldr	r3, [pc, #472]	; (80057dc <TIM6_DAC_IRQHandler+0x288>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	dc09      	bgt.n	800561c <TIM6_DAC_IRQHandler+0xc8>
 8005608:	4b75      	ldr	r3, [pc, #468]	; (80057e0 <TIM6_DAC_IRQHandler+0x28c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 80af 	beq.w	8005770 <TIM6_DAC_IRQHandler+0x21c>
 8005612:	4b75      	ldr	r3, [pc, #468]	; (80057e8 <TIM6_DAC_IRQHandler+0x294>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 80aa 	beq.w	8005770 <TIM6_DAC_IRQHandler+0x21c>
			if(securityAlarm == 1 && someOneClose &&temAlarm==1 && temperature > temThreshold){
 800561c:	4b73      	ldr	r3, [pc, #460]	; (80057ec <TIM6_DAC_IRQHandler+0x298>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d111      	bne.n	8005648 <TIM6_DAC_IRQHandler+0xf4>
 8005624:	4b6e      	ldr	r3, [pc, #440]	; (80057e0 <TIM6_DAC_IRQHandler+0x28c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00d      	beq.n	8005648 <TIM6_DAC_IRQHandler+0xf4>
 800562c:	4b70      	ldr	r3, [pc, #448]	; (80057f0 <TIM6_DAC_IRQHandler+0x29c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d109      	bne.n	8005648 <TIM6_DAC_IRQHandler+0xf4>
 8005634:	4b62      	ldr	r3, [pc, #392]	; (80057c0 <TIM6_DAC_IRQHandler+0x26c>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4b68      	ldr	r3, [pc, #416]	; (80057dc <TIM6_DAC_IRQHandler+0x288>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	dd03      	ble.n	8005648 <TIM6_DAC_IRQHandler+0xf4>
				alarmPosition = 1;
 8005640:	4b68      	ldr	r3, [pc, #416]	; (80057e4 <TIM6_DAC_IRQHandler+0x290>)
 8005642:	2201      	movs	r2, #1
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	e018      	b.n	800567a <TIM6_DAC_IRQHandler+0x126>
			}
			else if(securityAlarm == 1 && someOneClose){
 8005648:	4b68      	ldr	r3, [pc, #416]	; (80057ec <TIM6_DAC_IRQHandler+0x298>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d107      	bne.n	8005660 <TIM6_DAC_IRQHandler+0x10c>
 8005650:	4b63      	ldr	r3, [pc, #396]	; (80057e0 <TIM6_DAC_IRQHandler+0x28c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <TIM6_DAC_IRQHandler+0x10c>
				alarmPosition = 2;
 8005658:	4b62      	ldr	r3, [pc, #392]	; (80057e4 <TIM6_DAC_IRQHandler+0x290>)
 800565a:	2202      	movs	r2, #2
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e00c      	b.n	800567a <TIM6_DAC_IRQHandler+0x126>
			}
			else if(temAlarm==1 && temperature > temThreshold){
 8005660:	4b63      	ldr	r3, [pc, #396]	; (80057f0 <TIM6_DAC_IRQHandler+0x29c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d108      	bne.n	800567a <TIM6_DAC_IRQHandler+0x126>
 8005668:	4b55      	ldr	r3, [pc, #340]	; (80057c0 <TIM6_DAC_IRQHandler+0x26c>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	4b5b      	ldr	r3, [pc, #364]	; (80057dc <TIM6_DAC_IRQHandler+0x288>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	dd02      	ble.n	800567a <TIM6_DAC_IRQHandler+0x126>
				alarmPosition = 3;
 8005674:	4b5b      	ldr	r3, [pc, #364]	; (80057e4 <TIM6_DAC_IRQHandler+0x290>)
 8005676:	2203      	movs	r2, #3
 8005678:	601a      	str	r2, [r3, #0]
			}
			// this part can be changed by animation
			char temp[1];
			sprintf(temp,"%d",mSecond);
 800567a:	4b5e      	ldr	r3, [pc, #376]	; (80057f4 <TIM6_DAC_IRQHandler+0x2a0>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	463b      	mov	r3, r7
 8005680:	4950      	ldr	r1, [pc, #320]	; (80057c4 <TIM6_DAC_IRQHandler+0x270>)
 8005682:	4618      	mov	r0, r3
 8005684:	f006 fa62 	bl	800bb4c <siprintf>
			setCursor(17,0);
 8005688:	2100      	movs	r1, #0
 800568a:	2011      	movs	r0, #17
 800568c:	f7fb fcec 	bl	8001068 <setCursor>
			print(temp);
 8005690:	463b      	mov	r3, r7
 8005692:	4618      	mov	r0, r3
 8005694:	f7fb fd46 	bl	8001124 <print>
			if(mSecond < 10){
 8005698:	4b56      	ldr	r3, [pc, #344]	; (80057f4 <TIM6_DAC_IRQHandler+0x2a0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b09      	cmp	r3, #9
 800569e:	dc47      	bgt.n	8005730 <TIM6_DAC_IRQHandler+0x1dc>
				setCursor(0,0);
 80056a0:	2100      	movs	r1, #0
 80056a2:	2000      	movs	r0, #0
 80056a4:	f7fb fce0 	bl	8001068 <setCursor>
				if(temperature > temThreshold){
 80056a8:	4b45      	ldr	r3, [pc, #276]	; (80057c0 <TIM6_DAC_IRQHandler+0x26c>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	4b4b      	ldr	r3, [pc, #300]	; (80057dc <TIM6_DAC_IRQHandler+0x288>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	dd03      	ble.n	80056bc <TIM6_DAC_IRQHandler+0x168>
					print("High Temper     ");
 80056b4:	4850      	ldr	r0, [pc, #320]	; (80057f8 <TIM6_DAC_IRQHandler+0x2a4>)
 80056b6:	f7fb fd35 	bl	8001124 <print>
 80056ba:	e002      	b.n	80056c2 <TIM6_DAC_IRQHandler+0x16e>
					if(temAlarm){
					// activate temperature alarm
					}
				}else{
					print("                   ");
 80056bc:	484f      	ldr	r0, [pc, #316]	; (80057fc <TIM6_DAC_IRQHandler+0x2a8>)
 80056be:	f7fb fd31 	bl	8001124 <print>
				}
				setCursor(0,1);
 80056c2:	2101      	movs	r1, #1
 80056c4:	2000      	movs	r0, #0
 80056c6:	f7fb fccf 	bl	8001068 <setCursor>
				if(someOneClose && securityAlert){
 80056ca:	4b45      	ldr	r3, [pc, #276]	; (80057e0 <TIM6_DAC_IRQHandler+0x28c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <TIM6_DAC_IRQHandler+0x18e>
 80056d2:	4b45      	ldr	r3, [pc, #276]	; (80057e8 <TIM6_DAC_IRQHandler+0x294>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <TIM6_DAC_IRQHandler+0x18e>
					print("Some One Near By   ");
 80056da:	4849      	ldr	r0, [pc, #292]	; (8005800 <TIM6_DAC_IRQHandler+0x2ac>)
 80056dc:	f7fb fd22 	bl	8001124 <print>
					if(securityAlarm){
 80056e0:	e002      	b.n	80056e8 <TIM6_DAC_IRQHandler+0x194>
					// activate security alarm
					}
				}else{
					print("                   ");
 80056e2:	4846      	ldr	r0, [pc, #280]	; (80057fc <TIM6_DAC_IRQHandler+0x2a8>)
 80056e4:	f7fb fd1e 	bl	8001124 <print>
				}
				setCursor(0,2);
 80056e8:	2102      	movs	r1, #2
 80056ea:	2000      	movs	r0, #0
 80056ec:	f7fb fcbc 	bl	8001068 <setCursor>
				print("                   ");
 80056f0:	4842      	ldr	r0, [pc, #264]	; (80057fc <TIM6_DAC_IRQHandler+0x2a8>)
 80056f2:	f7fb fd17 	bl	8001124 <print>
				setCursor(0,3);
 80056f6:	2103      	movs	r1, #3
 80056f8:	2000      	movs	r0, #0
 80056fa:	f7fb fcb5 	bl	8001068 <setCursor>
				print("                   ");
 80056fe:	483f      	ldr	r0, [pc, #252]	; (80057fc <TIM6_DAC_IRQHandler+0x2a8>)
 8005700:	f7fb fd10 	bl	8001124 <print>
				shown = 1;
 8005704:	4b3f      	ldr	r3, [pc, #252]	; (8005804 <TIM6_DAC_IRQHandler+0x2b0>)
 8005706:	2201      	movs	r2, #1
 8005708:	601a      	str	r2, [r3, #0]
				if(mSecond %3 ==0)
 800570a:	4b3a      	ldr	r3, [pc, #232]	; (80057f4 <TIM6_DAC_IRQHandler+0x2a0>)
 800570c:	6819      	ldr	r1, [r3, #0]
 800570e:	4b3e      	ldr	r3, [pc, #248]	; (8005808 <TIM6_DAC_IRQHandler+0x2b4>)
 8005710:	fb83 3201 	smull	r3, r2, r3, r1
 8005714:	17cb      	asrs	r3, r1, #31
 8005716:	1ad2      	subs	r2, r2, r3
 8005718:	4613      	mov	r3, r2
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	4413      	add	r3, r2
 800571e:	1aca      	subs	r2, r1, r3
 8005720:	2a00      	cmp	r2, #0
 8005722:	d102      	bne.n	800572a <TIM6_DAC_IRQHandler+0x1d6>
					noDisplay();
 8005724:	f7fb fcd2 	bl	80010cc <noDisplay>
		if(temperature > temThreshold || (someOneClose && securityAlert)){
 8005728:	e074      	b.n	8005814 <TIM6_DAC_IRQHandler+0x2c0>
				else
					display();
 800572a:	f7fb fce5 	bl	80010f8 <display>
		if(temperature > temThreshold || (someOneClose && securityAlert)){
 800572e:	e071      	b.n	8005814 <TIM6_DAC_IRQHandler+0x2c0>
			}
			else{
				shown = 0;
 8005730:	4b34      	ldr	r3, [pc, #208]	; (8005804 <TIM6_DAC_IRQHandler+0x2b0>)
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
				clear();
 8005736:	f7fb fc8d 	bl	8001054 <clear>
				if(startState == 2){
 800573a:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <TIM6_DAC_IRQHandler+0x274>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d168      	bne.n	8005814 <TIM6_DAC_IRQHandler+0x2c0>
					if(inMenu)
 8005742:	4b32      	ldr	r3, [pc, #200]	; (800580c <TIM6_DAC_IRQHandler+0x2b8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <TIM6_DAC_IRQHandler+0x1fc>
						ShowMenu();
 800574a:	f7fd fe53 	bl	80033f4 <ShowMenu>
		if(temperature > temThreshold || (someOneClose && securityAlert)){
 800574e:	e061      	b.n	8005814 <TIM6_DAC_IRQHandler+0x2c0>
					else
						ShowInfo(currentNode->screen);
 8005750:	4b2f      	ldr	r3, [pc, #188]	; (8005810 <TIM6_DAC_IRQHandler+0x2bc>)
 8005752:	681c      	ldr	r4, [r3, #0]
 8005754:	4668      	mov	r0, sp
 8005756:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800575a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800575e:	4619      	mov	r1, r3
 8005760:	f006 f8ee 	bl	800b940 <memcpy>
 8005764:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8005768:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800576a:	f7fd febb 	bl	80034e4 <ShowInfo>
		if(temperature > temThreshold || (someOneClose && securityAlert)){
 800576e:	e051      	b.n	8005814 <TIM6_DAC_IRQHandler+0x2c0>
				}
			}

		}else if(shown){
 8005770:	4b24      	ldr	r3, [pc, #144]	; (8005804 <TIM6_DAC_IRQHandler+0x2b0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d04e      	beq.n	8005816 <TIM6_DAC_IRQHandler+0x2c2>
			alarmPosition = 0;
 8005778:	4b1a      	ldr	r3, [pc, #104]	; (80057e4 <TIM6_DAC_IRQHandler+0x290>)
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
			shown = 0;
 800577e:	4b21      	ldr	r3, [pc, #132]	; (8005804 <TIM6_DAC_IRQHandler+0x2b0>)
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
			clear();
 8005784:	f7fb fc66 	bl	8001054 <clear>
			if(startState == 2){
 8005788:	4b0f      	ldr	r3, [pc, #60]	; (80057c8 <TIM6_DAC_IRQHandler+0x274>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b02      	cmp	r3, #2
 800578e:	d142      	bne.n	8005816 <TIM6_DAC_IRQHandler+0x2c2>
				if(inMenu)
 8005790:	4b1e      	ldr	r3, [pc, #120]	; (800580c <TIM6_DAC_IRQHandler+0x2b8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <TIM6_DAC_IRQHandler+0x24a>
					ShowMenu();
 8005798:	f7fd fe2c 	bl	80033f4 <ShowMenu>
 800579c:	e03b      	b.n	8005816 <TIM6_DAC_IRQHandler+0x2c2>
				else
					ShowInfo(currentNode->screen);
 800579e:	4b1c      	ldr	r3, [pc, #112]	; (8005810 <TIM6_DAC_IRQHandler+0x2bc>)
 80057a0:	681c      	ldr	r4, [r3, #0]
 80057a2:	4668      	mov	r0, sp
 80057a4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80057a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ac:	4619      	mov	r1, r3
 80057ae:	f006 f8c7 	bl	800b940 <memcpy>
 80057b2:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80057b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057b8:	f7fd fe94 	bl	80034e4 <ShowInfo>
 80057bc:	e02b      	b.n	8005816 <TIM6_DAC_IRQHandler+0x2c2>
 80057be:	bf00      	nop
 80057c0:	20000004 	.word	0x20000004
 80057c4:	0800daf8 	.word	0x0800daf8
 80057c8:	20000880 	.word	0x20000880
 80057cc:	20000884 	.word	0x20000884
 80057d0:	48001000 	.word	0x48001000
 80057d4:	0800dafc 	.word	0x0800dafc
 80057d8:	2000086c 	.word	0x2000086c
 80057dc:	20000008 	.word	0x20000008
 80057e0:	20000798 	.word	0x20000798
 80057e4:	200008f4 	.word	0x200008f4
 80057e8:	20000014 	.word	0x20000014
 80057ec:	20000010 	.word	0x20000010
 80057f0:	2000000c 	.word	0x2000000c
 80057f4:	20000888 	.word	0x20000888
 80057f8:	0800db10 	.word	0x0800db10
 80057fc:	0800da18 	.word	0x0800da18
 8005800:	0800db24 	.word	0x0800db24
 8005804:	2000088c 	.word	0x2000088c
 8005808:	55555556 	.word	0x55555556
 800580c:	2000012c 	.word	0x2000012c
 8005810:	200008e4 	.word	0x200008e4
		if(temperature > temThreshold || (someOneClose && securityAlert)){
 8005814:	bf00      	nop
			}
		}
		mSecond++;
 8005816:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <TIM6_DAC_IRQHandler+0x300>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3301      	adds	r3, #1
 800581c:	4a0d      	ldr	r2, [pc, #52]	; (8005854 <TIM6_DAC_IRQHandler+0x300>)
 800581e:	6013      	str	r3, [r2, #0]
		if(mSecond>=20)
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <TIM6_DAC_IRQHandler+0x300>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b13      	cmp	r3, #19
 8005826:	dd05      	ble.n	8005834 <TIM6_DAC_IRQHandler+0x2e0>
		{
			mSecond =0;
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <TIM6_DAC_IRQHandler+0x300>)
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]
			someOneClose = 0;
 800582e:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <TIM6_DAC_IRQHandler+0x304>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
		}
  alarm(alarmPosition);
 8005834:	4b09      	ldr	r3, [pc, #36]	; (800585c <TIM6_DAC_IRQHandler+0x308>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fa35 	bl	8004ca8 <alarm>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800583e:	4808      	ldr	r0, [pc, #32]	; (8005860 <TIM6_DAC_IRQHandler+0x30c>)
 8005840:	f004 f89e 	bl	8009980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
	HAL_TIM_Base_Start_IT(&htim6);
 8005844:	4806      	ldr	r0, [pc, #24]	; (8005860 <TIM6_DAC_IRQHandler+0x30c>)
 8005846:	f003 fecf 	bl	80095e8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	bd90      	pop	{r4, r7, pc}
 8005852:	bf00      	nop
 8005854:	20000888 	.word	0x20000888
 8005858:	20000798 	.word	0x20000798
 800585c:	200008f4 	.word	0x200008f4
 8005860:	200003d0 	.word	0x200003d0

08005864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800586c:	4a14      	ldr	r2, [pc, #80]	; (80058c0 <_sbrk+0x5c>)
 800586e:	4b15      	ldr	r3, [pc, #84]	; (80058c4 <_sbrk+0x60>)
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005878:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <_sbrk+0x64>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005880:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <_sbrk+0x64>)
 8005882:	4a12      	ldr	r2, [pc, #72]	; (80058cc <_sbrk+0x68>)
 8005884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005886:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <_sbrk+0x64>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	429a      	cmp	r2, r3
 8005892:	d207      	bcs.n	80058a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005894:	f006 f822 	bl	800b8dc <__errno>
 8005898:	4603      	mov	r3, r0
 800589a:	220c      	movs	r2, #12
 800589c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800589e:	f04f 33ff 	mov.w	r3, #4294967295
 80058a2:	e009      	b.n	80058b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058a4:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <_sbrk+0x64>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058aa:	4b07      	ldr	r3, [pc, #28]	; (80058c8 <_sbrk+0x64>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4413      	add	r3, r2
 80058b2:	4a05      	ldr	r2, [pc, #20]	; (80058c8 <_sbrk+0x64>)
 80058b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058b6:	68fb      	ldr	r3, [r7, #12]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	2000a000 	.word	0x2000a000
 80058c4:	00000400 	.word	0x00000400
 80058c8:	200008f8 	.word	0x200008f8
 80058cc:	20000910 	.word	0x20000910

080058d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <SystemInit+0x20>)
 80058d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058da:	4a05      	ldr	r2, [pc, #20]	; (80058f0 <SystemInit+0x20>)
 80058dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	e000ed00 	.word	0xe000ed00

080058f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80058f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800592c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058f8:	480d      	ldr	r0, [pc, #52]	; (8005930 <LoopForever+0x6>)
  ldr r1, =_edata
 80058fa:	490e      	ldr	r1, [pc, #56]	; (8005934 <LoopForever+0xa>)
  ldr r2, =_sidata
 80058fc:	4a0e      	ldr	r2, [pc, #56]	; (8005938 <LoopForever+0xe>)
  movs r3, #0
 80058fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005900:	e002      	b.n	8005908 <LoopCopyDataInit>

08005902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005906:	3304      	adds	r3, #4

08005908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800590a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800590c:	d3f9      	bcc.n	8005902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800590e:	4a0b      	ldr	r2, [pc, #44]	; (800593c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005910:	4c0b      	ldr	r4, [pc, #44]	; (8005940 <LoopForever+0x16>)
  movs r3, #0
 8005912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005914:	e001      	b.n	800591a <LoopFillZerobss>

08005916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005918:	3204      	adds	r2, #4

0800591a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800591a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800591c:	d3fb      	bcc.n	8005916 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800591e:	f7ff ffd7 	bl	80058d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005922:	f005 ffe1 	bl	800b8e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005926:	f7fb fd19 	bl	800135c <main>

0800592a <LoopForever>:

LoopForever:
    b LoopForever
 800592a:	e7fe      	b.n	800592a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800592c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8005930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005934:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8005938:	0800dd88 	.word	0x0800dd88
  ldr r2, =_sbss
 800593c:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8005940:	20000910 	.word	0x20000910

08005944 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005944:	e7fe      	b.n	8005944 <ADC3_IRQHandler>
	...

08005948 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800594c:	4b08      	ldr	r3, [pc, #32]	; (8005970 <HAL_Init+0x28>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a07      	ldr	r2, [pc, #28]	; (8005970 <HAL_Init+0x28>)
 8005952:	f043 0310 	orr.w	r3, r3, #16
 8005956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005958:	2003      	movs	r0, #3
 800595a:	f001 fc7b 	bl	8007254 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800595e:	2000      	movs	r0, #0
 8005960:	f000 f808 	bl	8005974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005964:	f7fc f95c 	bl	8001c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40022000 	.word	0x40022000

08005974 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800597c:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <HAL_InitTick+0x54>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4b12      	ldr	r3, [pc, #72]	; (80059cc <HAL_InitTick+0x58>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	4619      	mov	r1, r3
 8005986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800598a:	fbb3 f3f1 	udiv	r3, r3, r1
 800598e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005992:	4618      	mov	r0, r3
 8005994:	f001 fc93 	bl	80072be <HAL_SYSTICK_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e00e      	b.n	80059c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b0f      	cmp	r3, #15
 80059a6:	d80a      	bhi.n	80059be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059a8:	2200      	movs	r2, #0
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	f001 fc5b 	bl	800726a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059b4:	4a06      	ldr	r2, [pc, #24]	; (80059d0 <HAL_InitTick+0x5c>)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e000      	b.n	80059c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20000134 	.word	0x20000134
 80059cc:	2000013c 	.word	0x2000013c
 80059d0:	20000138 	.word	0x20000138

080059d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059d8:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <HAL_IncTick+0x20>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <HAL_IncTick+0x24>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4413      	add	r3, r2
 80059e4:	4a04      	ldr	r2, [pc, #16]	; (80059f8 <HAL_IncTick+0x24>)
 80059e6:	6013      	str	r3, [r2, #0]
}
 80059e8:	bf00      	nop
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	2000013c 	.word	0x2000013c
 80059f8:	200008fc 	.word	0x200008fc

080059fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8005a00:	4b03      	ldr	r3, [pc, #12]	; (8005a10 <HAL_GetTick+0x14>)
 8005a02:	681b      	ldr	r3, [r3, #0]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	200008fc 	.word	0x200008fc

08005a14 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a1c:	f7ff ffee 	bl	80059fc <HAL_GetTick>
 8005a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2c:	d005      	beq.n	8005a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a2e:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <HAL_Delay+0x44>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005a3a:	bf00      	nop
 8005a3c:	f7ff ffde 	bl	80059fc <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d8f7      	bhi.n	8005a3c <HAL_Delay+0x28>
  {
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	bf00      	nop
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	2000013c 	.word	0x2000013c

08005a5c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b09a      	sub	sp, #104	; 0x68
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e1c9      	b.n	8005e4c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d176      	bne.n	8005bb8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d152      	bne.n	8005b78 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7fc f8bb 	bl	8001c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d13b      	bne.n	8005b78 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 fa71 	bl	8006fe8 <ADC_Disable>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d12f      	bne.n	8005b78 <HAL_ADC_Init+0xe0>
 8005b18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d12b      	bne.n	8005b78 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005b28:	f023 0302 	bic.w	r3, r3, #2
 8005b2c:	f043 0202 	orr.w	r2, r3, #2
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b42:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b52:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005b54:	4b86      	ldr	r3, [pc, #536]	; (8005d70 <HAL_ADC_Init+0x2d8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a86      	ldr	r2, [pc, #536]	; (8005d74 <HAL_ADC_Init+0x2dc>)
 8005b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5e:	0c9a      	lsrs	r2, r3, #18
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005b6a:	e002      	b.n	8005b72 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1f9      	bne.n	8005b6c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d007      	beq.n	8005b96 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b94:	d110      	bne.n	8005bb8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f023 0312 	bic.w	r3, r3, #18
 8005b9e:	f043 0210 	orr.w	r2, r3, #16
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005baa:	f043 0201 	orr.w	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f040 8136 	bne.w	8005e32 <HAL_ADC_Init+0x39a>
 8005bc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f040 8131 	bne.w	8005e32 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f040 8129 	bne.w	8005e32 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005be8:	f043 0202 	orr.w	r2, r3, #2
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bf8:	d004      	beq.n	8005c04 <HAL_ADC_Init+0x16c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a5e      	ldr	r2, [pc, #376]	; (8005d78 <HAL_ADC_Init+0x2e0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d101      	bne.n	8005c08 <HAL_ADC_Init+0x170>
 8005c04:	4b5d      	ldr	r3, [pc, #372]	; (8005d7c <HAL_ADC_Init+0x2e4>)
 8005c06:	e000      	b.n	8005c0a <HAL_ADC_Init+0x172>
 8005c08:	4b5d      	ldr	r3, [pc, #372]	; (8005d80 <HAL_ADC_Init+0x2e8>)
 8005c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c14:	d102      	bne.n	8005c1c <HAL_ADC_Init+0x184>
 8005c16:	4b58      	ldr	r3, [pc, #352]	; (8005d78 <HAL_ADC_Init+0x2e0>)
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	e01a      	b.n	8005c52 <HAL_ADC_Init+0x1ba>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a55      	ldr	r2, [pc, #340]	; (8005d78 <HAL_ADC_Init+0x2e0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d103      	bne.n	8005c2e <HAL_ADC_Init+0x196>
 8005c26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e011      	b.n	8005c52 <HAL_ADC_Init+0x1ba>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a54      	ldr	r2, [pc, #336]	; (8005d84 <HAL_ADC_Init+0x2ec>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d102      	bne.n	8005c3e <HAL_ADC_Init+0x1a6>
 8005c38:	4b53      	ldr	r3, [pc, #332]	; (8005d88 <HAL_ADC_Init+0x2f0>)
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	e009      	b.n	8005c52 <HAL_ADC_Init+0x1ba>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a51      	ldr	r2, [pc, #324]	; (8005d88 <HAL_ADC_Init+0x2f0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d102      	bne.n	8005c4e <HAL_ADC_Init+0x1b6>
 8005c48:	4b4e      	ldr	r3, [pc, #312]	; (8005d84 <HAL_ADC_Init+0x2ec>)
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	e001      	b.n	8005c52 <HAL_ADC_Init+0x1ba>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0303 	and.w	r3, r3, #3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d108      	bne.n	8005c72 <HAL_ADC_Init+0x1da>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_ADC_Init+0x1da>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <HAL_ADC_Init+0x1dc>
 8005c72:	2300      	movs	r3, #0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d11c      	bne.n	8005cb2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005c78:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d010      	beq.n	8005ca0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d107      	bne.n	8005c9a <HAL_ADC_Init+0x202>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <HAL_ADC_Init+0x202>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <HAL_ADC_Init+0x204>
 8005c9a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d108      	bne.n	8005cb2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8005ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	7e5b      	ldrb	r3, [r3, #25]
 8005cb6:	035b      	lsls	r3, r3, #13
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cbc:	2a01      	cmp	r2, #1
 8005cbe:	d002      	beq.n	8005cc6 <HAL_ADC_Init+0x22e>
 8005cc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cc4:	e000      	b.n	8005cc8 <HAL_ADC_Init+0x230>
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d11b      	bne.n	8005d1e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	7e5b      	ldrb	r3, [r3, #25]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	045a      	lsls	r2, r3, #17
 8005cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cfe:	663b      	str	r3, [r7, #96]	; 0x60
 8005d00:	e00d      	b.n	8005d1e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d0a:	f043 0220 	orr.w	r2, r3, #32
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d16:	f043 0201 	orr.w	r2, r3, #1
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d03a      	beq.n	8005d9c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a16      	ldr	r2, [pc, #88]	; (8005d84 <HAL_ADC_Init+0x2ec>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d004      	beq.n	8005d3a <HAL_ADC_Init+0x2a2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a14      	ldr	r2, [pc, #80]	; (8005d88 <HAL_ADC_Init+0x2f0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d128      	bne.n	8005d8c <HAL_ADC_Init+0x2f4>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8005d42:	d012      	beq.n	8005d6a <HAL_ADC_Init+0x2d2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d4c:	d00a      	beq.n	8005d64 <HAL_ADC_Init+0x2cc>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d52:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8005d56:	d002      	beq.n	8005d5e <HAL_ADC_Init+0x2c6>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	e018      	b.n	8005d90 <HAL_ADC_Init+0x2f8>
 8005d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d62:	e015      	b.n	8005d90 <HAL_ADC_Init+0x2f8>
 8005d64:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8005d68:	e012      	b.n	8005d90 <HAL_ADC_Init+0x2f8>
 8005d6a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005d6e:	e00f      	b.n	8005d90 <HAL_ADC_Init+0x2f8>
 8005d70:	20000134 	.word	0x20000134
 8005d74:	431bde83 	.word	0x431bde83
 8005d78:	50000100 	.word	0x50000100
 8005d7c:	50000300 	.word	0x50000300
 8005d80:	50000700 	.word	0x50000700
 8005d84:	50000400 	.word	0x50000400
 8005d88:	50000500 	.word	0x50000500
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d94:	4313      	orrs	r3, r2
 8005d96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d114      	bne.n	8005dd4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6812      	ldr	r2, [r2, #0]
 8005db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005db8:	f023 0302 	bic.w	r3, r3, #2
 8005dbc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	7e1b      	ldrb	r3, [r3, #24]
 8005dc2:	039a      	lsls	r2, r3, #14
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	4b1e      	ldr	r3, [pc, #120]	; (8005e54 <HAL_ADC_Init+0x3bc>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6812      	ldr	r2, [r2, #0]
 8005de2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005de4:	430b      	orrs	r3, r1
 8005de6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d10c      	bne.n	8005e0a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df6:	f023 010f 	bic.w	r1, r3, #15
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	1e5a      	subs	r2, r3, #1
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30
 8005e08:	e007      	b.n	8005e1a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 020f 	bic.w	r2, r2, #15
 8005e18:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	f023 0303 	bic.w	r3, r3, #3
 8005e28:	f043 0201 	orr.w	r2, r3, #1
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	641a      	str	r2, [r3, #64]	; 0x40
 8005e30:	e00a      	b.n	8005e48 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f023 0312 	bic.w	r3, r3, #18
 8005e3a:	f043 0210 	orr.w	r2, r3, #16
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8005e42:	2301      	movs	r3, #1
 8005e44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8005e48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3768      	adds	r7, #104	; 0x68
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	fff0c007 	.word	0xfff0c007

08005e58 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f040 8123 	bne.w	80060ba <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_ADC_Start_IT+0x2a>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e11e      	b.n	80060c0 <HAL_ADC_Start_IT+0x268>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f001 f848 	bl	8006f20 <ADC_Enable>
 8005e90:	4603      	mov	r3, r0
 8005e92:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f040 810a 	bne.w	80060b0 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
 8005ea8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eb8:	d004      	beq.n	8005ec4 <HAL_ADC_Start_IT+0x6c>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a82      	ldr	r2, [pc, #520]	; (80060c8 <HAL_ADC_Start_IT+0x270>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d106      	bne.n	8005ed2 <HAL_ADC_Start_IT+0x7a>
 8005ec4:	4b81      	ldr	r3, [pc, #516]	; (80060cc <HAL_ADC_Start_IT+0x274>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d010      	beq.n	8005ef2 <HAL_ADC_Start_IT+0x9a>
 8005ed0:	e005      	b.n	8005ede <HAL_ADC_Start_IT+0x86>
 8005ed2:	4b7f      	ldr	r3, [pc, #508]	; (80060d0 <HAL_ADC_Start_IT+0x278>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d009      	beq.n	8005ef2 <HAL_ADC_Start_IT+0x9a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ee6:	d004      	beq.n	8005ef2 <HAL_ADC_Start_IT+0x9a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a79      	ldr	r2, [pc, #484]	; (80060d4 <HAL_ADC_Start_IT+0x27c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d115      	bne.n	8005f1e <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d036      	beq.n	8005f7a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005f14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005f1c:	e02d      	b.n	8005f7a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f32:	d004      	beq.n	8005f3e <HAL_ADC_Start_IT+0xe6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a63      	ldr	r2, [pc, #396]	; (80060c8 <HAL_ADC_Start_IT+0x270>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d10a      	bne.n	8005f54 <HAL_ADC_Start_IT+0xfc>
 8005f3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf14      	ite	ne
 8005f4c:	2301      	movne	r3, #1
 8005f4e:	2300      	moveq	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	e008      	b.n	8005f66 <HAL_ADC_Start_IT+0x10e>
 8005f54:	4b5f      	ldr	r3, [pc, #380]	; (80060d4 <HAL_ADC_Start_IT+0x27c>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bf14      	ite	ne
 8005f60:	2301      	movne	r3, #1
 8005f62:	2300      	moveq	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d007      	beq.n	8005f7a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005f72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f86:	d106      	bne.n	8005f96 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8c:	f023 0206 	bic.w	r2, r3, #6
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	645a      	str	r2, [r3, #68]	; 0x44
 8005f94:	e002      	b.n	8005f9c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	221c      	movs	r2, #28
 8005faa:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d110      	bne.n	8005fd6 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0204 	bic.w	r2, r2, #4
 8005fc2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0208 	orr.w	r2, r2, #8
 8005fd2:	605a      	str	r2, [r3, #4]
          break;
 8005fd4:	e008      	b.n	8005fe8 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 020c 	orr.w	r2, r2, #12
 8005fe4:	605a      	str	r2, [r3, #4]
          break;
 8005fe6:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d107      	bne.n	8006000 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0210 	bic.w	r2, r2, #16
 8005ffe:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006008:	d004      	beq.n	8006014 <HAL_ADC_Start_IT+0x1bc>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a2e      	ldr	r2, [pc, #184]	; (80060c8 <HAL_ADC_Start_IT+0x270>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d106      	bne.n	8006022 <HAL_ADC_Start_IT+0x1ca>
 8006014:	4b2d      	ldr	r3, [pc, #180]	; (80060cc <HAL_ADC_Start_IT+0x274>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 031f 	and.w	r3, r3, #31
 800601c:	2b00      	cmp	r3, #0
 800601e:	d03e      	beq.n	800609e <HAL_ADC_Start_IT+0x246>
 8006020:	e005      	b.n	800602e <HAL_ADC_Start_IT+0x1d6>
 8006022:	4b2b      	ldr	r3, [pc, #172]	; (80060d0 <HAL_ADC_Start_IT+0x278>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	2b00      	cmp	r3, #0
 800602c:	d037      	beq.n	800609e <HAL_ADC_Start_IT+0x246>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006036:	d004      	beq.n	8006042 <HAL_ADC_Start_IT+0x1ea>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a22      	ldr	r2, [pc, #136]	; (80060c8 <HAL_ADC_Start_IT+0x270>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d106      	bne.n	8006050 <HAL_ADC_Start_IT+0x1f8>
 8006042:	4b22      	ldr	r3, [pc, #136]	; (80060cc <HAL_ADC_Start_IT+0x274>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2b05      	cmp	r3, #5
 800604c:	d027      	beq.n	800609e <HAL_ADC_Start_IT+0x246>
 800604e:	e005      	b.n	800605c <HAL_ADC_Start_IT+0x204>
 8006050:	4b1f      	ldr	r3, [pc, #124]	; (80060d0 <HAL_ADC_Start_IT+0x278>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	2b05      	cmp	r3, #5
 800605a:	d020      	beq.n	800609e <HAL_ADC_Start_IT+0x246>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006064:	d004      	beq.n	8006070 <HAL_ADC_Start_IT+0x218>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a17      	ldr	r2, [pc, #92]	; (80060c8 <HAL_ADC_Start_IT+0x270>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d106      	bne.n	800607e <HAL_ADC_Start_IT+0x226>
 8006070:	4b16      	ldr	r3, [pc, #88]	; (80060cc <HAL_ADC_Start_IT+0x274>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	2b09      	cmp	r3, #9
 800607a:	d010      	beq.n	800609e <HAL_ADC_Start_IT+0x246>
 800607c:	e005      	b.n	800608a <HAL_ADC_Start_IT+0x232>
 800607e:	4b14      	ldr	r3, [pc, #80]	; (80060d0 <HAL_ADC_Start_IT+0x278>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 031f 	and.w	r3, r3, #31
 8006086:	2b09      	cmp	r3, #9
 8006088:	d009      	beq.n	800609e <HAL_ADC_Start_IT+0x246>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006092:	d004      	beq.n	800609e <HAL_ADC_Start_IT+0x246>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a0e      	ldr	r2, [pc, #56]	; (80060d4 <HAL_ADC_Start_IT+0x27c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10f      	bne.n	80060be <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0204 	orr.w	r2, r2, #4
 80060ac:	609a      	str	r2, [r3, #8]
 80060ae:	e006      	b.n	80060be <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060b8:	e001      	b.n	80060be <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
 80060bc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80060be:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	50000100 	.word	0x50000100
 80060cc:	50000300 	.word	0x50000300
 80060d0:	50000700 	.word	0x50000700
 80060d4:	50000400 	.word	0x50000400

080060d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8006100:	2300      	movs	r3, #0
 8006102:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8006104:	2300      	movs	r3, #0
 8006106:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b04      	cmp	r3, #4
 8006114:	d106      	bne.n	8006124 <HAL_ADC_IRQHandler+0x30>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b04      	cmp	r3, #4
 8006122:	d00f      	beq.n	8006144 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800612e:	2b08      	cmp	r3, #8
 8006130:	f040 80c0 	bne.w	80062b4 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f003 0308 	and.w	r3, r3, #8
 800613e:	2b08      	cmp	r3, #8
 8006140:	f040 80b8 	bne.w	80062b4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b00      	cmp	r3, #0
 800614e:	d105      	bne.n	800615c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006164:	d004      	beq.n	8006170 <HAL_ADC_IRQHandler+0x7c>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a8e      	ldr	r2, [pc, #568]	; (80063a4 <HAL_ADC_IRQHandler+0x2b0>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d106      	bne.n	800617e <HAL_ADC_IRQHandler+0x8a>
 8006170:	4b8d      	ldr	r3, [pc, #564]	; (80063a8 <HAL_ADC_IRQHandler+0x2b4>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f003 031f 	and.w	r3, r3, #31
 8006178:	2b00      	cmp	r3, #0
 800617a:	d03e      	beq.n	80061fa <HAL_ADC_IRQHandler+0x106>
 800617c:	e005      	b.n	800618a <HAL_ADC_IRQHandler+0x96>
 800617e:	4b8b      	ldr	r3, [pc, #556]	; (80063ac <HAL_ADC_IRQHandler+0x2b8>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	2b00      	cmp	r3, #0
 8006188:	d037      	beq.n	80061fa <HAL_ADC_IRQHandler+0x106>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006192:	d004      	beq.n	800619e <HAL_ADC_IRQHandler+0xaa>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a82      	ldr	r2, [pc, #520]	; (80063a4 <HAL_ADC_IRQHandler+0x2b0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d106      	bne.n	80061ac <HAL_ADC_IRQHandler+0xb8>
 800619e:	4b82      	ldr	r3, [pc, #520]	; (80063a8 <HAL_ADC_IRQHandler+0x2b4>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	2b05      	cmp	r3, #5
 80061a8:	d027      	beq.n	80061fa <HAL_ADC_IRQHandler+0x106>
 80061aa:	e005      	b.n	80061b8 <HAL_ADC_IRQHandler+0xc4>
 80061ac:	4b7f      	ldr	r3, [pc, #508]	; (80063ac <HAL_ADC_IRQHandler+0x2b8>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 031f 	and.w	r3, r3, #31
 80061b4:	2b05      	cmp	r3, #5
 80061b6:	d020      	beq.n	80061fa <HAL_ADC_IRQHandler+0x106>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061c0:	d004      	beq.n	80061cc <HAL_ADC_IRQHandler+0xd8>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a77      	ldr	r2, [pc, #476]	; (80063a4 <HAL_ADC_IRQHandler+0x2b0>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d106      	bne.n	80061da <HAL_ADC_IRQHandler+0xe6>
 80061cc:	4b76      	ldr	r3, [pc, #472]	; (80063a8 <HAL_ADC_IRQHandler+0x2b4>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	2b09      	cmp	r3, #9
 80061d6:	d010      	beq.n	80061fa <HAL_ADC_IRQHandler+0x106>
 80061d8:	e005      	b.n	80061e6 <HAL_ADC_IRQHandler+0xf2>
 80061da:	4b74      	ldr	r3, [pc, #464]	; (80063ac <HAL_ADC_IRQHandler+0x2b8>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	2b09      	cmp	r3, #9
 80061e4:	d009      	beq.n	80061fa <HAL_ADC_IRQHandler+0x106>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061ee:	d004      	beq.n	80061fa <HAL_ADC_IRQHandler+0x106>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a6e      	ldr	r2, [pc, #440]	; (80063b0 <HAL_ADC_IRQHandler+0x2bc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d104      	bne.n	8006204 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	e00f      	b.n	8006224 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800620c:	d004      	beq.n	8006218 <HAL_ADC_IRQHandler+0x124>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a64      	ldr	r2, [pc, #400]	; (80063a4 <HAL_ADC_IRQHandler+0x2b0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d102      	bne.n	800621e <HAL_ADC_IRQHandler+0x12a>
 8006218:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800621c:	e000      	b.n	8006220 <HAL_ADC_IRQHandler+0x12c>
 800621e:	4b64      	ldr	r3, [pc, #400]	; (80063b0 <HAL_ADC_IRQHandler+0x2bc>)
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800622e:	2b00      	cmp	r3, #0
 8006230:	d139      	bne.n	80062a6 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8006238:	2b00      	cmp	r3, #0
 800623a:	d134      	bne.n	80062a6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b08      	cmp	r3, #8
 8006248:	d12d      	bne.n	80062a6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d11a      	bne.n	800628e <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 020c 	bic.w	r2, r2, #12
 8006266:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d112      	bne.n	80062a6 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	f043 0201 	orr.w	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	641a      	str	r2, [r3, #64]	; 0x40
 800628c:	e00b      	b.n	80062a6 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f043 0210 	orr.w	r2, r3, #16
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629e:	f043 0201 	orr.w	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff fbd8 	bl	8005a5c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	220c      	movs	r2, #12
 80062b2:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d106      	bne.n	80062d0 <HAL_ADC_IRQHandler+0x1dc>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b20      	cmp	r3, #32
 80062ce:	d00f      	beq.n	80062f0 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	f040 8143 	bne.w	8006566 <HAL_ADC_IRQHandler+0x472>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	f040 813b 	bne.w	8006566 <HAL_ADC_IRQHandler+0x472>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006304:	d004      	beq.n	8006310 <HAL_ADC_IRQHandler+0x21c>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a26      	ldr	r2, [pc, #152]	; (80063a4 <HAL_ADC_IRQHandler+0x2b0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d106      	bne.n	800631e <HAL_ADC_IRQHandler+0x22a>
 8006310:	4b25      	ldr	r3, [pc, #148]	; (80063a8 <HAL_ADC_IRQHandler+0x2b4>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	2b00      	cmp	r3, #0
 800631a:	d03e      	beq.n	800639a <HAL_ADC_IRQHandler+0x2a6>
 800631c:	e005      	b.n	800632a <HAL_ADC_IRQHandler+0x236>
 800631e:	4b23      	ldr	r3, [pc, #140]	; (80063ac <HAL_ADC_IRQHandler+0x2b8>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 031f 	and.w	r3, r3, #31
 8006326:	2b00      	cmp	r3, #0
 8006328:	d037      	beq.n	800639a <HAL_ADC_IRQHandler+0x2a6>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006332:	d004      	beq.n	800633e <HAL_ADC_IRQHandler+0x24a>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1a      	ldr	r2, [pc, #104]	; (80063a4 <HAL_ADC_IRQHandler+0x2b0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d106      	bne.n	800634c <HAL_ADC_IRQHandler+0x258>
 800633e:	4b1a      	ldr	r3, [pc, #104]	; (80063a8 <HAL_ADC_IRQHandler+0x2b4>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 031f 	and.w	r3, r3, #31
 8006346:	2b05      	cmp	r3, #5
 8006348:	d027      	beq.n	800639a <HAL_ADC_IRQHandler+0x2a6>
 800634a:	e005      	b.n	8006358 <HAL_ADC_IRQHandler+0x264>
 800634c:	4b17      	ldr	r3, [pc, #92]	; (80063ac <HAL_ADC_IRQHandler+0x2b8>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 031f 	and.w	r3, r3, #31
 8006354:	2b05      	cmp	r3, #5
 8006356:	d020      	beq.n	800639a <HAL_ADC_IRQHandler+0x2a6>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006360:	d004      	beq.n	800636c <HAL_ADC_IRQHandler+0x278>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a0f      	ldr	r2, [pc, #60]	; (80063a4 <HAL_ADC_IRQHandler+0x2b0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d106      	bne.n	800637a <HAL_ADC_IRQHandler+0x286>
 800636c:	4b0e      	ldr	r3, [pc, #56]	; (80063a8 <HAL_ADC_IRQHandler+0x2b4>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 031f 	and.w	r3, r3, #31
 8006374:	2b09      	cmp	r3, #9
 8006376:	d010      	beq.n	800639a <HAL_ADC_IRQHandler+0x2a6>
 8006378:	e005      	b.n	8006386 <HAL_ADC_IRQHandler+0x292>
 800637a:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <HAL_ADC_IRQHandler+0x2b8>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	2b09      	cmp	r3, #9
 8006384:	d009      	beq.n	800639a <HAL_ADC_IRQHandler+0x2a6>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800638e:	d004      	beq.n	800639a <HAL_ADC_IRQHandler+0x2a6>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a06      	ldr	r2, [pc, #24]	; (80063b0 <HAL_ADC_IRQHandler+0x2bc>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d10c      	bne.n	80063b4 <HAL_ADC_IRQHandler+0x2c0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	e017      	b.n	80063d4 <HAL_ADC_IRQHandler+0x2e0>
 80063a4:	50000100 	.word	0x50000100
 80063a8:	50000300 	.word	0x50000300
 80063ac:	50000700 	.word	0x50000700
 80063b0:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063bc:	d004      	beq.n	80063c8 <HAL_ADC_IRQHandler+0x2d4>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a5b      	ldr	r2, [pc, #364]	; (8006530 <HAL_ADC_IRQHandler+0x43c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d102      	bne.n	80063ce <HAL_ADC_IRQHandler+0x2da>
 80063c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80063cc:	e000      	b.n	80063d0 <HAL_ADC_IRQHandler+0x2dc>
 80063ce:	4b59      	ldr	r3, [pc, #356]	; (8006534 <HAL_ADC_IRQHandler+0x440>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f040 80ba 	bne.w	8006558 <HAL_ADC_IRQHandler+0x464>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00d      	beq.n	800640a <HAL_ADC_IRQHandler+0x316>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f040 80ad 	bne.w	8006558 <HAL_ADC_IRQHandler+0x464>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8006404:	2b00      	cmp	r3, #0
 8006406:	f040 80a7 	bne.w	8006558 <HAL_ADC_IRQHandler+0x464>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006414:	2b40      	cmp	r3, #64	; 0x40
 8006416:	f040 809f 	bne.w	8006558 <HAL_ADC_IRQHandler+0x464>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006422:	d004      	beq.n	800642e <HAL_ADC_IRQHandler+0x33a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a41      	ldr	r2, [pc, #260]	; (8006530 <HAL_ADC_IRQHandler+0x43c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d106      	bne.n	800643c <HAL_ADC_IRQHandler+0x348>
 800642e:	4b42      	ldr	r3, [pc, #264]	; (8006538 <HAL_ADC_IRQHandler+0x444>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 031f 	and.w	r3, r3, #31
 8006436:	2b00      	cmp	r3, #0
 8006438:	d03e      	beq.n	80064b8 <HAL_ADC_IRQHandler+0x3c4>
 800643a:	e005      	b.n	8006448 <HAL_ADC_IRQHandler+0x354>
 800643c:	4b3f      	ldr	r3, [pc, #252]	; (800653c <HAL_ADC_IRQHandler+0x448>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 031f 	and.w	r3, r3, #31
 8006444:	2b00      	cmp	r3, #0
 8006446:	d037      	beq.n	80064b8 <HAL_ADC_IRQHandler+0x3c4>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006450:	d004      	beq.n	800645c <HAL_ADC_IRQHandler+0x368>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a36      	ldr	r2, [pc, #216]	; (8006530 <HAL_ADC_IRQHandler+0x43c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d106      	bne.n	800646a <HAL_ADC_IRQHandler+0x376>
 800645c:	4b36      	ldr	r3, [pc, #216]	; (8006538 <HAL_ADC_IRQHandler+0x444>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f003 031f 	and.w	r3, r3, #31
 8006464:	2b06      	cmp	r3, #6
 8006466:	d027      	beq.n	80064b8 <HAL_ADC_IRQHandler+0x3c4>
 8006468:	e005      	b.n	8006476 <HAL_ADC_IRQHandler+0x382>
 800646a:	4b34      	ldr	r3, [pc, #208]	; (800653c <HAL_ADC_IRQHandler+0x448>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 031f 	and.w	r3, r3, #31
 8006472:	2b06      	cmp	r3, #6
 8006474:	d020      	beq.n	80064b8 <HAL_ADC_IRQHandler+0x3c4>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800647e:	d004      	beq.n	800648a <HAL_ADC_IRQHandler+0x396>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a2a      	ldr	r2, [pc, #168]	; (8006530 <HAL_ADC_IRQHandler+0x43c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d106      	bne.n	8006498 <HAL_ADC_IRQHandler+0x3a4>
 800648a:	4b2b      	ldr	r3, [pc, #172]	; (8006538 <HAL_ADC_IRQHandler+0x444>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 031f 	and.w	r3, r3, #31
 8006492:	2b07      	cmp	r3, #7
 8006494:	d010      	beq.n	80064b8 <HAL_ADC_IRQHandler+0x3c4>
 8006496:	e005      	b.n	80064a4 <HAL_ADC_IRQHandler+0x3b0>
 8006498:	4b28      	ldr	r3, [pc, #160]	; (800653c <HAL_ADC_IRQHandler+0x448>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f003 031f 	and.w	r3, r3, #31
 80064a0:	2b07      	cmp	r3, #7
 80064a2:	d009      	beq.n	80064b8 <HAL_ADC_IRQHandler+0x3c4>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064ac:	d004      	beq.n	80064b8 <HAL_ADC_IRQHandler+0x3c4>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a20      	ldr	r2, [pc, #128]	; (8006534 <HAL_ADC_IRQHandler+0x440>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d104      	bne.n	80064c2 <HAL_ADC_IRQHandler+0x3ce>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e00f      	b.n	80064e2 <HAL_ADC_IRQHandler+0x3ee>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064ca:	d004      	beq.n	80064d6 <HAL_ADC_IRQHandler+0x3e2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a17      	ldr	r2, [pc, #92]	; (8006530 <HAL_ADC_IRQHandler+0x43c>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d102      	bne.n	80064dc <HAL_ADC_IRQHandler+0x3e8>
 80064d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80064da:	e000      	b.n	80064de <HAL_ADC_IRQHandler+0x3ea>
 80064dc:	4b15      	ldr	r3, [pc, #84]	; (8006534 <HAL_ADC_IRQHandler+0x440>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d135      	bne.n	8006558 <HAL_ADC_IRQHandler+0x464>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 0308 	and.w	r3, r3, #8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d122      	bne.n	8006540 <HAL_ADC_IRQHandler+0x44c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006508:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651e:	2b00      	cmp	r3, #0
 8006520:	d11a      	bne.n	8006558 <HAL_ADC_IRQHandler+0x464>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	f043 0201 	orr.w	r2, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	641a      	str	r2, [r3, #64]	; 0x40
 800652e:	e013      	b.n	8006558 <HAL_ADC_IRQHandler+0x464>
 8006530:	50000100 	.word	0x50000100
 8006534:	50000400 	.word	0x50000400
 8006538:	50000300 	.word	0x50000300
 800653c:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006544:	f043 0210 	orr.w	r2, r3, #16
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006550:	f043 0201 	orr.w	r2, r3, #1
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f8db 	bl	8006714 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2260      	movs	r2, #96	; 0x60
 8006564:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006570:	2b80      	cmp	r3, #128	; 0x80
 8006572:	d113      	bne.n	800659c <HAL_ADC_IRQHandler+0x4a8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657e:	2b80      	cmp	r3, #128	; 0x80
 8006580:	d10c      	bne.n	800659c <HAL_ADC_IRQHandler+0x4a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff fa6e 	bl	8005a70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2280      	movs	r2, #128	; 0x80
 800659a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065aa:	d115      	bne.n	80065d8 <HAL_ADC_IRQHandler+0x4e4>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ba:	d10d      	bne.n	80065d8 <HAL_ADC_IRQHandler+0x4e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f8b7 	bl	800673c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065d6:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e6:	d115      	bne.n	8006614 <HAL_ADC_IRQHandler+0x520>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f6:	d10d      	bne.n	8006614 <HAL_ADC_IRQHandler+0x520>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f8a3 	bl	8006750 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006612:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0310 	and.w	r3, r3, #16
 800661e:	2b10      	cmp	r3, #16
 8006620:	d149      	bne.n	80066b6 <HAL_ADC_IRQHandler+0x5c2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f003 0310 	and.w	r3, r3, #16
 800662c:	2b10      	cmp	r3, #16
 800662e:	d142      	bne.n	80066b6 <HAL_ADC_IRQHandler+0x5c2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006634:	2b01      	cmp	r3, #1
 8006636:	d102      	bne.n	800663e <HAL_ADC_IRQHandler+0x54a>
    {
      overrun_error = 1U;
 8006638:	2301      	movs	r3, #1
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	e025      	b.n	800668a <HAL_ADC_IRQHandler+0x596>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006646:	d004      	beq.n	8006652 <HAL_ADC_IRQHandler+0x55e>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a2e      	ldr	r2, [pc, #184]	; (8006708 <HAL_ADC_IRQHandler+0x614>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d101      	bne.n	8006656 <HAL_ADC_IRQHandler+0x562>
 8006652:	4b2e      	ldr	r3, [pc, #184]	; (800670c <HAL_ADC_IRQHandler+0x618>)
 8006654:	e000      	b.n	8006658 <HAL_ADC_IRQHandler+0x564>
 8006656:	4b2e      	ldr	r3, [pc, #184]	; (8006710 <HAL_ADC_IRQHandler+0x61c>)
 8006658:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 031f 	and.w	r3, r3, #31
 8006662:	2b00      	cmp	r3, #0
 8006664:	d109      	bne.n	800667a <HAL_ADC_IRQHandler+0x586>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b01      	cmp	r3, #1
 8006672:	d10a      	bne.n	800668a <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 8006674:	2301      	movs	r3, #1
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	e007      	b.n	800668a <HAL_ADC_IRQHandler+0x596>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 8006686:	2301      	movs	r3, #1
 8006688:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d10e      	bne.n	80066ae <HAL_ADC_IRQHandler+0x5ba>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a0:	f043 0202 	orr.w	r2, r3, #2
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff f9eb 	bl	8005a84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2210      	movs	r2, #16
 80066b4:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066c4:	d11b      	bne.n	80066fe <HAL_ADC_IRQHandler+0x60a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d4:	d113      	bne.n	80066fe <HAL_ADC_IRQHandler+0x60a>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e6:	f043 0208 	orr.w	r2, r3, #8
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066f6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f815 	bl	8006728 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80066fe:	bf00      	nop
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	50000100 	.word	0x50000100
 800670c:	50000300 	.word	0x50000300
 8006710:	50000700 	.word	0x50000700

08006714 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006764:	b480      	push	{r7}
 8006766:	b09b      	sub	sp, #108	; 0x6c
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_ADC_ConfigChannel+0x22>
 8006782:	2302      	movs	r3, #2
 8006784:	e2ca      	b.n	8006d1c <HAL_ADC_ConfigChannel+0x5b8>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b00      	cmp	r3, #0
 800679a:	f040 82ae 	bne.w	8006cfa <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d81c      	bhi.n	80067e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	4613      	mov	r3, r2
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	4413      	add	r3, r2
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	461a      	mov	r2, r3
 80067ba:	231f      	movs	r3, #31
 80067bc:	4093      	lsls	r3, r2
 80067be:	43db      	mvns	r3, r3
 80067c0:	4019      	ands	r1, r3
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	4613      	mov	r3, r2
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	4413      	add	r3, r2
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	fa00 f203 	lsl.w	r2, r0, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	631a      	str	r2, [r3, #48]	; 0x30
 80067de:	e063      	b.n	80068a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	2b09      	cmp	r3, #9
 80067e6:	d81e      	bhi.n	8006826 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	4413      	add	r3, r2
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	3b1e      	subs	r3, #30
 80067fc:	221f      	movs	r2, #31
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	43db      	mvns	r3, r3
 8006804:	4019      	ands	r1, r3
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	4613      	mov	r3, r2
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	4413      	add	r3, r2
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	3b1e      	subs	r3, #30
 8006818:	fa00 f203 	lsl.w	r2, r0, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	635a      	str	r2, [r3, #52]	; 0x34
 8006824:	e040      	b.n	80068a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	2b0e      	cmp	r3, #14
 800682c:	d81e      	bhi.n	800686c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	4613      	mov	r3, r2
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	4413      	add	r3, r2
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	3b3c      	subs	r3, #60	; 0x3c
 8006842:	221f      	movs	r2, #31
 8006844:	fa02 f303 	lsl.w	r3, r2, r3
 8006848:	43db      	mvns	r3, r3
 800684a:	4019      	ands	r1, r3
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	4613      	mov	r3, r2
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	4413      	add	r3, r2
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	3b3c      	subs	r3, #60	; 0x3c
 800685e:	fa00 f203 	lsl.w	r2, r0, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	639a      	str	r2, [r3, #56]	; 0x38
 800686a:	e01d      	b.n	80068a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	4413      	add	r3, r2
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	3b5a      	subs	r3, #90	; 0x5a
 8006880:	221f      	movs	r2, #31
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	43db      	mvns	r3, r3
 8006888:	4019      	ands	r1, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	4613      	mov	r3, r2
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	4413      	add	r3, r2
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	3b5a      	subs	r3, #90	; 0x5a
 800689c:	fa00 f203 	lsl.w	r2, r0, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 030c 	and.w	r3, r3, #12
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f040 80e5 	bne.w	8006a82 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b09      	cmp	r3, #9
 80068be:	d91c      	bls.n	80068fa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6999      	ldr	r1, [r3, #24]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	4613      	mov	r3, r2
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	4413      	add	r3, r2
 80068d0:	3b1e      	subs	r3, #30
 80068d2:	2207      	movs	r2, #7
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	43db      	mvns	r3, r3
 80068da:	4019      	ands	r1, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	6898      	ldr	r0, [r3, #8]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	4613      	mov	r3, r2
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	4413      	add	r3, r2
 80068ea:	3b1e      	subs	r3, #30
 80068ec:	fa00 f203 	lsl.w	r2, r0, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	619a      	str	r2, [r3, #24]
 80068f8:	e019      	b.n	800692e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6959      	ldr	r1, [r3, #20]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4613      	mov	r3, r2
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	4413      	add	r3, r2
 800690a:	2207      	movs	r2, #7
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	43db      	mvns	r3, r3
 8006912:	4019      	ands	r1, r3
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	6898      	ldr	r0, [r3, #8]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4613      	mov	r3, r2
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	4413      	add	r3, r2
 8006922:	fa00 f203 	lsl.w	r2, r0, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	695a      	ldr	r2, [r3, #20]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	08db      	lsrs	r3, r3, #3
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	fa02 f303 	lsl.w	r3, r2, r3
 8006944:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	3b01      	subs	r3, #1
 800694c:	2b03      	cmp	r3, #3
 800694e:	d84f      	bhi.n	80069f0 <HAL_ADC_ConfigChannel+0x28c>
 8006950:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <HAL_ADC_ConfigChannel+0x1f4>)
 8006952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006956:	bf00      	nop
 8006958:	08006969 	.word	0x08006969
 800695c:	0800698b 	.word	0x0800698b
 8006960:	080069ad 	.word	0x080069ad
 8006964:	080069cf 	.word	0x080069cf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800696e:	4b9a      	ldr	r3, [pc, #616]	; (8006bd8 <HAL_ADC_ConfigChannel+0x474>)
 8006970:	4013      	ands	r3, r2
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	0691      	lsls	r1, r2, #26
 8006978:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800697a:	430a      	orrs	r2, r1
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006986:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8006988:	e07e      	b.n	8006a88 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006990:	4b91      	ldr	r3, [pc, #580]	; (8006bd8 <HAL_ADC_ConfigChannel+0x474>)
 8006992:	4013      	ands	r3, r2
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	6812      	ldr	r2, [r2, #0]
 8006998:	0691      	lsls	r1, r2, #26
 800699a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800699c:	430a      	orrs	r2, r1
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80069a8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80069aa:	e06d      	b.n	8006a88 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80069b2:	4b89      	ldr	r3, [pc, #548]	; (8006bd8 <HAL_ADC_ConfigChannel+0x474>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	6812      	ldr	r2, [r2, #0]
 80069ba:	0691      	lsls	r1, r2, #26
 80069bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069be:	430a      	orrs	r2, r1
 80069c0:	431a      	orrs	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80069ca:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80069cc:	e05c      	b.n	8006a88 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80069d4:	4b80      	ldr	r3, [pc, #512]	; (8006bd8 <HAL_ADC_ConfigChannel+0x474>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	6812      	ldr	r2, [r2, #0]
 80069dc:	0691      	lsls	r1, r2, #26
 80069de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069e0:	430a      	orrs	r2, r1
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80069ec:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80069ee:	e04b      	b.n	8006a88 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	069b      	lsls	r3, r3, #26
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d107      	bne.n	8006a14 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a12:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	069b      	lsls	r3, r3, #26
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d107      	bne.n	8006a38 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a36:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	069b      	lsls	r3, r3, #26
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d107      	bne.n	8006a5c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a5a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	069b      	lsls	r3, r3, #26
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d10a      	bne.n	8006a86 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a7e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8006a80:	e001      	b.n	8006a86 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8006a82:	bf00      	nop
 8006a84:	e000      	b.n	8006a88 <HAL_ADC_ConfigChannel+0x324>
      break;
 8006a86:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d108      	bne.n	8006aa8 <HAL_ADC_ConfigChannel+0x344>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_ADC_ConfigChannel+0x344>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e000      	b.n	8006aaa <HAL_ADC_ConfigChannel+0x346>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f040 8130 	bne.w	8006d10 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d00f      	beq.n	8006ad8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	43da      	mvns	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	400a      	ands	r2, r1
 8006ad2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8006ad6:	e049      	b.n	8006b6c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	409a      	lsls	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b09      	cmp	r3, #9
 8006af8:	d91c      	bls.n	8006b34 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6999      	ldr	r1, [r3, #24]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	4613      	mov	r3, r2
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	4413      	add	r3, r2
 8006b0a:	3b1b      	subs	r3, #27
 8006b0c:	2207      	movs	r2, #7
 8006b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b12:	43db      	mvns	r3, r3
 8006b14:	4019      	ands	r1, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6898      	ldr	r0, [r3, #8]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	4413      	add	r3, r2
 8006b24:	3b1b      	subs	r3, #27
 8006b26:	fa00 f203 	lsl.w	r2, r0, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	619a      	str	r2, [r3, #24]
 8006b32:	e01b      	b.n	8006b6c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6959      	ldr	r1, [r3, #20]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	4613      	mov	r3, r2
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	4413      	add	r3, r2
 8006b46:	2207      	movs	r2, #7
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	4019      	ands	r1, r3
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	6898      	ldr	r0, [r3, #8]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	4413      	add	r3, r2
 8006b60:	fa00 f203 	lsl.w	r2, r0, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b74:	d004      	beq.n	8006b80 <HAL_ADC_ConfigChannel+0x41c>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a18      	ldr	r2, [pc, #96]	; (8006bdc <HAL_ADC_ConfigChannel+0x478>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d101      	bne.n	8006b84 <HAL_ADC_ConfigChannel+0x420>
 8006b80:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <HAL_ADC_ConfigChannel+0x47c>)
 8006b82:	e000      	b.n	8006b86 <HAL_ADC_ConfigChannel+0x422>
 8006b84:	4b17      	ldr	r3, [pc, #92]	; (8006be4 <HAL_ADC_ConfigChannel+0x480>)
 8006b86:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b10      	cmp	r3, #16
 8006b8e:	d105      	bne.n	8006b9c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d015      	beq.n	8006bc8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006ba0:	2b11      	cmp	r3, #17
 8006ba2:	d105      	bne.n	8006bb0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006bb4:	2b12      	cmp	r3, #18
 8006bb6:	f040 80ab 	bne.w	8006d10 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8006bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f040 80a4 	bne.w	8006d10 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bd0:	d10a      	bne.n	8006be8 <HAL_ADC_ConfigChannel+0x484>
 8006bd2:	4b02      	ldr	r3, [pc, #8]	; (8006bdc <HAL_ADC_ConfigChannel+0x478>)
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	e022      	b.n	8006c1e <HAL_ADC_ConfigChannel+0x4ba>
 8006bd8:	83fff000 	.word	0x83fff000
 8006bdc:	50000100 	.word	0x50000100
 8006be0:	50000300 	.word	0x50000300
 8006be4:	50000700 	.word	0x50000700
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a4e      	ldr	r2, [pc, #312]	; (8006d28 <HAL_ADC_ConfigChannel+0x5c4>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d103      	bne.n	8006bfa <HAL_ADC_ConfigChannel+0x496>
 8006bf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	e011      	b.n	8006c1e <HAL_ADC_ConfigChannel+0x4ba>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a4b      	ldr	r2, [pc, #300]	; (8006d2c <HAL_ADC_ConfigChannel+0x5c8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d102      	bne.n	8006c0a <HAL_ADC_ConfigChannel+0x4a6>
 8006c04:	4b4a      	ldr	r3, [pc, #296]	; (8006d30 <HAL_ADC_ConfigChannel+0x5cc>)
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	e009      	b.n	8006c1e <HAL_ADC_ConfigChannel+0x4ba>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a48      	ldr	r2, [pc, #288]	; (8006d30 <HAL_ADC_ConfigChannel+0x5cc>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d102      	bne.n	8006c1a <HAL_ADC_ConfigChannel+0x4b6>
 8006c14:	4b45      	ldr	r3, [pc, #276]	; (8006d2c <HAL_ADC_ConfigChannel+0x5c8>)
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	e001      	b.n	8006c1e <HAL_ADC_ConfigChannel+0x4ba>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 0303 	and.w	r3, r3, #3
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d108      	bne.n	8006c3e <HAL_ADC_ConfigChannel+0x4da>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_ADC_ConfigChannel+0x4da>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e000      	b.n	8006c40 <HAL_ADC_ConfigChannel+0x4dc>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d150      	bne.n	8006ce6 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006c44:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d010      	beq.n	8006c6c <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d107      	bne.n	8006c66 <HAL_ADC_ConfigChannel+0x502>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_ADC_ConfigChannel+0x502>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <HAL_ADC_ConfigChannel+0x504>
 8006c66:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d13c      	bne.n	8006ce6 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b10      	cmp	r3, #16
 8006c72:	d11d      	bne.n	8006cb0 <HAL_ADC_ConfigChannel+0x54c>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c7c:	d118      	bne.n	8006cb0 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8006c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c88:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006c8a:	4b2a      	ldr	r3, [pc, #168]	; (8006d34 <HAL_ADC_ConfigChannel+0x5d0>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a2a      	ldr	r2, [pc, #168]	; (8006d38 <HAL_ADC_ConfigChannel+0x5d4>)
 8006c90:	fba2 2303 	umull	r2, r3, r2, r3
 8006c94:	0c9a      	lsrs	r2, r3, #18
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006ca0:	e002      	b.n	8006ca8 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f9      	bne.n	8006ca2 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006cae:	e02e      	b.n	8006d0e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b11      	cmp	r3, #17
 8006cb6:	d10b      	bne.n	8006cd0 <HAL_ADC_ConfigChannel+0x56c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cc0:	d106      	bne.n	8006cd0 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ccc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006cce:	e01e      	b.n	8006d0e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b12      	cmp	r3, #18
 8006cd6:	d11a      	bne.n	8006d0e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8006cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ce2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006ce4:	e013      	b.n	8006d0e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	f043 0220 	orr.w	r2, r3, #32
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006cf8:	e00a      	b.n	8006d10 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	f043 0220 	orr.w	r2, r3, #32
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006d0c:	e000      	b.n	8006d10 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006d0e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006d18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	376c      	adds	r7, #108	; 0x6c
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	50000100 	.word	0x50000100
 8006d2c:	50000400 	.word	0x50000400
 8006d30:	50000500 	.word	0x50000500
 8006d34:	20000134 	.word	0x20000134
 8006d38:	431bde83 	.word	0x431bde83

08006d3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b099      	sub	sp, #100	; 0x64
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d54:	d102      	bne.n	8006d5c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8006d56:	4b6d      	ldr	r3, [pc, #436]	; (8006f0c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006d58:	60bb      	str	r3, [r7, #8]
 8006d5a:	e01a      	b.n	8006d92 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a6a      	ldr	r2, [pc, #424]	; (8006f0c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d103      	bne.n	8006d6e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8006d66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006d6a:	60bb      	str	r3, [r7, #8]
 8006d6c:	e011      	b.n	8006d92 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a67      	ldr	r2, [pc, #412]	; (8006f10 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d102      	bne.n	8006d7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006d78:	4b66      	ldr	r3, [pc, #408]	; (8006f14 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006d7a:	60bb      	str	r3, [r7, #8]
 8006d7c:	e009      	b.n	8006d92 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a64      	ldr	r2, [pc, #400]	; (8006f14 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d102      	bne.n	8006d8e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006d88:	4b61      	ldr	r3, [pc, #388]	; (8006f10 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006d8a:	60bb      	str	r3, [r7, #8]
 8006d8c:	e001      	b.n	8006d92 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e0b0      	b.n	8006efe <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e0a9      	b.n	8006efe <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f040 808d 	bne.w	8006edc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 0304 	and.w	r3, r3, #4
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f040 8086 	bne.w	8006edc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dd8:	d004      	beq.n	8006de4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a4b      	ldr	r2, [pc, #300]	; (8006f0c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d101      	bne.n	8006de8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006de4:	4b4c      	ldr	r3, [pc, #304]	; (8006f18 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8006de6:	e000      	b.n	8006dea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006de8:	4b4c      	ldr	r3, [pc, #304]	; (8006f1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8006dea:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d040      	beq.n	8006e76 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	6859      	ldr	r1, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e06:	035b      	lsls	r3, r3, #13
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e0e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d108      	bne.n	8006e30 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e000      	b.n	8006e32 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8006e30:	2300      	movs	r3, #0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d15c      	bne.n	8006ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 0303 	and.w	r3, r3, #3
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d107      	bne.n	8006e52 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e000      	b.n	8006e54 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8006e52:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d14b      	bne.n	8006ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006e58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006e60:	f023 030f 	bic.w	r3, r3, #15
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	6811      	ldr	r1, [r2, #0]
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	6892      	ldr	r2, [r2, #8]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e72:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e74:	e03c      	b.n	8006ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006e76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e80:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d108      	bne.n	8006ea2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d101      	bne.n	8006ea2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d123      	bne.n	8006ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f003 0303 	and.w	r3, r3, #3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d107      	bne.n	8006ec4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d101      	bne.n	8006ec4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e000      	b.n	8006ec6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8006ec4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d112      	bne.n	8006ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8006eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006ed2:	f023 030f 	bic.w	r3, r3, #15
 8006ed6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ed8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006eda:	e009      	b.n	8006ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	f043 0220 	orr.w	r2, r3, #32
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006eee:	e000      	b.n	8006ef2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ef0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006efa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8006efe:	4618      	mov	r0, r3
 8006f00:	3764      	adds	r7, #100	; 0x64
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	50000100 	.word	0x50000100
 8006f10:	50000400 	.word	0x50000400
 8006f14:	50000500 	.word	0x50000500
 8006f18:	50000300 	.word	0x50000300
 8006f1c:	50000700 	.word	0x50000700

08006f20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d108      	bne.n	8006f4c <ADC_Enable+0x2c>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <ADC_Enable+0x2c>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <ADC_Enable+0x2e>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d143      	bne.n	8006fda <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	4b22      	ldr	r3, [pc, #136]	; (8006fe4 <ADC_Enable+0xc4>)
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00d      	beq.n	8006f7c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	f043 0210 	orr.w	r2, r3, #16
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f70:	f043 0201 	orr.w	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e02f      	b.n	8006fdc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0201 	orr.w	r2, r2, #1
 8006f8a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8006f8c:	f7fe fd36 	bl	80059fc <HAL_GetTick>
 8006f90:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006f92:	e01b      	b.n	8006fcc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006f94:	f7fe fd32 	bl	80059fc <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d914      	bls.n	8006fcc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d00d      	beq.n	8006fcc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb4:	f043 0210 	orr.w	r2, r3, #16
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc0:	f043 0201 	orr.w	r2, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e007      	b.n	8006fdc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d1dc      	bne.n	8006f94 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	8000003f 	.word	0x8000003f

08006fe8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d108      	bne.n	8007014 <ADC_Disable+0x2c>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b01      	cmp	r3, #1
 800700e:	d101      	bne.n	8007014 <ADC_Disable+0x2c>
 8007010:	2301      	movs	r3, #1
 8007012:	e000      	b.n	8007016 <ADC_Disable+0x2e>
 8007014:	2300      	movs	r3, #0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d047      	beq.n	80070aa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f003 030d 	and.w	r3, r3, #13
 8007024:	2b01      	cmp	r3, #1
 8007026:	d10f      	bne.n	8007048 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689a      	ldr	r2, [r3, #8]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0202 	orr.w	r2, r2, #2
 8007036:	609a      	str	r2, [r3, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2203      	movs	r2, #3
 800703e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8007040:	f7fe fcdc 	bl	80059fc <HAL_GetTick>
 8007044:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007046:	e029      	b.n	800709c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	f043 0210 	orr.w	r2, r3, #16
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007058:	f043 0201 	orr.w	r2, r3, #1
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e023      	b.n	80070ac <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007064:	f7fe fcca 	bl	80059fc <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d914      	bls.n	800709c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b01      	cmp	r3, #1
 800707e:	d10d      	bne.n	800709c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007084:	f043 0210 	orr.w	r2, r3, #16
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007090:	f043 0201 	orr.w	r2, r3, #1
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e007      	b.n	80070ac <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d0dc      	beq.n	8007064 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070c4:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <__NVIC_SetPriorityGrouping+0x44>)
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070d0:	4013      	ands	r3, r2
 80070d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80070e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070e6:	4a04      	ldr	r2, [pc, #16]	; (80070f8 <__NVIC_SetPriorityGrouping+0x44>)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	60d3      	str	r3, [r2, #12]
}
 80070ec:	bf00      	nop
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	e000ed00 	.word	0xe000ed00

080070fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007100:	4b04      	ldr	r3, [pc, #16]	; (8007114 <__NVIC_GetPriorityGrouping+0x18>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	0a1b      	lsrs	r3, r3, #8
 8007106:	f003 0307 	and.w	r3, r3, #7
}
 800710a:	4618      	mov	r0, r3
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	e000ed00 	.word	0xe000ed00

08007118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007126:	2b00      	cmp	r3, #0
 8007128:	db0b      	blt.n	8007142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800712a:	79fb      	ldrb	r3, [r7, #7]
 800712c:	f003 021f 	and.w	r2, r3, #31
 8007130:	4907      	ldr	r1, [pc, #28]	; (8007150 <__NVIC_EnableIRQ+0x38>)
 8007132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007136:	095b      	lsrs	r3, r3, #5
 8007138:	2001      	movs	r0, #1
 800713a:	fa00 f202 	lsl.w	r2, r0, r2
 800713e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	e000e100 	.word	0xe000e100

08007154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	4603      	mov	r3, r0
 800715c:	6039      	str	r1, [r7, #0]
 800715e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007164:	2b00      	cmp	r3, #0
 8007166:	db0a      	blt.n	800717e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	b2da      	uxtb	r2, r3
 800716c:	490c      	ldr	r1, [pc, #48]	; (80071a0 <__NVIC_SetPriority+0x4c>)
 800716e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007172:	0112      	lsls	r2, r2, #4
 8007174:	b2d2      	uxtb	r2, r2
 8007176:	440b      	add	r3, r1
 8007178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800717c:	e00a      	b.n	8007194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	b2da      	uxtb	r2, r3
 8007182:	4908      	ldr	r1, [pc, #32]	; (80071a4 <__NVIC_SetPriority+0x50>)
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	3b04      	subs	r3, #4
 800718c:	0112      	lsls	r2, r2, #4
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	440b      	add	r3, r1
 8007192:	761a      	strb	r2, [r3, #24]
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	e000e100 	.word	0xe000e100
 80071a4:	e000ed00 	.word	0xe000ed00

080071a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b089      	sub	sp, #36	; 0x24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f003 0307 	and.w	r3, r3, #7
 80071ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f1c3 0307 	rsb	r3, r3, #7
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	bf28      	it	cs
 80071c6:	2304      	movcs	r3, #4
 80071c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	3304      	adds	r3, #4
 80071ce:	2b06      	cmp	r3, #6
 80071d0:	d902      	bls.n	80071d8 <NVIC_EncodePriority+0x30>
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	3b03      	subs	r3, #3
 80071d6:	e000      	b.n	80071da <NVIC_EncodePriority+0x32>
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071dc:	f04f 32ff 	mov.w	r2, #4294967295
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	fa02 f303 	lsl.w	r3, r2, r3
 80071e6:	43da      	mvns	r2, r3
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	401a      	ands	r2, r3
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071f0:	f04f 31ff 	mov.w	r1, #4294967295
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	fa01 f303 	lsl.w	r3, r1, r3
 80071fa:	43d9      	mvns	r1, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007200:	4313      	orrs	r3, r2
         );
}
 8007202:	4618      	mov	r0, r3
 8007204:	3724      	adds	r7, #36	; 0x24
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
	...

08007210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3b01      	subs	r3, #1
 800721c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007220:	d301      	bcc.n	8007226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007222:	2301      	movs	r3, #1
 8007224:	e00f      	b.n	8007246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007226:	4a0a      	ldr	r2, [pc, #40]	; (8007250 <SysTick_Config+0x40>)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	3b01      	subs	r3, #1
 800722c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800722e:	210f      	movs	r1, #15
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	f7ff ff8e 	bl	8007154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007238:	4b05      	ldr	r3, [pc, #20]	; (8007250 <SysTick_Config+0x40>)
 800723a:	2200      	movs	r2, #0
 800723c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800723e:	4b04      	ldr	r3, [pc, #16]	; (8007250 <SysTick_Config+0x40>)
 8007240:	2207      	movs	r2, #7
 8007242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	e000e010 	.word	0xe000e010

08007254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7ff ff29 	bl	80070b4 <__NVIC_SetPriorityGrouping>
}
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b086      	sub	sp, #24
 800726e:	af00      	add	r7, sp, #0
 8007270:	4603      	mov	r3, r0
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	607a      	str	r2, [r7, #4]
 8007276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800727c:	f7ff ff3e 	bl	80070fc <__NVIC_GetPriorityGrouping>
 8007280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	6978      	ldr	r0, [r7, #20]
 8007288:	f7ff ff8e 	bl	80071a8 <NVIC_EncodePriority>
 800728c:	4602      	mov	r2, r0
 800728e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007292:	4611      	mov	r1, r2
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff ff5d 	bl	8007154 <__NVIC_SetPriority>
}
 800729a:	bf00      	nop
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b082      	sub	sp, #8
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	4603      	mov	r3, r0
 80072aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7ff ff31 	bl	8007118 <__NVIC_EnableIRQ>
}
 80072b6:	bf00      	nop
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b082      	sub	sp, #8
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff ffa2 	bl	8007210 <SysTick_Config>
 80072cc:	4603      	mov	r3, r0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d008      	beq.n	80072fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2204      	movs	r2, #4
 80072ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e020      	b.n	800733c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 020e 	bic.w	r2, r2, #14
 8007308:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f022 0201 	bic.w	r2, r2, #1
 8007318:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007322:	2101      	movs	r1, #1
 8007324:	fa01 f202 	lsl.w	r2, r1, r2
 8007328:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800735a:	2b02      	cmp	r3, #2
 800735c:	d005      	beq.n	800736a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2204      	movs	r2, #4
 8007362:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]
 8007368:	e027      	b.n	80073ba <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 020e 	bic.w	r2, r2, #14
 8007378:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0201 	bic.w	r2, r2, #1
 8007388:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007392:	2101      	movs	r1, #1
 8007394:	fa01 f202 	lsl.w	r2, r1, r2
 8007398:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
    } 
  }
  return status;
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073d2:	e154      	b.n	800767e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	2101      	movs	r1, #1
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	fa01 f303 	lsl.w	r3, r1, r3
 80073e0:	4013      	ands	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 8146 	beq.w	8007678 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f003 0303 	and.w	r3, r3, #3
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d005      	beq.n	8007404 <HAL_GPIO_Init+0x40>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f003 0303 	and.w	r3, r3, #3
 8007400:	2b02      	cmp	r3, #2
 8007402:	d130      	bne.n	8007466 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	2203      	movs	r2, #3
 8007410:	fa02 f303 	lsl.w	r3, r2, r3
 8007414:	43db      	mvns	r3, r3
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	4013      	ands	r3, r2
 800741a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	fa02 f303 	lsl.w	r3, r2, r3
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4313      	orrs	r3, r2
 800742c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800743a:	2201      	movs	r2, #1
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	fa02 f303 	lsl.w	r3, r2, r3
 8007442:	43db      	mvns	r3, r3
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	4013      	ands	r3, r2
 8007448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	091b      	lsrs	r3, r3, #4
 8007450:	f003 0201 	and.w	r2, r3, #1
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	fa02 f303 	lsl.w	r3, r2, r3
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	4313      	orrs	r3, r2
 800745e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	2b03      	cmp	r3, #3
 8007470:	d017      	beq.n	80074a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	2203      	movs	r2, #3
 800747e:	fa02 f303 	lsl.w	r3, r2, r3
 8007482:	43db      	mvns	r3, r3
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4013      	ands	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	fa02 f303 	lsl.w	r3, r2, r3
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4313      	orrs	r3, r2
 800749a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d123      	bne.n	80074f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	08da      	lsrs	r2, r3, #3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3208      	adds	r2, #8
 80074b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	220f      	movs	r2, #15
 80074c6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ca:	43db      	mvns	r3, r3
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	4013      	ands	r3, r2
 80074d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	691a      	ldr	r2, [r3, #16]
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	fa02 f303 	lsl.w	r3, r2, r3
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	08da      	lsrs	r2, r3, #3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	3208      	adds	r2, #8
 80074f0:	6939      	ldr	r1, [r7, #16]
 80074f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	2203      	movs	r2, #3
 8007502:	fa02 f303 	lsl.w	r3, r2, r3
 8007506:	43db      	mvns	r3, r3
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	4013      	ands	r3, r2
 800750c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f003 0203 	and.w	r2, r3, #3
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	fa02 f303 	lsl.w	r3, r2, r3
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 80a0 	beq.w	8007678 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007538:	4b58      	ldr	r3, [pc, #352]	; (800769c <HAL_GPIO_Init+0x2d8>)
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	4a57      	ldr	r2, [pc, #348]	; (800769c <HAL_GPIO_Init+0x2d8>)
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	6193      	str	r3, [r2, #24]
 8007544:	4b55      	ldr	r3, [pc, #340]	; (800769c <HAL_GPIO_Init+0x2d8>)
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	60bb      	str	r3, [r7, #8]
 800754e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007550:	4a53      	ldr	r2, [pc, #332]	; (80076a0 <HAL_GPIO_Init+0x2dc>)
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	089b      	lsrs	r3, r3, #2
 8007556:	3302      	adds	r3, #2
 8007558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800755c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f003 0303 	and.w	r3, r3, #3
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	220f      	movs	r2, #15
 8007568:	fa02 f303 	lsl.w	r3, r2, r3
 800756c:	43db      	mvns	r3, r3
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	4013      	ands	r3, r2
 8007572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800757a:	d019      	beq.n	80075b0 <HAL_GPIO_Init+0x1ec>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a49      	ldr	r2, [pc, #292]	; (80076a4 <HAL_GPIO_Init+0x2e0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d013      	beq.n	80075ac <HAL_GPIO_Init+0x1e8>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a48      	ldr	r2, [pc, #288]	; (80076a8 <HAL_GPIO_Init+0x2e4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00d      	beq.n	80075a8 <HAL_GPIO_Init+0x1e4>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a47      	ldr	r2, [pc, #284]	; (80076ac <HAL_GPIO_Init+0x2e8>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d007      	beq.n	80075a4 <HAL_GPIO_Init+0x1e0>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a46      	ldr	r2, [pc, #280]	; (80076b0 <HAL_GPIO_Init+0x2ec>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d101      	bne.n	80075a0 <HAL_GPIO_Init+0x1dc>
 800759c:	2304      	movs	r3, #4
 800759e:	e008      	b.n	80075b2 <HAL_GPIO_Init+0x1ee>
 80075a0:	2305      	movs	r3, #5
 80075a2:	e006      	b.n	80075b2 <HAL_GPIO_Init+0x1ee>
 80075a4:	2303      	movs	r3, #3
 80075a6:	e004      	b.n	80075b2 <HAL_GPIO_Init+0x1ee>
 80075a8:	2302      	movs	r3, #2
 80075aa:	e002      	b.n	80075b2 <HAL_GPIO_Init+0x1ee>
 80075ac:	2301      	movs	r3, #1
 80075ae:	e000      	b.n	80075b2 <HAL_GPIO_Init+0x1ee>
 80075b0:	2300      	movs	r3, #0
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	f002 0203 	and.w	r2, r2, #3
 80075b8:	0092      	lsls	r2, r2, #2
 80075ba:	4093      	lsls	r3, r2
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	4313      	orrs	r3, r2
 80075c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80075c2:	4937      	ldr	r1, [pc, #220]	; (80076a0 <HAL_GPIO_Init+0x2dc>)
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	089b      	lsrs	r3, r3, #2
 80075c8:	3302      	adds	r3, #2
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80075d0:	4b38      	ldr	r3, [pc, #224]	; (80076b4 <HAL_GPIO_Init+0x2f0>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	43db      	mvns	r3, r3
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	4013      	ands	r3, r2
 80075de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80075f4:	4a2f      	ldr	r2, [pc, #188]	; (80076b4 <HAL_GPIO_Init+0x2f0>)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80075fa:	4b2e      	ldr	r3, [pc, #184]	; (80076b4 <HAL_GPIO_Init+0x2f0>)
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	43db      	mvns	r3, r3
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4013      	ands	r3, r2
 8007608:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800761e:	4a25      	ldr	r2, [pc, #148]	; (80076b4 <HAL_GPIO_Init+0x2f0>)
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007624:	4b23      	ldr	r3, [pc, #140]	; (80076b4 <HAL_GPIO_Init+0x2f0>)
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	43db      	mvns	r3, r3
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	4013      	ands	r3, r2
 8007632:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4313      	orrs	r3, r2
 8007646:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007648:	4a1a      	ldr	r2, [pc, #104]	; (80076b4 <HAL_GPIO_Init+0x2f0>)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800764e:	4b19      	ldr	r3, [pc, #100]	; (80076b4 <HAL_GPIO_Init+0x2f0>)
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	43db      	mvns	r3, r3
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4013      	ands	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4313      	orrs	r3, r2
 8007670:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007672:	4a10      	ldr	r2, [pc, #64]	; (80076b4 <HAL_GPIO_Init+0x2f0>)
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	3301      	adds	r3, #1
 800767c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	fa22 f303 	lsr.w	r3, r2, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	f47f aea3 	bne.w	80073d4 <HAL_GPIO_Init+0x10>
  }
}
 800768e:	bf00      	nop
 8007690:	bf00      	nop
 8007692:	371c      	adds	r7, #28
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	40021000 	.word	0x40021000
 80076a0:	40010000 	.word	0x40010000
 80076a4:	48000400 	.word	0x48000400
 80076a8:	48000800 	.word	0x48000800
 80076ac:	48000c00 	.word	0x48000c00
 80076b0:	48001000 	.word	0x48001000
 80076b4:	40010400 	.word	0x40010400

080076b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	887b      	ldrh	r3, [r7, #2]
 80076ca:	4013      	ands	r3, r2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80076d0:	2301      	movs	r3, #1
 80076d2:	73fb      	strb	r3, [r7, #15]
 80076d4:	e001      	b.n	80076da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	807b      	strh	r3, [r7, #2]
 80076f4:	4613      	mov	r3, r2
 80076f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80076f8:	787b      	ldrb	r3, [r7, #1]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80076fe:	887a      	ldrh	r2, [r7, #2]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007704:	e002      	b.n	800770c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007706:	887a      	ldrh	r2, [r7, #2]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800772a:	887a      	ldrh	r2, [r7, #2]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4013      	ands	r3, r2
 8007730:	041a      	lsls	r2, r3, #16
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	43d9      	mvns	r1, r3
 8007736:	887b      	ldrh	r3, [r7, #2]
 8007738:	400b      	ands	r3, r1
 800773a:	431a      	orrs	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	619a      	str	r2, [r3, #24]
}
 8007740:	bf00      	nop
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007756:	4b08      	ldr	r3, [pc, #32]	; (8007778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007758:	695a      	ldr	r2, [r3, #20]
 800775a:	88fb      	ldrh	r3, [r7, #6]
 800775c:	4013      	ands	r3, r2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d006      	beq.n	8007770 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007762:	4a05      	ldr	r2, [pc, #20]	; (8007778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007768:	88fb      	ldrh	r3, [r7, #6]
 800776a:	4618      	mov	r0, r3
 800776c:	f000 f806 	bl	800777c <HAL_GPIO_EXTI_Callback>
  }
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	40010400 	.word	0x40010400

0800777c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e081      	b.n	80078a8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d106      	bne.n	80077be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7fa fae3 	bl	8001d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2224      	movs	r2, #36	; 0x24
 80077c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0201 	bic.w	r2, r2, #1
 80077d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d107      	bne.n	800780c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007808:	609a      	str	r2, [r3, #8]
 800780a:	e006      	b.n	800781a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007818:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d104      	bne.n	800782c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800782a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6812      	ldr	r2, [r2, #0]
 8007836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800783a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800783e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800784e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	691a      	ldr	r2, [r3, #16]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	69d9      	ldr	r1, [r3, #28]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1a      	ldr	r2, [r3, #32]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	430a      	orrs	r2, r1
 8007878:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f042 0201 	orr.w	r2, r2, #1
 8007888:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2220      	movs	r2, #32
 8007894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b20      	cmp	r3, #32
 80078c4:	d138      	bne.n	8007938 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e032      	b.n	800793a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2224      	movs	r2, #36	; 0x24
 80078e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0201 	bic.w	r2, r2, #1
 80078f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007902:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6819      	ldr	r1, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f042 0201 	orr.w	r2, r2, #1
 8007922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2220      	movs	r2, #32
 8007928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	e000      	b.n	800793a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007938:	2302      	movs	r3, #2
  }
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007946:	b480      	push	{r7}
 8007948:	b085      	sub	sp, #20
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b20      	cmp	r3, #32
 800795a:	d139      	bne.n	80079d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007962:	2b01      	cmp	r3, #1
 8007964:	d101      	bne.n	800796a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007966:	2302      	movs	r3, #2
 8007968:	e033      	b.n	80079d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2224      	movs	r2, #36	; 0x24
 8007976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 0201 	bic.w	r2, r2, #1
 8007988:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007998:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	021b      	lsls	r3, r3, #8
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0201 	orr.w	r2, r2, #1
 80079ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2220      	movs	r2, #32
 80079c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	e000      	b.n	80079d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80079d0:	2302      	movs	r3, #2
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80079de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e0:	b08b      	sub	sp, #44	; 0x2c
 80079e2:	af06      	add	r7, sp, #24
 80079e4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e0d0      	b.n	8007b92 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d106      	bne.n	8007a0a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7fa fb1f 	bl	8002048 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2203      	movs	r2, #3
 8007a0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f003 ff24 	bl	800b864 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
 8007a20:	e04c      	b.n	8007abc <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	440b      	add	r3, r1
 8007a32:	3301      	adds	r3, #1
 8007a34:	2201      	movs	r2, #1
 8007a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	00db      	lsls	r3, r3, #3
 8007a46:	440b      	add	r3, r1
 8007a48:	7bfa      	ldrb	r2, [r7, #15]
 8007a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007a4c:	7bfa      	ldrb	r2, [r7, #15]
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	b298      	uxth	r0, r3
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	440b      	add	r3, r1
 8007a5e:	3336      	adds	r3, #54	; 0x36
 8007a60:	4602      	mov	r2, r0
 8007a62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	00db      	lsls	r3, r3, #3
 8007a72:	440b      	add	r3, r1
 8007a74:	3303      	adds	r3, #3
 8007a76:	2200      	movs	r2, #0
 8007a78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007a7a:	7bfa      	ldrb	r2, [r7, #15]
 8007a7c:	6879      	ldr	r1, [r7, #4]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	440b      	add	r3, r1
 8007a88:	3338      	adds	r3, #56	; 0x38
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007a8e:	7bfa      	ldrb	r2, [r7, #15]
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	440b      	add	r3, r1
 8007a9c:	333c      	adds	r3, #60	; 0x3c
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007aa2:	7bfa      	ldrb	r2, [r7, #15]
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	00db      	lsls	r3, r3, #3
 8007aae:	440b      	add	r3, r1
 8007ab0:	3340      	adds	r3, #64	; 0x40
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	73fb      	strb	r3, [r7, #15]
 8007abc:	7bfa      	ldrb	r2, [r7, #15]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d3ad      	bcc.n	8007a22 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]
 8007aca:	e044      	b.n	8007b56 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007acc:	7bfa      	ldrb	r2, [r7, #15]
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	440b      	add	r3, r1
 8007ada:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007ade:	2200      	movs	r2, #0
 8007ae0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007ae2:	7bfa      	ldrb	r2, [r7, #15]
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	440b      	add	r3, r1
 8007af0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007af4:	7bfa      	ldrb	r2, [r7, #15]
 8007af6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007af8:	7bfa      	ldrb	r2, [r7, #15]
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	4613      	mov	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	440b      	add	r3, r1
 8007b06:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007b0e:	7bfa      	ldrb	r2, [r7, #15]
 8007b10:	6879      	ldr	r1, [r7, #4]
 8007b12:	4613      	mov	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	00db      	lsls	r3, r3, #3
 8007b1a:	440b      	add	r3, r1
 8007b1c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007b24:	7bfa      	ldrb	r2, [r7, #15]
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	440b      	add	r3, r1
 8007b32:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007b36:	2200      	movs	r2, #0
 8007b38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007b3a:	7bfa      	ldrb	r2, [r7, #15]
 8007b3c:	6879      	ldr	r1, [r7, #4]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	00db      	lsls	r3, r3, #3
 8007b46:	440b      	add	r3, r1
 8007b48:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	3301      	adds	r3, #1
 8007b54:	73fb      	strb	r3, [r7, #15]
 8007b56:	7bfa      	ldrb	r2, [r7, #15]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d3b5      	bcc.n	8007acc <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	603b      	str	r3, [r7, #0]
 8007b66:	687e      	ldr	r6, [r7, #4]
 8007b68:	466d      	mov	r5, sp
 8007b6a:	f106 0410 	add.w	r4, r6, #16
 8007b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	602b      	str	r3, [r5, #0]
 8007b76:	1d33      	adds	r3, r6, #4
 8007b78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b7a:	6838      	ldr	r0, [r7, #0]
 8007b7c:	f003 fe8d 	bl	800b89a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ba8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d102      	bne.n	8007bc2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f001 b823 	b.w	8008c08 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 817d 	beq.w	8007ed2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007bd8:	4bbc      	ldr	r3, [pc, #752]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f003 030c 	and.w	r3, r3, #12
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	d00c      	beq.n	8007bfe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007be4:	4bb9      	ldr	r3, [pc, #740]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f003 030c 	and.w	r3, r3, #12
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d15c      	bne.n	8007caa <HAL_RCC_OscConfig+0x10e>
 8007bf0:	4bb6      	ldr	r3, [pc, #728]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bfc:	d155      	bne.n	8007caa <HAL_RCC_OscConfig+0x10e>
 8007bfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c02:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007c0a:	fa93 f3a3 	rbit	r3, r3
 8007c0e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007c12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c16:	fab3 f383 	clz	r3, r3
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	095b      	lsrs	r3, r3, #5
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f043 0301 	orr.w	r3, r3, #1
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d102      	bne.n	8007c30 <HAL_RCC_OscConfig+0x94>
 8007c2a:	4ba8      	ldr	r3, [pc, #672]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	e015      	b.n	8007c5c <HAL_RCC_OscConfig+0xc0>
 8007c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c34:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c38:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007c3c:	fa93 f3a3 	rbit	r3, r3
 8007c40:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007c44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c48:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007c4c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8007c50:	fa93 f3a3 	rbit	r3, r3
 8007c54:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007c58:	4b9c      	ldr	r3, [pc, #624]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007c60:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8007c64:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007c68:	fa92 f2a2 	rbit	r2, r2
 8007c6c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8007c70:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007c74:	fab2 f282 	clz	r2, r2
 8007c78:	b2d2      	uxtb	r2, r2
 8007c7a:	f042 0220 	orr.w	r2, r2, #32
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	f002 021f 	and.w	r2, r2, #31
 8007c84:	2101      	movs	r1, #1
 8007c86:	fa01 f202 	lsl.w	r2, r1, r2
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 811f 	beq.w	8007ed0 <HAL_RCC_OscConfig+0x334>
 8007c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f040 8116 	bne.w	8007ed0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	f000 bfaf 	b.w	8008c08 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cba:	d106      	bne.n	8007cca <HAL_RCC_OscConfig+0x12e>
 8007cbc:	4b83      	ldr	r3, [pc, #524]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a82      	ldr	r2, [pc, #520]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	e036      	b.n	8007d38 <HAL_RCC_OscConfig+0x19c>
 8007cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10c      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x158>
 8007cda:	4b7c      	ldr	r3, [pc, #496]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a7b      	ldr	r2, [pc, #492]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	4b79      	ldr	r3, [pc, #484]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a78      	ldr	r2, [pc, #480]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	e021      	b.n	8007d38 <HAL_RCC_OscConfig+0x19c>
 8007cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d04:	d10c      	bne.n	8007d20 <HAL_RCC_OscConfig+0x184>
 8007d06:	4b71      	ldr	r3, [pc, #452]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a70      	ldr	r2, [pc, #448]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	4b6e      	ldr	r3, [pc, #440]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a6d      	ldr	r2, [pc, #436]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	e00b      	b.n	8007d38 <HAL_RCC_OscConfig+0x19c>
 8007d20:	4b6a      	ldr	r3, [pc, #424]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a69      	ldr	r2, [pc, #420]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	4b67      	ldr	r3, [pc, #412]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a66      	ldr	r2, [pc, #408]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d36:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007d38:	4b64      	ldr	r3, [pc, #400]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3c:	f023 020f 	bic.w	r2, r3, #15
 8007d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	495f      	ldr	r1, [pc, #380]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d059      	beq.n	8007e16 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d62:	f7fd fe4b 	bl	80059fc <HAL_GetTick>
 8007d66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d6a:	e00a      	b.n	8007d82 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d6c:	f7fd fe46 	bl	80059fc <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	2b64      	cmp	r3, #100	; 0x64
 8007d7a:	d902      	bls.n	8007d82 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	f000 bf43 	b.w	8008c08 <HAL_RCC_OscConfig+0x106c>
 8007d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d86:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d8a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007d8e:	fa93 f3a3 	rbit	r3, r3
 8007d92:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007d96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d9a:	fab3 f383 	clz	r3, r3
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	095b      	lsrs	r3, r3, #5
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	f043 0301 	orr.w	r3, r3, #1
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d102      	bne.n	8007db4 <HAL_RCC_OscConfig+0x218>
 8007dae:	4b47      	ldr	r3, [pc, #284]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	e015      	b.n	8007de0 <HAL_RCC_OscConfig+0x244>
 8007db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007db8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dbc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007dc0:	fa93 f3a3 	rbit	r3, r3
 8007dc4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007dcc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007dd0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007dd4:	fa93 f3a3 	rbit	r3, r3
 8007dd8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007ddc:	4b3b      	ldr	r3, [pc, #236]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007de4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007de8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007dec:	fa92 f2a2 	rbit	r2, r2
 8007df0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007df4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007df8:	fab2 f282 	clz	r2, r2
 8007dfc:	b2d2      	uxtb	r2, r2
 8007dfe:	f042 0220 	orr.w	r2, r2, #32
 8007e02:	b2d2      	uxtb	r2, r2
 8007e04:	f002 021f 	and.w	r2, r2, #31
 8007e08:	2101      	movs	r1, #1
 8007e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8007e0e:	4013      	ands	r3, r2
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0ab      	beq.n	8007d6c <HAL_RCC_OscConfig+0x1d0>
 8007e14:	e05d      	b.n	8007ed2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e16:	f7fd fdf1 	bl	80059fc <HAL_GetTick>
 8007e1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e1e:	e00a      	b.n	8007e36 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e20:	f7fd fdec 	bl	80059fc <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	2b64      	cmp	r3, #100	; 0x64
 8007e2e:	d902      	bls.n	8007e36 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	f000 bee9 	b.w	8008c08 <HAL_RCC_OscConfig+0x106c>
 8007e36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e3a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e3e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007e42:	fa93 f3a3 	rbit	r3, r3
 8007e46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007e4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e4e:	fab3 f383 	clz	r3, r3
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	095b      	lsrs	r3, r3, #5
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	f043 0301 	orr.w	r3, r3, #1
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d102      	bne.n	8007e68 <HAL_RCC_OscConfig+0x2cc>
 8007e62:	4b1a      	ldr	r3, [pc, #104]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	e015      	b.n	8007e94 <HAL_RCC_OscConfig+0x2f8>
 8007e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e6c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e70:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007e74:	fa93 f3a3 	rbit	r3, r3
 8007e78:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e80:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007e84:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007e88:	fa93 f3a3 	rbit	r3, r3
 8007e8c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007e90:	4b0e      	ldr	r3, [pc, #56]	; (8007ecc <HAL_RCC_OscConfig+0x330>)
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e98:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007e9c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007ea0:	fa92 f2a2 	rbit	r2, r2
 8007ea4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007ea8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007eac:	fab2 f282 	clz	r2, r2
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	f042 0220 	orr.w	r2, r2, #32
 8007eb6:	b2d2      	uxtb	r2, r2
 8007eb8:	f002 021f 	and.w	r2, r2, #31
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1ab      	bne.n	8007e20 <HAL_RCC_OscConfig+0x284>
 8007ec8:	e003      	b.n	8007ed2 <HAL_RCC_OscConfig+0x336>
 8007eca:	bf00      	nop
 8007ecc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0302 	and.w	r3, r3, #2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 817d 	beq.w	80081e2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007ee8:	4ba6      	ldr	r3, [pc, #664]	; (8008184 <HAL_RCC_OscConfig+0x5e8>)
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f003 030c 	and.w	r3, r3, #12
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007ef4:	4ba3      	ldr	r3, [pc, #652]	; (8008184 <HAL_RCC_OscConfig+0x5e8>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f003 030c 	and.w	r3, r3, #12
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d172      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x44a>
 8007f00:	4ba0      	ldr	r3, [pc, #640]	; (8008184 <HAL_RCC_OscConfig+0x5e8>)
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d16c      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x44a>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f12:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007f16:	fa93 f3a3 	rbit	r3, r3
 8007f1a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007f1e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f22:	fab3 f383 	clz	r3, r3
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	095b      	lsrs	r3, r3, #5
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	f043 0301 	orr.w	r3, r3, #1
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d102      	bne.n	8007f3c <HAL_RCC_OscConfig+0x3a0>
 8007f36:	4b93      	ldr	r3, [pc, #588]	; (8008184 <HAL_RCC_OscConfig+0x5e8>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	e013      	b.n	8007f64 <HAL_RCC_OscConfig+0x3c8>
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f42:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007f46:	fa93 f3a3 	rbit	r3, r3
 8007f4a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007f4e:	2302      	movs	r3, #2
 8007f50:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007f54:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007f58:	fa93 f3a3 	rbit	r3, r3
 8007f5c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007f60:	4b88      	ldr	r3, [pc, #544]	; (8008184 <HAL_RCC_OscConfig+0x5e8>)
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	2202      	movs	r2, #2
 8007f66:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007f6a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007f6e:	fa92 f2a2 	rbit	r2, r2
 8007f72:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007f76:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007f7a:	fab2 f282 	clz	r2, r2
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	f042 0220 	orr.w	r2, r2, #32
 8007f84:	b2d2      	uxtb	r2, r2
 8007f86:	f002 021f 	and.w	r2, r2, #31
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00a      	beq.n	8007fac <HAL_RCC_OscConfig+0x410>
 8007f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d002      	beq.n	8007fac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f000 be2e 	b.w	8008c08 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fac:	4b75      	ldr	r3, [pc, #468]	; (8008184 <HAL_RCC_OscConfig+0x5e8>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	21f8      	movs	r1, #248	; 0xf8
 8007fc2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fc6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007fca:	fa91 f1a1 	rbit	r1, r1
 8007fce:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007fd2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007fd6:	fab1 f181 	clz	r1, r1
 8007fda:	b2c9      	uxtb	r1, r1
 8007fdc:	408b      	lsls	r3, r1
 8007fde:	4969      	ldr	r1, [pc, #420]	; (8008184 <HAL_RCC_OscConfig+0x5e8>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fe4:	e0fd      	b.n	80081e2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 8088 	beq.w	8008108 <HAL_RCC_OscConfig+0x56c>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ffe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8008002:	fa93 f3a3 	rbit	r3, r3
 8008006:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800800a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800800e:	fab3 f383 	clz	r3, r3
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008018:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	461a      	mov	r2, r3
 8008020:	2301      	movs	r3, #1
 8008022:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008024:	f7fd fcea 	bl	80059fc <HAL_GetTick>
 8008028:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800802c:	e00a      	b.n	8008044 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800802e:	f7fd fce5 	bl	80059fc <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d902      	bls.n	8008044 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	f000 bde2 	b.w	8008c08 <HAL_RCC_OscConfig+0x106c>
 8008044:	2302      	movs	r3, #2
 8008046:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800804a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800804e:	fa93 f3a3 	rbit	r3, r3
 8008052:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8008056:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800805a:	fab3 f383 	clz	r3, r3
 800805e:	b2db      	uxtb	r3, r3
 8008060:	095b      	lsrs	r3, r3, #5
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f043 0301 	orr.w	r3, r3, #1
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b01      	cmp	r3, #1
 800806c:	d102      	bne.n	8008074 <HAL_RCC_OscConfig+0x4d8>
 800806e:	4b45      	ldr	r3, [pc, #276]	; (8008184 <HAL_RCC_OscConfig+0x5e8>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	e013      	b.n	800809c <HAL_RCC_OscConfig+0x500>
 8008074:	2302      	movs	r3, #2
 8008076:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800807a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800807e:	fa93 f3a3 	rbit	r3, r3
 8008082:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008086:	2302      	movs	r3, #2
 8008088:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800808c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008090:	fa93 f3a3 	rbit	r3, r3
 8008094:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8008098:	4b3a      	ldr	r3, [pc, #232]	; (8008184 <HAL_RCC_OscConfig+0x5e8>)
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	2202      	movs	r2, #2
 800809e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80080a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80080a6:	fa92 f2a2 	rbit	r2, r2
 80080aa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80080ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80080b2:	fab2 f282 	clz	r2, r2
 80080b6:	b2d2      	uxtb	r2, r2
 80080b8:	f042 0220 	orr.w	r2, r2, #32
 80080bc:	b2d2      	uxtb	r2, r2
 80080be:	f002 021f 	and.w	r2, r2, #31
 80080c2:	2101      	movs	r1, #1
 80080c4:	fa01 f202 	lsl.w	r2, r1, r2
 80080c8:	4013      	ands	r3, r2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0af      	beq.n	800802e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ce:	4b2d      	ldr	r3, [pc, #180]	; (8008184 <HAL_RCC_OscConfig+0x5e8>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	21f8      	movs	r1, #248	; 0xf8
 80080e4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80080ec:	fa91 f1a1 	rbit	r1, r1
 80080f0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80080f4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80080f8:	fab1 f181 	clz	r1, r1
 80080fc:	b2c9      	uxtb	r1, r1
 80080fe:	408b      	lsls	r3, r1
 8008100:	4920      	ldr	r1, [pc, #128]	; (8008184 <HAL_RCC_OscConfig+0x5e8>)
 8008102:	4313      	orrs	r3, r2
 8008104:	600b      	str	r3, [r1, #0]
 8008106:	e06c      	b.n	80081e2 <HAL_RCC_OscConfig+0x646>
 8008108:	2301      	movs	r3, #1
 800810a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800810e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008112:	fa93 f3a3 	rbit	r3, r3
 8008116:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800811a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800811e:	fab3 f383 	clz	r3, r3
 8008122:	b2db      	uxtb	r3, r3
 8008124:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008128:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	461a      	mov	r2, r3
 8008130:	2300      	movs	r3, #0
 8008132:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008134:	f7fd fc62 	bl	80059fc <HAL_GetTick>
 8008138:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800813c:	e00a      	b.n	8008154 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800813e:	f7fd fc5d 	bl	80059fc <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d902      	bls.n	8008154 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	f000 bd5a 	b.w	8008c08 <HAL_RCC_OscConfig+0x106c>
 8008154:	2302      	movs	r3, #2
 8008156:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800815a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800815e:	fa93 f3a3 	rbit	r3, r3
 8008162:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8008166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800816a:	fab3 f383 	clz	r3, r3
 800816e:	b2db      	uxtb	r3, r3
 8008170:	095b      	lsrs	r3, r3, #5
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f043 0301 	orr.w	r3, r3, #1
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b01      	cmp	r3, #1
 800817c:	d104      	bne.n	8008188 <HAL_RCC_OscConfig+0x5ec>
 800817e:	4b01      	ldr	r3, [pc, #4]	; (8008184 <HAL_RCC_OscConfig+0x5e8>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	e015      	b.n	80081b0 <HAL_RCC_OscConfig+0x614>
 8008184:	40021000 	.word	0x40021000
 8008188:	2302      	movs	r3, #2
 800818a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800818e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008192:	fa93 f3a3 	rbit	r3, r3
 8008196:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800819a:	2302      	movs	r3, #2
 800819c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80081a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80081a4:	fa93 f3a3 	rbit	r3, r3
 80081a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80081ac:	4bc8      	ldr	r3, [pc, #800]	; (80084d0 <HAL_RCC_OscConfig+0x934>)
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	2202      	movs	r2, #2
 80081b2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80081b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80081ba:	fa92 f2a2 	rbit	r2, r2
 80081be:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80081c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80081c6:	fab2 f282 	clz	r2, r2
 80081ca:	b2d2      	uxtb	r2, r2
 80081cc:	f042 0220 	orr.w	r2, r2, #32
 80081d0:	b2d2      	uxtb	r2, r2
 80081d2:	f002 021f 	and.w	r2, r2, #31
 80081d6:	2101      	movs	r1, #1
 80081d8:	fa01 f202 	lsl.w	r2, r1, r2
 80081dc:	4013      	ands	r3, r2
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1ad      	bne.n	800813e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0308 	and.w	r3, r3, #8
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 8110 	beq.w	8008418 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80081f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d079      	beq.n	80082fc <HAL_RCC_OscConfig+0x760>
 8008208:	2301      	movs	r3, #1
 800820a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800820e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008212:	fa93 f3a3 	rbit	r3, r3
 8008216:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800821a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800821e:	fab3 f383 	clz	r3, r3
 8008222:	b2db      	uxtb	r3, r3
 8008224:	461a      	mov	r2, r3
 8008226:	4bab      	ldr	r3, [pc, #684]	; (80084d4 <HAL_RCC_OscConfig+0x938>)
 8008228:	4413      	add	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	461a      	mov	r2, r3
 800822e:	2301      	movs	r3, #1
 8008230:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008232:	f7fd fbe3 	bl	80059fc <HAL_GetTick>
 8008236:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800823a:	e00a      	b.n	8008252 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800823c:	f7fd fbde 	bl	80059fc <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d902      	bls.n	8008252 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	f000 bcdb 	b.w	8008c08 <HAL_RCC_OscConfig+0x106c>
 8008252:	2302      	movs	r3, #2
 8008254:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008258:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800825c:	fa93 f3a3 	rbit	r3, r3
 8008260:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008268:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800826c:	2202      	movs	r2, #2
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008274:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	fa93 f2a3 	rbit	r2, r3
 800827e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800828c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008290:	2202      	movs	r2, #2
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	fa93 f2a3 	rbit	r2, r3
 80082a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082ac:	4b88      	ldr	r3, [pc, #544]	; (80084d0 <HAL_RCC_OscConfig+0x934>)
 80082ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80082b8:	2102      	movs	r1, #2
 80082ba:	6019      	str	r1, [r3, #0]
 80082bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	fa93 f1a3 	rbit	r1, r3
 80082ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80082d2:	6019      	str	r1, [r3, #0]
  return result;
 80082d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	fab3 f383 	clz	r3, r3
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	f003 031f 	and.w	r3, r3, #31
 80082ee:	2101      	movs	r1, #1
 80082f0:	fa01 f303 	lsl.w	r3, r1, r3
 80082f4:	4013      	ands	r3, r2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d0a0      	beq.n	800823c <HAL_RCC_OscConfig+0x6a0>
 80082fa:	e08d      	b.n	8008418 <HAL_RCC_OscConfig+0x87c>
 80082fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008300:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008304:	2201      	movs	r2, #1
 8008306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800830c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	fa93 f2a3 	rbit	r2, r3
 8008316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800831a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800831e:	601a      	str	r2, [r3, #0]
  return result;
 8008320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008324:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008328:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800832a:	fab3 f383 	clz	r3, r3
 800832e:	b2db      	uxtb	r3, r3
 8008330:	461a      	mov	r2, r3
 8008332:	4b68      	ldr	r3, [pc, #416]	; (80084d4 <HAL_RCC_OscConfig+0x938>)
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	461a      	mov	r2, r3
 800833a:	2300      	movs	r3, #0
 800833c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800833e:	f7fd fb5d 	bl	80059fc <HAL_GetTick>
 8008342:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008346:	e00a      	b.n	800835e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008348:	f7fd fb58 	bl	80059fc <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	2b02      	cmp	r3, #2
 8008356:	d902      	bls.n	800835e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	f000 bc55 	b.w	8008c08 <HAL_RCC_OscConfig+0x106c>
 800835e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008362:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008366:	2202      	movs	r2, #2
 8008368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800836a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800836e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	fa93 f2a3 	rbit	r2, r3
 8008378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800837c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008386:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800838a:	2202      	movs	r2, #2
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008392:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	fa93 f2a3 	rbit	r2, r3
 800839c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ae:	2202      	movs	r2, #2
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	fa93 f2a3 	rbit	r2, r3
 80083c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80083c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083ca:	4b41      	ldr	r3, [pc, #260]	; (80084d0 <HAL_RCC_OscConfig+0x934>)
 80083cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80083d6:	2102      	movs	r1, #2
 80083d8:	6019      	str	r1, [r3, #0]
 80083da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	fa93 f1a3 	rbit	r1, r3
 80083e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80083f0:	6019      	str	r1, [r3, #0]
  return result;
 80083f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	fab3 f383 	clz	r3, r3
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f003 031f 	and.w	r3, r3, #31
 800840c:	2101      	movs	r1, #1
 800840e:	fa01 f303 	lsl.w	r3, r1, r3
 8008412:	4013      	ands	r3, r2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d197      	bne.n	8008348 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800841c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0304 	and.w	r3, r3, #4
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 81a1 	beq.w	8008770 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800842e:	2300      	movs	r3, #0
 8008430:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008434:	4b26      	ldr	r3, [pc, #152]	; (80084d0 <HAL_RCC_OscConfig+0x934>)
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d116      	bne.n	800846e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008440:	4b23      	ldr	r3, [pc, #140]	; (80084d0 <HAL_RCC_OscConfig+0x934>)
 8008442:	69db      	ldr	r3, [r3, #28]
 8008444:	4a22      	ldr	r2, [pc, #136]	; (80084d0 <HAL_RCC_OscConfig+0x934>)
 8008446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800844a:	61d3      	str	r3, [r2, #28]
 800844c:	4b20      	ldr	r3, [pc, #128]	; (80084d0 <HAL_RCC_OscConfig+0x934>)
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8008454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008458:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008462:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8008466:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8008468:	2301      	movs	r3, #1
 800846a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800846e:	4b1a      	ldr	r3, [pc, #104]	; (80084d8 <HAL_RCC_OscConfig+0x93c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008476:	2b00      	cmp	r3, #0
 8008478:	d11a      	bne.n	80084b0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800847a:	4b17      	ldr	r3, [pc, #92]	; (80084d8 <HAL_RCC_OscConfig+0x93c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a16      	ldr	r2, [pc, #88]	; (80084d8 <HAL_RCC_OscConfig+0x93c>)
 8008480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008484:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008486:	f7fd fab9 	bl	80059fc <HAL_GetTick>
 800848a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800848e:	e009      	b.n	80084a4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008490:	f7fd fab4 	bl	80059fc <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	2b64      	cmp	r3, #100	; 0x64
 800849e:	d901      	bls.n	80084a4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e3b1      	b.n	8008c08 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084a4:	4b0c      	ldr	r3, [pc, #48]	; (80084d8 <HAL_RCC_OscConfig+0x93c>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d0ef      	beq.n	8008490 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d10d      	bne.n	80084dc <HAL_RCC_OscConfig+0x940>
 80084c0:	4b03      	ldr	r3, [pc, #12]	; (80084d0 <HAL_RCC_OscConfig+0x934>)
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	4a02      	ldr	r2, [pc, #8]	; (80084d0 <HAL_RCC_OscConfig+0x934>)
 80084c6:	f043 0301 	orr.w	r3, r3, #1
 80084ca:	6213      	str	r3, [r2, #32]
 80084cc:	e03c      	b.n	8008548 <HAL_RCC_OscConfig+0x9ac>
 80084ce:	bf00      	nop
 80084d0:	40021000 	.word	0x40021000
 80084d4:	10908120 	.word	0x10908120
 80084d8:	40007000 	.word	0x40007000
 80084dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10c      	bne.n	8008506 <HAL_RCC_OscConfig+0x96a>
 80084ec:	4bc1      	ldr	r3, [pc, #772]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	4ac0      	ldr	r2, [pc, #768]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 80084f2:	f023 0301 	bic.w	r3, r3, #1
 80084f6:	6213      	str	r3, [r2, #32]
 80084f8:	4bbe      	ldr	r3, [pc, #760]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	4abd      	ldr	r2, [pc, #756]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 80084fe:	f023 0304 	bic.w	r3, r3, #4
 8008502:	6213      	str	r3, [r2, #32]
 8008504:	e020      	b.n	8008548 <HAL_RCC_OscConfig+0x9ac>
 8008506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800850a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	2b05      	cmp	r3, #5
 8008514:	d10c      	bne.n	8008530 <HAL_RCC_OscConfig+0x994>
 8008516:	4bb7      	ldr	r3, [pc, #732]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	4ab6      	ldr	r2, [pc, #728]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 800851c:	f043 0304 	orr.w	r3, r3, #4
 8008520:	6213      	str	r3, [r2, #32]
 8008522:	4bb4      	ldr	r3, [pc, #720]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	4ab3      	ldr	r2, [pc, #716]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 8008528:	f043 0301 	orr.w	r3, r3, #1
 800852c:	6213      	str	r3, [r2, #32]
 800852e:	e00b      	b.n	8008548 <HAL_RCC_OscConfig+0x9ac>
 8008530:	4bb0      	ldr	r3, [pc, #704]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	4aaf      	ldr	r2, [pc, #700]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 8008536:	f023 0301 	bic.w	r3, r3, #1
 800853a:	6213      	str	r3, [r2, #32]
 800853c:	4bad      	ldr	r3, [pc, #692]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	4aac      	ldr	r2, [pc, #688]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 8008542:	f023 0304 	bic.w	r3, r3, #4
 8008546:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800854c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8081 	beq.w	800865c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800855a:	f7fd fa4f 	bl	80059fc <HAL_GetTick>
 800855e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008562:	e00b      	b.n	800857c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008564:	f7fd fa4a 	bl	80059fc <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	f241 3288 	movw	r2, #5000	; 0x1388
 8008574:	4293      	cmp	r3, r2
 8008576:	d901      	bls.n	800857c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e345      	b.n	8008c08 <HAL_RCC_OscConfig+0x106c>
 800857c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008580:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008584:	2202      	movs	r2, #2
 8008586:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800858c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	fa93 f2a3 	rbit	r2, r3
 8008596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800859a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80085a8:	2202      	movs	r2, #2
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	fa93 f2a3 	rbit	r2, r3
 80085ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80085c2:	601a      	str	r2, [r3, #0]
  return result;
 80085c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085c8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80085cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085ce:	fab3 f383 	clz	r3, r3
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	095b      	lsrs	r3, r3, #5
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f043 0302 	orr.w	r3, r3, #2
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d102      	bne.n	80085e8 <HAL_RCC_OscConfig+0xa4c>
 80085e2:	4b84      	ldr	r3, [pc, #528]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	e013      	b.n	8008610 <HAL_RCC_OscConfig+0xa74>
 80085e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80085f0:	2202      	movs	r2, #2
 80085f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	fa93 f2a3 	rbit	r2, r3
 8008602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008606:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	4b79      	ldr	r3, [pc, #484]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008614:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8008618:	2102      	movs	r1, #2
 800861a:	6011      	str	r1, [r2, #0]
 800861c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008620:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8008624:	6812      	ldr	r2, [r2, #0]
 8008626:	fa92 f1a2 	rbit	r1, r2
 800862a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800862e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8008632:	6011      	str	r1, [r2, #0]
  return result;
 8008634:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008638:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	fab2 f282 	clz	r2, r2
 8008642:	b2d2      	uxtb	r2, r2
 8008644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008648:	b2d2      	uxtb	r2, r2
 800864a:	f002 021f 	and.w	r2, r2, #31
 800864e:	2101      	movs	r1, #1
 8008650:	fa01 f202 	lsl.w	r2, r1, r2
 8008654:	4013      	ands	r3, r2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d084      	beq.n	8008564 <HAL_RCC_OscConfig+0x9c8>
 800865a:	e07f      	b.n	800875c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800865c:	f7fd f9ce 	bl	80059fc <HAL_GetTick>
 8008660:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008664:	e00b      	b.n	800867e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008666:	f7fd f9c9 	bl	80059fc <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	f241 3288 	movw	r2, #5000	; 0x1388
 8008676:	4293      	cmp	r3, r2
 8008678:	d901      	bls.n	800867e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e2c4      	b.n	8008c08 <HAL_RCC_OscConfig+0x106c>
 800867e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008682:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008686:	2202      	movs	r2, #2
 8008688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800868a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800868e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	fa93 f2a3 	rbit	r2, r3
 8008698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800869c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80086aa:	2202      	movs	r2, #2
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	fa93 f2a3 	rbit	r2, r3
 80086bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80086c4:	601a      	str	r2, [r3, #0]
  return result;
 80086c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086ca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80086ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086d0:	fab3 f383 	clz	r3, r3
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	095b      	lsrs	r3, r3, #5
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	f043 0302 	orr.w	r3, r3, #2
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d102      	bne.n	80086ea <HAL_RCC_OscConfig+0xb4e>
 80086e4:	4b43      	ldr	r3, [pc, #268]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 80086e6:	6a1b      	ldr	r3, [r3, #32]
 80086e8:	e013      	b.n	8008712 <HAL_RCC_OscConfig+0xb76>
 80086ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80086f2:	2202      	movs	r2, #2
 80086f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	fa93 f2a3 	rbit	r2, r3
 8008704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008708:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	4b39      	ldr	r3, [pc, #228]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008716:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800871a:	2102      	movs	r1, #2
 800871c:	6011      	str	r1, [r2, #0]
 800871e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008722:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8008726:	6812      	ldr	r2, [r2, #0]
 8008728:	fa92 f1a2 	rbit	r1, r2
 800872c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008730:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008734:	6011      	str	r1, [r2, #0]
  return result;
 8008736:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800873a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800873e:	6812      	ldr	r2, [r2, #0]
 8008740:	fab2 f282 	clz	r2, r2
 8008744:	b2d2      	uxtb	r2, r2
 8008746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	f002 021f 	and.w	r2, r2, #31
 8008750:	2101      	movs	r1, #1
 8008752:	fa01 f202 	lsl.w	r2, r1, r2
 8008756:	4013      	ands	r3, r2
 8008758:	2b00      	cmp	r3, #0
 800875a:	d184      	bne.n	8008666 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800875c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8008760:	2b01      	cmp	r3, #1
 8008762:	d105      	bne.n	8008770 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008764:	4b23      	ldr	r3, [pc, #140]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	4a22      	ldr	r2, [pc, #136]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 800876a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800876e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008774:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	69db      	ldr	r3, [r3, #28]
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 8242 	beq.w	8008c06 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008782:	4b1c      	ldr	r3, [pc, #112]	; (80087f4 <HAL_RCC_OscConfig+0xc58>)
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f003 030c 	and.w	r3, r3, #12
 800878a:	2b08      	cmp	r3, #8
 800878c:	f000 8213 	beq.w	8008bb6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008794:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	2b02      	cmp	r3, #2
 800879e:	f040 8162 	bne.w	8008a66 <HAL_RCC_OscConfig+0xeca>
 80087a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087a6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80087aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087b4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	fa93 f2a3 	rbit	r2, r3
 80087be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087c2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80087c6:	601a      	str	r2, [r3, #0]
  return result;
 80087c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087cc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80087d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087d2:	fab3 f383 	clz	r3, r3
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80087dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	461a      	mov	r2, r3
 80087e4:	2300      	movs	r3, #0
 80087e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087e8:	f7fd f908 	bl	80059fc <HAL_GetTick>
 80087ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80087f0:	e00c      	b.n	800880c <HAL_RCC_OscConfig+0xc70>
 80087f2:	bf00      	nop
 80087f4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087f8:	f7fd f900 	bl	80059fc <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	2b02      	cmp	r3, #2
 8008806:	d901      	bls.n	800880c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e1fd      	b.n	8008c08 <HAL_RCC_OscConfig+0x106c>
 800880c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008810:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008814:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800881a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800881e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	fa93 f2a3 	rbit	r2, r3
 8008828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800882c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008830:	601a      	str	r2, [r3, #0]
  return result;
 8008832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008836:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800883a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800883c:	fab3 f383 	clz	r3, r3
 8008840:	b2db      	uxtb	r3, r3
 8008842:	095b      	lsrs	r3, r3, #5
 8008844:	b2db      	uxtb	r3, r3
 8008846:	f043 0301 	orr.w	r3, r3, #1
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b01      	cmp	r3, #1
 800884e:	d102      	bne.n	8008856 <HAL_RCC_OscConfig+0xcba>
 8008850:	4bb0      	ldr	r3, [pc, #704]	; (8008b14 <HAL_RCC_OscConfig+0xf78>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	e027      	b.n	80088a6 <HAL_RCC_OscConfig+0xd0a>
 8008856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800885a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800885e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008868:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	fa93 f2a3 	rbit	r2, r3
 8008872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008876:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008880:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800888e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	fa93 f2a3 	rbit	r2, r3
 8008898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800889c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	4b9c      	ldr	r3, [pc, #624]	; (8008b14 <HAL_RCC_OscConfig+0xf78>)
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80088aa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80088ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80088b2:	6011      	str	r1, [r2, #0]
 80088b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80088b8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80088bc:	6812      	ldr	r2, [r2, #0]
 80088be:	fa92 f1a2 	rbit	r1, r2
 80088c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80088c6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80088ca:	6011      	str	r1, [r2, #0]
  return result;
 80088cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80088d0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80088d4:	6812      	ldr	r2, [r2, #0]
 80088d6:	fab2 f282 	clz	r2, r2
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	f042 0220 	orr.w	r2, r2, #32
 80088e0:	b2d2      	uxtb	r2, r2
 80088e2:	f002 021f 	and.w	r2, r2, #31
 80088e6:	2101      	movs	r1, #1
 80088e8:	fa01 f202 	lsl.w	r2, r1, r2
 80088ec:	4013      	ands	r3, r2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d182      	bne.n	80087f8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088f2:	4b88      	ldr	r3, [pc, #544]	; (8008b14 <HAL_RCC_OscConfig+0xf78>)
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80088fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800890a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	430b      	orrs	r3, r1
 8008914:	497f      	ldr	r1, [pc, #508]	; (8008b14 <HAL_RCC_OscConfig+0xf78>)
 8008916:	4313      	orrs	r3, r2
 8008918:	604b      	str	r3, [r1, #4]
 800891a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800891e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8008922:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800892c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	fa93 f2a3 	rbit	r2, r3
 8008936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800893a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800893e:	601a      	str	r2, [r3, #0]
  return result;
 8008940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008944:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008948:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800894a:	fab3 f383 	clz	r3, r3
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008954:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	461a      	mov	r2, r3
 800895c:	2301      	movs	r3, #1
 800895e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008960:	f7fd f84c 	bl	80059fc <HAL_GetTick>
 8008964:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008968:	e009      	b.n	800897e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800896a:	f7fd f847 	bl	80059fc <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	2b02      	cmp	r3, #2
 8008978:	d901      	bls.n	800897e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e144      	b.n	8008c08 <HAL_RCC_OscConfig+0x106c>
 800897e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008982:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800898a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800898c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008990:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	fa93 f2a3 	rbit	r2, r3
 800899a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800899e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80089a2:	601a      	str	r2, [r3, #0]
  return result;
 80089a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089a8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80089ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80089ae:	fab3 f383 	clz	r3, r3
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	095b      	lsrs	r3, r3, #5
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	f043 0301 	orr.w	r3, r3, #1
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d102      	bne.n	80089c8 <HAL_RCC_OscConfig+0xe2c>
 80089c2:	4b54      	ldr	r3, [pc, #336]	; (8008b14 <HAL_RCC_OscConfig+0xf78>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	e027      	b.n	8008a18 <HAL_RCC_OscConfig+0xe7c>
 80089c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089cc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80089d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80089d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089da:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	fa93 f2a3 	rbit	r2, r3
 80089e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089e8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089f2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80089f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a00:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	fa93 f2a3 	rbit	r2, r3
 8008a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a0e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	4b3f      	ldr	r3, [pc, #252]	; (8008b14 <HAL_RCC_OscConfig+0xf78>)
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008a1c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8008a20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008a24:	6011      	str	r1, [r2, #0]
 8008a26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008a2a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8008a2e:	6812      	ldr	r2, [r2, #0]
 8008a30:	fa92 f1a2 	rbit	r1, r2
 8008a34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008a38:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008a3c:	6011      	str	r1, [r2, #0]
  return result;
 8008a3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008a42:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008a46:	6812      	ldr	r2, [r2, #0]
 8008a48:	fab2 f282 	clz	r2, r2
 8008a4c:	b2d2      	uxtb	r2, r2
 8008a4e:	f042 0220 	orr.w	r2, r2, #32
 8008a52:	b2d2      	uxtb	r2, r2
 8008a54:	f002 021f 	and.w	r2, r2, #31
 8008a58:	2101      	movs	r1, #1
 8008a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8008a5e:	4013      	ands	r3, r2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d082      	beq.n	800896a <HAL_RCC_OscConfig+0xdce>
 8008a64:	e0cf      	b.n	8008c06 <HAL_RCC_OscConfig+0x106a>
 8008a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a6a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008a6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a78:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	fa93 f2a3 	rbit	r2, r3
 8008a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a86:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008a8a:	601a      	str	r2, [r3, #0]
  return result;
 8008a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a90:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008a94:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a96:	fab3 f383 	clz	r3, r3
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008aa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aac:	f7fc ffa6 	bl	80059fc <HAL_GetTick>
 8008ab0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ab4:	e009      	b.n	8008aca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ab6:	f7fc ffa1 	bl	80059fc <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d901      	bls.n	8008aca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e09e      	b.n	8008c08 <HAL_RCC_OscConfig+0x106c>
 8008aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ace:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008ad2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008adc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	fa93 f2a3 	rbit	r2, r3
 8008ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008aea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008aee:	601a      	str	r2, [r3, #0]
  return result;
 8008af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008af4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008af8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008afa:	fab3 f383 	clz	r3, r3
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	095b      	lsrs	r3, r3, #5
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f043 0301 	orr.w	r3, r3, #1
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d104      	bne.n	8008b18 <HAL_RCC_OscConfig+0xf7c>
 8008b0e:	4b01      	ldr	r3, [pc, #4]	; (8008b14 <HAL_RCC_OscConfig+0xf78>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	e029      	b.n	8008b68 <HAL_RCC_OscConfig+0xfcc>
 8008b14:	40021000 	.word	0x40021000
 8008b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b1c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b2a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	fa93 f2a3 	rbit	r2, r3
 8008b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b38:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8008b3c:	601a      	str	r2, [r3, #0]
 8008b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b42:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008b46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008b4a:	601a      	str	r2, [r3, #0]
 8008b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b50:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	fa93 f2a3 	rbit	r2, r3
 8008b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b5e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	4b2b      	ldr	r3, [pc, #172]	; (8008c14 <HAL_RCC_OscConfig+0x1078>)
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008b6c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008b70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008b74:	6011      	str	r1, [r2, #0]
 8008b76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008b7a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008b7e:	6812      	ldr	r2, [r2, #0]
 8008b80:	fa92 f1a2 	rbit	r1, r2
 8008b84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008b88:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008b8c:	6011      	str	r1, [r2, #0]
  return result;
 8008b8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008b92:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008b96:	6812      	ldr	r2, [r2, #0]
 8008b98:	fab2 f282 	clz	r2, r2
 8008b9c:	b2d2      	uxtb	r2, r2
 8008b9e:	f042 0220 	orr.w	r2, r2, #32
 8008ba2:	b2d2      	uxtb	r2, r2
 8008ba4:	f002 021f 	and.w	r2, r2, #31
 8008ba8:	2101      	movs	r1, #1
 8008baa:	fa01 f202 	lsl.w	r2, r1, r2
 8008bae:	4013      	ands	r3, r2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d180      	bne.n	8008ab6 <HAL_RCC_OscConfig+0xf1a>
 8008bb4:	e027      	b.n	8008c06 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d101      	bne.n	8008bca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e01e      	b.n	8008c08 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008bca:	4b12      	ldr	r3, [pc, #72]	; (8008c14 <HAL_RCC_OscConfig+0x1078>)
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008bd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008bd6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d10b      	bne.n	8008c02 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008bea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008bee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d001      	beq.n	8008c06 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e000      	b.n	8008c08 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	40021000 	.word	0x40021000

08008c18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b09e      	sub	sp, #120	; 0x78
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e162      	b.n	8008ef6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c30:	4b90      	ldr	r3, [pc, #576]	; (8008e74 <HAL_RCC_ClockConfig+0x25c>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0307 	and.w	r3, r3, #7
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d910      	bls.n	8008c60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c3e:	4b8d      	ldr	r3, [pc, #564]	; (8008e74 <HAL_RCC_ClockConfig+0x25c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f023 0207 	bic.w	r2, r3, #7
 8008c46:	498b      	ldr	r1, [pc, #556]	; (8008e74 <HAL_RCC_ClockConfig+0x25c>)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c4e:	4b89      	ldr	r3, [pc, #548]	; (8008e74 <HAL_RCC_ClockConfig+0x25c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d001      	beq.n	8008c60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e14a      	b.n	8008ef6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0302 	and.w	r3, r3, #2
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d008      	beq.n	8008c7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c6c:	4b82      	ldr	r3, [pc, #520]	; (8008e78 <HAL_RCC_ClockConfig+0x260>)
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	497f      	ldr	r1, [pc, #508]	; (8008e78 <HAL_RCC_ClockConfig+0x260>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 80dc 	beq.w	8008e44 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d13c      	bne.n	8008d0e <HAL_RCC_ClockConfig+0xf6>
 8008c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c9c:	fa93 f3a3 	rbit	r3, r3
 8008ca0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ca4:	fab3 f383 	clz	r3, r3
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	095b      	lsrs	r3, r3, #5
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f043 0301 	orr.w	r3, r3, #1
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d102      	bne.n	8008cbe <HAL_RCC_ClockConfig+0xa6>
 8008cb8:	4b6f      	ldr	r3, [pc, #444]	; (8008e78 <HAL_RCC_ClockConfig+0x260>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	e00f      	b.n	8008cde <HAL_RCC_ClockConfig+0xc6>
 8008cbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008cc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cc6:	fa93 f3a3 	rbit	r3, r3
 8008cca:	667b      	str	r3, [r7, #100]	; 0x64
 8008ccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008cd0:	663b      	str	r3, [r7, #96]	; 0x60
 8008cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cd4:	fa93 f3a3 	rbit	r3, r3
 8008cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cda:	4b67      	ldr	r3, [pc, #412]	; (8008e78 <HAL_RCC_ClockConfig+0x260>)
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ce2:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ce6:	fa92 f2a2 	rbit	r2, r2
 8008cea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008cec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cee:	fab2 f282 	clz	r2, r2
 8008cf2:	b2d2      	uxtb	r2, r2
 8008cf4:	f042 0220 	orr.w	r2, r2, #32
 8008cf8:	b2d2      	uxtb	r2, r2
 8008cfa:	f002 021f 	and.w	r2, r2, #31
 8008cfe:	2101      	movs	r1, #1
 8008d00:	fa01 f202 	lsl.w	r2, r1, r2
 8008d04:	4013      	ands	r3, r2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d17b      	bne.n	8008e02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e0f3      	b.n	8008ef6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d13c      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x178>
 8008d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d1a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d1e:	fa93 f3a3 	rbit	r3, r3
 8008d22:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d26:	fab3 f383 	clz	r3, r3
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	095b      	lsrs	r3, r3, #5
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	f043 0301 	orr.w	r3, r3, #1
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d102      	bne.n	8008d40 <HAL_RCC_ClockConfig+0x128>
 8008d3a:	4b4f      	ldr	r3, [pc, #316]	; (8008e78 <HAL_RCC_ClockConfig+0x260>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	e00f      	b.n	8008d60 <HAL_RCC_ClockConfig+0x148>
 8008d40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d48:	fa93 f3a3 	rbit	r3, r3
 8008d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d52:	643b      	str	r3, [r7, #64]	; 0x40
 8008d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d56:	fa93 f3a3 	rbit	r3, r3
 8008d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d5c:	4b46      	ldr	r3, [pc, #280]	; (8008e78 <HAL_RCC_ClockConfig+0x260>)
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008d64:	63ba      	str	r2, [r7, #56]	; 0x38
 8008d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d68:	fa92 f2a2 	rbit	r2, r2
 8008d6c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d70:	fab2 f282 	clz	r2, r2
 8008d74:	b2d2      	uxtb	r2, r2
 8008d76:	f042 0220 	orr.w	r2, r2, #32
 8008d7a:	b2d2      	uxtb	r2, r2
 8008d7c:	f002 021f 	and.w	r2, r2, #31
 8008d80:	2101      	movs	r1, #1
 8008d82:	fa01 f202 	lsl.w	r2, r1, r2
 8008d86:	4013      	ands	r3, r2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d13a      	bne.n	8008e02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e0b2      	b.n	8008ef6 <HAL_RCC_ClockConfig+0x2de>
 8008d90:	2302      	movs	r3, #2
 8008d92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d96:	fa93 f3a3 	rbit	r3, r3
 8008d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d9e:	fab3 f383 	clz	r3, r3
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	095b      	lsrs	r3, r3, #5
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	f043 0301 	orr.w	r3, r3, #1
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d102      	bne.n	8008db8 <HAL_RCC_ClockConfig+0x1a0>
 8008db2:	4b31      	ldr	r3, [pc, #196]	; (8008e78 <HAL_RCC_ClockConfig+0x260>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	e00d      	b.n	8008dd4 <HAL_RCC_ClockConfig+0x1bc>
 8008db8:	2302      	movs	r3, #2
 8008dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbe:	fa93 f3a3 	rbit	r3, r3
 8008dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	623b      	str	r3, [r7, #32]
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	fa93 f3a3 	rbit	r3, r3
 8008dce:	61fb      	str	r3, [r7, #28]
 8008dd0:	4b29      	ldr	r3, [pc, #164]	; (8008e78 <HAL_RCC_ClockConfig+0x260>)
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	61ba      	str	r2, [r7, #24]
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	fa92 f2a2 	rbit	r2, r2
 8008dde:	617a      	str	r2, [r7, #20]
  return result;
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	fab2 f282 	clz	r2, r2
 8008de6:	b2d2      	uxtb	r2, r2
 8008de8:	f042 0220 	orr.w	r2, r2, #32
 8008dec:	b2d2      	uxtb	r2, r2
 8008dee:	f002 021f 	and.w	r2, r2, #31
 8008df2:	2101      	movs	r1, #1
 8008df4:	fa01 f202 	lsl.w	r2, r1, r2
 8008df8:	4013      	ands	r3, r2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e079      	b.n	8008ef6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e02:	4b1d      	ldr	r3, [pc, #116]	; (8008e78 <HAL_RCC_ClockConfig+0x260>)
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f023 0203 	bic.w	r2, r3, #3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	491a      	ldr	r1, [pc, #104]	; (8008e78 <HAL_RCC_ClockConfig+0x260>)
 8008e10:	4313      	orrs	r3, r2
 8008e12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e14:	f7fc fdf2 	bl	80059fc <HAL_GetTick>
 8008e18:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e1a:	e00a      	b.n	8008e32 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e1c:	f7fc fdee 	bl	80059fc <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d901      	bls.n	8008e32 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e061      	b.n	8008ef6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e32:	4b11      	ldr	r3, [pc, #68]	; (8008e78 <HAL_RCC_ClockConfig+0x260>)
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f003 020c 	and.w	r2, r3, #12
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d1eb      	bne.n	8008e1c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e44:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <HAL_RCC_ClockConfig+0x25c>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0307 	and.w	r3, r3, #7
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d214      	bcs.n	8008e7c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e52:	4b08      	ldr	r3, [pc, #32]	; (8008e74 <HAL_RCC_ClockConfig+0x25c>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f023 0207 	bic.w	r2, r3, #7
 8008e5a:	4906      	ldr	r1, [pc, #24]	; (8008e74 <HAL_RCC_ClockConfig+0x25c>)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e62:	4b04      	ldr	r3, [pc, #16]	; (8008e74 <HAL_RCC_ClockConfig+0x25c>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0307 	and.w	r3, r3, #7
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d005      	beq.n	8008e7c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e040      	b.n	8008ef6 <HAL_RCC_ClockConfig+0x2de>
 8008e74:	40022000 	.word	0x40022000
 8008e78:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0304 	and.w	r3, r3, #4
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d008      	beq.n	8008e9a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e88:	4b1d      	ldr	r3, [pc, #116]	; (8008f00 <HAL_RCC_ClockConfig+0x2e8>)
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	491a      	ldr	r1, [pc, #104]	; (8008f00 <HAL_RCC_ClockConfig+0x2e8>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0308 	and.w	r3, r3, #8
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d009      	beq.n	8008eba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ea6:	4b16      	ldr	r3, [pc, #88]	; (8008f00 <HAL_RCC_ClockConfig+0x2e8>)
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	00db      	lsls	r3, r3, #3
 8008eb4:	4912      	ldr	r1, [pc, #72]	; (8008f00 <HAL_RCC_ClockConfig+0x2e8>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008eba:	f000 f829 	bl	8008f10 <HAL_RCC_GetSysClockFreq>
 8008ebe:	4601      	mov	r1, r0
 8008ec0:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <HAL_RCC_ClockConfig+0x2e8>)
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ec8:	22f0      	movs	r2, #240	; 0xf0
 8008eca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	fa92 f2a2 	rbit	r2, r2
 8008ed2:	60fa      	str	r2, [r7, #12]
  return result;
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	fab2 f282 	clz	r2, r2
 8008eda:	b2d2      	uxtb	r2, r2
 8008edc:	40d3      	lsrs	r3, r2
 8008ede:	4a09      	ldr	r2, [pc, #36]	; (8008f04 <HAL_RCC_ClockConfig+0x2ec>)
 8008ee0:	5cd3      	ldrb	r3, [r2, r3]
 8008ee2:	fa21 f303 	lsr.w	r3, r1, r3
 8008ee6:	4a08      	ldr	r2, [pc, #32]	; (8008f08 <HAL_RCC_ClockConfig+0x2f0>)
 8008ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008eea:	4b08      	ldr	r3, [pc, #32]	; (8008f0c <HAL_RCC_ClockConfig+0x2f4>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fc fd40 	bl	8005974 <HAL_InitTick>
  
  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3778      	adds	r7, #120	; 0x78
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	40021000 	.word	0x40021000
 8008f04:	0800db38 	.word	0x0800db38
 8008f08:	20000134 	.word	0x20000134
 8008f0c:	20000138 	.word	0x20000138

08008f10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b08b      	sub	sp, #44	; 0x2c
 8008f14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	61fb      	str	r3, [r7, #28]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	61bb      	str	r3, [r7, #24]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
 8008f22:	2300      	movs	r3, #0
 8008f24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008f2a:	4b29      	ldr	r3, [pc, #164]	; (8008fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	f003 030c 	and.w	r3, r3, #12
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d002      	beq.n	8008f40 <HAL_RCC_GetSysClockFreq+0x30>
 8008f3a:	2b08      	cmp	r3, #8
 8008f3c:	d003      	beq.n	8008f46 <HAL_RCC_GetSysClockFreq+0x36>
 8008f3e:	e03c      	b.n	8008fba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008f40:	4b24      	ldr	r3, [pc, #144]	; (8008fd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008f42:	623b      	str	r3, [r7, #32]
      break;
 8008f44:	e03c      	b.n	8008fc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008f4c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008f50:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	fa92 f2a2 	rbit	r2, r2
 8008f58:	607a      	str	r2, [r7, #4]
  return result;
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	fab2 f282 	clz	r2, r2
 8008f60:	b2d2      	uxtb	r2, r2
 8008f62:	40d3      	lsrs	r3, r2
 8008f64:	4a1c      	ldr	r2, [pc, #112]	; (8008fd8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008f66:	5cd3      	ldrb	r3, [r2, r3]
 8008f68:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008f6a:	4b19      	ldr	r3, [pc, #100]	; (8008fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	220f      	movs	r2, #15
 8008f74:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	fa92 f2a2 	rbit	r2, r2
 8008f7c:	60fa      	str	r2, [r7, #12]
  return result;
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	fab2 f282 	clz	r2, r2
 8008f84:	b2d2      	uxtb	r2, r2
 8008f86:	40d3      	lsrs	r3, r2
 8008f88:	4a14      	ldr	r2, [pc, #80]	; (8008fdc <HAL_RCC_GetSysClockFreq+0xcc>)
 8008f8a:	5cd3      	ldrb	r3, [r2, r3]
 8008f8c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d008      	beq.n	8008faa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008f98:	4a0e      	ldr	r2, [pc, #56]	; (8008fd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	fb02 f303 	mul.w	r3, r2, r3
 8008fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8008fa8:	e004      	b.n	8008fb4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	4a0c      	ldr	r2, [pc, #48]	; (8008fe0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008fae:	fb02 f303 	mul.w	r3, r2, r3
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	623b      	str	r3, [r7, #32]
      break;
 8008fb8:	e002      	b.n	8008fc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008fba:	4b06      	ldr	r3, [pc, #24]	; (8008fd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008fbc:	623b      	str	r3, [r7, #32]
      break;
 8008fbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	372c      	adds	r7, #44	; 0x2c
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	40021000 	.word	0x40021000
 8008fd4:	007a1200 	.word	0x007a1200
 8008fd8:	0800db50 	.word	0x0800db50
 8008fdc:	0800db60 	.word	0x0800db60
 8008fe0:	003d0900 	.word	0x003d0900

08008fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fe8:	4b03      	ldr	r3, [pc, #12]	; (8008ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008fea:	681b      	ldr	r3, [r3, #0]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	20000134 	.word	0x20000134

08008ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8009002:	f7ff ffef 	bl	8008fe4 <HAL_RCC_GetHCLKFreq>
 8009006:	4601      	mov	r1, r0
 8009008:	4b0b      	ldr	r3, [pc, #44]	; (8009038 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009010:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009014:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	fa92 f2a2 	rbit	r2, r2
 800901c:	603a      	str	r2, [r7, #0]
  return result;
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	fab2 f282 	clz	r2, r2
 8009024:	b2d2      	uxtb	r2, r2
 8009026:	40d3      	lsrs	r3, r2
 8009028:	4a04      	ldr	r2, [pc, #16]	; (800903c <HAL_RCC_GetPCLK1Freq+0x40>)
 800902a:	5cd3      	ldrb	r3, [r2, r3]
 800902c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8009030:	4618      	mov	r0, r3
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	40021000 	.word	0x40021000
 800903c:	0800db48 	.word	0x0800db48

08009040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8009046:	f7ff ffcd 	bl	8008fe4 <HAL_RCC_GetHCLKFreq>
 800904a:	4601      	mov	r1, r0
 800904c:	4b0b      	ldr	r3, [pc, #44]	; (800907c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8009054:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009058:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	fa92 f2a2 	rbit	r2, r2
 8009060:	603a      	str	r2, [r7, #0]
  return result;
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	fab2 f282 	clz	r2, r2
 8009068:	b2d2      	uxtb	r2, r2
 800906a:	40d3      	lsrs	r3, r2
 800906c:	4a04      	ldr	r2, [pc, #16]	; (8009080 <HAL_RCC_GetPCLK2Freq+0x40>)
 800906e:	5cd3      	ldrb	r3, [r2, r3]
 8009070:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009074:	4618      	mov	r0, r3
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	40021000 	.word	0x40021000
 8009080:	0800db48 	.word	0x0800db48

08009084 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b092      	sub	sp, #72	; 0x48
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800908c:	2300      	movs	r3, #0
 800908e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8009090:	2300      	movs	r3, #0
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8009094:	2300      	movs	r3, #0
 8009096:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 80d4 	beq.w	8009250 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090a8:	4b4e      	ldr	r3, [pc, #312]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10e      	bne.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090b4:	4b4b      	ldr	r3, [pc, #300]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	4a4a      	ldr	r2, [pc, #296]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090be:	61d3      	str	r3, [r2, #28]
 80090c0:	4b48      	ldr	r3, [pc, #288]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090c2:	69db      	ldr	r3, [r3, #28]
 80090c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090c8:	60bb      	str	r3, [r7, #8]
 80090ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090cc:	2301      	movs	r3, #1
 80090ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090d2:	4b45      	ldr	r3, [pc, #276]	; (80091e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d118      	bne.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80090de:	4b42      	ldr	r3, [pc, #264]	; (80091e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a41      	ldr	r2, [pc, #260]	; (80091e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80090e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090ea:	f7fc fc87 	bl	80059fc <HAL_GetTick>
 80090ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090f0:	e008      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090f2:	f7fc fc83 	bl	80059fc <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	2b64      	cmp	r3, #100	; 0x64
 80090fe:	d901      	bls.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e169      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009104:	4b38      	ldr	r3, [pc, #224]	; (80091e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800910c:	2b00      	cmp	r3, #0
 800910e:	d0f0      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009110:	4b34      	ldr	r3, [pc, #208]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009118:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800911a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 8084 	beq.w	800922a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800912a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800912c:	429a      	cmp	r2, r3
 800912e:	d07c      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009130:	4b2c      	ldr	r3, [pc, #176]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009132:	6a1b      	ldr	r3, [r3, #32]
 8009134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800913a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800913e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009142:	fa93 f3a3 	rbit	r3, r3
 8009146:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800914a:	fab3 f383 	clz	r3, r3
 800914e:	b2db      	uxtb	r3, r3
 8009150:	461a      	mov	r2, r3
 8009152:	4b26      	ldr	r3, [pc, #152]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	461a      	mov	r2, r3
 800915a:	2301      	movs	r3, #1
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009162:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	fa93 f3a3 	rbit	r3, r3
 800916a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800916c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800916e:	fab3 f383 	clz	r3, r3
 8009172:	b2db      	uxtb	r3, r3
 8009174:	461a      	mov	r2, r3
 8009176:	4b1d      	ldr	r3, [pc, #116]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009178:	4413      	add	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	461a      	mov	r2, r3
 800917e:	2300      	movs	r3, #0
 8009180:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009182:	4a18      	ldr	r2, [pc, #96]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009186:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d04b      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009192:	f7fc fc33 	bl	80059fc <HAL_GetTick>
 8009196:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009198:	e00a      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800919a:	f7fc fc2f 	bl	80059fc <HAL_GetTick>
 800919e:	4602      	mov	r2, r0
 80091a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d901      	bls.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e113      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80091b0:	2302      	movs	r3, #2
 80091b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	fa93 f3a3 	rbit	r3, r3
 80091ba:	627b      	str	r3, [r7, #36]	; 0x24
 80091bc:	2302      	movs	r3, #2
 80091be:	623b      	str	r3, [r7, #32]
 80091c0:	6a3b      	ldr	r3, [r7, #32]
 80091c2:	fa93 f3a3 	rbit	r3, r3
 80091c6:	61fb      	str	r3, [r7, #28]
  return result;
 80091c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091ca:	fab3 f383 	clz	r3, r3
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	095b      	lsrs	r3, r3, #5
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	f043 0302 	orr.w	r3, r3, #2
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d108      	bne.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80091de:	4b01      	ldr	r3, [pc, #4]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	e00d      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80091e4:	40021000 	.word	0x40021000
 80091e8:	40007000 	.word	0x40007000
 80091ec:	10908100 	.word	0x10908100
 80091f0:	2302      	movs	r3, #2
 80091f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	fa93 f3a3 	rbit	r3, r3
 80091fa:	617b      	str	r3, [r7, #20]
 80091fc:	4b78      	ldr	r3, [pc, #480]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	2202      	movs	r2, #2
 8009202:	613a      	str	r2, [r7, #16]
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	fa92 f2a2 	rbit	r2, r2
 800920a:	60fa      	str	r2, [r7, #12]
  return result;
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	fab2 f282 	clz	r2, r2
 8009212:	b2d2      	uxtb	r2, r2
 8009214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009218:	b2d2      	uxtb	r2, r2
 800921a:	f002 021f 	and.w	r2, r2, #31
 800921e:	2101      	movs	r1, #1
 8009220:	fa01 f202 	lsl.w	r2, r1, r2
 8009224:	4013      	ands	r3, r2
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0b7      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800922a:	4b6d      	ldr	r3, [pc, #436]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	496a      	ldr	r1, [pc, #424]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009238:	4313      	orrs	r3, r2
 800923a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800923c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009240:	2b01      	cmp	r3, #1
 8009242:	d105      	bne.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009244:	4b66      	ldr	r3, [pc, #408]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009246:	69db      	ldr	r3, [r3, #28]
 8009248:	4a65      	ldr	r2, [pc, #404]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800924a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800924e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	d008      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800925c:	4b60      	ldr	r3, [pc, #384]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800925e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009260:	f023 0203 	bic.w	r2, r3, #3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	495d      	ldr	r1, [pc, #372]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800926a:	4313      	orrs	r3, r2
 800926c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d008      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800927a:	4b59      	ldr	r3, [pc, #356]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800927c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800927e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	4956      	ldr	r1, [pc, #344]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009288:	4313      	orrs	r3, r2
 800928a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0304 	and.w	r3, r3, #4
 8009294:	2b00      	cmp	r3, #0
 8009296:	d008      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009298:	4b51      	ldr	r3, [pc, #324]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800929a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	494e      	ldr	r1, [pc, #312]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d008      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80092b6:	4b4a      	ldr	r3, [pc, #296]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80092b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ba:	f023 0210 	bic.w	r2, r3, #16
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	4947      	ldr	r1, [pc, #284]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80092c4:	4313      	orrs	r3, r2
 80092c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d008      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80092d4:	4b42      	ldr	r3, [pc, #264]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e0:	493f      	ldr	r1, [pc, #252]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80092e2:	4313      	orrs	r3, r2
 80092e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d008      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80092f2:	4b3b      	ldr	r3, [pc, #236]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80092f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f6:	f023 0220 	bic.w	r2, r3, #32
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	4938      	ldr	r1, [pc, #224]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009300:	4313      	orrs	r3, r2
 8009302:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0308 	and.w	r3, r3, #8
 800930c:	2b00      	cmp	r3, #0
 800930e:	d008      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009310:	4b33      	ldr	r3, [pc, #204]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	4930      	ldr	r1, [pc, #192]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800931e:	4313      	orrs	r3, r2
 8009320:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0310 	and.w	r3, r3, #16
 800932a:	2b00      	cmp	r3, #0
 800932c:	d008      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800932e:	4b2c      	ldr	r3, [pc, #176]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009332:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	4929      	ldr	r1, [pc, #164]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800933c:	4313      	orrs	r3, r2
 800933e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009348:	2b00      	cmp	r3, #0
 800934a:	d008      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800934c:	4b24      	ldr	r3, [pc, #144]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009358:	4921      	ldr	r1, [pc, #132]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800935a:	4313      	orrs	r3, r2
 800935c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009366:	2b00      	cmp	r3, #0
 8009368:	d008      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800936a:	4b1d      	ldr	r3, [pc, #116]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009376:	491a      	ldr	r1, [pc, #104]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009378:	4313      	orrs	r3, r2
 800937a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009384:	2b00      	cmp	r3, #0
 8009386:	d008      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8009388:	4b15      	ldr	r3, [pc, #84]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009394:	4912      	ldr	r1, [pc, #72]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009396:	4313      	orrs	r3, r2
 8009398:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d008      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80093a6:	4b0e      	ldr	r3, [pc, #56]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80093a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b2:	490b      	ldr	r1, [pc, #44]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80093b4:	4313      	orrs	r3, r2
 80093b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d008      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80093c4:	4b06      	ldr	r3, [pc, #24]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80093c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d0:	4903      	ldr	r1, [pc, #12]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3748      	adds	r7, #72	; 0x48
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	40021000 	.word	0x40021000

080093e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e09d      	b.n	8009532 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d108      	bne.n	8009410 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009406:	d009      	beq.n	800941c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	61da      	str	r2, [r3, #28]
 800940e:	e005      	b.n	800941c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d106      	bne.n	800943c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7f8 fce8 	bl	8001e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009452:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800945c:	d902      	bls.n	8009464 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800945e:	2300      	movs	r3, #0
 8009460:	60fb      	str	r3, [r7, #12]
 8009462:	e002      	b.n	800946a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009468:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009472:	d007      	beq.n	8009484 <HAL_SPI_Init+0xa0>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800947c:	d002      	beq.n	8009484 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009494:	431a      	orrs	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	f003 0302 	and.w	r3, r3, #2
 800949e:	431a      	orrs	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	431a      	orrs	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094b2:	431a      	orrs	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	69db      	ldr	r3, [r3, #28]
 80094b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094bc:	431a      	orrs	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c6:	ea42 0103 	orr.w	r1, r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	0c1b      	lsrs	r3, r3, #16
 80094e0:	f003 0204 	and.w	r2, r3, #4
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	f003 0310 	and.w	r3, r3, #16
 80094ec:	431a      	orrs	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f2:	f003 0308 	and.w	r3, r3, #8
 80094f6:	431a      	orrs	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009500:	ea42 0103 	orr.w	r1, r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	69da      	ldr	r2, [r3, #28]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009520:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d101      	bne.n	800954c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e049      	b.n	80095e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d106      	bne.n	8009566 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f7f8 fc95 	bl	8001e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2202      	movs	r2, #2
 800956a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	3304      	adds	r3, #4
 8009576:	4619      	mov	r1, r3
 8009578:	4610      	mov	r0, r2
 800957a:	f000 fd31 	bl	8009fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d001      	beq.n	8009600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e04a      	b.n	8009696 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2202      	movs	r2, #2
 8009604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68da      	ldr	r2, [r3, #12]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0201 	orr.w	r2, r2, #1
 8009616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a21      	ldr	r2, [pc, #132]	; (80096a4 <HAL_TIM_Base_Start_IT+0xbc>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d018      	beq.n	8009654 <HAL_TIM_Base_Start_IT+0x6c>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800962a:	d013      	beq.n	8009654 <HAL_TIM_Base_Start_IT+0x6c>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a1d      	ldr	r2, [pc, #116]	; (80096a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d00e      	beq.n	8009654 <HAL_TIM_Base_Start_IT+0x6c>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a1c      	ldr	r2, [pc, #112]	; (80096ac <HAL_TIM_Base_Start_IT+0xc4>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d009      	beq.n	8009654 <HAL_TIM_Base_Start_IT+0x6c>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a1a      	ldr	r2, [pc, #104]	; (80096b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d004      	beq.n	8009654 <HAL_TIM_Base_Start_IT+0x6c>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a19      	ldr	r2, [pc, #100]	; (80096b4 <HAL_TIM_Base_Start_IT+0xcc>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d115      	bne.n	8009680 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689a      	ldr	r2, [r3, #8]
 800965a:	4b17      	ldr	r3, [pc, #92]	; (80096b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800965c:	4013      	ands	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b06      	cmp	r3, #6
 8009664:	d015      	beq.n	8009692 <HAL_TIM_Base_Start_IT+0xaa>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800966c:	d011      	beq.n	8009692 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f042 0201 	orr.w	r2, r2, #1
 800967c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800967e:	e008      	b.n	8009692 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f042 0201 	orr.w	r2, r2, #1
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	e000      	b.n	8009694 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009692:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	40012c00 	.word	0x40012c00
 80096a8:	40000400 	.word	0x40000400
 80096ac:	40000800 	.word	0x40000800
 80096b0:	40013400 	.word	0x40013400
 80096b4:	40014000 	.word	0x40014000
 80096b8:	00010007 	.word	0x00010007

080096bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e049      	b.n	8009762 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d106      	bne.n	80096e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f841 	bl	800976a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	3304      	adds	r3, #4
 80096f8:	4619      	mov	r1, r3
 80096fa:	4610      	mov	r0, r2
 80096fc:	f000 fc70 	bl	8009fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800976a:	b480      	push	{r7}
 800976c:	b083      	sub	sp, #12
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009772:	bf00      	nop
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
	...

08009780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d109      	bne.n	80097a4 <HAL_TIM_PWM_Start+0x24>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009796:	b2db      	uxtb	r3, r3
 8009798:	2b01      	cmp	r3, #1
 800979a:	bf14      	ite	ne
 800979c:	2301      	movne	r3, #1
 800979e:	2300      	moveq	r3, #0
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	e03c      	b.n	800981e <HAL_TIM_PWM_Start+0x9e>
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d109      	bne.n	80097be <HAL_TIM_PWM_Start+0x3e>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	bf14      	ite	ne
 80097b6:	2301      	movne	r3, #1
 80097b8:	2300      	moveq	r3, #0
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	e02f      	b.n	800981e <HAL_TIM_PWM_Start+0x9e>
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2b08      	cmp	r3, #8
 80097c2:	d109      	bne.n	80097d8 <HAL_TIM_PWM_Start+0x58>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	bf14      	ite	ne
 80097d0:	2301      	movne	r3, #1
 80097d2:	2300      	moveq	r3, #0
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	e022      	b.n	800981e <HAL_TIM_PWM_Start+0x9e>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	2b0c      	cmp	r3, #12
 80097dc:	d109      	bne.n	80097f2 <HAL_TIM_PWM_Start+0x72>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	bf14      	ite	ne
 80097ea:	2301      	movne	r3, #1
 80097ec:	2300      	moveq	r3, #0
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	e015      	b.n	800981e <HAL_TIM_PWM_Start+0x9e>
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2b10      	cmp	r3, #16
 80097f6:	d109      	bne.n	800980c <HAL_TIM_PWM_Start+0x8c>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b01      	cmp	r3, #1
 8009802:	bf14      	ite	ne
 8009804:	2301      	movne	r3, #1
 8009806:	2300      	moveq	r3, #0
 8009808:	b2db      	uxtb	r3, r3
 800980a:	e008      	b.n	800981e <HAL_TIM_PWM_Start+0x9e>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b01      	cmp	r3, #1
 8009816:	bf14      	ite	ne
 8009818:	2301      	movne	r3, #1
 800981a:	2300      	moveq	r3, #0
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e097      	b.n	8009956 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d104      	bne.n	8009836 <HAL_TIM_PWM_Start+0xb6>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2202      	movs	r2, #2
 8009830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009834:	e023      	b.n	800987e <HAL_TIM_PWM_Start+0xfe>
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b04      	cmp	r3, #4
 800983a:	d104      	bne.n	8009846 <HAL_TIM_PWM_Start+0xc6>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2202      	movs	r2, #2
 8009840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009844:	e01b      	b.n	800987e <HAL_TIM_PWM_Start+0xfe>
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	2b08      	cmp	r3, #8
 800984a:	d104      	bne.n	8009856 <HAL_TIM_PWM_Start+0xd6>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009854:	e013      	b.n	800987e <HAL_TIM_PWM_Start+0xfe>
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2b0c      	cmp	r3, #12
 800985a:	d104      	bne.n	8009866 <HAL_TIM_PWM_Start+0xe6>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2202      	movs	r2, #2
 8009860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009864:	e00b      	b.n	800987e <HAL_TIM_PWM_Start+0xfe>
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b10      	cmp	r3, #16
 800986a:	d104      	bne.n	8009876 <HAL_TIM_PWM_Start+0xf6>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009874:	e003      	b.n	800987e <HAL_TIM_PWM_Start+0xfe>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2202      	movs	r2, #2
 800987a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2201      	movs	r2, #1
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	4618      	mov	r0, r3
 8009888:	f000 ffaa 	bl	800a7e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a33      	ldr	r2, [pc, #204]	; (8009960 <HAL_TIM_PWM_Start+0x1e0>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d013      	beq.n	80098be <HAL_TIM_PWM_Start+0x13e>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a32      	ldr	r2, [pc, #200]	; (8009964 <HAL_TIM_PWM_Start+0x1e4>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d00e      	beq.n	80098be <HAL_TIM_PWM_Start+0x13e>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a30      	ldr	r2, [pc, #192]	; (8009968 <HAL_TIM_PWM_Start+0x1e8>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d009      	beq.n	80098be <HAL_TIM_PWM_Start+0x13e>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a2f      	ldr	r2, [pc, #188]	; (800996c <HAL_TIM_PWM_Start+0x1ec>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d004      	beq.n	80098be <HAL_TIM_PWM_Start+0x13e>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a2d      	ldr	r2, [pc, #180]	; (8009970 <HAL_TIM_PWM_Start+0x1f0>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d101      	bne.n	80098c2 <HAL_TIM_PWM_Start+0x142>
 80098be:	2301      	movs	r3, #1
 80098c0:	e000      	b.n	80098c4 <HAL_TIM_PWM_Start+0x144>
 80098c2:	2300      	movs	r3, #0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d007      	beq.n	80098d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a20      	ldr	r2, [pc, #128]	; (8009960 <HAL_TIM_PWM_Start+0x1e0>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d018      	beq.n	8009914 <HAL_TIM_PWM_Start+0x194>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ea:	d013      	beq.n	8009914 <HAL_TIM_PWM_Start+0x194>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a20      	ldr	r2, [pc, #128]	; (8009974 <HAL_TIM_PWM_Start+0x1f4>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d00e      	beq.n	8009914 <HAL_TIM_PWM_Start+0x194>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a1f      	ldr	r2, [pc, #124]	; (8009978 <HAL_TIM_PWM_Start+0x1f8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d009      	beq.n	8009914 <HAL_TIM_PWM_Start+0x194>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a17      	ldr	r2, [pc, #92]	; (8009964 <HAL_TIM_PWM_Start+0x1e4>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d004      	beq.n	8009914 <HAL_TIM_PWM_Start+0x194>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a16      	ldr	r2, [pc, #88]	; (8009968 <HAL_TIM_PWM_Start+0x1e8>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d115      	bne.n	8009940 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689a      	ldr	r2, [r3, #8]
 800991a:	4b18      	ldr	r3, [pc, #96]	; (800997c <HAL_TIM_PWM_Start+0x1fc>)
 800991c:	4013      	ands	r3, r2
 800991e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b06      	cmp	r3, #6
 8009924:	d015      	beq.n	8009952 <HAL_TIM_PWM_Start+0x1d2>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800992c:	d011      	beq.n	8009952 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f042 0201 	orr.w	r2, r2, #1
 800993c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800993e:	e008      	b.n	8009952 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f042 0201 	orr.w	r2, r2, #1
 800994e:	601a      	str	r2, [r3, #0]
 8009950:	e000      	b.n	8009954 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009952:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	40012c00 	.word	0x40012c00
 8009964:	40013400 	.word	0x40013400
 8009968:	40014000 	.word	0x40014000
 800996c:	40014400 	.word	0x40014400
 8009970:	40014800 	.word	0x40014800
 8009974:	40000400 	.word	0x40000400
 8009978:	40000800 	.word	0x40000800
 800997c:	00010007 	.word	0x00010007

08009980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	f003 0302 	and.w	r3, r3, #2
 8009992:	2b02      	cmp	r3, #2
 8009994:	d122      	bne.n	80099dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	f003 0302 	and.w	r3, r3, #2
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d11b      	bne.n	80099dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f06f 0202 	mvn.w	r2, #2
 80099ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2201      	movs	r2, #1
 80099b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	f003 0303 	and.w	r3, r3, #3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d003      	beq.n	80099ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 faed 	bl	8009fa2 <HAL_TIM_IC_CaptureCallback>
 80099c8:	e005      	b.n	80099d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fadf 	bl	8009f8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 faf0 	bl	8009fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	f003 0304 	and.w	r3, r3, #4
 80099e6:	2b04      	cmp	r3, #4
 80099e8:	d122      	bne.n	8009a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	f003 0304 	and.w	r3, r3, #4
 80099f4:	2b04      	cmp	r3, #4
 80099f6:	d11b      	bne.n	8009a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f06f 0204 	mvn.w	r2, #4
 8009a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2202      	movs	r2, #2
 8009a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d003      	beq.n	8009a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fac3 	bl	8009fa2 <HAL_TIM_IC_CaptureCallback>
 8009a1c:	e005      	b.n	8009a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fab5 	bl	8009f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fac6 	bl	8009fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	f003 0308 	and.w	r3, r3, #8
 8009a3a:	2b08      	cmp	r3, #8
 8009a3c:	d122      	bne.n	8009a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	f003 0308 	and.w	r3, r3, #8
 8009a48:	2b08      	cmp	r3, #8
 8009a4a:	d11b      	bne.n	8009a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f06f 0208 	mvn.w	r2, #8
 8009a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2204      	movs	r2, #4
 8009a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	f003 0303 	and.w	r3, r3, #3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d003      	beq.n	8009a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fa99 	bl	8009fa2 <HAL_TIM_IC_CaptureCallback>
 8009a70:	e005      	b.n	8009a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fa8b 	bl	8009f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fa9c 	bl	8009fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	f003 0310 	and.w	r3, r3, #16
 8009a8e:	2b10      	cmp	r3, #16
 8009a90:	d122      	bne.n	8009ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	f003 0310 	and.w	r3, r3, #16
 8009a9c:	2b10      	cmp	r3, #16
 8009a9e:	d11b      	bne.n	8009ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f06f 0210 	mvn.w	r2, #16
 8009aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2208      	movs	r2, #8
 8009aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	69db      	ldr	r3, [r3, #28]
 8009ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d003      	beq.n	8009ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fa6f 	bl	8009fa2 <HAL_TIM_IC_CaptureCallback>
 8009ac4:	e005      	b.n	8009ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa61 	bl	8009f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fa72 	bl	8009fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d10e      	bne.n	8009b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d107      	bne.n	8009b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f06f 0201 	mvn.w	r2, #1
 8009afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fa3b 	bl	8009f7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b0e:	2b80      	cmp	r3, #128	; 0x80
 8009b10:	d10e      	bne.n	8009b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b1c:	2b80      	cmp	r3, #128	; 0x80
 8009b1e:	d107      	bne.n	8009b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 ff08 	bl	800a940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b3e:	d10e      	bne.n	8009b5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b4a:	2b80      	cmp	r3, #128	; 0x80
 8009b4c:	d107      	bne.n	8009b5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fefb 	bl	800a954 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b68:	2b40      	cmp	r3, #64	; 0x40
 8009b6a:	d10e      	bne.n	8009b8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b76:	2b40      	cmp	r3, #64	; 0x40
 8009b78:	d107      	bne.n	8009b8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fa20 	bl	8009fca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	f003 0320 	and.w	r3, r3, #32
 8009b94:	2b20      	cmp	r3, #32
 8009b96:	d10e      	bne.n	8009bb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	f003 0320 	and.w	r3, r3, #32
 8009ba2:	2b20      	cmp	r3, #32
 8009ba4:	d107      	bne.n	8009bb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f06f 0220 	mvn.w	r2, #32
 8009bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 febb 	bl	800a92c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
	...

08009bc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d101      	bne.n	8009bde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009bda:	2302      	movs	r3, #2
 8009bdc:	e0ff      	b.n	8009dde <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b14      	cmp	r3, #20
 8009bea:	f200 80f0 	bhi.w	8009dce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009bee:	a201      	add	r2, pc, #4	; (adr r2, 8009bf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf4:	08009c49 	.word	0x08009c49
 8009bf8:	08009dcf 	.word	0x08009dcf
 8009bfc:	08009dcf 	.word	0x08009dcf
 8009c00:	08009dcf 	.word	0x08009dcf
 8009c04:	08009c89 	.word	0x08009c89
 8009c08:	08009dcf 	.word	0x08009dcf
 8009c0c:	08009dcf 	.word	0x08009dcf
 8009c10:	08009dcf 	.word	0x08009dcf
 8009c14:	08009ccb 	.word	0x08009ccb
 8009c18:	08009dcf 	.word	0x08009dcf
 8009c1c:	08009dcf 	.word	0x08009dcf
 8009c20:	08009dcf 	.word	0x08009dcf
 8009c24:	08009d0b 	.word	0x08009d0b
 8009c28:	08009dcf 	.word	0x08009dcf
 8009c2c:	08009dcf 	.word	0x08009dcf
 8009c30:	08009dcf 	.word	0x08009dcf
 8009c34:	08009d4d 	.word	0x08009d4d
 8009c38:	08009dcf 	.word	0x08009dcf
 8009c3c:	08009dcf 	.word	0x08009dcf
 8009c40:	08009dcf 	.word	0x08009dcf
 8009c44:	08009d8d 	.word	0x08009d8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68b9      	ldr	r1, [r7, #8]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 fa56 	bl	800a100 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	699a      	ldr	r2, [r3, #24]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f042 0208 	orr.w	r2, r2, #8
 8009c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	699a      	ldr	r2, [r3, #24]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f022 0204 	bic.w	r2, r2, #4
 8009c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6999      	ldr	r1, [r3, #24]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	691a      	ldr	r2, [r3, #16]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	430a      	orrs	r2, r1
 8009c84:	619a      	str	r2, [r3, #24]
      break;
 8009c86:	e0a5      	b.n	8009dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68b9      	ldr	r1, [r7, #8]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f000 fac6 	bl	800a220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	699a      	ldr	r2, [r3, #24]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	699a      	ldr	r2, [r3, #24]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	6999      	ldr	r1, [r3, #24]
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	021a      	lsls	r2, r3, #8
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	430a      	orrs	r2, r1
 8009cc6:	619a      	str	r2, [r3, #24]
      break;
 8009cc8:	e084      	b.n	8009dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 fb2f 	bl	800a334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	69da      	ldr	r2, [r3, #28]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f042 0208 	orr.w	r2, r2, #8
 8009ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	69da      	ldr	r2, [r3, #28]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f022 0204 	bic.w	r2, r2, #4
 8009cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	69d9      	ldr	r1, [r3, #28]
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	691a      	ldr	r2, [r3, #16]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	430a      	orrs	r2, r1
 8009d06:	61da      	str	r2, [r3, #28]
      break;
 8009d08:	e064      	b.n	8009dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68b9      	ldr	r1, [r7, #8]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 fb97 	bl	800a444 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	69da      	ldr	r2, [r3, #28]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	69da      	ldr	r2, [r3, #28]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	69d9      	ldr	r1, [r3, #28]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	021a      	lsls	r2, r3, #8
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	430a      	orrs	r2, r1
 8009d48:	61da      	str	r2, [r3, #28]
      break;
 8009d4a:	e043      	b.n	8009dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68b9      	ldr	r1, [r7, #8]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f000 fbe0 	bl	800a518 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f042 0208 	orr.w	r2, r2, #8
 8009d66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f022 0204 	bic.w	r2, r2, #4
 8009d76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	691a      	ldr	r2, [r3, #16]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009d8a:	e023      	b.n	8009dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68b9      	ldr	r1, [r7, #8]
 8009d92:	4618      	mov	r0, r3
 8009d94:	f000 fc24 	bl	800a5e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009da6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009db6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	021a      	lsls	r2, r3, #8
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009dcc:	e002      	b.n	8009dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3718      	adds	r7, #24
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop

08009de8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d101      	bne.n	8009e04 <HAL_TIM_ConfigClockSource+0x1c>
 8009e00:	2302      	movs	r3, #2
 8009e02:	e0b6      	b.n	8009f72 <HAL_TIM_ConfigClockSource+0x18a>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2202      	movs	r2, #2
 8009e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e40:	d03e      	beq.n	8009ec0 <HAL_TIM_ConfigClockSource+0xd8>
 8009e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e46:	f200 8087 	bhi.w	8009f58 <HAL_TIM_ConfigClockSource+0x170>
 8009e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e4e:	f000 8086 	beq.w	8009f5e <HAL_TIM_ConfigClockSource+0x176>
 8009e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e56:	d87f      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x170>
 8009e58:	2b70      	cmp	r3, #112	; 0x70
 8009e5a:	d01a      	beq.n	8009e92 <HAL_TIM_ConfigClockSource+0xaa>
 8009e5c:	2b70      	cmp	r3, #112	; 0x70
 8009e5e:	d87b      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x170>
 8009e60:	2b60      	cmp	r3, #96	; 0x60
 8009e62:	d050      	beq.n	8009f06 <HAL_TIM_ConfigClockSource+0x11e>
 8009e64:	2b60      	cmp	r3, #96	; 0x60
 8009e66:	d877      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x170>
 8009e68:	2b50      	cmp	r3, #80	; 0x50
 8009e6a:	d03c      	beq.n	8009ee6 <HAL_TIM_ConfigClockSource+0xfe>
 8009e6c:	2b50      	cmp	r3, #80	; 0x50
 8009e6e:	d873      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x170>
 8009e70:	2b40      	cmp	r3, #64	; 0x40
 8009e72:	d058      	beq.n	8009f26 <HAL_TIM_ConfigClockSource+0x13e>
 8009e74:	2b40      	cmp	r3, #64	; 0x40
 8009e76:	d86f      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x170>
 8009e78:	2b30      	cmp	r3, #48	; 0x30
 8009e7a:	d064      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x15e>
 8009e7c:	2b30      	cmp	r3, #48	; 0x30
 8009e7e:	d86b      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x170>
 8009e80:	2b20      	cmp	r3, #32
 8009e82:	d060      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x15e>
 8009e84:	2b20      	cmp	r3, #32
 8009e86:	d867      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x170>
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d05c      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x15e>
 8009e8c:	2b10      	cmp	r3, #16
 8009e8e:	d05a      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x15e>
 8009e90:	e062      	b.n	8009f58 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6818      	ldr	r0, [r3, #0]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	6899      	ldr	r1, [r3, #8]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f000 fc7d 	bl	800a7a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009eb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	609a      	str	r2, [r3, #8]
      break;
 8009ebe:	e04f      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6818      	ldr	r0, [r3, #0]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	6899      	ldr	r1, [r3, #8]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f000 fc66 	bl	800a7a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689a      	ldr	r2, [r3, #8]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ee2:	609a      	str	r2, [r3, #8]
      break;
 8009ee4:	e03c      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6818      	ldr	r0, [r3, #0]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	6859      	ldr	r1, [r3, #4]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f000 fbda 	bl	800a6ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2150      	movs	r1, #80	; 0x50
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 fc33 	bl	800a76a <TIM_ITRx_SetConfig>
      break;
 8009f04:	e02c      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6818      	ldr	r0, [r3, #0]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	6859      	ldr	r1, [r3, #4]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	461a      	mov	r2, r3
 8009f14:	f000 fbf9 	bl	800a70a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2160      	movs	r1, #96	; 0x60
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f000 fc23 	bl	800a76a <TIM_ITRx_SetConfig>
      break;
 8009f24:	e01c      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	6859      	ldr	r1, [r3, #4]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	461a      	mov	r2, r3
 8009f34:	f000 fbba 	bl	800a6ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2140      	movs	r1, #64	; 0x40
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fc13 	bl	800a76a <TIM_ITRx_SetConfig>
      break;
 8009f44:	e00c      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4610      	mov	r0, r2
 8009f52:	f000 fc0a 	bl	800a76a <TIM_ITRx_SetConfig>
      break;
 8009f56:	e003      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f5c:	e000      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b083      	sub	sp, #12
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009f82:	bf00      	nop
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f96:	bf00      	nop
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b083      	sub	sp, #12
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009faa:	bf00      	nop
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b083      	sub	sp, #12
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fbe:	bf00      	nop
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fd2:	bf00      	nop
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
	...

08009fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a3c      	ldr	r2, [pc, #240]	; (800a0e4 <TIM_Base_SetConfig+0x104>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d00f      	beq.n	800a018 <TIM_Base_SetConfig+0x38>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ffe:	d00b      	beq.n	800a018 <TIM_Base_SetConfig+0x38>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a39      	ldr	r2, [pc, #228]	; (800a0e8 <TIM_Base_SetConfig+0x108>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d007      	beq.n	800a018 <TIM_Base_SetConfig+0x38>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a38      	ldr	r2, [pc, #224]	; (800a0ec <TIM_Base_SetConfig+0x10c>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d003      	beq.n	800a018 <TIM_Base_SetConfig+0x38>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a37      	ldr	r2, [pc, #220]	; (800a0f0 <TIM_Base_SetConfig+0x110>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d108      	bne.n	800a02a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a01e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a2d      	ldr	r2, [pc, #180]	; (800a0e4 <TIM_Base_SetConfig+0x104>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d01b      	beq.n	800a06a <TIM_Base_SetConfig+0x8a>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a038:	d017      	beq.n	800a06a <TIM_Base_SetConfig+0x8a>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a2a      	ldr	r2, [pc, #168]	; (800a0e8 <TIM_Base_SetConfig+0x108>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d013      	beq.n	800a06a <TIM_Base_SetConfig+0x8a>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a29      	ldr	r2, [pc, #164]	; (800a0ec <TIM_Base_SetConfig+0x10c>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d00f      	beq.n	800a06a <TIM_Base_SetConfig+0x8a>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a28      	ldr	r2, [pc, #160]	; (800a0f0 <TIM_Base_SetConfig+0x110>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d00b      	beq.n	800a06a <TIM_Base_SetConfig+0x8a>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a27      	ldr	r2, [pc, #156]	; (800a0f4 <TIM_Base_SetConfig+0x114>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d007      	beq.n	800a06a <TIM_Base_SetConfig+0x8a>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a26      	ldr	r2, [pc, #152]	; (800a0f8 <TIM_Base_SetConfig+0x118>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d003      	beq.n	800a06a <TIM_Base_SetConfig+0x8a>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a25      	ldr	r2, [pc, #148]	; (800a0fc <TIM_Base_SetConfig+0x11c>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d108      	bne.n	800a07c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	4313      	orrs	r3, r2
 800a07a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	4313      	orrs	r3, r2
 800a088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	689a      	ldr	r2, [r3, #8]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a10      	ldr	r2, [pc, #64]	; (800a0e4 <TIM_Base_SetConfig+0x104>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d00f      	beq.n	800a0c8 <TIM_Base_SetConfig+0xe8>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a11      	ldr	r2, [pc, #68]	; (800a0f0 <TIM_Base_SetConfig+0x110>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d00b      	beq.n	800a0c8 <TIM_Base_SetConfig+0xe8>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a10      	ldr	r2, [pc, #64]	; (800a0f4 <TIM_Base_SetConfig+0x114>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d007      	beq.n	800a0c8 <TIM_Base_SetConfig+0xe8>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a0f      	ldr	r2, [pc, #60]	; (800a0f8 <TIM_Base_SetConfig+0x118>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d003      	beq.n	800a0c8 <TIM_Base_SetConfig+0xe8>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a0e      	ldr	r2, [pc, #56]	; (800a0fc <TIM_Base_SetConfig+0x11c>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d103      	bne.n	800a0d0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	691a      	ldr	r2, [r3, #16]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	615a      	str	r2, [r3, #20]
}
 800a0d6:	bf00      	nop
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	40012c00 	.word	0x40012c00
 800a0e8:	40000400 	.word	0x40000400
 800a0ec:	40000800 	.word	0x40000800
 800a0f0:	40013400 	.word	0x40013400
 800a0f4:	40014000 	.word	0x40014000
 800a0f8:	40014400 	.word	0x40014400
 800a0fc:	40014800 	.word	0x40014800

0800a100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a100:	b480      	push	{r7}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a1b      	ldr	r3, [r3, #32]
 800a10e:	f023 0201 	bic.w	r2, r3, #1
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a12e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f023 0303 	bic.w	r3, r3, #3
 800a13a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	4313      	orrs	r3, r2
 800a144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f023 0302 	bic.w	r3, r3, #2
 800a14c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	4313      	orrs	r3, r2
 800a156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a2c      	ldr	r2, [pc, #176]	; (800a20c <TIM_OC1_SetConfig+0x10c>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d00f      	beq.n	800a180 <TIM_OC1_SetConfig+0x80>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a2b      	ldr	r2, [pc, #172]	; (800a210 <TIM_OC1_SetConfig+0x110>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d00b      	beq.n	800a180 <TIM_OC1_SetConfig+0x80>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a2a      	ldr	r2, [pc, #168]	; (800a214 <TIM_OC1_SetConfig+0x114>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d007      	beq.n	800a180 <TIM_OC1_SetConfig+0x80>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a29      	ldr	r2, [pc, #164]	; (800a218 <TIM_OC1_SetConfig+0x118>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d003      	beq.n	800a180 <TIM_OC1_SetConfig+0x80>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a28      	ldr	r2, [pc, #160]	; (800a21c <TIM_OC1_SetConfig+0x11c>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d10c      	bne.n	800a19a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f023 0308 	bic.w	r3, r3, #8
 800a186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	4313      	orrs	r3, r2
 800a190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f023 0304 	bic.w	r3, r3, #4
 800a198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a1b      	ldr	r2, [pc, #108]	; (800a20c <TIM_OC1_SetConfig+0x10c>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d00f      	beq.n	800a1c2 <TIM_OC1_SetConfig+0xc2>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a1a      	ldr	r2, [pc, #104]	; (800a210 <TIM_OC1_SetConfig+0x110>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d00b      	beq.n	800a1c2 <TIM_OC1_SetConfig+0xc2>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a19      	ldr	r2, [pc, #100]	; (800a214 <TIM_OC1_SetConfig+0x114>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d007      	beq.n	800a1c2 <TIM_OC1_SetConfig+0xc2>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a18      	ldr	r2, [pc, #96]	; (800a218 <TIM_OC1_SetConfig+0x118>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d003      	beq.n	800a1c2 <TIM_OC1_SetConfig+0xc2>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a17      	ldr	r2, [pc, #92]	; (800a21c <TIM_OC1_SetConfig+0x11c>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d111      	bne.n	800a1e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	621a      	str	r2, [r3, #32]
}
 800a200:	bf00      	nop
 800a202:	371c      	adds	r7, #28
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	40012c00 	.word	0x40012c00
 800a210:	40013400 	.word	0x40013400
 800a214:	40014000 	.word	0x40014000
 800a218:	40014400 	.word	0x40014400
 800a21c:	40014800 	.word	0x40014800

0800a220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	f023 0210 	bic.w	r2, r3, #16
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a24e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a25a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	021b      	lsls	r3, r3, #8
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	4313      	orrs	r3, r2
 800a266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	f023 0320 	bic.w	r3, r3, #32
 800a26e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	011b      	lsls	r3, r3, #4
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	4313      	orrs	r3, r2
 800a27a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a28      	ldr	r2, [pc, #160]	; (800a320 <TIM_OC2_SetConfig+0x100>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d003      	beq.n	800a28c <TIM_OC2_SetConfig+0x6c>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a27      	ldr	r2, [pc, #156]	; (800a324 <TIM_OC2_SetConfig+0x104>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d10d      	bne.n	800a2a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	011b      	lsls	r3, r3, #4
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a1d      	ldr	r2, [pc, #116]	; (800a320 <TIM_OC2_SetConfig+0x100>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d00f      	beq.n	800a2d0 <TIM_OC2_SetConfig+0xb0>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a1c      	ldr	r2, [pc, #112]	; (800a324 <TIM_OC2_SetConfig+0x104>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d00b      	beq.n	800a2d0 <TIM_OC2_SetConfig+0xb0>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a1b      	ldr	r2, [pc, #108]	; (800a328 <TIM_OC2_SetConfig+0x108>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d007      	beq.n	800a2d0 <TIM_OC2_SetConfig+0xb0>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a1a      	ldr	r2, [pc, #104]	; (800a32c <TIM_OC2_SetConfig+0x10c>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d003      	beq.n	800a2d0 <TIM_OC2_SetConfig+0xb0>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a19      	ldr	r2, [pc, #100]	; (800a330 <TIM_OC2_SetConfig+0x110>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d113      	bne.n	800a2f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2d6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2de:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	693a      	ldr	r2, [r7, #16]
 800a2fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	685a      	ldr	r2, [r3, #4]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	621a      	str	r2, [r3, #32]
}
 800a312:	bf00      	nop
 800a314:	371c      	adds	r7, #28
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	40012c00 	.word	0x40012c00
 800a324:	40013400 	.word	0x40013400
 800a328:	40014000 	.word	0x40014000
 800a32c:	40014400 	.word	0x40014400
 800a330:	40014800 	.word	0x40014800

0800a334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a334:	b480      	push	{r7}
 800a336:	b087      	sub	sp, #28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a1b      	ldr	r3, [r3, #32]
 800a342:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	69db      	ldr	r3, [r3, #28]
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f023 0303 	bic.w	r3, r3, #3
 800a36e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	4313      	orrs	r3, r2
 800a378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	021b      	lsls	r3, r3, #8
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a27      	ldr	r2, [pc, #156]	; (800a430 <TIM_OC3_SetConfig+0xfc>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d003      	beq.n	800a39e <TIM_OC3_SetConfig+0x6a>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a26      	ldr	r2, [pc, #152]	; (800a434 <TIM_OC3_SetConfig+0x100>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d10d      	bne.n	800a3ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	021b      	lsls	r3, r3, #8
 800a3ac:	697a      	ldr	r2, [r7, #20]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3b8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4a1c      	ldr	r2, [pc, #112]	; (800a430 <TIM_OC3_SetConfig+0xfc>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d00f      	beq.n	800a3e2 <TIM_OC3_SetConfig+0xae>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4a1b      	ldr	r2, [pc, #108]	; (800a434 <TIM_OC3_SetConfig+0x100>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d00b      	beq.n	800a3e2 <TIM_OC3_SetConfig+0xae>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a1a      	ldr	r2, [pc, #104]	; (800a438 <TIM_OC3_SetConfig+0x104>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d007      	beq.n	800a3e2 <TIM_OC3_SetConfig+0xae>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a19      	ldr	r2, [pc, #100]	; (800a43c <TIM_OC3_SetConfig+0x108>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d003      	beq.n	800a3e2 <TIM_OC3_SetConfig+0xae>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a18      	ldr	r2, [pc, #96]	; (800a440 <TIM_OC3_SetConfig+0x10c>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d113      	bne.n	800a40a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	011b      	lsls	r3, r3, #4
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	011b      	lsls	r3, r3, #4
 800a404:	693a      	ldr	r2, [r7, #16]
 800a406:	4313      	orrs	r3, r2
 800a408:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	685a      	ldr	r2, [r3, #4]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	621a      	str	r2, [r3, #32]
}
 800a424:	bf00      	nop
 800a426:	371c      	adds	r7, #28
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	40012c00 	.word	0x40012c00
 800a434:	40013400 	.word	0x40013400
 800a438:	40014000 	.word	0x40014000
 800a43c:	40014400 	.word	0x40014400
 800a440:	40014800 	.word	0x40014800

0800a444 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	69db      	ldr	r3, [r3, #28]
 800a46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a47e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	021b      	lsls	r3, r3, #8
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	4313      	orrs	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	031b      	lsls	r3, r3, #12
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a18      	ldr	r2, [pc, #96]	; (800a504 <TIM_OC4_SetConfig+0xc0>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d00f      	beq.n	800a4c8 <TIM_OC4_SetConfig+0x84>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a17      	ldr	r2, [pc, #92]	; (800a508 <TIM_OC4_SetConfig+0xc4>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d00b      	beq.n	800a4c8 <TIM_OC4_SetConfig+0x84>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a16      	ldr	r2, [pc, #88]	; (800a50c <TIM_OC4_SetConfig+0xc8>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d007      	beq.n	800a4c8 <TIM_OC4_SetConfig+0x84>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a15      	ldr	r2, [pc, #84]	; (800a510 <TIM_OC4_SetConfig+0xcc>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d003      	beq.n	800a4c8 <TIM_OC4_SetConfig+0x84>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a14      	ldr	r2, [pc, #80]	; (800a514 <TIM_OC4_SetConfig+0xd0>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d109      	bne.n	800a4dc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	019b      	lsls	r3, r3, #6
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	621a      	str	r2, [r3, #32]
}
 800a4f6:	bf00      	nop
 800a4f8:	371c      	adds	r7, #28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	40012c00 	.word	0x40012c00
 800a508:	40013400 	.word	0x40013400
 800a50c:	40014000 	.word	0x40014000
 800a510:	40014400 	.word	0x40014400
 800a514:	40014800 	.word	0x40014800

0800a518 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a518:	b480      	push	{r7}
 800a51a:	b087      	sub	sp, #28
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a54a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a55c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	041b      	lsls	r3, r3, #16
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	4313      	orrs	r3, r2
 800a568:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4a17      	ldr	r2, [pc, #92]	; (800a5cc <TIM_OC5_SetConfig+0xb4>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d00f      	beq.n	800a592 <TIM_OC5_SetConfig+0x7a>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a16      	ldr	r2, [pc, #88]	; (800a5d0 <TIM_OC5_SetConfig+0xb8>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d00b      	beq.n	800a592 <TIM_OC5_SetConfig+0x7a>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a15      	ldr	r2, [pc, #84]	; (800a5d4 <TIM_OC5_SetConfig+0xbc>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d007      	beq.n	800a592 <TIM_OC5_SetConfig+0x7a>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a14      	ldr	r2, [pc, #80]	; (800a5d8 <TIM_OC5_SetConfig+0xc0>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d003      	beq.n	800a592 <TIM_OC5_SetConfig+0x7a>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a13      	ldr	r2, [pc, #76]	; (800a5dc <TIM_OC5_SetConfig+0xc4>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d109      	bne.n	800a5a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a598:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	021b      	lsls	r3, r3, #8
 800a5a0:	697a      	ldr	r2, [r7, #20]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	621a      	str	r2, [r3, #32]
}
 800a5c0:	bf00      	nop
 800a5c2:	371c      	adds	r7, #28
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	40012c00 	.word	0x40012c00
 800a5d0:	40013400 	.word	0x40013400
 800a5d4:	40014000 	.word	0x40014000
 800a5d8:	40014400 	.word	0x40014400
 800a5dc:	40014800 	.word	0x40014800

0800a5e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a60e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	021b      	lsls	r3, r3, #8
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	051b      	lsls	r3, r3, #20
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	4313      	orrs	r3, r2
 800a632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a18      	ldr	r2, [pc, #96]	; (800a698 <TIM_OC6_SetConfig+0xb8>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d00f      	beq.n	800a65c <TIM_OC6_SetConfig+0x7c>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a17      	ldr	r2, [pc, #92]	; (800a69c <TIM_OC6_SetConfig+0xbc>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d00b      	beq.n	800a65c <TIM_OC6_SetConfig+0x7c>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a16      	ldr	r2, [pc, #88]	; (800a6a0 <TIM_OC6_SetConfig+0xc0>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d007      	beq.n	800a65c <TIM_OC6_SetConfig+0x7c>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a15      	ldr	r2, [pc, #84]	; (800a6a4 <TIM_OC6_SetConfig+0xc4>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d003      	beq.n	800a65c <TIM_OC6_SetConfig+0x7c>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a14      	ldr	r2, [pc, #80]	; (800a6a8 <TIM_OC6_SetConfig+0xc8>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d109      	bne.n	800a670 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a662:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	695b      	ldr	r3, [r3, #20]
 800a668:	029b      	lsls	r3, r3, #10
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	621a      	str	r2, [r3, #32]
}
 800a68a:	bf00      	nop
 800a68c:	371c      	adds	r7, #28
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	40012c00 	.word	0x40012c00
 800a69c:	40013400 	.word	0x40013400
 800a6a0:	40014000 	.word	0x40014000
 800a6a4:	40014400 	.word	0x40014400
 800a6a8:	40014800 	.word	0x40014800

0800a6ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b087      	sub	sp, #28
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6a1b      	ldr	r3, [r3, #32]
 800a6bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6a1b      	ldr	r3, [r3, #32]
 800a6c2:	f023 0201 	bic.w	r2, r3, #1
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	011b      	lsls	r3, r3, #4
 800a6dc:	693a      	ldr	r2, [r7, #16]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f023 030a 	bic.w	r3, r3, #10
 800a6e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	621a      	str	r2, [r3, #32]
}
 800a6fe:	bf00      	nop
 800a700:	371c      	adds	r7, #28
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b087      	sub	sp, #28
 800a70e:	af00      	add	r7, sp, #0
 800a710:	60f8      	str	r0, [r7, #12]
 800a712:	60b9      	str	r1, [r7, #8]
 800a714:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6a1b      	ldr	r3, [r3, #32]
 800a71a:	f023 0210 	bic.w	r2, r3, #16
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a734:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	031b      	lsls	r3, r3, #12
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a746:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	011b      	lsls	r3, r3, #4
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	4313      	orrs	r3, r2
 800a750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	697a      	ldr	r2, [r7, #20]
 800a756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	693a      	ldr	r2, [r7, #16]
 800a75c:	621a      	str	r2, [r3, #32]
}
 800a75e:	bf00      	nop
 800a760:	371c      	adds	r7, #28
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b085      	sub	sp, #20
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4313      	orrs	r3, r2
 800a788:	f043 0307 	orr.w	r3, r3, #7
 800a78c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	609a      	str	r2, [r3, #8]
}
 800a794:	bf00      	nop
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b087      	sub	sp, #28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
 800a7ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	021a      	lsls	r2, r3, #8
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	431a      	orrs	r2, r3
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	697a      	ldr	r2, [r7, #20]
 800a7d2:	609a      	str	r2, [r3, #8]
}
 800a7d4:	bf00      	nop
 800a7d6:	371c      	adds	r7, #28
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	f003 031f 	and.w	r3, r3, #31
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6a1a      	ldr	r2, [r3, #32]
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	43db      	mvns	r3, r3
 800a802:	401a      	ands	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6a1a      	ldr	r2, [r3, #32]
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	f003 031f 	and.w	r3, r3, #31
 800a812:	6879      	ldr	r1, [r7, #4]
 800a814:	fa01 f303 	lsl.w	r3, r1, r3
 800a818:	431a      	orrs	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	621a      	str	r2, [r3, #32]
}
 800a81e:	bf00      	nop
 800a820:	371c      	adds	r7, #28
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
	...

0800a82c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d101      	bne.n	800a844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a840:	2302      	movs	r3, #2
 800a842:	e063      	b.n	800a90c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2202      	movs	r2, #2
 800a850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a2b      	ldr	r2, [pc, #172]	; (800a918 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d004      	beq.n	800a878 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a2a      	ldr	r2, [pc, #168]	; (800a91c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d108      	bne.n	800a88a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a87e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	4313      	orrs	r3, r2
 800a888:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a890:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	4313      	orrs	r3, r2
 800a89a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a1b      	ldr	r2, [pc, #108]	; (800a918 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d018      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8b6:	d013      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a18      	ldr	r2, [pc, #96]	; (800a920 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d00e      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a17      	ldr	r2, [pc, #92]	; (800a924 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d009      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a12      	ldr	r2, [pc, #72]	; (800a91c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d004      	beq.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a13      	ldr	r2, [pc, #76]	; (800a928 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d10c      	bne.n	800a8fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3714      	adds	r7, #20
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	40012c00 	.word	0x40012c00
 800a91c:	40013400 	.word	0x40013400
 800a920:	40000400 	.word	0x40000400
 800a924:	40000800 	.word	0x40000800
 800a928:	40014000 	.word	0x40014000

0800a92c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a934:	bf00      	nop
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e040      	b.n	800a9fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d106      	bne.n	800a990 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f7f7 fb12 	bl	8001fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2224      	movs	r2, #36	; 0x24
 800a994:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f022 0201 	bic.w	r2, r2, #1
 800a9a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fb2a 	bl	800b000 <UART_SetConfig>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d101      	bne.n	800a9b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e022      	b.n	800a9fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d002      	beq.n	800a9c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fcf4 	bl	800b3ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	685a      	ldr	r2, [r3, #4]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	689a      	ldr	r2, [r3, #8]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a9e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f042 0201 	orr.w	r2, r2, #1
 800a9f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fd7b 	bl	800b4f0 <UART_CheckIdleState>
 800a9fa:	4603      	mov	r3, r0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b0ba      	sub	sp, #232	; 0xe8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	69db      	ldr	r3, [r3, #28]
 800aa12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aa2e:	f640 030f 	movw	r3, #2063	; 0x80f
 800aa32:	4013      	ands	r3, r2
 800aa34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800aa38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d115      	bne.n	800aa6c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800aa40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa44:	f003 0320 	and.w	r3, r3, #32
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00f      	beq.n	800aa6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aa4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa50:	f003 0320 	and.w	r3, r3, #32
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d009      	beq.n	800aa6c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 82a3 	beq.w	800afa8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	4798      	blx	r3
      }
      return;
 800aa6a:	e29d      	b.n	800afa8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 8117 	beq.w	800aca4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aa76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa7a:	f003 0301 	and.w	r3, r3, #1
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d106      	bne.n	800aa90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aa82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800aa86:	4b85      	ldr	r3, [pc, #532]	; (800ac9c <HAL_UART_IRQHandler+0x298>)
 800aa88:	4013      	ands	r3, r2
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 810a 	beq.w	800aca4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa94:	f003 0301 	and.w	r3, r3, #1
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d011      	beq.n	800aac0 <HAL_UART_IRQHandler+0xbc>
 800aa9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00b      	beq.n	800aac0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2201      	movs	r2, #1
 800aaae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aab6:	f043 0201 	orr.w	r2, r3, #1
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aac4:	f003 0302 	and.w	r3, r3, #2
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d011      	beq.n	800aaf0 <HAL_UART_IRQHandler+0xec>
 800aacc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aad0:	f003 0301 	and.w	r3, r3, #1
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00b      	beq.n	800aaf0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2202      	movs	r2, #2
 800aade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aae6:	f043 0204 	orr.w	r2, r3, #4
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaf4:	f003 0304 	and.w	r3, r3, #4
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d011      	beq.n	800ab20 <HAL_UART_IRQHandler+0x11c>
 800aafc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00b      	beq.n	800ab20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2204      	movs	r2, #4
 800ab0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab16:	f043 0202 	orr.w	r2, r3, #2
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab24:	f003 0308 	and.w	r3, r3, #8
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d017      	beq.n	800ab5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ab2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab30:	f003 0320 	and.w	r3, r3, #32
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d105      	bne.n	800ab44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ab38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00b      	beq.n	800ab5c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2208      	movs	r2, #8
 800ab4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab52:	f043 0208 	orr.w	r2, r3, #8
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d012      	beq.n	800ab8e <HAL_UART_IRQHandler+0x18a>
 800ab68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00c      	beq.n	800ab8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab84:	f043 0220 	orr.w	r2, r3, #32
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 8209 	beq.w	800afac <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab9e:	f003 0320 	and.w	r3, r3, #32
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00d      	beq.n	800abc2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abaa:	f003 0320 	and.w	r3, r3, #32
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d007      	beq.n	800abc2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abd6:	2b40      	cmp	r3, #64	; 0x40
 800abd8:	d005      	beq.n	800abe6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800abda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800abde:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d04f      	beq.n	800ac86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fd8f 	bl	800b70a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf6:	2b40      	cmp	r3, #64	; 0x40
 800abf8:	d141      	bne.n	800ac7e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	3308      	adds	r3, #8
 800ac00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ac08:	e853 3f00 	ldrex	r3, [r3]
 800ac0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ac10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	3308      	adds	r3, #8
 800ac22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ac26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ac2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ac32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ac36:	e841 2300 	strex	r3, r2, [r1]
 800ac3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ac3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1d9      	bne.n	800abfa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d013      	beq.n	800ac76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac52:	4a13      	ldr	r2, [pc, #76]	; (800aca0 <HAL_UART_IRQHandler+0x29c>)
 800ac54:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fc fb74 	bl	8007348 <HAL_DMA_Abort_IT>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d017      	beq.n	800ac96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800ac70:	4610      	mov	r0, r2
 800ac72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac74:	e00f      	b.n	800ac96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f9ac 	bl	800afd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac7c:	e00b      	b.n	800ac96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 f9a8 	bl	800afd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac84:	e007      	b.n	800ac96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 f9a4 	bl	800afd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800ac94:	e18a      	b.n	800afac <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac96:	bf00      	nop
    return;
 800ac98:	e188      	b.n	800afac <HAL_UART_IRQHandler+0x5a8>
 800ac9a:	bf00      	nop
 800ac9c:	04000120 	.word	0x04000120
 800aca0:	0800b7d1 	.word	0x0800b7d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	f040 8143 	bne.w	800af34 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800acae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acb2:	f003 0310 	and.w	r3, r3, #16
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 813c 	beq.w	800af34 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800acbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acc0:	f003 0310 	and.w	r3, r3, #16
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f000 8135 	beq.w	800af34 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2210      	movs	r2, #16
 800acd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acdc:	2b40      	cmp	r3, #64	; 0x40
 800acde:	f040 80b1 	bne.w	800ae44 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800acee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f000 815c 	beq.w	800afb0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800acfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad02:	429a      	cmp	r2, r3
 800ad04:	f080 8154 	bcs.w	800afb0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	2b20      	cmp	r3, #32
 800ad1a:	f000 8085 	beq.w	800ae28 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad2a:	e853 3f00 	ldrex	r3, [r3]
 800ad2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ad32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ad4c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ad54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad58:	e841 2300 	strex	r3, r2, [r1]
 800ad5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ad60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d1da      	bne.n	800ad1e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	3308      	adds	r3, #8
 800ad6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad72:	e853 3f00 	ldrex	r3, [r3]
 800ad76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ad78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad7a:	f023 0301 	bic.w	r3, r3, #1
 800ad7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	3308      	adds	r3, #8
 800ad88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ad8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ad90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ad94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ad98:	e841 2300 	strex	r3, r2, [r1]
 800ad9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ad9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d1e1      	bne.n	800ad68 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3308      	adds	r3, #8
 800adaa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adae:	e853 3f00 	ldrex	r3, [r3]
 800adb2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800adb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3308      	adds	r3, #8
 800adc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800adc8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800adca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adcc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800adce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800add0:	e841 2300 	strex	r3, r2, [r1]
 800add4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800add6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1e3      	bne.n	800ada4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2220      	movs	r2, #32
 800ade0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf0:	e853 3f00 	ldrex	r3, [r3]
 800adf4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800adf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adf8:	f023 0310 	bic.w	r3, r3, #16
 800adfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	461a      	mov	r2, r3
 800ae06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae0a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae12:	e841 2300 	strex	r3, r2, [r1]
 800ae16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1e4      	bne.n	800ade8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7fc fa57 	bl	80072d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f8d3 	bl	800afe8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae42:	e0b5      	b.n	800afb0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 80a7 	beq.w	800afb4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800ae66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 80a2 	beq.w	800afb4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	e853 3f00 	ldrex	r3, [r3]
 800ae7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae92:	647b      	str	r3, [r7, #68]	; 0x44
 800ae94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae9a:	e841 2300 	strex	r3, r2, [r1]
 800ae9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1e4      	bne.n	800ae70 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	3308      	adds	r3, #8
 800aeac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	e853 3f00 	ldrex	r3, [r3]
 800aeb4:	623b      	str	r3, [r7, #32]
   return(result);
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	f023 0301 	bic.w	r3, r3, #1
 800aebc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	3308      	adds	r3, #8
 800aec6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aeca:	633a      	str	r2, [r7, #48]	; 0x30
 800aecc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aed2:	e841 2300 	strex	r3, r2, [r1]
 800aed6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1e3      	bne.n	800aea6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2220      	movs	r2, #32
 800aee2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	e853 3f00 	ldrex	r3, [r3]
 800aefc:	60fb      	str	r3, [r7, #12]
   return(result);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f023 0310 	bic.w	r3, r3, #16
 800af04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	461a      	mov	r2, r3
 800af0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800af12:	61fb      	str	r3, [r7, #28]
 800af14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af16:	69b9      	ldr	r1, [r7, #24]
 800af18:	69fa      	ldr	r2, [r7, #28]
 800af1a:	e841 2300 	strex	r3, r2, [r1]
 800af1e:	617b      	str	r3, [r7, #20]
   return(result);
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1e4      	bne.n	800aef0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af2a:	4619      	mov	r1, r3
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f85b 	bl	800afe8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af32:	e03f      	b.n	800afb4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800af34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00e      	beq.n	800af5e <HAL_UART_IRQHandler+0x55a>
 800af40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d008      	beq.n	800af5e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800af54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fc7a 	bl	800b850 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af5c:	e02d      	b.n	800afba <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800af5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00e      	beq.n	800af88 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800af6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af72:	2b00      	cmp	r3, #0
 800af74:	d008      	beq.n	800af88 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d01c      	beq.n	800afb8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	4798      	blx	r3
    }
    return;
 800af86:	e017      	b.n	800afb8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af90:	2b00      	cmp	r3, #0
 800af92:	d012      	beq.n	800afba <HAL_UART_IRQHandler+0x5b6>
 800af94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00c      	beq.n	800afba <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fc2b 	bl	800b7fc <UART_EndTransmit_IT>
    return;
 800afa6:	e008      	b.n	800afba <HAL_UART_IRQHandler+0x5b6>
      return;
 800afa8:	bf00      	nop
 800afaa:	e006      	b.n	800afba <HAL_UART_IRQHandler+0x5b6>
    return;
 800afac:	bf00      	nop
 800afae:	e004      	b.n	800afba <HAL_UART_IRQHandler+0x5b6>
      return;
 800afb0:	bf00      	nop
 800afb2:	e002      	b.n	800afba <HAL_UART_IRQHandler+0x5b6>
      return;
 800afb4:	bf00      	nop
 800afb6:	e000      	b.n	800afba <HAL_UART_IRQHandler+0x5b6>
    return;
 800afb8:	bf00      	nop
  }

}
 800afba:	37e8      	adds	r7, #232	; 0xe8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800afdc:	bf00      	nop
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	460b      	mov	r3, r1
 800aff2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aff4:	bf00      	nop
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b008:	2300      	movs	r3, #0
 800b00a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	689a      	ldr	r2, [r3, #8]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	431a      	orrs	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	695b      	ldr	r3, [r3, #20]
 800b01a:	431a      	orrs	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	69db      	ldr	r3, [r3, #28]
 800b020:	4313      	orrs	r3, r2
 800b022:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b02e:	f023 030c 	bic.w	r3, r3, #12
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	6812      	ldr	r2, [r2, #0]
 800b036:	6979      	ldr	r1, [r7, #20]
 800b038:	430b      	orrs	r3, r1
 800b03a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68da      	ldr	r2, [r3, #12]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	430a      	orrs	r2, r1
 800b050:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6a1b      	ldr	r3, [r3, #32]
 800b05c:	697a      	ldr	r2, [r7, #20]
 800b05e:	4313      	orrs	r3, r2
 800b060:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	430a      	orrs	r2, r1
 800b074:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4aa8      	ldr	r2, [pc, #672]	; (800b31c <UART_SetConfig+0x31c>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d120      	bne.n	800b0c2 <UART_SetConfig+0xc2>
 800b080:	4ba7      	ldr	r3, [pc, #668]	; (800b320 <UART_SetConfig+0x320>)
 800b082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b084:	f003 0303 	and.w	r3, r3, #3
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d817      	bhi.n	800b0bc <UART_SetConfig+0xbc>
 800b08c:	a201      	add	r2, pc, #4	; (adr r2, 800b094 <UART_SetConfig+0x94>)
 800b08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b092:	bf00      	nop
 800b094:	0800b0a5 	.word	0x0800b0a5
 800b098:	0800b0b1 	.word	0x0800b0b1
 800b09c:	0800b0b7 	.word	0x0800b0b7
 800b0a0:	0800b0ab 	.word	0x0800b0ab
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	77fb      	strb	r3, [r7, #31]
 800b0a8:	e0b5      	b.n	800b216 <UART_SetConfig+0x216>
 800b0aa:	2302      	movs	r3, #2
 800b0ac:	77fb      	strb	r3, [r7, #31]
 800b0ae:	e0b2      	b.n	800b216 <UART_SetConfig+0x216>
 800b0b0:	2304      	movs	r3, #4
 800b0b2:	77fb      	strb	r3, [r7, #31]
 800b0b4:	e0af      	b.n	800b216 <UART_SetConfig+0x216>
 800b0b6:	2308      	movs	r3, #8
 800b0b8:	77fb      	strb	r3, [r7, #31]
 800b0ba:	e0ac      	b.n	800b216 <UART_SetConfig+0x216>
 800b0bc:	2310      	movs	r3, #16
 800b0be:	77fb      	strb	r3, [r7, #31]
 800b0c0:	e0a9      	b.n	800b216 <UART_SetConfig+0x216>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a97      	ldr	r2, [pc, #604]	; (800b324 <UART_SetConfig+0x324>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d124      	bne.n	800b116 <UART_SetConfig+0x116>
 800b0cc:	4b94      	ldr	r3, [pc, #592]	; (800b320 <UART_SetConfig+0x320>)
 800b0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b0d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b0d8:	d011      	beq.n	800b0fe <UART_SetConfig+0xfe>
 800b0da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b0de:	d817      	bhi.n	800b110 <UART_SetConfig+0x110>
 800b0e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0e4:	d011      	beq.n	800b10a <UART_SetConfig+0x10a>
 800b0e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0ea:	d811      	bhi.n	800b110 <UART_SetConfig+0x110>
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d003      	beq.n	800b0f8 <UART_SetConfig+0xf8>
 800b0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f4:	d006      	beq.n	800b104 <UART_SetConfig+0x104>
 800b0f6:	e00b      	b.n	800b110 <UART_SetConfig+0x110>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	77fb      	strb	r3, [r7, #31]
 800b0fc:	e08b      	b.n	800b216 <UART_SetConfig+0x216>
 800b0fe:	2302      	movs	r3, #2
 800b100:	77fb      	strb	r3, [r7, #31]
 800b102:	e088      	b.n	800b216 <UART_SetConfig+0x216>
 800b104:	2304      	movs	r3, #4
 800b106:	77fb      	strb	r3, [r7, #31]
 800b108:	e085      	b.n	800b216 <UART_SetConfig+0x216>
 800b10a:	2308      	movs	r3, #8
 800b10c:	77fb      	strb	r3, [r7, #31]
 800b10e:	e082      	b.n	800b216 <UART_SetConfig+0x216>
 800b110:	2310      	movs	r3, #16
 800b112:	77fb      	strb	r3, [r7, #31]
 800b114:	e07f      	b.n	800b216 <UART_SetConfig+0x216>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a83      	ldr	r2, [pc, #524]	; (800b328 <UART_SetConfig+0x328>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d124      	bne.n	800b16a <UART_SetConfig+0x16a>
 800b120:	4b7f      	ldr	r3, [pc, #508]	; (800b320 <UART_SetConfig+0x320>)
 800b122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b124:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b128:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b12c:	d011      	beq.n	800b152 <UART_SetConfig+0x152>
 800b12e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b132:	d817      	bhi.n	800b164 <UART_SetConfig+0x164>
 800b134:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b138:	d011      	beq.n	800b15e <UART_SetConfig+0x15e>
 800b13a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b13e:	d811      	bhi.n	800b164 <UART_SetConfig+0x164>
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <UART_SetConfig+0x14c>
 800b144:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b148:	d006      	beq.n	800b158 <UART_SetConfig+0x158>
 800b14a:	e00b      	b.n	800b164 <UART_SetConfig+0x164>
 800b14c:	2300      	movs	r3, #0
 800b14e:	77fb      	strb	r3, [r7, #31]
 800b150:	e061      	b.n	800b216 <UART_SetConfig+0x216>
 800b152:	2302      	movs	r3, #2
 800b154:	77fb      	strb	r3, [r7, #31]
 800b156:	e05e      	b.n	800b216 <UART_SetConfig+0x216>
 800b158:	2304      	movs	r3, #4
 800b15a:	77fb      	strb	r3, [r7, #31]
 800b15c:	e05b      	b.n	800b216 <UART_SetConfig+0x216>
 800b15e:	2308      	movs	r3, #8
 800b160:	77fb      	strb	r3, [r7, #31]
 800b162:	e058      	b.n	800b216 <UART_SetConfig+0x216>
 800b164:	2310      	movs	r3, #16
 800b166:	77fb      	strb	r3, [r7, #31]
 800b168:	e055      	b.n	800b216 <UART_SetConfig+0x216>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a6f      	ldr	r2, [pc, #444]	; (800b32c <UART_SetConfig+0x32c>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d124      	bne.n	800b1be <UART_SetConfig+0x1be>
 800b174:	4b6a      	ldr	r3, [pc, #424]	; (800b320 <UART_SetConfig+0x320>)
 800b176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b178:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b17c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b180:	d011      	beq.n	800b1a6 <UART_SetConfig+0x1a6>
 800b182:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b186:	d817      	bhi.n	800b1b8 <UART_SetConfig+0x1b8>
 800b188:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b18c:	d011      	beq.n	800b1b2 <UART_SetConfig+0x1b2>
 800b18e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b192:	d811      	bhi.n	800b1b8 <UART_SetConfig+0x1b8>
 800b194:	2b00      	cmp	r3, #0
 800b196:	d003      	beq.n	800b1a0 <UART_SetConfig+0x1a0>
 800b198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b19c:	d006      	beq.n	800b1ac <UART_SetConfig+0x1ac>
 800b19e:	e00b      	b.n	800b1b8 <UART_SetConfig+0x1b8>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	77fb      	strb	r3, [r7, #31]
 800b1a4:	e037      	b.n	800b216 <UART_SetConfig+0x216>
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	77fb      	strb	r3, [r7, #31]
 800b1aa:	e034      	b.n	800b216 <UART_SetConfig+0x216>
 800b1ac:	2304      	movs	r3, #4
 800b1ae:	77fb      	strb	r3, [r7, #31]
 800b1b0:	e031      	b.n	800b216 <UART_SetConfig+0x216>
 800b1b2:	2308      	movs	r3, #8
 800b1b4:	77fb      	strb	r3, [r7, #31]
 800b1b6:	e02e      	b.n	800b216 <UART_SetConfig+0x216>
 800b1b8:	2310      	movs	r3, #16
 800b1ba:	77fb      	strb	r3, [r7, #31]
 800b1bc:	e02b      	b.n	800b216 <UART_SetConfig+0x216>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a5b      	ldr	r2, [pc, #364]	; (800b330 <UART_SetConfig+0x330>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d124      	bne.n	800b212 <UART_SetConfig+0x212>
 800b1c8:	4b55      	ldr	r3, [pc, #340]	; (800b320 <UART_SetConfig+0x320>)
 800b1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1cc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b1d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b1d4:	d011      	beq.n	800b1fa <UART_SetConfig+0x1fa>
 800b1d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b1da:	d817      	bhi.n	800b20c <UART_SetConfig+0x20c>
 800b1dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b1e0:	d011      	beq.n	800b206 <UART_SetConfig+0x206>
 800b1e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b1e6:	d811      	bhi.n	800b20c <UART_SetConfig+0x20c>
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d003      	beq.n	800b1f4 <UART_SetConfig+0x1f4>
 800b1ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1f0:	d006      	beq.n	800b200 <UART_SetConfig+0x200>
 800b1f2:	e00b      	b.n	800b20c <UART_SetConfig+0x20c>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	77fb      	strb	r3, [r7, #31]
 800b1f8:	e00d      	b.n	800b216 <UART_SetConfig+0x216>
 800b1fa:	2302      	movs	r3, #2
 800b1fc:	77fb      	strb	r3, [r7, #31]
 800b1fe:	e00a      	b.n	800b216 <UART_SetConfig+0x216>
 800b200:	2304      	movs	r3, #4
 800b202:	77fb      	strb	r3, [r7, #31]
 800b204:	e007      	b.n	800b216 <UART_SetConfig+0x216>
 800b206:	2308      	movs	r3, #8
 800b208:	77fb      	strb	r3, [r7, #31]
 800b20a:	e004      	b.n	800b216 <UART_SetConfig+0x216>
 800b20c:	2310      	movs	r3, #16
 800b20e:	77fb      	strb	r3, [r7, #31]
 800b210:	e001      	b.n	800b216 <UART_SetConfig+0x216>
 800b212:	2310      	movs	r3, #16
 800b214:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	69db      	ldr	r3, [r3, #28]
 800b21a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b21e:	d15c      	bne.n	800b2da <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 800b220:	7ffb      	ldrb	r3, [r7, #31]
 800b222:	2b08      	cmp	r3, #8
 800b224:	d827      	bhi.n	800b276 <UART_SetConfig+0x276>
 800b226:	a201      	add	r2, pc, #4	; (adr r2, 800b22c <UART_SetConfig+0x22c>)
 800b228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b22c:	0800b251 	.word	0x0800b251
 800b230:	0800b259 	.word	0x0800b259
 800b234:	0800b261 	.word	0x0800b261
 800b238:	0800b277 	.word	0x0800b277
 800b23c:	0800b267 	.word	0x0800b267
 800b240:	0800b277 	.word	0x0800b277
 800b244:	0800b277 	.word	0x0800b277
 800b248:	0800b277 	.word	0x0800b277
 800b24c:	0800b26f 	.word	0x0800b26f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b250:	f7fd fed4 	bl	8008ffc <HAL_RCC_GetPCLK1Freq>
 800b254:	61b8      	str	r0, [r7, #24]
        break;
 800b256:	e013      	b.n	800b280 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b258:	f7fd fef2 	bl	8009040 <HAL_RCC_GetPCLK2Freq>
 800b25c:	61b8      	str	r0, [r7, #24]
        break;
 800b25e:	e00f      	b.n	800b280 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b260:	4b34      	ldr	r3, [pc, #208]	; (800b334 <UART_SetConfig+0x334>)
 800b262:	61bb      	str	r3, [r7, #24]
        break;
 800b264:	e00c      	b.n	800b280 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b266:	f7fd fe53 	bl	8008f10 <HAL_RCC_GetSysClockFreq>
 800b26a:	61b8      	str	r0, [r7, #24]
        break;
 800b26c:	e008      	b.n	800b280 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b26e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b272:	61bb      	str	r3, [r7, #24]
        break;
 800b274:	e004      	b.n	800b280 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800b276:	2300      	movs	r3, #0
 800b278:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	77bb      	strb	r3, [r7, #30]
        break;
 800b27e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	2b00      	cmp	r3, #0
 800b284:	f000 8084 	beq.w	800b390 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	005a      	lsls	r2, r3, #1
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	085b      	lsrs	r3, r3, #1
 800b292:	441a      	add	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	fbb2 f3f3 	udiv	r3, r2, r3
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	2b0f      	cmp	r3, #15
 800b2a4:	d916      	bls.n	800b2d4 <UART_SetConfig+0x2d4>
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2ac:	d212      	bcs.n	800b2d4 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	f023 030f 	bic.w	r3, r3, #15
 800b2b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	085b      	lsrs	r3, r3, #1
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	f003 0307 	and.w	r3, r3, #7
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	89fb      	ldrh	r3, [r7, #14]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	89fa      	ldrh	r2, [r7, #14]
 800b2d0:	60da      	str	r2, [r3, #12]
 800b2d2:	e05d      	b.n	800b390 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	77bb      	strb	r3, [r7, #30]
 800b2d8:	e05a      	b.n	800b390 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b2da:	7ffb      	ldrb	r3, [r7, #31]
 800b2dc:	2b08      	cmp	r3, #8
 800b2de:	d836      	bhi.n	800b34e <UART_SetConfig+0x34e>
 800b2e0:	a201      	add	r2, pc, #4	; (adr r2, 800b2e8 <UART_SetConfig+0x2e8>)
 800b2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e6:	bf00      	nop
 800b2e8:	0800b30d 	.word	0x0800b30d
 800b2ec:	0800b315 	.word	0x0800b315
 800b2f0:	0800b339 	.word	0x0800b339
 800b2f4:	0800b34f 	.word	0x0800b34f
 800b2f8:	0800b33f 	.word	0x0800b33f
 800b2fc:	0800b34f 	.word	0x0800b34f
 800b300:	0800b34f 	.word	0x0800b34f
 800b304:	0800b34f 	.word	0x0800b34f
 800b308:	0800b347 	.word	0x0800b347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b30c:	f7fd fe76 	bl	8008ffc <HAL_RCC_GetPCLK1Freq>
 800b310:	61b8      	str	r0, [r7, #24]
        break;
 800b312:	e021      	b.n	800b358 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b314:	f7fd fe94 	bl	8009040 <HAL_RCC_GetPCLK2Freq>
 800b318:	61b8      	str	r0, [r7, #24]
        break;
 800b31a:	e01d      	b.n	800b358 <UART_SetConfig+0x358>
 800b31c:	40013800 	.word	0x40013800
 800b320:	40021000 	.word	0x40021000
 800b324:	40004400 	.word	0x40004400
 800b328:	40004800 	.word	0x40004800
 800b32c:	40004c00 	.word	0x40004c00
 800b330:	40005000 	.word	0x40005000
 800b334:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b338:	4b1b      	ldr	r3, [pc, #108]	; (800b3a8 <UART_SetConfig+0x3a8>)
 800b33a:	61bb      	str	r3, [r7, #24]
        break;
 800b33c:	e00c      	b.n	800b358 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b33e:	f7fd fde7 	bl	8008f10 <HAL_RCC_GetSysClockFreq>
 800b342:	61b8      	str	r0, [r7, #24]
        break;
 800b344:	e008      	b.n	800b358 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b34a:	61bb      	str	r3, [r7, #24]
        break;
 800b34c:	e004      	b.n	800b358 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800b34e:	2300      	movs	r3, #0
 800b350:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	77bb      	strb	r3, [r7, #30]
        break;
 800b356:	bf00      	nop
    }

    if (pclk != 0U)
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d018      	beq.n	800b390 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	085a      	lsrs	r2, r3, #1
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	441a      	add	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b370:	b29b      	uxth	r3, r3
 800b372:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	2b0f      	cmp	r3, #15
 800b378:	d908      	bls.n	800b38c <UART_SetConfig+0x38c>
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b380:	d204      	bcs.n	800b38c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	693a      	ldr	r2, [r7, #16]
 800b388:	60da      	str	r2, [r3, #12]
 800b38a:	e001      	b.n	800b390 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800b38c:	2301      	movs	r3, #1
 800b38e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b39c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3720      	adds	r7, #32
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	007a1200 	.word	0x007a1200

0800b3ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b8:	f003 0301 	and.w	r3, r3, #1
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00a      	beq.n	800b3d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3da:	f003 0302 	and.w	r3, r3, #2
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00a      	beq.n	800b3f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fc:	f003 0304 	and.w	r3, r3, #4
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00a      	beq.n	800b41a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	430a      	orrs	r2, r1
 800b418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41e:	f003 0308 	and.w	r3, r3, #8
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00a      	beq.n	800b43c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	430a      	orrs	r2, r1
 800b43a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b440:	f003 0310 	and.w	r3, r3, #16
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00a      	beq.n	800b45e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	430a      	orrs	r2, r1
 800b45c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b462:	f003 0320 	and.w	r3, r3, #32
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00a      	beq.n	800b480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	430a      	orrs	r2, r1
 800b47e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d01a      	beq.n	800b4c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	430a      	orrs	r2, r1
 800b4a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4aa:	d10a      	bne.n	800b4c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00a      	beq.n	800b4e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	430a      	orrs	r2, r1
 800b4e2:	605a      	str	r2, [r3, #4]
  }
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af02      	add	r7, sp, #8
 800b4f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b500:	f7fa fa7c 	bl	80059fc <HAL_GetTick>
 800b504:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0308 	and.w	r3, r3, #8
 800b510:	2b08      	cmp	r3, #8
 800b512:	d10e      	bne.n	800b532 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f82d 	bl	800b582 <UART_WaitOnFlagUntilTimeout>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d001      	beq.n	800b532 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b52e:	2303      	movs	r3, #3
 800b530:	e023      	b.n	800b57a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f003 0304 	and.w	r3, r3, #4
 800b53c:	2b04      	cmp	r3, #4
 800b53e:	d10e      	bne.n	800b55e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b540:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b544:	9300      	str	r3, [sp, #0]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f817 	bl	800b582 <UART_WaitOnFlagUntilTimeout>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b55a:	2303      	movs	r3, #3
 800b55c:	e00d      	b.n	800b57a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2220      	movs	r2, #32
 800b562:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2220      	movs	r2, #32
 800b568:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b09c      	sub	sp, #112	; 0x70
 800b586:	af00      	add	r7, sp, #0
 800b588:	60f8      	str	r0, [r7, #12]
 800b58a:	60b9      	str	r1, [r7, #8]
 800b58c:	603b      	str	r3, [r7, #0]
 800b58e:	4613      	mov	r3, r2
 800b590:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b592:	e0a5      	b.n	800b6e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59a:	f000 80a1 	beq.w	800b6e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b59e:	f7fa fa2d 	bl	80059fc <HAL_GetTick>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d302      	bcc.n	800b5b4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b5ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d13e      	bne.n	800b632 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5bc:	e853 3f00 	ldrex	r3, [r3]
 800b5c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b5c8:	667b      	str	r3, [r7, #100]	; 0x64
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b5d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b5da:	e841 2300 	strex	r3, r2, [r1]
 800b5de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b5e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d1e6      	bne.n	800b5b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	3308      	adds	r3, #8
 800b5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f0:	e853 3f00 	ldrex	r3, [r3]
 800b5f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f8:	f023 0301 	bic.w	r3, r3, #1
 800b5fc:	663b      	str	r3, [r7, #96]	; 0x60
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3308      	adds	r3, #8
 800b604:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b606:	64ba      	str	r2, [r7, #72]	; 0x48
 800b608:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b60c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b60e:	e841 2300 	strex	r3, r2, [r1]
 800b612:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1e5      	bne.n	800b5e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2220      	movs	r2, #32
 800b61e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2220      	movs	r2, #32
 800b624:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b62e:	2303      	movs	r3, #3
 800b630:	e067      	b.n	800b702 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 0304 	and.w	r3, r3, #4
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d04f      	beq.n	800b6e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	69db      	ldr	r3, [r3, #28]
 800b646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b64a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b64e:	d147      	bne.n	800b6e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b658:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b662:	e853 3f00 	ldrex	r3, [r3]
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b66e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	461a      	mov	r2, r3
 800b676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b678:	637b      	str	r3, [r7, #52]	; 0x34
 800b67a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b67e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b680:	e841 2300 	strex	r3, r2, [r1]
 800b684:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1e6      	bne.n	800b65a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3308      	adds	r3, #8
 800b692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	e853 3f00 	ldrex	r3, [r3]
 800b69a:	613b      	str	r3, [r7, #16]
   return(result);
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	f023 0301 	bic.w	r3, r3, #1
 800b6a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3308      	adds	r3, #8
 800b6aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b6ac:	623a      	str	r2, [r7, #32]
 800b6ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b0:	69f9      	ldr	r1, [r7, #28]
 800b6b2:	6a3a      	ldr	r2, [r7, #32]
 800b6b4:	e841 2300 	strex	r3, r2, [r1]
 800b6b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1e5      	bne.n	800b68c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2220      	movs	r2, #32
 800b6c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2220      	movs	r2, #32
 800b6ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2220      	movs	r2, #32
 800b6d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	e010      	b.n	800b702 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	69da      	ldr	r2, [r3, #28]
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	68ba      	ldr	r2, [r7, #8]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	bf0c      	ite	eq
 800b6f0:	2301      	moveq	r3, #1
 800b6f2:	2300      	movne	r3, #0
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	79fb      	ldrb	r3, [r7, #7]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	f43f af4a 	beq.w	800b594 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3770      	adds	r7, #112	; 0x70
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b70a:	b480      	push	{r7}
 800b70c:	b095      	sub	sp, #84	; 0x54
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b71a:	e853 3f00 	ldrex	r3, [r3]
 800b71e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b722:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b726:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	461a      	mov	r2, r3
 800b72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b730:	643b      	str	r3, [r7, #64]	; 0x40
 800b732:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b738:	e841 2300 	strex	r3, r2, [r1]
 800b73c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1e6      	bne.n	800b712 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	3308      	adds	r3, #8
 800b74a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74c:	6a3b      	ldr	r3, [r7, #32]
 800b74e:	e853 3f00 	ldrex	r3, [r3]
 800b752:	61fb      	str	r3, [r7, #28]
   return(result);
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	f023 0301 	bic.w	r3, r3, #1
 800b75a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	3308      	adds	r3, #8
 800b762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b764:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b76a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b76c:	e841 2300 	strex	r3, r2, [r1]
 800b770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1e5      	bne.n	800b744 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d118      	bne.n	800b7b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	e853 3f00 	ldrex	r3, [r3]
 800b78c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	f023 0310 	bic.w	r3, r3, #16
 800b794:	647b      	str	r3, [r7, #68]	; 0x44
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	461a      	mov	r2, r3
 800b79c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b79e:	61bb      	str	r3, [r7, #24]
 800b7a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a2:	6979      	ldr	r1, [r7, #20]
 800b7a4:	69ba      	ldr	r2, [r7, #24]
 800b7a6:	e841 2300 	strex	r3, r2, [r1]
 800b7aa:	613b      	str	r3, [r7, #16]
   return(result);
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1e6      	bne.n	800b780 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2220      	movs	r2, #32
 800b7b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b7c4:	bf00      	nop
 800b7c6:	3754      	adds	r7, #84	; 0x54
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f7ff fbf0 	bl	800afd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7f4:	bf00      	nop
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	e853 3f00 	ldrex	r3, [r3]
 800b810:	60bb      	str	r3, [r7, #8]
   return(result);
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b818:	61fb      	str	r3, [r7, #28]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	461a      	mov	r2, r3
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	61bb      	str	r3, [r7, #24]
 800b824:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b826:	6979      	ldr	r1, [r7, #20]
 800b828:	69ba      	ldr	r2, [r7, #24]
 800b82a:	e841 2300 	strex	r3, r2, [r1]
 800b82e:	613b      	str	r3, [r7, #16]
   return(result);
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1e6      	bne.n	800b804 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2220      	movs	r2, #32
 800b83a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7ff fbbc 	bl	800afc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b848:	bf00      	nop
 800b84a:	3720      	adds	r7, #32
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b86c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800b870:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b878:	b29a      	uxth	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	43db      	mvns	r3, r3
 800b880:	b29b      	uxth	r3, r3
 800b882:	4013      	ands	r3, r2
 800b884:	b29a      	uxth	r2, r3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3714      	adds	r7, #20
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b89a:	b084      	sub	sp, #16
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	f107 0014 	add.w	r0, r7, #20
 800b8a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	370c      	adds	r7, #12
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	b004      	add	sp, #16
 800b8da:	4770      	bx	lr

0800b8dc <__errno>:
 800b8dc:	4b01      	ldr	r3, [pc, #4]	; (800b8e4 <__errno+0x8>)
 800b8de:	6818      	ldr	r0, [r3, #0]
 800b8e0:	4770      	bx	lr
 800b8e2:	bf00      	nop
 800b8e4:	20000140 	.word	0x20000140

0800b8e8 <__libc_init_array>:
 800b8e8:	b570      	push	{r4, r5, r6, lr}
 800b8ea:	4d0d      	ldr	r5, [pc, #52]	; (800b920 <__libc_init_array+0x38>)
 800b8ec:	4c0d      	ldr	r4, [pc, #52]	; (800b924 <__libc_init_array+0x3c>)
 800b8ee:	1b64      	subs	r4, r4, r5
 800b8f0:	10a4      	asrs	r4, r4, #2
 800b8f2:	2600      	movs	r6, #0
 800b8f4:	42a6      	cmp	r6, r4
 800b8f6:	d109      	bne.n	800b90c <__libc_init_array+0x24>
 800b8f8:	4d0b      	ldr	r5, [pc, #44]	; (800b928 <__libc_init_array+0x40>)
 800b8fa:	4c0c      	ldr	r4, [pc, #48]	; (800b92c <__libc_init_array+0x44>)
 800b8fc:	f001 fcfa 	bl	800d2f4 <_init>
 800b900:	1b64      	subs	r4, r4, r5
 800b902:	10a4      	asrs	r4, r4, #2
 800b904:	2600      	movs	r6, #0
 800b906:	42a6      	cmp	r6, r4
 800b908:	d105      	bne.n	800b916 <__libc_init_array+0x2e>
 800b90a:	bd70      	pop	{r4, r5, r6, pc}
 800b90c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b910:	4798      	blx	r3
 800b912:	3601      	adds	r6, #1
 800b914:	e7ee      	b.n	800b8f4 <__libc_init_array+0xc>
 800b916:	f855 3b04 	ldr.w	r3, [r5], #4
 800b91a:	4798      	blx	r3
 800b91c:	3601      	adds	r6, #1
 800b91e:	e7f2      	b.n	800b906 <__libc_init_array+0x1e>
 800b920:	0800dd80 	.word	0x0800dd80
 800b924:	0800dd80 	.word	0x0800dd80
 800b928:	0800dd80 	.word	0x0800dd80
 800b92c:	0800dd84 	.word	0x0800dd84

0800b930 <malloc>:
 800b930:	4b02      	ldr	r3, [pc, #8]	; (800b93c <malloc+0xc>)
 800b932:	4601      	mov	r1, r0
 800b934:	6818      	ldr	r0, [r3, #0]
 800b936:	f000 b885 	b.w	800ba44 <_malloc_r>
 800b93a:	bf00      	nop
 800b93c:	20000140 	.word	0x20000140

0800b940 <memcpy>:
 800b940:	440a      	add	r2, r1
 800b942:	4291      	cmp	r1, r2
 800b944:	f100 33ff 	add.w	r3, r0, #4294967295
 800b948:	d100      	bne.n	800b94c <memcpy+0xc>
 800b94a:	4770      	bx	lr
 800b94c:	b510      	push	{r4, lr}
 800b94e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b952:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b956:	4291      	cmp	r1, r2
 800b958:	d1f9      	bne.n	800b94e <memcpy+0xe>
 800b95a:	bd10      	pop	{r4, pc}

0800b95c <memset>:
 800b95c:	4402      	add	r2, r0
 800b95e:	4603      	mov	r3, r0
 800b960:	4293      	cmp	r3, r2
 800b962:	d100      	bne.n	800b966 <memset+0xa>
 800b964:	4770      	bx	lr
 800b966:	f803 1b01 	strb.w	r1, [r3], #1
 800b96a:	e7f9      	b.n	800b960 <memset+0x4>

0800b96c <_free_r>:
 800b96c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b96e:	2900      	cmp	r1, #0
 800b970:	d044      	beq.n	800b9fc <_free_r+0x90>
 800b972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b976:	9001      	str	r0, [sp, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f1a1 0404 	sub.w	r4, r1, #4
 800b97e:	bfb8      	it	lt
 800b980:	18e4      	addlt	r4, r4, r3
 800b982:	f000 f91b 	bl	800bbbc <__malloc_lock>
 800b986:	4a1e      	ldr	r2, [pc, #120]	; (800ba00 <_free_r+0x94>)
 800b988:	9801      	ldr	r0, [sp, #4]
 800b98a:	6813      	ldr	r3, [r2, #0]
 800b98c:	b933      	cbnz	r3, 800b99c <_free_r+0x30>
 800b98e:	6063      	str	r3, [r4, #4]
 800b990:	6014      	str	r4, [r2, #0]
 800b992:	b003      	add	sp, #12
 800b994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b998:	f000 b916 	b.w	800bbc8 <__malloc_unlock>
 800b99c:	42a3      	cmp	r3, r4
 800b99e:	d908      	bls.n	800b9b2 <_free_r+0x46>
 800b9a0:	6825      	ldr	r5, [r4, #0]
 800b9a2:	1961      	adds	r1, r4, r5
 800b9a4:	428b      	cmp	r3, r1
 800b9a6:	bf01      	itttt	eq
 800b9a8:	6819      	ldreq	r1, [r3, #0]
 800b9aa:	685b      	ldreq	r3, [r3, #4]
 800b9ac:	1949      	addeq	r1, r1, r5
 800b9ae:	6021      	streq	r1, [r4, #0]
 800b9b0:	e7ed      	b.n	800b98e <_free_r+0x22>
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	b10b      	cbz	r3, 800b9bc <_free_r+0x50>
 800b9b8:	42a3      	cmp	r3, r4
 800b9ba:	d9fa      	bls.n	800b9b2 <_free_r+0x46>
 800b9bc:	6811      	ldr	r1, [r2, #0]
 800b9be:	1855      	adds	r5, r2, r1
 800b9c0:	42a5      	cmp	r5, r4
 800b9c2:	d10b      	bne.n	800b9dc <_free_r+0x70>
 800b9c4:	6824      	ldr	r4, [r4, #0]
 800b9c6:	4421      	add	r1, r4
 800b9c8:	1854      	adds	r4, r2, r1
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	6011      	str	r1, [r2, #0]
 800b9ce:	d1e0      	bne.n	800b992 <_free_r+0x26>
 800b9d0:	681c      	ldr	r4, [r3, #0]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	6053      	str	r3, [r2, #4]
 800b9d6:	4421      	add	r1, r4
 800b9d8:	6011      	str	r1, [r2, #0]
 800b9da:	e7da      	b.n	800b992 <_free_r+0x26>
 800b9dc:	d902      	bls.n	800b9e4 <_free_r+0x78>
 800b9de:	230c      	movs	r3, #12
 800b9e0:	6003      	str	r3, [r0, #0]
 800b9e2:	e7d6      	b.n	800b992 <_free_r+0x26>
 800b9e4:	6825      	ldr	r5, [r4, #0]
 800b9e6:	1961      	adds	r1, r4, r5
 800b9e8:	428b      	cmp	r3, r1
 800b9ea:	bf04      	itt	eq
 800b9ec:	6819      	ldreq	r1, [r3, #0]
 800b9ee:	685b      	ldreq	r3, [r3, #4]
 800b9f0:	6063      	str	r3, [r4, #4]
 800b9f2:	bf04      	itt	eq
 800b9f4:	1949      	addeq	r1, r1, r5
 800b9f6:	6021      	streq	r1, [r4, #0]
 800b9f8:	6054      	str	r4, [r2, #4]
 800b9fa:	e7ca      	b.n	800b992 <_free_r+0x26>
 800b9fc:	b003      	add	sp, #12
 800b9fe:	bd30      	pop	{r4, r5, pc}
 800ba00:	20000900 	.word	0x20000900

0800ba04 <sbrk_aligned>:
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	4e0e      	ldr	r6, [pc, #56]	; (800ba40 <sbrk_aligned+0x3c>)
 800ba08:	460c      	mov	r4, r1
 800ba0a:	6831      	ldr	r1, [r6, #0]
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	b911      	cbnz	r1, 800ba16 <sbrk_aligned+0x12>
 800ba10:	f000 f88c 	bl	800bb2c <_sbrk_r>
 800ba14:	6030      	str	r0, [r6, #0]
 800ba16:	4621      	mov	r1, r4
 800ba18:	4628      	mov	r0, r5
 800ba1a:	f000 f887 	bl	800bb2c <_sbrk_r>
 800ba1e:	1c43      	adds	r3, r0, #1
 800ba20:	d00a      	beq.n	800ba38 <sbrk_aligned+0x34>
 800ba22:	1cc4      	adds	r4, r0, #3
 800ba24:	f024 0403 	bic.w	r4, r4, #3
 800ba28:	42a0      	cmp	r0, r4
 800ba2a:	d007      	beq.n	800ba3c <sbrk_aligned+0x38>
 800ba2c:	1a21      	subs	r1, r4, r0
 800ba2e:	4628      	mov	r0, r5
 800ba30:	f000 f87c 	bl	800bb2c <_sbrk_r>
 800ba34:	3001      	adds	r0, #1
 800ba36:	d101      	bne.n	800ba3c <sbrk_aligned+0x38>
 800ba38:	f04f 34ff 	mov.w	r4, #4294967295
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	bd70      	pop	{r4, r5, r6, pc}
 800ba40:	20000904 	.word	0x20000904

0800ba44 <_malloc_r>:
 800ba44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba48:	1ccd      	adds	r5, r1, #3
 800ba4a:	f025 0503 	bic.w	r5, r5, #3
 800ba4e:	3508      	adds	r5, #8
 800ba50:	2d0c      	cmp	r5, #12
 800ba52:	bf38      	it	cc
 800ba54:	250c      	movcc	r5, #12
 800ba56:	2d00      	cmp	r5, #0
 800ba58:	4607      	mov	r7, r0
 800ba5a:	db01      	blt.n	800ba60 <_malloc_r+0x1c>
 800ba5c:	42a9      	cmp	r1, r5
 800ba5e:	d905      	bls.n	800ba6c <_malloc_r+0x28>
 800ba60:	230c      	movs	r3, #12
 800ba62:	603b      	str	r3, [r7, #0]
 800ba64:	2600      	movs	r6, #0
 800ba66:	4630      	mov	r0, r6
 800ba68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba6c:	4e2e      	ldr	r6, [pc, #184]	; (800bb28 <_malloc_r+0xe4>)
 800ba6e:	f000 f8a5 	bl	800bbbc <__malloc_lock>
 800ba72:	6833      	ldr	r3, [r6, #0]
 800ba74:	461c      	mov	r4, r3
 800ba76:	bb34      	cbnz	r4, 800bac6 <_malloc_r+0x82>
 800ba78:	4629      	mov	r1, r5
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	f7ff ffc2 	bl	800ba04 <sbrk_aligned>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	4604      	mov	r4, r0
 800ba84:	d14d      	bne.n	800bb22 <_malloc_r+0xde>
 800ba86:	6834      	ldr	r4, [r6, #0]
 800ba88:	4626      	mov	r6, r4
 800ba8a:	2e00      	cmp	r6, #0
 800ba8c:	d140      	bne.n	800bb10 <_malloc_r+0xcc>
 800ba8e:	6823      	ldr	r3, [r4, #0]
 800ba90:	4631      	mov	r1, r6
 800ba92:	4638      	mov	r0, r7
 800ba94:	eb04 0803 	add.w	r8, r4, r3
 800ba98:	f000 f848 	bl	800bb2c <_sbrk_r>
 800ba9c:	4580      	cmp	r8, r0
 800ba9e:	d13a      	bne.n	800bb16 <_malloc_r+0xd2>
 800baa0:	6821      	ldr	r1, [r4, #0]
 800baa2:	3503      	adds	r5, #3
 800baa4:	1a6d      	subs	r5, r5, r1
 800baa6:	f025 0503 	bic.w	r5, r5, #3
 800baaa:	3508      	adds	r5, #8
 800baac:	2d0c      	cmp	r5, #12
 800baae:	bf38      	it	cc
 800bab0:	250c      	movcc	r5, #12
 800bab2:	4629      	mov	r1, r5
 800bab4:	4638      	mov	r0, r7
 800bab6:	f7ff ffa5 	bl	800ba04 <sbrk_aligned>
 800baba:	3001      	adds	r0, #1
 800babc:	d02b      	beq.n	800bb16 <_malloc_r+0xd2>
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	442b      	add	r3, r5
 800bac2:	6023      	str	r3, [r4, #0]
 800bac4:	e00e      	b.n	800bae4 <_malloc_r+0xa0>
 800bac6:	6822      	ldr	r2, [r4, #0]
 800bac8:	1b52      	subs	r2, r2, r5
 800baca:	d41e      	bmi.n	800bb0a <_malloc_r+0xc6>
 800bacc:	2a0b      	cmp	r2, #11
 800bace:	d916      	bls.n	800bafe <_malloc_r+0xba>
 800bad0:	1961      	adds	r1, r4, r5
 800bad2:	42a3      	cmp	r3, r4
 800bad4:	6025      	str	r5, [r4, #0]
 800bad6:	bf18      	it	ne
 800bad8:	6059      	strne	r1, [r3, #4]
 800bada:	6863      	ldr	r3, [r4, #4]
 800badc:	bf08      	it	eq
 800bade:	6031      	streq	r1, [r6, #0]
 800bae0:	5162      	str	r2, [r4, r5]
 800bae2:	604b      	str	r3, [r1, #4]
 800bae4:	4638      	mov	r0, r7
 800bae6:	f104 060b 	add.w	r6, r4, #11
 800baea:	f000 f86d 	bl	800bbc8 <__malloc_unlock>
 800baee:	f026 0607 	bic.w	r6, r6, #7
 800baf2:	1d23      	adds	r3, r4, #4
 800baf4:	1af2      	subs	r2, r6, r3
 800baf6:	d0b6      	beq.n	800ba66 <_malloc_r+0x22>
 800baf8:	1b9b      	subs	r3, r3, r6
 800bafa:	50a3      	str	r3, [r4, r2]
 800bafc:	e7b3      	b.n	800ba66 <_malloc_r+0x22>
 800bafe:	6862      	ldr	r2, [r4, #4]
 800bb00:	42a3      	cmp	r3, r4
 800bb02:	bf0c      	ite	eq
 800bb04:	6032      	streq	r2, [r6, #0]
 800bb06:	605a      	strne	r2, [r3, #4]
 800bb08:	e7ec      	b.n	800bae4 <_malloc_r+0xa0>
 800bb0a:	4623      	mov	r3, r4
 800bb0c:	6864      	ldr	r4, [r4, #4]
 800bb0e:	e7b2      	b.n	800ba76 <_malloc_r+0x32>
 800bb10:	4634      	mov	r4, r6
 800bb12:	6876      	ldr	r6, [r6, #4]
 800bb14:	e7b9      	b.n	800ba8a <_malloc_r+0x46>
 800bb16:	230c      	movs	r3, #12
 800bb18:	603b      	str	r3, [r7, #0]
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	f000 f854 	bl	800bbc8 <__malloc_unlock>
 800bb20:	e7a1      	b.n	800ba66 <_malloc_r+0x22>
 800bb22:	6025      	str	r5, [r4, #0]
 800bb24:	e7de      	b.n	800bae4 <_malloc_r+0xa0>
 800bb26:	bf00      	nop
 800bb28:	20000900 	.word	0x20000900

0800bb2c <_sbrk_r>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4d06      	ldr	r5, [pc, #24]	; (800bb48 <_sbrk_r+0x1c>)
 800bb30:	2300      	movs	r3, #0
 800bb32:	4604      	mov	r4, r0
 800bb34:	4608      	mov	r0, r1
 800bb36:	602b      	str	r3, [r5, #0]
 800bb38:	f7f9 fe94 	bl	8005864 <_sbrk>
 800bb3c:	1c43      	adds	r3, r0, #1
 800bb3e:	d102      	bne.n	800bb46 <_sbrk_r+0x1a>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	b103      	cbz	r3, 800bb46 <_sbrk_r+0x1a>
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	bd38      	pop	{r3, r4, r5, pc}
 800bb48:	20000908 	.word	0x20000908

0800bb4c <siprintf>:
 800bb4c:	b40e      	push	{r1, r2, r3}
 800bb4e:	b500      	push	{lr}
 800bb50:	b09c      	sub	sp, #112	; 0x70
 800bb52:	ab1d      	add	r3, sp, #116	; 0x74
 800bb54:	9002      	str	r0, [sp, #8]
 800bb56:	9006      	str	r0, [sp, #24]
 800bb58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb5c:	4809      	ldr	r0, [pc, #36]	; (800bb84 <siprintf+0x38>)
 800bb5e:	9107      	str	r1, [sp, #28]
 800bb60:	9104      	str	r1, [sp, #16]
 800bb62:	4909      	ldr	r1, [pc, #36]	; (800bb88 <siprintf+0x3c>)
 800bb64:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb68:	9105      	str	r1, [sp, #20]
 800bb6a:	6800      	ldr	r0, [r0, #0]
 800bb6c:	9301      	str	r3, [sp, #4]
 800bb6e:	a902      	add	r1, sp, #8
 800bb70:	f000 f88c 	bl	800bc8c <_svfiprintf_r>
 800bb74:	9b02      	ldr	r3, [sp, #8]
 800bb76:	2200      	movs	r2, #0
 800bb78:	701a      	strb	r2, [r3, #0]
 800bb7a:	b01c      	add	sp, #112	; 0x70
 800bb7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb80:	b003      	add	sp, #12
 800bb82:	4770      	bx	lr
 800bb84:	20000140 	.word	0x20000140
 800bb88:	ffff0208 	.word	0xffff0208

0800bb8c <strcat>:
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	4602      	mov	r2, r0
 800bb90:	7814      	ldrb	r4, [r2, #0]
 800bb92:	4613      	mov	r3, r2
 800bb94:	3201      	adds	r2, #1
 800bb96:	2c00      	cmp	r4, #0
 800bb98:	d1fa      	bne.n	800bb90 <strcat+0x4>
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bba0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bba4:	2a00      	cmp	r2, #0
 800bba6:	d1f9      	bne.n	800bb9c <strcat+0x10>
 800bba8:	bd10      	pop	{r4, pc}

0800bbaa <strcpy>:
 800bbaa:	4603      	mov	r3, r0
 800bbac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbb0:	f803 2b01 	strb.w	r2, [r3], #1
 800bbb4:	2a00      	cmp	r2, #0
 800bbb6:	d1f9      	bne.n	800bbac <strcpy+0x2>
 800bbb8:	4770      	bx	lr
	...

0800bbbc <__malloc_lock>:
 800bbbc:	4801      	ldr	r0, [pc, #4]	; (800bbc4 <__malloc_lock+0x8>)
 800bbbe:	f000 baf9 	b.w	800c1b4 <__retarget_lock_acquire_recursive>
 800bbc2:	bf00      	nop
 800bbc4:	2000090c 	.word	0x2000090c

0800bbc8 <__malloc_unlock>:
 800bbc8:	4801      	ldr	r0, [pc, #4]	; (800bbd0 <__malloc_unlock+0x8>)
 800bbca:	f000 baf4 	b.w	800c1b6 <__retarget_lock_release_recursive>
 800bbce:	bf00      	nop
 800bbd0:	2000090c 	.word	0x2000090c

0800bbd4 <__ssputs_r>:
 800bbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd8:	688e      	ldr	r6, [r1, #8]
 800bbda:	429e      	cmp	r6, r3
 800bbdc:	4682      	mov	sl, r0
 800bbde:	460c      	mov	r4, r1
 800bbe0:	4690      	mov	r8, r2
 800bbe2:	461f      	mov	r7, r3
 800bbe4:	d838      	bhi.n	800bc58 <__ssputs_r+0x84>
 800bbe6:	898a      	ldrh	r2, [r1, #12]
 800bbe8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbec:	d032      	beq.n	800bc54 <__ssputs_r+0x80>
 800bbee:	6825      	ldr	r5, [r4, #0]
 800bbf0:	6909      	ldr	r1, [r1, #16]
 800bbf2:	eba5 0901 	sub.w	r9, r5, r1
 800bbf6:	6965      	ldr	r5, [r4, #20]
 800bbf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc00:	3301      	adds	r3, #1
 800bc02:	444b      	add	r3, r9
 800bc04:	106d      	asrs	r5, r5, #1
 800bc06:	429d      	cmp	r5, r3
 800bc08:	bf38      	it	cc
 800bc0a:	461d      	movcc	r5, r3
 800bc0c:	0553      	lsls	r3, r2, #21
 800bc0e:	d531      	bpl.n	800bc74 <__ssputs_r+0xa0>
 800bc10:	4629      	mov	r1, r5
 800bc12:	f7ff ff17 	bl	800ba44 <_malloc_r>
 800bc16:	4606      	mov	r6, r0
 800bc18:	b950      	cbnz	r0, 800bc30 <__ssputs_r+0x5c>
 800bc1a:	230c      	movs	r3, #12
 800bc1c:	f8ca 3000 	str.w	r3, [sl]
 800bc20:	89a3      	ldrh	r3, [r4, #12]
 800bc22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc26:	81a3      	strh	r3, [r4, #12]
 800bc28:	f04f 30ff 	mov.w	r0, #4294967295
 800bc2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc30:	6921      	ldr	r1, [r4, #16]
 800bc32:	464a      	mov	r2, r9
 800bc34:	f7ff fe84 	bl	800b940 <memcpy>
 800bc38:	89a3      	ldrh	r3, [r4, #12]
 800bc3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc42:	81a3      	strh	r3, [r4, #12]
 800bc44:	6126      	str	r6, [r4, #16]
 800bc46:	6165      	str	r5, [r4, #20]
 800bc48:	444e      	add	r6, r9
 800bc4a:	eba5 0509 	sub.w	r5, r5, r9
 800bc4e:	6026      	str	r6, [r4, #0]
 800bc50:	60a5      	str	r5, [r4, #8]
 800bc52:	463e      	mov	r6, r7
 800bc54:	42be      	cmp	r6, r7
 800bc56:	d900      	bls.n	800bc5a <__ssputs_r+0x86>
 800bc58:	463e      	mov	r6, r7
 800bc5a:	6820      	ldr	r0, [r4, #0]
 800bc5c:	4632      	mov	r2, r6
 800bc5e:	4641      	mov	r1, r8
 800bc60:	f000 faaa 	bl	800c1b8 <memmove>
 800bc64:	68a3      	ldr	r3, [r4, #8]
 800bc66:	1b9b      	subs	r3, r3, r6
 800bc68:	60a3      	str	r3, [r4, #8]
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	4433      	add	r3, r6
 800bc6e:	6023      	str	r3, [r4, #0]
 800bc70:	2000      	movs	r0, #0
 800bc72:	e7db      	b.n	800bc2c <__ssputs_r+0x58>
 800bc74:	462a      	mov	r2, r5
 800bc76:	f000 fab9 	bl	800c1ec <_realloc_r>
 800bc7a:	4606      	mov	r6, r0
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d1e1      	bne.n	800bc44 <__ssputs_r+0x70>
 800bc80:	6921      	ldr	r1, [r4, #16]
 800bc82:	4650      	mov	r0, sl
 800bc84:	f7ff fe72 	bl	800b96c <_free_r>
 800bc88:	e7c7      	b.n	800bc1a <__ssputs_r+0x46>
	...

0800bc8c <_svfiprintf_r>:
 800bc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc90:	4698      	mov	r8, r3
 800bc92:	898b      	ldrh	r3, [r1, #12]
 800bc94:	061b      	lsls	r3, r3, #24
 800bc96:	b09d      	sub	sp, #116	; 0x74
 800bc98:	4607      	mov	r7, r0
 800bc9a:	460d      	mov	r5, r1
 800bc9c:	4614      	mov	r4, r2
 800bc9e:	d50e      	bpl.n	800bcbe <_svfiprintf_r+0x32>
 800bca0:	690b      	ldr	r3, [r1, #16]
 800bca2:	b963      	cbnz	r3, 800bcbe <_svfiprintf_r+0x32>
 800bca4:	2140      	movs	r1, #64	; 0x40
 800bca6:	f7ff fecd 	bl	800ba44 <_malloc_r>
 800bcaa:	6028      	str	r0, [r5, #0]
 800bcac:	6128      	str	r0, [r5, #16]
 800bcae:	b920      	cbnz	r0, 800bcba <_svfiprintf_r+0x2e>
 800bcb0:	230c      	movs	r3, #12
 800bcb2:	603b      	str	r3, [r7, #0]
 800bcb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb8:	e0d1      	b.n	800be5e <_svfiprintf_r+0x1d2>
 800bcba:	2340      	movs	r3, #64	; 0x40
 800bcbc:	616b      	str	r3, [r5, #20]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9309      	str	r3, [sp, #36]	; 0x24
 800bcc2:	2320      	movs	r3, #32
 800bcc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bccc:	2330      	movs	r3, #48	; 0x30
 800bcce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800be78 <_svfiprintf_r+0x1ec>
 800bcd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcd6:	f04f 0901 	mov.w	r9, #1
 800bcda:	4623      	mov	r3, r4
 800bcdc:	469a      	mov	sl, r3
 800bcde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bce2:	b10a      	cbz	r2, 800bce8 <_svfiprintf_r+0x5c>
 800bce4:	2a25      	cmp	r2, #37	; 0x25
 800bce6:	d1f9      	bne.n	800bcdc <_svfiprintf_r+0x50>
 800bce8:	ebba 0b04 	subs.w	fp, sl, r4
 800bcec:	d00b      	beq.n	800bd06 <_svfiprintf_r+0x7a>
 800bcee:	465b      	mov	r3, fp
 800bcf0:	4622      	mov	r2, r4
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	4638      	mov	r0, r7
 800bcf6:	f7ff ff6d 	bl	800bbd4 <__ssputs_r>
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	f000 80aa 	beq.w	800be54 <_svfiprintf_r+0x1c8>
 800bd00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd02:	445a      	add	r2, fp
 800bd04:	9209      	str	r2, [sp, #36]	; 0x24
 800bd06:	f89a 3000 	ldrb.w	r3, [sl]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	f000 80a2 	beq.w	800be54 <_svfiprintf_r+0x1c8>
 800bd10:	2300      	movs	r3, #0
 800bd12:	f04f 32ff 	mov.w	r2, #4294967295
 800bd16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd1a:	f10a 0a01 	add.w	sl, sl, #1
 800bd1e:	9304      	str	r3, [sp, #16]
 800bd20:	9307      	str	r3, [sp, #28]
 800bd22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd26:	931a      	str	r3, [sp, #104]	; 0x68
 800bd28:	4654      	mov	r4, sl
 800bd2a:	2205      	movs	r2, #5
 800bd2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd30:	4851      	ldr	r0, [pc, #324]	; (800be78 <_svfiprintf_r+0x1ec>)
 800bd32:	f7f4 fa65 	bl	8000200 <memchr>
 800bd36:	9a04      	ldr	r2, [sp, #16]
 800bd38:	b9d8      	cbnz	r0, 800bd72 <_svfiprintf_r+0xe6>
 800bd3a:	06d0      	lsls	r0, r2, #27
 800bd3c:	bf44      	itt	mi
 800bd3e:	2320      	movmi	r3, #32
 800bd40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd44:	0711      	lsls	r1, r2, #28
 800bd46:	bf44      	itt	mi
 800bd48:	232b      	movmi	r3, #43	; 0x2b
 800bd4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd4e:	f89a 3000 	ldrb.w	r3, [sl]
 800bd52:	2b2a      	cmp	r3, #42	; 0x2a
 800bd54:	d015      	beq.n	800bd82 <_svfiprintf_r+0xf6>
 800bd56:	9a07      	ldr	r2, [sp, #28]
 800bd58:	4654      	mov	r4, sl
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	f04f 0c0a 	mov.w	ip, #10
 800bd60:	4621      	mov	r1, r4
 800bd62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd66:	3b30      	subs	r3, #48	; 0x30
 800bd68:	2b09      	cmp	r3, #9
 800bd6a:	d94e      	bls.n	800be0a <_svfiprintf_r+0x17e>
 800bd6c:	b1b0      	cbz	r0, 800bd9c <_svfiprintf_r+0x110>
 800bd6e:	9207      	str	r2, [sp, #28]
 800bd70:	e014      	b.n	800bd9c <_svfiprintf_r+0x110>
 800bd72:	eba0 0308 	sub.w	r3, r0, r8
 800bd76:	fa09 f303 	lsl.w	r3, r9, r3
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	9304      	str	r3, [sp, #16]
 800bd7e:	46a2      	mov	sl, r4
 800bd80:	e7d2      	b.n	800bd28 <_svfiprintf_r+0x9c>
 800bd82:	9b03      	ldr	r3, [sp, #12]
 800bd84:	1d19      	adds	r1, r3, #4
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	9103      	str	r1, [sp, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	bfbb      	ittet	lt
 800bd8e:	425b      	neglt	r3, r3
 800bd90:	f042 0202 	orrlt.w	r2, r2, #2
 800bd94:	9307      	strge	r3, [sp, #28]
 800bd96:	9307      	strlt	r3, [sp, #28]
 800bd98:	bfb8      	it	lt
 800bd9a:	9204      	strlt	r2, [sp, #16]
 800bd9c:	7823      	ldrb	r3, [r4, #0]
 800bd9e:	2b2e      	cmp	r3, #46	; 0x2e
 800bda0:	d10c      	bne.n	800bdbc <_svfiprintf_r+0x130>
 800bda2:	7863      	ldrb	r3, [r4, #1]
 800bda4:	2b2a      	cmp	r3, #42	; 0x2a
 800bda6:	d135      	bne.n	800be14 <_svfiprintf_r+0x188>
 800bda8:	9b03      	ldr	r3, [sp, #12]
 800bdaa:	1d1a      	adds	r2, r3, #4
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	9203      	str	r2, [sp, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	bfb8      	it	lt
 800bdb4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdb8:	3402      	adds	r4, #2
 800bdba:	9305      	str	r3, [sp, #20]
 800bdbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be88 <_svfiprintf_r+0x1fc>
 800bdc0:	7821      	ldrb	r1, [r4, #0]
 800bdc2:	2203      	movs	r2, #3
 800bdc4:	4650      	mov	r0, sl
 800bdc6:	f7f4 fa1b 	bl	8000200 <memchr>
 800bdca:	b140      	cbz	r0, 800bdde <_svfiprintf_r+0x152>
 800bdcc:	2340      	movs	r3, #64	; 0x40
 800bdce:	eba0 000a 	sub.w	r0, r0, sl
 800bdd2:	fa03 f000 	lsl.w	r0, r3, r0
 800bdd6:	9b04      	ldr	r3, [sp, #16]
 800bdd8:	4303      	orrs	r3, r0
 800bdda:	3401      	adds	r4, #1
 800bddc:	9304      	str	r3, [sp, #16]
 800bdde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bde2:	4826      	ldr	r0, [pc, #152]	; (800be7c <_svfiprintf_r+0x1f0>)
 800bde4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bde8:	2206      	movs	r2, #6
 800bdea:	f7f4 fa09 	bl	8000200 <memchr>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d038      	beq.n	800be64 <_svfiprintf_r+0x1d8>
 800bdf2:	4b23      	ldr	r3, [pc, #140]	; (800be80 <_svfiprintf_r+0x1f4>)
 800bdf4:	bb1b      	cbnz	r3, 800be3e <_svfiprintf_r+0x1b2>
 800bdf6:	9b03      	ldr	r3, [sp, #12]
 800bdf8:	3307      	adds	r3, #7
 800bdfa:	f023 0307 	bic.w	r3, r3, #7
 800bdfe:	3308      	adds	r3, #8
 800be00:	9303      	str	r3, [sp, #12]
 800be02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be04:	4433      	add	r3, r6
 800be06:	9309      	str	r3, [sp, #36]	; 0x24
 800be08:	e767      	b.n	800bcda <_svfiprintf_r+0x4e>
 800be0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800be0e:	460c      	mov	r4, r1
 800be10:	2001      	movs	r0, #1
 800be12:	e7a5      	b.n	800bd60 <_svfiprintf_r+0xd4>
 800be14:	2300      	movs	r3, #0
 800be16:	3401      	adds	r4, #1
 800be18:	9305      	str	r3, [sp, #20]
 800be1a:	4619      	mov	r1, r3
 800be1c:	f04f 0c0a 	mov.w	ip, #10
 800be20:	4620      	mov	r0, r4
 800be22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be26:	3a30      	subs	r2, #48	; 0x30
 800be28:	2a09      	cmp	r2, #9
 800be2a:	d903      	bls.n	800be34 <_svfiprintf_r+0x1a8>
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d0c5      	beq.n	800bdbc <_svfiprintf_r+0x130>
 800be30:	9105      	str	r1, [sp, #20]
 800be32:	e7c3      	b.n	800bdbc <_svfiprintf_r+0x130>
 800be34:	fb0c 2101 	mla	r1, ip, r1, r2
 800be38:	4604      	mov	r4, r0
 800be3a:	2301      	movs	r3, #1
 800be3c:	e7f0      	b.n	800be20 <_svfiprintf_r+0x194>
 800be3e:	ab03      	add	r3, sp, #12
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	462a      	mov	r2, r5
 800be44:	4b0f      	ldr	r3, [pc, #60]	; (800be84 <_svfiprintf_r+0x1f8>)
 800be46:	a904      	add	r1, sp, #16
 800be48:	4638      	mov	r0, r7
 800be4a:	f3af 8000 	nop.w
 800be4e:	1c42      	adds	r2, r0, #1
 800be50:	4606      	mov	r6, r0
 800be52:	d1d6      	bne.n	800be02 <_svfiprintf_r+0x176>
 800be54:	89ab      	ldrh	r3, [r5, #12]
 800be56:	065b      	lsls	r3, r3, #25
 800be58:	f53f af2c 	bmi.w	800bcb4 <_svfiprintf_r+0x28>
 800be5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be5e:	b01d      	add	sp, #116	; 0x74
 800be60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be64:	ab03      	add	r3, sp, #12
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	462a      	mov	r2, r5
 800be6a:	4b06      	ldr	r3, [pc, #24]	; (800be84 <_svfiprintf_r+0x1f8>)
 800be6c:	a904      	add	r1, sp, #16
 800be6e:	4638      	mov	r0, r7
 800be70:	f000 f87a 	bl	800bf68 <_printf_i>
 800be74:	e7eb      	b.n	800be4e <_svfiprintf_r+0x1c2>
 800be76:	bf00      	nop
 800be78:	0800db70 	.word	0x0800db70
 800be7c:	0800db7a 	.word	0x0800db7a
 800be80:	00000000 	.word	0x00000000
 800be84:	0800bbd5 	.word	0x0800bbd5
 800be88:	0800db76 	.word	0x0800db76

0800be8c <_printf_common>:
 800be8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be90:	4616      	mov	r6, r2
 800be92:	4699      	mov	r9, r3
 800be94:	688a      	ldr	r2, [r1, #8]
 800be96:	690b      	ldr	r3, [r1, #16]
 800be98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be9c:	4293      	cmp	r3, r2
 800be9e:	bfb8      	it	lt
 800bea0:	4613      	movlt	r3, r2
 800bea2:	6033      	str	r3, [r6, #0]
 800bea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bea8:	4607      	mov	r7, r0
 800beaa:	460c      	mov	r4, r1
 800beac:	b10a      	cbz	r2, 800beb2 <_printf_common+0x26>
 800beae:	3301      	adds	r3, #1
 800beb0:	6033      	str	r3, [r6, #0]
 800beb2:	6823      	ldr	r3, [r4, #0]
 800beb4:	0699      	lsls	r1, r3, #26
 800beb6:	bf42      	ittt	mi
 800beb8:	6833      	ldrmi	r3, [r6, #0]
 800beba:	3302      	addmi	r3, #2
 800bebc:	6033      	strmi	r3, [r6, #0]
 800bebe:	6825      	ldr	r5, [r4, #0]
 800bec0:	f015 0506 	ands.w	r5, r5, #6
 800bec4:	d106      	bne.n	800bed4 <_printf_common+0x48>
 800bec6:	f104 0a19 	add.w	sl, r4, #25
 800beca:	68e3      	ldr	r3, [r4, #12]
 800becc:	6832      	ldr	r2, [r6, #0]
 800bece:	1a9b      	subs	r3, r3, r2
 800bed0:	42ab      	cmp	r3, r5
 800bed2:	dc26      	bgt.n	800bf22 <_printf_common+0x96>
 800bed4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bed8:	1e13      	subs	r3, r2, #0
 800beda:	6822      	ldr	r2, [r4, #0]
 800bedc:	bf18      	it	ne
 800bede:	2301      	movne	r3, #1
 800bee0:	0692      	lsls	r2, r2, #26
 800bee2:	d42b      	bmi.n	800bf3c <_printf_common+0xb0>
 800bee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bee8:	4649      	mov	r1, r9
 800beea:	4638      	mov	r0, r7
 800beec:	47c0      	blx	r8
 800beee:	3001      	adds	r0, #1
 800bef0:	d01e      	beq.n	800bf30 <_printf_common+0xa4>
 800bef2:	6823      	ldr	r3, [r4, #0]
 800bef4:	68e5      	ldr	r5, [r4, #12]
 800bef6:	6832      	ldr	r2, [r6, #0]
 800bef8:	f003 0306 	and.w	r3, r3, #6
 800befc:	2b04      	cmp	r3, #4
 800befe:	bf08      	it	eq
 800bf00:	1aad      	subeq	r5, r5, r2
 800bf02:	68a3      	ldr	r3, [r4, #8]
 800bf04:	6922      	ldr	r2, [r4, #16]
 800bf06:	bf0c      	ite	eq
 800bf08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf0c:	2500      	movne	r5, #0
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	bfc4      	itt	gt
 800bf12:	1a9b      	subgt	r3, r3, r2
 800bf14:	18ed      	addgt	r5, r5, r3
 800bf16:	2600      	movs	r6, #0
 800bf18:	341a      	adds	r4, #26
 800bf1a:	42b5      	cmp	r5, r6
 800bf1c:	d11a      	bne.n	800bf54 <_printf_common+0xc8>
 800bf1e:	2000      	movs	r0, #0
 800bf20:	e008      	b.n	800bf34 <_printf_common+0xa8>
 800bf22:	2301      	movs	r3, #1
 800bf24:	4652      	mov	r2, sl
 800bf26:	4649      	mov	r1, r9
 800bf28:	4638      	mov	r0, r7
 800bf2a:	47c0      	blx	r8
 800bf2c:	3001      	adds	r0, #1
 800bf2e:	d103      	bne.n	800bf38 <_printf_common+0xac>
 800bf30:	f04f 30ff 	mov.w	r0, #4294967295
 800bf34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf38:	3501      	adds	r5, #1
 800bf3a:	e7c6      	b.n	800beca <_printf_common+0x3e>
 800bf3c:	18e1      	adds	r1, r4, r3
 800bf3e:	1c5a      	adds	r2, r3, #1
 800bf40:	2030      	movs	r0, #48	; 0x30
 800bf42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf46:	4422      	add	r2, r4
 800bf48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf50:	3302      	adds	r3, #2
 800bf52:	e7c7      	b.n	800bee4 <_printf_common+0x58>
 800bf54:	2301      	movs	r3, #1
 800bf56:	4622      	mov	r2, r4
 800bf58:	4649      	mov	r1, r9
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	47c0      	blx	r8
 800bf5e:	3001      	adds	r0, #1
 800bf60:	d0e6      	beq.n	800bf30 <_printf_common+0xa4>
 800bf62:	3601      	adds	r6, #1
 800bf64:	e7d9      	b.n	800bf1a <_printf_common+0x8e>
	...

0800bf68 <_printf_i>:
 800bf68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf6c:	7e0f      	ldrb	r7, [r1, #24]
 800bf6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf70:	2f78      	cmp	r7, #120	; 0x78
 800bf72:	4691      	mov	r9, r2
 800bf74:	4680      	mov	r8, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	469a      	mov	sl, r3
 800bf7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf7e:	d807      	bhi.n	800bf90 <_printf_i+0x28>
 800bf80:	2f62      	cmp	r7, #98	; 0x62
 800bf82:	d80a      	bhi.n	800bf9a <_printf_i+0x32>
 800bf84:	2f00      	cmp	r7, #0
 800bf86:	f000 80d8 	beq.w	800c13a <_printf_i+0x1d2>
 800bf8a:	2f58      	cmp	r7, #88	; 0x58
 800bf8c:	f000 80a3 	beq.w	800c0d6 <_printf_i+0x16e>
 800bf90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf98:	e03a      	b.n	800c010 <_printf_i+0xa8>
 800bf9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf9e:	2b15      	cmp	r3, #21
 800bfa0:	d8f6      	bhi.n	800bf90 <_printf_i+0x28>
 800bfa2:	a101      	add	r1, pc, #4	; (adr r1, 800bfa8 <_printf_i+0x40>)
 800bfa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfa8:	0800c001 	.word	0x0800c001
 800bfac:	0800c015 	.word	0x0800c015
 800bfb0:	0800bf91 	.word	0x0800bf91
 800bfb4:	0800bf91 	.word	0x0800bf91
 800bfb8:	0800bf91 	.word	0x0800bf91
 800bfbc:	0800bf91 	.word	0x0800bf91
 800bfc0:	0800c015 	.word	0x0800c015
 800bfc4:	0800bf91 	.word	0x0800bf91
 800bfc8:	0800bf91 	.word	0x0800bf91
 800bfcc:	0800bf91 	.word	0x0800bf91
 800bfd0:	0800bf91 	.word	0x0800bf91
 800bfd4:	0800c121 	.word	0x0800c121
 800bfd8:	0800c045 	.word	0x0800c045
 800bfdc:	0800c103 	.word	0x0800c103
 800bfe0:	0800bf91 	.word	0x0800bf91
 800bfe4:	0800bf91 	.word	0x0800bf91
 800bfe8:	0800c143 	.word	0x0800c143
 800bfec:	0800bf91 	.word	0x0800bf91
 800bff0:	0800c045 	.word	0x0800c045
 800bff4:	0800bf91 	.word	0x0800bf91
 800bff8:	0800bf91 	.word	0x0800bf91
 800bffc:	0800c10b 	.word	0x0800c10b
 800c000:	682b      	ldr	r3, [r5, #0]
 800c002:	1d1a      	adds	r2, r3, #4
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	602a      	str	r2, [r5, #0]
 800c008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c00c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c010:	2301      	movs	r3, #1
 800c012:	e0a3      	b.n	800c15c <_printf_i+0x1f4>
 800c014:	6820      	ldr	r0, [r4, #0]
 800c016:	6829      	ldr	r1, [r5, #0]
 800c018:	0606      	lsls	r6, r0, #24
 800c01a:	f101 0304 	add.w	r3, r1, #4
 800c01e:	d50a      	bpl.n	800c036 <_printf_i+0xce>
 800c020:	680e      	ldr	r6, [r1, #0]
 800c022:	602b      	str	r3, [r5, #0]
 800c024:	2e00      	cmp	r6, #0
 800c026:	da03      	bge.n	800c030 <_printf_i+0xc8>
 800c028:	232d      	movs	r3, #45	; 0x2d
 800c02a:	4276      	negs	r6, r6
 800c02c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c030:	485e      	ldr	r0, [pc, #376]	; (800c1ac <_printf_i+0x244>)
 800c032:	230a      	movs	r3, #10
 800c034:	e019      	b.n	800c06a <_printf_i+0x102>
 800c036:	680e      	ldr	r6, [r1, #0]
 800c038:	602b      	str	r3, [r5, #0]
 800c03a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c03e:	bf18      	it	ne
 800c040:	b236      	sxthne	r6, r6
 800c042:	e7ef      	b.n	800c024 <_printf_i+0xbc>
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	6820      	ldr	r0, [r4, #0]
 800c048:	1d19      	adds	r1, r3, #4
 800c04a:	6029      	str	r1, [r5, #0]
 800c04c:	0601      	lsls	r1, r0, #24
 800c04e:	d501      	bpl.n	800c054 <_printf_i+0xec>
 800c050:	681e      	ldr	r6, [r3, #0]
 800c052:	e002      	b.n	800c05a <_printf_i+0xf2>
 800c054:	0646      	lsls	r6, r0, #25
 800c056:	d5fb      	bpl.n	800c050 <_printf_i+0xe8>
 800c058:	881e      	ldrh	r6, [r3, #0]
 800c05a:	4854      	ldr	r0, [pc, #336]	; (800c1ac <_printf_i+0x244>)
 800c05c:	2f6f      	cmp	r7, #111	; 0x6f
 800c05e:	bf0c      	ite	eq
 800c060:	2308      	moveq	r3, #8
 800c062:	230a      	movne	r3, #10
 800c064:	2100      	movs	r1, #0
 800c066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c06a:	6865      	ldr	r5, [r4, #4]
 800c06c:	60a5      	str	r5, [r4, #8]
 800c06e:	2d00      	cmp	r5, #0
 800c070:	bfa2      	ittt	ge
 800c072:	6821      	ldrge	r1, [r4, #0]
 800c074:	f021 0104 	bicge.w	r1, r1, #4
 800c078:	6021      	strge	r1, [r4, #0]
 800c07a:	b90e      	cbnz	r6, 800c080 <_printf_i+0x118>
 800c07c:	2d00      	cmp	r5, #0
 800c07e:	d04d      	beq.n	800c11c <_printf_i+0x1b4>
 800c080:	4615      	mov	r5, r2
 800c082:	fbb6 f1f3 	udiv	r1, r6, r3
 800c086:	fb03 6711 	mls	r7, r3, r1, r6
 800c08a:	5dc7      	ldrb	r7, [r0, r7]
 800c08c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c090:	4637      	mov	r7, r6
 800c092:	42bb      	cmp	r3, r7
 800c094:	460e      	mov	r6, r1
 800c096:	d9f4      	bls.n	800c082 <_printf_i+0x11a>
 800c098:	2b08      	cmp	r3, #8
 800c09a:	d10b      	bne.n	800c0b4 <_printf_i+0x14c>
 800c09c:	6823      	ldr	r3, [r4, #0]
 800c09e:	07de      	lsls	r6, r3, #31
 800c0a0:	d508      	bpl.n	800c0b4 <_printf_i+0x14c>
 800c0a2:	6923      	ldr	r3, [r4, #16]
 800c0a4:	6861      	ldr	r1, [r4, #4]
 800c0a6:	4299      	cmp	r1, r3
 800c0a8:	bfde      	ittt	le
 800c0aa:	2330      	movle	r3, #48	; 0x30
 800c0ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0b4:	1b52      	subs	r2, r2, r5
 800c0b6:	6122      	str	r2, [r4, #16]
 800c0b8:	f8cd a000 	str.w	sl, [sp]
 800c0bc:	464b      	mov	r3, r9
 800c0be:	aa03      	add	r2, sp, #12
 800c0c0:	4621      	mov	r1, r4
 800c0c2:	4640      	mov	r0, r8
 800c0c4:	f7ff fee2 	bl	800be8c <_printf_common>
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	d14c      	bne.n	800c166 <_printf_i+0x1fe>
 800c0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d0:	b004      	add	sp, #16
 800c0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d6:	4835      	ldr	r0, [pc, #212]	; (800c1ac <_printf_i+0x244>)
 800c0d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c0dc:	6829      	ldr	r1, [r5, #0]
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c0e4:	6029      	str	r1, [r5, #0]
 800c0e6:	061d      	lsls	r5, r3, #24
 800c0e8:	d514      	bpl.n	800c114 <_printf_i+0x1ac>
 800c0ea:	07df      	lsls	r7, r3, #31
 800c0ec:	bf44      	itt	mi
 800c0ee:	f043 0320 	orrmi.w	r3, r3, #32
 800c0f2:	6023      	strmi	r3, [r4, #0]
 800c0f4:	b91e      	cbnz	r6, 800c0fe <_printf_i+0x196>
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	f023 0320 	bic.w	r3, r3, #32
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	2310      	movs	r3, #16
 800c100:	e7b0      	b.n	800c064 <_printf_i+0xfc>
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	f043 0320 	orr.w	r3, r3, #32
 800c108:	6023      	str	r3, [r4, #0]
 800c10a:	2378      	movs	r3, #120	; 0x78
 800c10c:	4828      	ldr	r0, [pc, #160]	; (800c1b0 <_printf_i+0x248>)
 800c10e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c112:	e7e3      	b.n	800c0dc <_printf_i+0x174>
 800c114:	0659      	lsls	r1, r3, #25
 800c116:	bf48      	it	mi
 800c118:	b2b6      	uxthmi	r6, r6
 800c11a:	e7e6      	b.n	800c0ea <_printf_i+0x182>
 800c11c:	4615      	mov	r5, r2
 800c11e:	e7bb      	b.n	800c098 <_printf_i+0x130>
 800c120:	682b      	ldr	r3, [r5, #0]
 800c122:	6826      	ldr	r6, [r4, #0]
 800c124:	6961      	ldr	r1, [r4, #20]
 800c126:	1d18      	adds	r0, r3, #4
 800c128:	6028      	str	r0, [r5, #0]
 800c12a:	0635      	lsls	r5, r6, #24
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	d501      	bpl.n	800c134 <_printf_i+0x1cc>
 800c130:	6019      	str	r1, [r3, #0]
 800c132:	e002      	b.n	800c13a <_printf_i+0x1d2>
 800c134:	0670      	lsls	r0, r6, #25
 800c136:	d5fb      	bpl.n	800c130 <_printf_i+0x1c8>
 800c138:	8019      	strh	r1, [r3, #0]
 800c13a:	2300      	movs	r3, #0
 800c13c:	6123      	str	r3, [r4, #16]
 800c13e:	4615      	mov	r5, r2
 800c140:	e7ba      	b.n	800c0b8 <_printf_i+0x150>
 800c142:	682b      	ldr	r3, [r5, #0]
 800c144:	1d1a      	adds	r2, r3, #4
 800c146:	602a      	str	r2, [r5, #0]
 800c148:	681d      	ldr	r5, [r3, #0]
 800c14a:	6862      	ldr	r2, [r4, #4]
 800c14c:	2100      	movs	r1, #0
 800c14e:	4628      	mov	r0, r5
 800c150:	f7f4 f856 	bl	8000200 <memchr>
 800c154:	b108      	cbz	r0, 800c15a <_printf_i+0x1f2>
 800c156:	1b40      	subs	r0, r0, r5
 800c158:	6060      	str	r0, [r4, #4]
 800c15a:	6863      	ldr	r3, [r4, #4]
 800c15c:	6123      	str	r3, [r4, #16]
 800c15e:	2300      	movs	r3, #0
 800c160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c164:	e7a8      	b.n	800c0b8 <_printf_i+0x150>
 800c166:	6923      	ldr	r3, [r4, #16]
 800c168:	462a      	mov	r2, r5
 800c16a:	4649      	mov	r1, r9
 800c16c:	4640      	mov	r0, r8
 800c16e:	47d0      	blx	sl
 800c170:	3001      	adds	r0, #1
 800c172:	d0ab      	beq.n	800c0cc <_printf_i+0x164>
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	079b      	lsls	r3, r3, #30
 800c178:	d413      	bmi.n	800c1a2 <_printf_i+0x23a>
 800c17a:	68e0      	ldr	r0, [r4, #12]
 800c17c:	9b03      	ldr	r3, [sp, #12]
 800c17e:	4298      	cmp	r0, r3
 800c180:	bfb8      	it	lt
 800c182:	4618      	movlt	r0, r3
 800c184:	e7a4      	b.n	800c0d0 <_printf_i+0x168>
 800c186:	2301      	movs	r3, #1
 800c188:	4632      	mov	r2, r6
 800c18a:	4649      	mov	r1, r9
 800c18c:	4640      	mov	r0, r8
 800c18e:	47d0      	blx	sl
 800c190:	3001      	adds	r0, #1
 800c192:	d09b      	beq.n	800c0cc <_printf_i+0x164>
 800c194:	3501      	adds	r5, #1
 800c196:	68e3      	ldr	r3, [r4, #12]
 800c198:	9903      	ldr	r1, [sp, #12]
 800c19a:	1a5b      	subs	r3, r3, r1
 800c19c:	42ab      	cmp	r3, r5
 800c19e:	dcf2      	bgt.n	800c186 <_printf_i+0x21e>
 800c1a0:	e7eb      	b.n	800c17a <_printf_i+0x212>
 800c1a2:	2500      	movs	r5, #0
 800c1a4:	f104 0619 	add.w	r6, r4, #25
 800c1a8:	e7f5      	b.n	800c196 <_printf_i+0x22e>
 800c1aa:	bf00      	nop
 800c1ac:	0800db81 	.word	0x0800db81
 800c1b0:	0800db92 	.word	0x0800db92

0800c1b4 <__retarget_lock_acquire_recursive>:
 800c1b4:	4770      	bx	lr

0800c1b6 <__retarget_lock_release_recursive>:
 800c1b6:	4770      	bx	lr

0800c1b8 <memmove>:
 800c1b8:	4288      	cmp	r0, r1
 800c1ba:	b510      	push	{r4, lr}
 800c1bc:	eb01 0402 	add.w	r4, r1, r2
 800c1c0:	d902      	bls.n	800c1c8 <memmove+0x10>
 800c1c2:	4284      	cmp	r4, r0
 800c1c4:	4623      	mov	r3, r4
 800c1c6:	d807      	bhi.n	800c1d8 <memmove+0x20>
 800c1c8:	1e43      	subs	r3, r0, #1
 800c1ca:	42a1      	cmp	r1, r4
 800c1cc:	d008      	beq.n	800c1e0 <memmove+0x28>
 800c1ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1d6:	e7f8      	b.n	800c1ca <memmove+0x12>
 800c1d8:	4402      	add	r2, r0
 800c1da:	4601      	mov	r1, r0
 800c1dc:	428a      	cmp	r2, r1
 800c1de:	d100      	bne.n	800c1e2 <memmove+0x2a>
 800c1e0:	bd10      	pop	{r4, pc}
 800c1e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1ea:	e7f7      	b.n	800c1dc <memmove+0x24>

0800c1ec <_realloc_r>:
 800c1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f0:	4680      	mov	r8, r0
 800c1f2:	4614      	mov	r4, r2
 800c1f4:	460e      	mov	r6, r1
 800c1f6:	b921      	cbnz	r1, 800c202 <_realloc_r+0x16>
 800c1f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	f7ff bc21 	b.w	800ba44 <_malloc_r>
 800c202:	b92a      	cbnz	r2, 800c210 <_realloc_r+0x24>
 800c204:	f7ff fbb2 	bl	800b96c <_free_r>
 800c208:	4625      	mov	r5, r4
 800c20a:	4628      	mov	r0, r5
 800c20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c210:	f000 f81b 	bl	800c24a <_malloc_usable_size_r>
 800c214:	4284      	cmp	r4, r0
 800c216:	4607      	mov	r7, r0
 800c218:	d802      	bhi.n	800c220 <_realloc_r+0x34>
 800c21a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c21e:	d812      	bhi.n	800c246 <_realloc_r+0x5a>
 800c220:	4621      	mov	r1, r4
 800c222:	4640      	mov	r0, r8
 800c224:	f7ff fc0e 	bl	800ba44 <_malloc_r>
 800c228:	4605      	mov	r5, r0
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d0ed      	beq.n	800c20a <_realloc_r+0x1e>
 800c22e:	42bc      	cmp	r4, r7
 800c230:	4622      	mov	r2, r4
 800c232:	4631      	mov	r1, r6
 800c234:	bf28      	it	cs
 800c236:	463a      	movcs	r2, r7
 800c238:	f7ff fb82 	bl	800b940 <memcpy>
 800c23c:	4631      	mov	r1, r6
 800c23e:	4640      	mov	r0, r8
 800c240:	f7ff fb94 	bl	800b96c <_free_r>
 800c244:	e7e1      	b.n	800c20a <_realloc_r+0x1e>
 800c246:	4635      	mov	r5, r6
 800c248:	e7df      	b.n	800c20a <_realloc_r+0x1e>

0800c24a <_malloc_usable_size_r>:
 800c24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c24e:	1f18      	subs	r0, r3, #4
 800c250:	2b00      	cmp	r3, #0
 800c252:	bfbc      	itt	lt
 800c254:	580b      	ldrlt	r3, [r1, r0]
 800c256:	18c0      	addlt	r0, r0, r3
 800c258:	4770      	bx	lr
 800c25a:	0000      	movs	r0, r0
 800c25c:	0000      	movs	r0, r0
	...

0800c260 <sin>:
 800c260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c262:	ec53 2b10 	vmov	r2, r3, d0
 800c266:	4828      	ldr	r0, [pc, #160]	; (800c308 <sin+0xa8>)
 800c268:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c26c:	4281      	cmp	r1, r0
 800c26e:	dc07      	bgt.n	800c280 <sin+0x20>
 800c270:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c300 <sin+0xa0>
 800c274:	2000      	movs	r0, #0
 800c276:	b005      	add	sp, #20
 800c278:	f85d eb04 	ldr.w	lr, [sp], #4
 800c27c:	f000 be6c 	b.w	800cf58 <__kernel_sin>
 800c280:	4822      	ldr	r0, [pc, #136]	; (800c30c <sin+0xac>)
 800c282:	4281      	cmp	r1, r0
 800c284:	dd09      	ble.n	800c29a <sin+0x3a>
 800c286:	ee10 0a10 	vmov	r0, s0
 800c28a:	4619      	mov	r1, r3
 800c28c:	f7f4 f80c 	bl	80002a8 <__aeabi_dsub>
 800c290:	ec41 0b10 	vmov	d0, r0, r1
 800c294:	b005      	add	sp, #20
 800c296:	f85d fb04 	ldr.w	pc, [sp], #4
 800c29a:	4668      	mov	r0, sp
 800c29c:	f000 f838 	bl	800c310 <__ieee754_rem_pio2>
 800c2a0:	f000 0003 	and.w	r0, r0, #3
 800c2a4:	2801      	cmp	r0, #1
 800c2a6:	d00c      	beq.n	800c2c2 <sin+0x62>
 800c2a8:	2802      	cmp	r0, #2
 800c2aa:	d011      	beq.n	800c2d0 <sin+0x70>
 800c2ac:	b9f0      	cbnz	r0, 800c2ec <sin+0x8c>
 800c2ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2b2:	ed9d 0b00 	vldr	d0, [sp]
 800c2b6:	2001      	movs	r0, #1
 800c2b8:	f000 fe4e 	bl	800cf58 <__kernel_sin>
 800c2bc:	ec51 0b10 	vmov	r0, r1, d0
 800c2c0:	e7e6      	b.n	800c290 <sin+0x30>
 800c2c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2c6:	ed9d 0b00 	vldr	d0, [sp]
 800c2ca:	f000 fa2d 	bl	800c728 <__kernel_cos>
 800c2ce:	e7f5      	b.n	800c2bc <sin+0x5c>
 800c2d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2d4:	ed9d 0b00 	vldr	d0, [sp]
 800c2d8:	2001      	movs	r0, #1
 800c2da:	f000 fe3d 	bl	800cf58 <__kernel_sin>
 800c2de:	ec53 2b10 	vmov	r2, r3, d0
 800c2e2:	ee10 0a10 	vmov	r0, s0
 800c2e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c2ea:	e7d1      	b.n	800c290 <sin+0x30>
 800c2ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2f0:	ed9d 0b00 	vldr	d0, [sp]
 800c2f4:	f000 fa18 	bl	800c728 <__kernel_cos>
 800c2f8:	e7f1      	b.n	800c2de <sin+0x7e>
 800c2fa:	bf00      	nop
 800c2fc:	f3af 8000 	nop.w
	...
 800c308:	3fe921fb 	.word	0x3fe921fb
 800c30c:	7fefffff 	.word	0x7fefffff

0800c310 <__ieee754_rem_pio2>:
 800c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	ed2d 8b02 	vpush	{d8}
 800c318:	ec55 4b10 	vmov	r4, r5, d0
 800c31c:	4bca      	ldr	r3, [pc, #808]	; (800c648 <__ieee754_rem_pio2+0x338>)
 800c31e:	b08b      	sub	sp, #44	; 0x2c
 800c320:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c324:	4598      	cmp	r8, r3
 800c326:	4682      	mov	sl, r0
 800c328:	9502      	str	r5, [sp, #8]
 800c32a:	dc08      	bgt.n	800c33e <__ieee754_rem_pio2+0x2e>
 800c32c:	2200      	movs	r2, #0
 800c32e:	2300      	movs	r3, #0
 800c330:	ed80 0b00 	vstr	d0, [r0]
 800c334:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c338:	f04f 0b00 	mov.w	fp, #0
 800c33c:	e028      	b.n	800c390 <__ieee754_rem_pio2+0x80>
 800c33e:	4bc3      	ldr	r3, [pc, #780]	; (800c64c <__ieee754_rem_pio2+0x33c>)
 800c340:	4598      	cmp	r8, r3
 800c342:	dc78      	bgt.n	800c436 <__ieee754_rem_pio2+0x126>
 800c344:	9b02      	ldr	r3, [sp, #8]
 800c346:	4ec2      	ldr	r6, [pc, #776]	; (800c650 <__ieee754_rem_pio2+0x340>)
 800c348:	2b00      	cmp	r3, #0
 800c34a:	ee10 0a10 	vmov	r0, s0
 800c34e:	a3b0      	add	r3, pc, #704	; (adr r3, 800c610 <__ieee754_rem_pio2+0x300>)
 800c350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c354:	4629      	mov	r1, r5
 800c356:	dd39      	ble.n	800c3cc <__ieee754_rem_pio2+0xbc>
 800c358:	f7f3 ffa6 	bl	80002a8 <__aeabi_dsub>
 800c35c:	45b0      	cmp	r8, r6
 800c35e:	4604      	mov	r4, r0
 800c360:	460d      	mov	r5, r1
 800c362:	d01b      	beq.n	800c39c <__ieee754_rem_pio2+0x8c>
 800c364:	a3ac      	add	r3, pc, #688	; (adr r3, 800c618 <__ieee754_rem_pio2+0x308>)
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	f7f3 ff9d 	bl	80002a8 <__aeabi_dsub>
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	e9ca 2300 	strd	r2, r3, [sl]
 800c376:	4620      	mov	r0, r4
 800c378:	4629      	mov	r1, r5
 800c37a:	f7f3 ff95 	bl	80002a8 <__aeabi_dsub>
 800c37e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c618 <__ieee754_rem_pio2+0x308>)
 800c380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c384:	f7f3 ff90 	bl	80002a8 <__aeabi_dsub>
 800c388:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c38c:	f04f 0b01 	mov.w	fp, #1
 800c390:	4658      	mov	r0, fp
 800c392:	b00b      	add	sp, #44	; 0x2c
 800c394:	ecbd 8b02 	vpop	{d8}
 800c398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c39c:	a3a0      	add	r3, pc, #640	; (adr r3, 800c620 <__ieee754_rem_pio2+0x310>)
 800c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a2:	f7f3 ff81 	bl	80002a8 <__aeabi_dsub>
 800c3a6:	a3a0      	add	r3, pc, #640	; (adr r3, 800c628 <__ieee754_rem_pio2+0x318>)
 800c3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	460d      	mov	r5, r1
 800c3b0:	f7f3 ff7a 	bl	80002a8 <__aeabi_dsub>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	e9ca 2300 	strd	r2, r3, [sl]
 800c3bc:	4620      	mov	r0, r4
 800c3be:	4629      	mov	r1, r5
 800c3c0:	f7f3 ff72 	bl	80002a8 <__aeabi_dsub>
 800c3c4:	a398      	add	r3, pc, #608	; (adr r3, 800c628 <__ieee754_rem_pio2+0x318>)
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	e7db      	b.n	800c384 <__ieee754_rem_pio2+0x74>
 800c3cc:	f7f3 ff6e 	bl	80002ac <__adddf3>
 800c3d0:	45b0      	cmp	r8, r6
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	460d      	mov	r5, r1
 800c3d6:	d016      	beq.n	800c406 <__ieee754_rem_pio2+0xf6>
 800c3d8:	a38f      	add	r3, pc, #572	; (adr r3, 800c618 <__ieee754_rem_pio2+0x308>)
 800c3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3de:	f7f3 ff65 	bl	80002ac <__adddf3>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	e9ca 2300 	strd	r2, r3, [sl]
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	f7f3 ff5b 	bl	80002a8 <__aeabi_dsub>
 800c3f2:	a389      	add	r3, pc, #548	; (adr r3, 800c618 <__ieee754_rem_pio2+0x308>)
 800c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f8:	f7f3 ff58 	bl	80002ac <__adddf3>
 800c3fc:	f04f 3bff 	mov.w	fp, #4294967295
 800c400:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c404:	e7c4      	b.n	800c390 <__ieee754_rem_pio2+0x80>
 800c406:	a386      	add	r3, pc, #536	; (adr r3, 800c620 <__ieee754_rem_pio2+0x310>)
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	f7f3 ff4e 	bl	80002ac <__adddf3>
 800c410:	a385      	add	r3, pc, #532	; (adr r3, 800c628 <__ieee754_rem_pio2+0x318>)
 800c412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c416:	4604      	mov	r4, r0
 800c418:	460d      	mov	r5, r1
 800c41a:	f7f3 ff47 	bl	80002ac <__adddf3>
 800c41e:	4602      	mov	r2, r0
 800c420:	460b      	mov	r3, r1
 800c422:	e9ca 2300 	strd	r2, r3, [sl]
 800c426:	4620      	mov	r0, r4
 800c428:	4629      	mov	r1, r5
 800c42a:	f7f3 ff3d 	bl	80002a8 <__aeabi_dsub>
 800c42e:	a37e      	add	r3, pc, #504	; (adr r3, 800c628 <__ieee754_rem_pio2+0x318>)
 800c430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c434:	e7e0      	b.n	800c3f8 <__ieee754_rem_pio2+0xe8>
 800c436:	4b87      	ldr	r3, [pc, #540]	; (800c654 <__ieee754_rem_pio2+0x344>)
 800c438:	4598      	cmp	r8, r3
 800c43a:	f300 80d9 	bgt.w	800c5f0 <__ieee754_rem_pio2+0x2e0>
 800c43e:	f000 fe49 	bl	800d0d4 <fabs>
 800c442:	ec55 4b10 	vmov	r4, r5, d0
 800c446:	ee10 0a10 	vmov	r0, s0
 800c44a:	a379      	add	r3, pc, #484	; (adr r3, 800c630 <__ieee754_rem_pio2+0x320>)
 800c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c450:	4629      	mov	r1, r5
 800c452:	f7f4 f8e1 	bl	8000618 <__aeabi_dmul>
 800c456:	4b80      	ldr	r3, [pc, #512]	; (800c658 <__ieee754_rem_pio2+0x348>)
 800c458:	2200      	movs	r2, #0
 800c45a:	f7f3 ff27 	bl	80002ac <__adddf3>
 800c45e:	f7f4 fb75 	bl	8000b4c <__aeabi_d2iz>
 800c462:	4683      	mov	fp, r0
 800c464:	f7f4 f86e 	bl	8000544 <__aeabi_i2d>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	ec43 2b18 	vmov	d8, r2, r3
 800c470:	a367      	add	r3, pc, #412	; (adr r3, 800c610 <__ieee754_rem_pio2+0x300>)
 800c472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c476:	f7f4 f8cf 	bl	8000618 <__aeabi_dmul>
 800c47a:	4602      	mov	r2, r0
 800c47c:	460b      	mov	r3, r1
 800c47e:	4620      	mov	r0, r4
 800c480:	4629      	mov	r1, r5
 800c482:	f7f3 ff11 	bl	80002a8 <__aeabi_dsub>
 800c486:	a364      	add	r3, pc, #400	; (adr r3, 800c618 <__ieee754_rem_pio2+0x308>)
 800c488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48c:	4606      	mov	r6, r0
 800c48e:	460f      	mov	r7, r1
 800c490:	ec51 0b18 	vmov	r0, r1, d8
 800c494:	f7f4 f8c0 	bl	8000618 <__aeabi_dmul>
 800c498:	f1bb 0f1f 	cmp.w	fp, #31
 800c49c:	4604      	mov	r4, r0
 800c49e:	460d      	mov	r5, r1
 800c4a0:	dc0d      	bgt.n	800c4be <__ieee754_rem_pio2+0x1ae>
 800c4a2:	4b6e      	ldr	r3, [pc, #440]	; (800c65c <__ieee754_rem_pio2+0x34c>)
 800c4a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ac:	4543      	cmp	r3, r8
 800c4ae:	d006      	beq.n	800c4be <__ieee754_rem_pio2+0x1ae>
 800c4b0:	4622      	mov	r2, r4
 800c4b2:	462b      	mov	r3, r5
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	f7f3 fef6 	bl	80002a8 <__aeabi_dsub>
 800c4bc:	e00f      	b.n	800c4de <__ieee754_rem_pio2+0x1ce>
 800c4be:	462b      	mov	r3, r5
 800c4c0:	4622      	mov	r2, r4
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	4639      	mov	r1, r7
 800c4c6:	f7f3 feef 	bl	80002a8 <__aeabi_dsub>
 800c4ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c4ce:	9303      	str	r3, [sp, #12]
 800c4d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c4d4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c4d8:	f1b8 0f10 	cmp.w	r8, #16
 800c4dc:	dc02      	bgt.n	800c4e4 <__ieee754_rem_pio2+0x1d4>
 800c4de:	e9ca 0100 	strd	r0, r1, [sl]
 800c4e2:	e039      	b.n	800c558 <__ieee754_rem_pio2+0x248>
 800c4e4:	a34e      	add	r3, pc, #312	; (adr r3, 800c620 <__ieee754_rem_pio2+0x310>)
 800c4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ea:	ec51 0b18 	vmov	r0, r1, d8
 800c4ee:	f7f4 f893 	bl	8000618 <__aeabi_dmul>
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	460d      	mov	r5, r1
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	4639      	mov	r1, r7
 800c4fe:	f7f3 fed3 	bl	80002a8 <__aeabi_dsub>
 800c502:	4602      	mov	r2, r0
 800c504:	460b      	mov	r3, r1
 800c506:	4680      	mov	r8, r0
 800c508:	4689      	mov	r9, r1
 800c50a:	4630      	mov	r0, r6
 800c50c:	4639      	mov	r1, r7
 800c50e:	f7f3 fecb 	bl	80002a8 <__aeabi_dsub>
 800c512:	4622      	mov	r2, r4
 800c514:	462b      	mov	r3, r5
 800c516:	f7f3 fec7 	bl	80002a8 <__aeabi_dsub>
 800c51a:	a343      	add	r3, pc, #268	; (adr r3, 800c628 <__ieee754_rem_pio2+0x318>)
 800c51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c520:	4604      	mov	r4, r0
 800c522:	460d      	mov	r5, r1
 800c524:	ec51 0b18 	vmov	r0, r1, d8
 800c528:	f7f4 f876 	bl	8000618 <__aeabi_dmul>
 800c52c:	4622      	mov	r2, r4
 800c52e:	462b      	mov	r3, r5
 800c530:	f7f3 feba 	bl	80002a8 <__aeabi_dsub>
 800c534:	4602      	mov	r2, r0
 800c536:	460b      	mov	r3, r1
 800c538:	4604      	mov	r4, r0
 800c53a:	460d      	mov	r5, r1
 800c53c:	4640      	mov	r0, r8
 800c53e:	4649      	mov	r1, r9
 800c540:	f7f3 feb2 	bl	80002a8 <__aeabi_dsub>
 800c544:	9a03      	ldr	r2, [sp, #12]
 800c546:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	2b31      	cmp	r3, #49	; 0x31
 800c54e:	dc24      	bgt.n	800c59a <__ieee754_rem_pio2+0x28a>
 800c550:	e9ca 0100 	strd	r0, r1, [sl]
 800c554:	4646      	mov	r6, r8
 800c556:	464f      	mov	r7, r9
 800c558:	e9da 8900 	ldrd	r8, r9, [sl]
 800c55c:	4630      	mov	r0, r6
 800c55e:	4642      	mov	r2, r8
 800c560:	464b      	mov	r3, r9
 800c562:	4639      	mov	r1, r7
 800c564:	f7f3 fea0 	bl	80002a8 <__aeabi_dsub>
 800c568:	462b      	mov	r3, r5
 800c56a:	4622      	mov	r2, r4
 800c56c:	f7f3 fe9c 	bl	80002a8 <__aeabi_dsub>
 800c570:	9b02      	ldr	r3, [sp, #8]
 800c572:	2b00      	cmp	r3, #0
 800c574:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c578:	f6bf af0a 	bge.w	800c390 <__ieee754_rem_pio2+0x80>
 800c57c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c580:	f8ca 3004 	str.w	r3, [sl, #4]
 800c584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c588:	f8ca 8000 	str.w	r8, [sl]
 800c58c:	f8ca 0008 	str.w	r0, [sl, #8]
 800c590:	f8ca 300c 	str.w	r3, [sl, #12]
 800c594:	f1cb 0b00 	rsb	fp, fp, #0
 800c598:	e6fa      	b.n	800c390 <__ieee754_rem_pio2+0x80>
 800c59a:	a327      	add	r3, pc, #156	; (adr r3, 800c638 <__ieee754_rem_pio2+0x328>)
 800c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a0:	ec51 0b18 	vmov	r0, r1, d8
 800c5a4:	f7f4 f838 	bl	8000618 <__aeabi_dmul>
 800c5a8:	4604      	mov	r4, r0
 800c5aa:	460d      	mov	r5, r1
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4640      	mov	r0, r8
 800c5b2:	4649      	mov	r1, r9
 800c5b4:	f7f3 fe78 	bl	80002a8 <__aeabi_dsub>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4606      	mov	r6, r0
 800c5be:	460f      	mov	r7, r1
 800c5c0:	4640      	mov	r0, r8
 800c5c2:	4649      	mov	r1, r9
 800c5c4:	f7f3 fe70 	bl	80002a8 <__aeabi_dsub>
 800c5c8:	4622      	mov	r2, r4
 800c5ca:	462b      	mov	r3, r5
 800c5cc:	f7f3 fe6c 	bl	80002a8 <__aeabi_dsub>
 800c5d0:	a31b      	add	r3, pc, #108	; (adr r3, 800c640 <__ieee754_rem_pio2+0x330>)
 800c5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	460d      	mov	r5, r1
 800c5da:	ec51 0b18 	vmov	r0, r1, d8
 800c5de:	f7f4 f81b 	bl	8000618 <__aeabi_dmul>
 800c5e2:	4622      	mov	r2, r4
 800c5e4:	462b      	mov	r3, r5
 800c5e6:	f7f3 fe5f 	bl	80002a8 <__aeabi_dsub>
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	460d      	mov	r5, r1
 800c5ee:	e75f      	b.n	800c4b0 <__ieee754_rem_pio2+0x1a0>
 800c5f0:	4b1b      	ldr	r3, [pc, #108]	; (800c660 <__ieee754_rem_pio2+0x350>)
 800c5f2:	4598      	cmp	r8, r3
 800c5f4:	dd36      	ble.n	800c664 <__ieee754_rem_pio2+0x354>
 800c5f6:	ee10 2a10 	vmov	r2, s0
 800c5fa:	462b      	mov	r3, r5
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	4629      	mov	r1, r5
 800c600:	f7f3 fe52 	bl	80002a8 <__aeabi_dsub>
 800c604:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c608:	e9ca 0100 	strd	r0, r1, [sl]
 800c60c:	e694      	b.n	800c338 <__ieee754_rem_pio2+0x28>
 800c60e:	bf00      	nop
 800c610:	54400000 	.word	0x54400000
 800c614:	3ff921fb 	.word	0x3ff921fb
 800c618:	1a626331 	.word	0x1a626331
 800c61c:	3dd0b461 	.word	0x3dd0b461
 800c620:	1a600000 	.word	0x1a600000
 800c624:	3dd0b461 	.word	0x3dd0b461
 800c628:	2e037073 	.word	0x2e037073
 800c62c:	3ba3198a 	.word	0x3ba3198a
 800c630:	6dc9c883 	.word	0x6dc9c883
 800c634:	3fe45f30 	.word	0x3fe45f30
 800c638:	2e000000 	.word	0x2e000000
 800c63c:	3ba3198a 	.word	0x3ba3198a
 800c640:	252049c1 	.word	0x252049c1
 800c644:	397b839a 	.word	0x397b839a
 800c648:	3fe921fb 	.word	0x3fe921fb
 800c64c:	4002d97b 	.word	0x4002d97b
 800c650:	3ff921fb 	.word	0x3ff921fb
 800c654:	413921fb 	.word	0x413921fb
 800c658:	3fe00000 	.word	0x3fe00000
 800c65c:	0800dba4 	.word	0x0800dba4
 800c660:	7fefffff 	.word	0x7fefffff
 800c664:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c668:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c66c:	ee10 0a10 	vmov	r0, s0
 800c670:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c674:	ee10 6a10 	vmov	r6, s0
 800c678:	460f      	mov	r7, r1
 800c67a:	f7f4 fa67 	bl	8000b4c <__aeabi_d2iz>
 800c67e:	f7f3 ff61 	bl	8000544 <__aeabi_i2d>
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	4630      	mov	r0, r6
 800c688:	4639      	mov	r1, r7
 800c68a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c68e:	f7f3 fe0b 	bl	80002a8 <__aeabi_dsub>
 800c692:	4b23      	ldr	r3, [pc, #140]	; (800c720 <__ieee754_rem_pio2+0x410>)
 800c694:	2200      	movs	r2, #0
 800c696:	f7f3 ffbf 	bl	8000618 <__aeabi_dmul>
 800c69a:	460f      	mov	r7, r1
 800c69c:	4606      	mov	r6, r0
 800c69e:	f7f4 fa55 	bl	8000b4c <__aeabi_d2iz>
 800c6a2:	f7f3 ff4f 	bl	8000544 <__aeabi_i2d>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	4639      	mov	r1, r7
 800c6ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c6b2:	f7f3 fdf9 	bl	80002a8 <__aeabi_dsub>
 800c6b6:	4b1a      	ldr	r3, [pc, #104]	; (800c720 <__ieee754_rem_pio2+0x410>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	f7f3 ffad 	bl	8000618 <__aeabi_dmul>
 800c6be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c6c2:	ad04      	add	r5, sp, #16
 800c6c4:	f04f 0803 	mov.w	r8, #3
 800c6c8:	46a9      	mov	r9, r5
 800c6ca:	2600      	movs	r6, #0
 800c6cc:	2700      	movs	r7, #0
 800c6ce:	4632      	mov	r2, r6
 800c6d0:	463b      	mov	r3, r7
 800c6d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c6d6:	46c3      	mov	fp, r8
 800c6d8:	3d08      	subs	r5, #8
 800c6da:	f108 38ff 	add.w	r8, r8, #4294967295
 800c6de:	f7f4 fa03 	bl	8000ae8 <__aeabi_dcmpeq>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d1f3      	bne.n	800c6ce <__ieee754_rem_pio2+0x3be>
 800c6e6:	4b0f      	ldr	r3, [pc, #60]	; (800c724 <__ieee754_rem_pio2+0x414>)
 800c6e8:	9301      	str	r3, [sp, #4]
 800c6ea:	2302      	movs	r3, #2
 800c6ec:	9300      	str	r3, [sp, #0]
 800c6ee:	4622      	mov	r2, r4
 800c6f0:	465b      	mov	r3, fp
 800c6f2:	4651      	mov	r1, sl
 800c6f4:	4648      	mov	r0, r9
 800c6f6:	f000 f8df 	bl	800c8b8 <__kernel_rem_pio2>
 800c6fa:	9b02      	ldr	r3, [sp, #8]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	4683      	mov	fp, r0
 800c700:	f6bf ae46 	bge.w	800c390 <__ieee754_rem_pio2+0x80>
 800c704:	e9da 2100 	ldrd	r2, r1, [sl]
 800c708:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c70c:	e9ca 2300 	strd	r2, r3, [sl]
 800c710:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c714:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c718:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c71c:	e73a      	b.n	800c594 <__ieee754_rem_pio2+0x284>
 800c71e:	bf00      	nop
 800c720:	41700000 	.word	0x41700000
 800c724:	0800dc24 	.word	0x0800dc24

0800c728 <__kernel_cos>:
 800c728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c72c:	ec57 6b10 	vmov	r6, r7, d0
 800c730:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c734:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c738:	ed8d 1b00 	vstr	d1, [sp]
 800c73c:	da07      	bge.n	800c74e <__kernel_cos+0x26>
 800c73e:	ee10 0a10 	vmov	r0, s0
 800c742:	4639      	mov	r1, r7
 800c744:	f7f4 fa02 	bl	8000b4c <__aeabi_d2iz>
 800c748:	2800      	cmp	r0, #0
 800c74a:	f000 8088 	beq.w	800c85e <__kernel_cos+0x136>
 800c74e:	4632      	mov	r2, r6
 800c750:	463b      	mov	r3, r7
 800c752:	4630      	mov	r0, r6
 800c754:	4639      	mov	r1, r7
 800c756:	f7f3 ff5f 	bl	8000618 <__aeabi_dmul>
 800c75a:	4b51      	ldr	r3, [pc, #324]	; (800c8a0 <__kernel_cos+0x178>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	4604      	mov	r4, r0
 800c760:	460d      	mov	r5, r1
 800c762:	f7f3 ff59 	bl	8000618 <__aeabi_dmul>
 800c766:	a340      	add	r3, pc, #256	; (adr r3, 800c868 <__kernel_cos+0x140>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	4682      	mov	sl, r0
 800c76e:	468b      	mov	fp, r1
 800c770:	4620      	mov	r0, r4
 800c772:	4629      	mov	r1, r5
 800c774:	f7f3 ff50 	bl	8000618 <__aeabi_dmul>
 800c778:	a33d      	add	r3, pc, #244	; (adr r3, 800c870 <__kernel_cos+0x148>)
 800c77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77e:	f7f3 fd95 	bl	80002ac <__adddf3>
 800c782:	4622      	mov	r2, r4
 800c784:	462b      	mov	r3, r5
 800c786:	f7f3 ff47 	bl	8000618 <__aeabi_dmul>
 800c78a:	a33b      	add	r3, pc, #236	; (adr r3, 800c878 <__kernel_cos+0x150>)
 800c78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c790:	f7f3 fd8a 	bl	80002a8 <__aeabi_dsub>
 800c794:	4622      	mov	r2, r4
 800c796:	462b      	mov	r3, r5
 800c798:	f7f3 ff3e 	bl	8000618 <__aeabi_dmul>
 800c79c:	a338      	add	r3, pc, #224	; (adr r3, 800c880 <__kernel_cos+0x158>)
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	f7f3 fd83 	bl	80002ac <__adddf3>
 800c7a6:	4622      	mov	r2, r4
 800c7a8:	462b      	mov	r3, r5
 800c7aa:	f7f3 ff35 	bl	8000618 <__aeabi_dmul>
 800c7ae:	a336      	add	r3, pc, #216	; (adr r3, 800c888 <__kernel_cos+0x160>)
 800c7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b4:	f7f3 fd78 	bl	80002a8 <__aeabi_dsub>
 800c7b8:	4622      	mov	r2, r4
 800c7ba:	462b      	mov	r3, r5
 800c7bc:	f7f3 ff2c 	bl	8000618 <__aeabi_dmul>
 800c7c0:	a333      	add	r3, pc, #204	; (adr r3, 800c890 <__kernel_cos+0x168>)
 800c7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c6:	f7f3 fd71 	bl	80002ac <__adddf3>
 800c7ca:	4622      	mov	r2, r4
 800c7cc:	462b      	mov	r3, r5
 800c7ce:	f7f3 ff23 	bl	8000618 <__aeabi_dmul>
 800c7d2:	4622      	mov	r2, r4
 800c7d4:	462b      	mov	r3, r5
 800c7d6:	f7f3 ff1f 	bl	8000618 <__aeabi_dmul>
 800c7da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7de:	4604      	mov	r4, r0
 800c7e0:	460d      	mov	r5, r1
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	4639      	mov	r1, r7
 800c7e6:	f7f3 ff17 	bl	8000618 <__aeabi_dmul>
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f7f3 fd59 	bl	80002a8 <__aeabi_dsub>
 800c7f6:	4b2b      	ldr	r3, [pc, #172]	; (800c8a4 <__kernel_cos+0x17c>)
 800c7f8:	4598      	cmp	r8, r3
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	460f      	mov	r7, r1
 800c7fe:	dc10      	bgt.n	800c822 <__kernel_cos+0xfa>
 800c800:	4602      	mov	r2, r0
 800c802:	460b      	mov	r3, r1
 800c804:	4650      	mov	r0, sl
 800c806:	4659      	mov	r1, fp
 800c808:	f7f3 fd4e 	bl	80002a8 <__aeabi_dsub>
 800c80c:	460b      	mov	r3, r1
 800c80e:	4926      	ldr	r1, [pc, #152]	; (800c8a8 <__kernel_cos+0x180>)
 800c810:	4602      	mov	r2, r0
 800c812:	2000      	movs	r0, #0
 800c814:	f7f3 fd48 	bl	80002a8 <__aeabi_dsub>
 800c818:	ec41 0b10 	vmov	d0, r0, r1
 800c81c:	b003      	add	sp, #12
 800c81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c822:	4b22      	ldr	r3, [pc, #136]	; (800c8ac <__kernel_cos+0x184>)
 800c824:	4920      	ldr	r1, [pc, #128]	; (800c8a8 <__kernel_cos+0x180>)
 800c826:	4598      	cmp	r8, r3
 800c828:	bfcc      	ite	gt
 800c82a:	4d21      	ldrgt	r5, [pc, #132]	; (800c8b0 <__kernel_cos+0x188>)
 800c82c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c830:	2400      	movs	r4, #0
 800c832:	4622      	mov	r2, r4
 800c834:	462b      	mov	r3, r5
 800c836:	2000      	movs	r0, #0
 800c838:	f7f3 fd36 	bl	80002a8 <__aeabi_dsub>
 800c83c:	4622      	mov	r2, r4
 800c83e:	4680      	mov	r8, r0
 800c840:	4689      	mov	r9, r1
 800c842:	462b      	mov	r3, r5
 800c844:	4650      	mov	r0, sl
 800c846:	4659      	mov	r1, fp
 800c848:	f7f3 fd2e 	bl	80002a8 <__aeabi_dsub>
 800c84c:	4632      	mov	r2, r6
 800c84e:	463b      	mov	r3, r7
 800c850:	f7f3 fd2a 	bl	80002a8 <__aeabi_dsub>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	4640      	mov	r0, r8
 800c85a:	4649      	mov	r1, r9
 800c85c:	e7da      	b.n	800c814 <__kernel_cos+0xec>
 800c85e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c898 <__kernel_cos+0x170>
 800c862:	e7db      	b.n	800c81c <__kernel_cos+0xf4>
 800c864:	f3af 8000 	nop.w
 800c868:	be8838d4 	.word	0xbe8838d4
 800c86c:	bda8fae9 	.word	0xbda8fae9
 800c870:	bdb4b1c4 	.word	0xbdb4b1c4
 800c874:	3e21ee9e 	.word	0x3e21ee9e
 800c878:	809c52ad 	.word	0x809c52ad
 800c87c:	3e927e4f 	.word	0x3e927e4f
 800c880:	19cb1590 	.word	0x19cb1590
 800c884:	3efa01a0 	.word	0x3efa01a0
 800c888:	16c15177 	.word	0x16c15177
 800c88c:	3f56c16c 	.word	0x3f56c16c
 800c890:	5555554c 	.word	0x5555554c
 800c894:	3fa55555 	.word	0x3fa55555
 800c898:	00000000 	.word	0x00000000
 800c89c:	3ff00000 	.word	0x3ff00000
 800c8a0:	3fe00000 	.word	0x3fe00000
 800c8a4:	3fd33332 	.word	0x3fd33332
 800c8a8:	3ff00000 	.word	0x3ff00000
 800c8ac:	3fe90000 	.word	0x3fe90000
 800c8b0:	3fd20000 	.word	0x3fd20000
 800c8b4:	00000000 	.word	0x00000000

0800c8b8 <__kernel_rem_pio2>:
 800c8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8bc:	ed2d 8b02 	vpush	{d8}
 800c8c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c8c4:	f112 0f14 	cmn.w	r2, #20
 800c8c8:	9308      	str	r3, [sp, #32]
 800c8ca:	9101      	str	r1, [sp, #4]
 800c8cc:	4bc4      	ldr	r3, [pc, #784]	; (800cbe0 <__kernel_rem_pio2+0x328>)
 800c8ce:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c8d0:	900b      	str	r0, [sp, #44]	; 0x2c
 800c8d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8d6:	9302      	str	r3, [sp, #8]
 800c8d8:	9b08      	ldr	r3, [sp, #32]
 800c8da:	f103 33ff 	add.w	r3, r3, #4294967295
 800c8de:	bfa8      	it	ge
 800c8e0:	1ed4      	subge	r4, r2, #3
 800c8e2:	9306      	str	r3, [sp, #24]
 800c8e4:	bfb2      	itee	lt
 800c8e6:	2400      	movlt	r4, #0
 800c8e8:	2318      	movge	r3, #24
 800c8ea:	fb94 f4f3 	sdivge	r4, r4, r3
 800c8ee:	f06f 0317 	mvn.w	r3, #23
 800c8f2:	fb04 3303 	mla	r3, r4, r3, r3
 800c8f6:	eb03 0a02 	add.w	sl, r3, r2
 800c8fa:	9b02      	ldr	r3, [sp, #8]
 800c8fc:	9a06      	ldr	r2, [sp, #24]
 800c8fe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800cbd0 <__kernel_rem_pio2+0x318>
 800c902:	eb03 0802 	add.w	r8, r3, r2
 800c906:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c908:	1aa7      	subs	r7, r4, r2
 800c90a:	ae22      	add	r6, sp, #136	; 0x88
 800c90c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c910:	2500      	movs	r5, #0
 800c912:	4545      	cmp	r5, r8
 800c914:	dd13      	ble.n	800c93e <__kernel_rem_pio2+0x86>
 800c916:	9b08      	ldr	r3, [sp, #32]
 800c918:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800cbd0 <__kernel_rem_pio2+0x318>
 800c91c:	aa22      	add	r2, sp, #136	; 0x88
 800c91e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c922:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c926:	f04f 0800 	mov.w	r8, #0
 800c92a:	9b02      	ldr	r3, [sp, #8]
 800c92c:	4598      	cmp	r8, r3
 800c92e:	dc2f      	bgt.n	800c990 <__kernel_rem_pio2+0xd8>
 800c930:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c934:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800c938:	462f      	mov	r7, r5
 800c93a:	2600      	movs	r6, #0
 800c93c:	e01b      	b.n	800c976 <__kernel_rem_pio2+0xbe>
 800c93e:	42ef      	cmn	r7, r5
 800c940:	d407      	bmi.n	800c952 <__kernel_rem_pio2+0x9a>
 800c942:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c946:	f7f3 fdfd 	bl	8000544 <__aeabi_i2d>
 800c94a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c94e:	3501      	adds	r5, #1
 800c950:	e7df      	b.n	800c912 <__kernel_rem_pio2+0x5a>
 800c952:	ec51 0b18 	vmov	r0, r1, d8
 800c956:	e7f8      	b.n	800c94a <__kernel_rem_pio2+0x92>
 800c958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c95c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c960:	f7f3 fe5a 	bl	8000618 <__aeabi_dmul>
 800c964:	4602      	mov	r2, r0
 800c966:	460b      	mov	r3, r1
 800c968:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c96c:	f7f3 fc9e 	bl	80002ac <__adddf3>
 800c970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c974:	3601      	adds	r6, #1
 800c976:	9b06      	ldr	r3, [sp, #24]
 800c978:	429e      	cmp	r6, r3
 800c97a:	f1a7 0708 	sub.w	r7, r7, #8
 800c97e:	ddeb      	ble.n	800c958 <__kernel_rem_pio2+0xa0>
 800c980:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c984:	f108 0801 	add.w	r8, r8, #1
 800c988:	ecab 7b02 	vstmia	fp!, {d7}
 800c98c:	3508      	adds	r5, #8
 800c98e:	e7cc      	b.n	800c92a <__kernel_rem_pio2+0x72>
 800c990:	9b02      	ldr	r3, [sp, #8]
 800c992:	aa0e      	add	r2, sp, #56	; 0x38
 800c994:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c998:	930d      	str	r3, [sp, #52]	; 0x34
 800c99a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c99c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c9a0:	9c02      	ldr	r4, [sp, #8]
 800c9a2:	930c      	str	r3, [sp, #48]	; 0x30
 800c9a4:	00e3      	lsls	r3, r4, #3
 800c9a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c9a8:	ab9a      	add	r3, sp, #616	; 0x268
 800c9aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c9ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c9b2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800c9b6:	ab72      	add	r3, sp, #456	; 0x1c8
 800c9b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c9bc:	46c3      	mov	fp, r8
 800c9be:	46a1      	mov	r9, r4
 800c9c0:	f1b9 0f00 	cmp.w	r9, #0
 800c9c4:	f1a5 0508 	sub.w	r5, r5, #8
 800c9c8:	dc77      	bgt.n	800caba <__kernel_rem_pio2+0x202>
 800c9ca:	ec47 6b10 	vmov	d0, r6, r7
 800c9ce:	4650      	mov	r0, sl
 800c9d0:	f000 fc0a 	bl	800d1e8 <scalbn>
 800c9d4:	ec57 6b10 	vmov	r6, r7, d0
 800c9d8:	2200      	movs	r2, #0
 800c9da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c9de:	ee10 0a10 	vmov	r0, s0
 800c9e2:	4639      	mov	r1, r7
 800c9e4:	f7f3 fe18 	bl	8000618 <__aeabi_dmul>
 800c9e8:	ec41 0b10 	vmov	d0, r0, r1
 800c9ec:	f000 fb7c 	bl	800d0e8 <floor>
 800c9f0:	4b7c      	ldr	r3, [pc, #496]	; (800cbe4 <__kernel_rem_pio2+0x32c>)
 800c9f2:	ec51 0b10 	vmov	r0, r1, d0
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f7f3 fe0e 	bl	8000618 <__aeabi_dmul>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	460b      	mov	r3, r1
 800ca00:	4630      	mov	r0, r6
 800ca02:	4639      	mov	r1, r7
 800ca04:	f7f3 fc50 	bl	80002a8 <__aeabi_dsub>
 800ca08:	460f      	mov	r7, r1
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	f7f4 f89e 	bl	8000b4c <__aeabi_d2iz>
 800ca10:	9004      	str	r0, [sp, #16]
 800ca12:	f7f3 fd97 	bl	8000544 <__aeabi_i2d>
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	4639      	mov	r1, r7
 800ca1e:	f7f3 fc43 	bl	80002a8 <__aeabi_dsub>
 800ca22:	f1ba 0f00 	cmp.w	sl, #0
 800ca26:	4606      	mov	r6, r0
 800ca28:	460f      	mov	r7, r1
 800ca2a:	dd6d      	ble.n	800cb08 <__kernel_rem_pio2+0x250>
 800ca2c:	1e62      	subs	r2, r4, #1
 800ca2e:	ab0e      	add	r3, sp, #56	; 0x38
 800ca30:	9d04      	ldr	r5, [sp, #16]
 800ca32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ca36:	f1ca 0118 	rsb	r1, sl, #24
 800ca3a:	fa40 f301 	asr.w	r3, r0, r1
 800ca3e:	441d      	add	r5, r3
 800ca40:	408b      	lsls	r3, r1
 800ca42:	1ac0      	subs	r0, r0, r3
 800ca44:	ab0e      	add	r3, sp, #56	; 0x38
 800ca46:	9504      	str	r5, [sp, #16]
 800ca48:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ca4c:	f1ca 0317 	rsb	r3, sl, #23
 800ca50:	fa40 fb03 	asr.w	fp, r0, r3
 800ca54:	f1bb 0f00 	cmp.w	fp, #0
 800ca58:	dd65      	ble.n	800cb26 <__kernel_rem_pio2+0x26e>
 800ca5a:	9b04      	ldr	r3, [sp, #16]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	3301      	adds	r3, #1
 800ca60:	9304      	str	r3, [sp, #16]
 800ca62:	4615      	mov	r5, r2
 800ca64:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ca68:	4294      	cmp	r4, r2
 800ca6a:	f300 809c 	bgt.w	800cba6 <__kernel_rem_pio2+0x2ee>
 800ca6e:	f1ba 0f00 	cmp.w	sl, #0
 800ca72:	dd07      	ble.n	800ca84 <__kernel_rem_pio2+0x1cc>
 800ca74:	f1ba 0f01 	cmp.w	sl, #1
 800ca78:	f000 80c0 	beq.w	800cbfc <__kernel_rem_pio2+0x344>
 800ca7c:	f1ba 0f02 	cmp.w	sl, #2
 800ca80:	f000 80c6 	beq.w	800cc10 <__kernel_rem_pio2+0x358>
 800ca84:	f1bb 0f02 	cmp.w	fp, #2
 800ca88:	d14d      	bne.n	800cb26 <__kernel_rem_pio2+0x26e>
 800ca8a:	4632      	mov	r2, r6
 800ca8c:	463b      	mov	r3, r7
 800ca8e:	4956      	ldr	r1, [pc, #344]	; (800cbe8 <__kernel_rem_pio2+0x330>)
 800ca90:	2000      	movs	r0, #0
 800ca92:	f7f3 fc09 	bl	80002a8 <__aeabi_dsub>
 800ca96:	4606      	mov	r6, r0
 800ca98:	460f      	mov	r7, r1
 800ca9a:	2d00      	cmp	r5, #0
 800ca9c:	d043      	beq.n	800cb26 <__kernel_rem_pio2+0x26e>
 800ca9e:	4650      	mov	r0, sl
 800caa0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800cbd8 <__kernel_rem_pio2+0x320>
 800caa4:	f000 fba0 	bl	800d1e8 <scalbn>
 800caa8:	4630      	mov	r0, r6
 800caaa:	4639      	mov	r1, r7
 800caac:	ec53 2b10 	vmov	r2, r3, d0
 800cab0:	f7f3 fbfa 	bl	80002a8 <__aeabi_dsub>
 800cab4:	4606      	mov	r6, r0
 800cab6:	460f      	mov	r7, r1
 800cab8:	e035      	b.n	800cb26 <__kernel_rem_pio2+0x26e>
 800caba:	4b4c      	ldr	r3, [pc, #304]	; (800cbec <__kernel_rem_pio2+0x334>)
 800cabc:	2200      	movs	r2, #0
 800cabe:	4630      	mov	r0, r6
 800cac0:	4639      	mov	r1, r7
 800cac2:	f7f3 fda9 	bl	8000618 <__aeabi_dmul>
 800cac6:	f7f4 f841 	bl	8000b4c <__aeabi_d2iz>
 800caca:	f7f3 fd3b 	bl	8000544 <__aeabi_i2d>
 800cace:	4602      	mov	r2, r0
 800cad0:	460b      	mov	r3, r1
 800cad2:	ec43 2b18 	vmov	d8, r2, r3
 800cad6:	4b46      	ldr	r3, [pc, #280]	; (800cbf0 <__kernel_rem_pio2+0x338>)
 800cad8:	2200      	movs	r2, #0
 800cada:	f7f3 fd9d 	bl	8000618 <__aeabi_dmul>
 800cade:	4602      	mov	r2, r0
 800cae0:	460b      	mov	r3, r1
 800cae2:	4630      	mov	r0, r6
 800cae4:	4639      	mov	r1, r7
 800cae6:	f7f3 fbdf 	bl	80002a8 <__aeabi_dsub>
 800caea:	f7f4 f82f 	bl	8000b4c <__aeabi_d2iz>
 800caee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800caf2:	f84b 0b04 	str.w	r0, [fp], #4
 800caf6:	ec51 0b18 	vmov	r0, r1, d8
 800cafa:	f7f3 fbd7 	bl	80002ac <__adddf3>
 800cafe:	f109 39ff 	add.w	r9, r9, #4294967295
 800cb02:	4606      	mov	r6, r0
 800cb04:	460f      	mov	r7, r1
 800cb06:	e75b      	b.n	800c9c0 <__kernel_rem_pio2+0x108>
 800cb08:	d106      	bne.n	800cb18 <__kernel_rem_pio2+0x260>
 800cb0a:	1e63      	subs	r3, r4, #1
 800cb0c:	aa0e      	add	r2, sp, #56	; 0x38
 800cb0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cb12:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800cb16:	e79d      	b.n	800ca54 <__kernel_rem_pio2+0x19c>
 800cb18:	4b36      	ldr	r3, [pc, #216]	; (800cbf4 <__kernel_rem_pio2+0x33c>)
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f7f4 f802 	bl	8000b24 <__aeabi_dcmpge>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	d13d      	bne.n	800cba0 <__kernel_rem_pio2+0x2e8>
 800cb24:	4683      	mov	fp, r0
 800cb26:	2200      	movs	r2, #0
 800cb28:	2300      	movs	r3, #0
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	4639      	mov	r1, r7
 800cb2e:	f7f3 ffdb 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb32:	2800      	cmp	r0, #0
 800cb34:	f000 80c0 	beq.w	800ccb8 <__kernel_rem_pio2+0x400>
 800cb38:	1e65      	subs	r5, r4, #1
 800cb3a:	462b      	mov	r3, r5
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	9902      	ldr	r1, [sp, #8]
 800cb40:	428b      	cmp	r3, r1
 800cb42:	da6c      	bge.n	800cc1e <__kernel_rem_pio2+0x366>
 800cb44:	2a00      	cmp	r2, #0
 800cb46:	f000 8089 	beq.w	800cc5c <__kernel_rem_pio2+0x3a4>
 800cb4a:	ab0e      	add	r3, sp, #56	; 0x38
 800cb4c:	f1aa 0a18 	sub.w	sl, sl, #24
 800cb50:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f000 80ad 	beq.w	800ccb4 <__kernel_rem_pio2+0x3fc>
 800cb5a:	4650      	mov	r0, sl
 800cb5c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800cbd8 <__kernel_rem_pio2+0x320>
 800cb60:	f000 fb42 	bl	800d1e8 <scalbn>
 800cb64:	ab9a      	add	r3, sp, #616	; 0x268
 800cb66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cb6a:	ec57 6b10 	vmov	r6, r7, d0
 800cb6e:	00ec      	lsls	r4, r5, #3
 800cb70:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800cb74:	46aa      	mov	sl, r5
 800cb76:	f1ba 0f00 	cmp.w	sl, #0
 800cb7a:	f280 80d6 	bge.w	800cd2a <__kernel_rem_pio2+0x472>
 800cb7e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800cbd0 <__kernel_rem_pio2+0x318>
 800cb82:	462e      	mov	r6, r5
 800cb84:	2e00      	cmp	r6, #0
 800cb86:	f2c0 8104 	blt.w	800cd92 <__kernel_rem_pio2+0x4da>
 800cb8a:	ab72      	add	r3, sp, #456	; 0x1c8
 800cb8c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800cb90:	f8df a064 	ldr.w	sl, [pc, #100]	; 800cbf8 <__kernel_rem_pio2+0x340>
 800cb94:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800cb98:	f04f 0800 	mov.w	r8, #0
 800cb9c:	1baf      	subs	r7, r5, r6
 800cb9e:	e0ea      	b.n	800cd76 <__kernel_rem_pio2+0x4be>
 800cba0:	f04f 0b02 	mov.w	fp, #2
 800cba4:	e759      	b.n	800ca5a <__kernel_rem_pio2+0x1a2>
 800cba6:	f8d8 3000 	ldr.w	r3, [r8]
 800cbaa:	b955      	cbnz	r5, 800cbc2 <__kernel_rem_pio2+0x30a>
 800cbac:	b123      	cbz	r3, 800cbb8 <__kernel_rem_pio2+0x300>
 800cbae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cbb2:	f8c8 3000 	str.w	r3, [r8]
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	3201      	adds	r2, #1
 800cbba:	f108 0804 	add.w	r8, r8, #4
 800cbbe:	461d      	mov	r5, r3
 800cbc0:	e752      	b.n	800ca68 <__kernel_rem_pio2+0x1b0>
 800cbc2:	1acb      	subs	r3, r1, r3
 800cbc4:	f8c8 3000 	str.w	r3, [r8]
 800cbc8:	462b      	mov	r3, r5
 800cbca:	e7f5      	b.n	800cbb8 <__kernel_rem_pio2+0x300>
 800cbcc:	f3af 8000 	nop.w
	...
 800cbdc:	3ff00000 	.word	0x3ff00000
 800cbe0:	0800dd70 	.word	0x0800dd70
 800cbe4:	40200000 	.word	0x40200000
 800cbe8:	3ff00000 	.word	0x3ff00000
 800cbec:	3e700000 	.word	0x3e700000
 800cbf0:	41700000 	.word	0x41700000
 800cbf4:	3fe00000 	.word	0x3fe00000
 800cbf8:	0800dd30 	.word	0x0800dd30
 800cbfc:	1e62      	subs	r2, r4, #1
 800cbfe:	ab0e      	add	r3, sp, #56	; 0x38
 800cc00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc04:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cc08:	a90e      	add	r1, sp, #56	; 0x38
 800cc0a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cc0e:	e739      	b.n	800ca84 <__kernel_rem_pio2+0x1cc>
 800cc10:	1e62      	subs	r2, r4, #1
 800cc12:	ab0e      	add	r3, sp, #56	; 0x38
 800cc14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cc1c:	e7f4      	b.n	800cc08 <__kernel_rem_pio2+0x350>
 800cc1e:	a90e      	add	r1, sp, #56	; 0x38
 800cc20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cc24:	3b01      	subs	r3, #1
 800cc26:	430a      	orrs	r2, r1
 800cc28:	e789      	b.n	800cb3e <__kernel_rem_pio2+0x286>
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cc30:	2900      	cmp	r1, #0
 800cc32:	d0fa      	beq.n	800cc2a <__kernel_rem_pio2+0x372>
 800cc34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc36:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800cc3a:	446a      	add	r2, sp
 800cc3c:	3a98      	subs	r2, #152	; 0x98
 800cc3e:	920a      	str	r2, [sp, #40]	; 0x28
 800cc40:	9a08      	ldr	r2, [sp, #32]
 800cc42:	18e3      	adds	r3, r4, r3
 800cc44:	18a5      	adds	r5, r4, r2
 800cc46:	aa22      	add	r2, sp, #136	; 0x88
 800cc48:	f104 0801 	add.w	r8, r4, #1
 800cc4c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800cc50:	9304      	str	r3, [sp, #16]
 800cc52:	9b04      	ldr	r3, [sp, #16]
 800cc54:	4543      	cmp	r3, r8
 800cc56:	da04      	bge.n	800cc62 <__kernel_rem_pio2+0x3aa>
 800cc58:	461c      	mov	r4, r3
 800cc5a:	e6a3      	b.n	800c9a4 <__kernel_rem_pio2+0xec>
 800cc5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e7e4      	b.n	800cc2c <__kernel_rem_pio2+0x374>
 800cc62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc64:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cc68:	f7f3 fc6c 	bl	8000544 <__aeabi_i2d>
 800cc6c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800cc70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc72:	46ab      	mov	fp, r5
 800cc74:	461c      	mov	r4, r3
 800cc76:	f04f 0900 	mov.w	r9, #0
 800cc7a:	2600      	movs	r6, #0
 800cc7c:	2700      	movs	r7, #0
 800cc7e:	9b06      	ldr	r3, [sp, #24]
 800cc80:	4599      	cmp	r9, r3
 800cc82:	dd06      	ble.n	800cc92 <__kernel_rem_pio2+0x3da>
 800cc84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc86:	e8e3 6702 	strd	r6, r7, [r3], #8
 800cc8a:	f108 0801 	add.w	r8, r8, #1
 800cc8e:	930a      	str	r3, [sp, #40]	; 0x28
 800cc90:	e7df      	b.n	800cc52 <__kernel_rem_pio2+0x39a>
 800cc92:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800cc96:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800cc9a:	f7f3 fcbd 	bl	8000618 <__aeabi_dmul>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	460b      	mov	r3, r1
 800cca2:	4630      	mov	r0, r6
 800cca4:	4639      	mov	r1, r7
 800cca6:	f7f3 fb01 	bl	80002ac <__adddf3>
 800ccaa:	f109 0901 	add.w	r9, r9, #1
 800ccae:	4606      	mov	r6, r0
 800ccb0:	460f      	mov	r7, r1
 800ccb2:	e7e4      	b.n	800cc7e <__kernel_rem_pio2+0x3c6>
 800ccb4:	3d01      	subs	r5, #1
 800ccb6:	e748      	b.n	800cb4a <__kernel_rem_pio2+0x292>
 800ccb8:	ec47 6b10 	vmov	d0, r6, r7
 800ccbc:	f1ca 0000 	rsb	r0, sl, #0
 800ccc0:	f000 fa92 	bl	800d1e8 <scalbn>
 800ccc4:	ec57 6b10 	vmov	r6, r7, d0
 800ccc8:	4ba0      	ldr	r3, [pc, #640]	; (800cf4c <__kernel_rem_pio2+0x694>)
 800ccca:	ee10 0a10 	vmov	r0, s0
 800ccce:	2200      	movs	r2, #0
 800ccd0:	4639      	mov	r1, r7
 800ccd2:	f7f3 ff27 	bl	8000b24 <__aeabi_dcmpge>
 800ccd6:	b1f8      	cbz	r0, 800cd18 <__kernel_rem_pio2+0x460>
 800ccd8:	4b9d      	ldr	r3, [pc, #628]	; (800cf50 <__kernel_rem_pio2+0x698>)
 800ccda:	2200      	movs	r2, #0
 800ccdc:	4630      	mov	r0, r6
 800ccde:	4639      	mov	r1, r7
 800cce0:	f7f3 fc9a 	bl	8000618 <__aeabi_dmul>
 800cce4:	f7f3 ff32 	bl	8000b4c <__aeabi_d2iz>
 800cce8:	4680      	mov	r8, r0
 800ccea:	f7f3 fc2b 	bl	8000544 <__aeabi_i2d>
 800ccee:	4b97      	ldr	r3, [pc, #604]	; (800cf4c <__kernel_rem_pio2+0x694>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f7f3 fc91 	bl	8000618 <__aeabi_dmul>
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	4639      	mov	r1, r7
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	f7f3 fad3 	bl	80002a8 <__aeabi_dsub>
 800cd02:	f7f3 ff23 	bl	8000b4c <__aeabi_d2iz>
 800cd06:	1c65      	adds	r5, r4, #1
 800cd08:	ab0e      	add	r3, sp, #56	; 0x38
 800cd0a:	f10a 0a18 	add.w	sl, sl, #24
 800cd0e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cd12:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800cd16:	e720      	b.n	800cb5a <__kernel_rem_pio2+0x2a2>
 800cd18:	4630      	mov	r0, r6
 800cd1a:	4639      	mov	r1, r7
 800cd1c:	f7f3 ff16 	bl	8000b4c <__aeabi_d2iz>
 800cd20:	ab0e      	add	r3, sp, #56	; 0x38
 800cd22:	4625      	mov	r5, r4
 800cd24:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cd28:	e717      	b.n	800cb5a <__kernel_rem_pio2+0x2a2>
 800cd2a:	ab0e      	add	r3, sp, #56	; 0x38
 800cd2c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800cd30:	f7f3 fc08 	bl	8000544 <__aeabi_i2d>
 800cd34:	4632      	mov	r2, r6
 800cd36:	463b      	mov	r3, r7
 800cd38:	f7f3 fc6e 	bl	8000618 <__aeabi_dmul>
 800cd3c:	4b84      	ldr	r3, [pc, #528]	; (800cf50 <__kernel_rem_pio2+0x698>)
 800cd3e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800cd42:	2200      	movs	r2, #0
 800cd44:	4630      	mov	r0, r6
 800cd46:	4639      	mov	r1, r7
 800cd48:	f7f3 fc66 	bl	8000618 <__aeabi_dmul>
 800cd4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd50:	4606      	mov	r6, r0
 800cd52:	460f      	mov	r7, r1
 800cd54:	e70f      	b.n	800cb76 <__kernel_rem_pio2+0x2be>
 800cd56:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800cd5a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800cd5e:	f7f3 fc5b 	bl	8000618 <__aeabi_dmul>
 800cd62:	4602      	mov	r2, r0
 800cd64:	460b      	mov	r3, r1
 800cd66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd6a:	f7f3 fa9f 	bl	80002ac <__adddf3>
 800cd6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cd72:	f108 0801 	add.w	r8, r8, #1
 800cd76:	9b02      	ldr	r3, [sp, #8]
 800cd78:	4598      	cmp	r8, r3
 800cd7a:	dc01      	bgt.n	800cd80 <__kernel_rem_pio2+0x4c8>
 800cd7c:	45b8      	cmp	r8, r7
 800cd7e:	ddea      	ble.n	800cd56 <__kernel_rem_pio2+0x49e>
 800cd80:	ed9d 7b06 	vldr	d7, [sp, #24]
 800cd84:	ab4a      	add	r3, sp, #296	; 0x128
 800cd86:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cd8a:	ed87 7b00 	vstr	d7, [r7]
 800cd8e:	3e01      	subs	r6, #1
 800cd90:	e6f8      	b.n	800cb84 <__kernel_rem_pio2+0x2cc>
 800cd92:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800cd94:	2b02      	cmp	r3, #2
 800cd96:	dc0b      	bgt.n	800cdb0 <__kernel_rem_pio2+0x4f8>
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	dc35      	bgt.n	800ce08 <__kernel_rem_pio2+0x550>
 800cd9c:	d059      	beq.n	800ce52 <__kernel_rem_pio2+0x59a>
 800cd9e:	9b04      	ldr	r3, [sp, #16]
 800cda0:	f003 0007 	and.w	r0, r3, #7
 800cda4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800cda8:	ecbd 8b02 	vpop	{d8}
 800cdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800cdb2:	2b03      	cmp	r3, #3
 800cdb4:	d1f3      	bne.n	800cd9e <__kernel_rem_pio2+0x4e6>
 800cdb6:	ab4a      	add	r3, sp, #296	; 0x128
 800cdb8:	4423      	add	r3, r4
 800cdba:	9306      	str	r3, [sp, #24]
 800cdbc:	461c      	mov	r4, r3
 800cdbe:	469a      	mov	sl, r3
 800cdc0:	9502      	str	r5, [sp, #8]
 800cdc2:	9b02      	ldr	r3, [sp, #8]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f1aa 0a08 	sub.w	sl, sl, #8
 800cdca:	dc6b      	bgt.n	800cea4 <__kernel_rem_pio2+0x5ec>
 800cdcc:	46aa      	mov	sl, r5
 800cdce:	f1ba 0f01 	cmp.w	sl, #1
 800cdd2:	f1a4 0408 	sub.w	r4, r4, #8
 800cdd6:	f300 8085 	bgt.w	800cee4 <__kernel_rem_pio2+0x62c>
 800cdda:	9c06      	ldr	r4, [sp, #24]
 800cddc:	2000      	movs	r0, #0
 800cdde:	3408      	adds	r4, #8
 800cde0:	2100      	movs	r1, #0
 800cde2:	2d01      	cmp	r5, #1
 800cde4:	f300 809d 	bgt.w	800cf22 <__kernel_rem_pio2+0x66a>
 800cde8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800cdec:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800cdf0:	f1bb 0f00 	cmp.w	fp, #0
 800cdf4:	f040 809b 	bne.w	800cf2e <__kernel_rem_pio2+0x676>
 800cdf8:	9b01      	ldr	r3, [sp, #4]
 800cdfa:	e9c3 5600 	strd	r5, r6, [r3]
 800cdfe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ce02:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ce06:	e7ca      	b.n	800cd9e <__kernel_rem_pio2+0x4e6>
 800ce08:	3408      	adds	r4, #8
 800ce0a:	ab4a      	add	r3, sp, #296	; 0x128
 800ce0c:	441c      	add	r4, r3
 800ce0e:	462e      	mov	r6, r5
 800ce10:	2000      	movs	r0, #0
 800ce12:	2100      	movs	r1, #0
 800ce14:	2e00      	cmp	r6, #0
 800ce16:	da36      	bge.n	800ce86 <__kernel_rem_pio2+0x5ce>
 800ce18:	f1bb 0f00 	cmp.w	fp, #0
 800ce1c:	d039      	beq.n	800ce92 <__kernel_rem_pio2+0x5da>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce24:	9c01      	ldr	r4, [sp, #4]
 800ce26:	e9c4 2300 	strd	r2, r3, [r4]
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ce32:	f7f3 fa39 	bl	80002a8 <__aeabi_dsub>
 800ce36:	ae4c      	add	r6, sp, #304	; 0x130
 800ce38:	2401      	movs	r4, #1
 800ce3a:	42a5      	cmp	r5, r4
 800ce3c:	da2c      	bge.n	800ce98 <__kernel_rem_pio2+0x5e0>
 800ce3e:	f1bb 0f00 	cmp.w	fp, #0
 800ce42:	d002      	beq.n	800ce4a <__kernel_rem_pio2+0x592>
 800ce44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce48:	4619      	mov	r1, r3
 800ce4a:	9b01      	ldr	r3, [sp, #4]
 800ce4c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ce50:	e7a5      	b.n	800cd9e <__kernel_rem_pio2+0x4e6>
 800ce52:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ce56:	eb0d 0403 	add.w	r4, sp, r3
 800ce5a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ce5e:	2000      	movs	r0, #0
 800ce60:	2100      	movs	r1, #0
 800ce62:	2d00      	cmp	r5, #0
 800ce64:	da09      	bge.n	800ce7a <__kernel_rem_pio2+0x5c2>
 800ce66:	f1bb 0f00 	cmp.w	fp, #0
 800ce6a:	d002      	beq.n	800ce72 <__kernel_rem_pio2+0x5ba>
 800ce6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce70:	4619      	mov	r1, r3
 800ce72:	9b01      	ldr	r3, [sp, #4]
 800ce74:	e9c3 0100 	strd	r0, r1, [r3]
 800ce78:	e791      	b.n	800cd9e <__kernel_rem_pio2+0x4e6>
 800ce7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ce7e:	f7f3 fa15 	bl	80002ac <__adddf3>
 800ce82:	3d01      	subs	r5, #1
 800ce84:	e7ed      	b.n	800ce62 <__kernel_rem_pio2+0x5aa>
 800ce86:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ce8a:	f7f3 fa0f 	bl	80002ac <__adddf3>
 800ce8e:	3e01      	subs	r6, #1
 800ce90:	e7c0      	b.n	800ce14 <__kernel_rem_pio2+0x55c>
 800ce92:	4602      	mov	r2, r0
 800ce94:	460b      	mov	r3, r1
 800ce96:	e7c5      	b.n	800ce24 <__kernel_rem_pio2+0x56c>
 800ce98:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ce9c:	f7f3 fa06 	bl	80002ac <__adddf3>
 800cea0:	3401      	adds	r4, #1
 800cea2:	e7ca      	b.n	800ce3a <__kernel_rem_pio2+0x582>
 800cea4:	e9da 8900 	ldrd	r8, r9, [sl]
 800cea8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ceac:	9b02      	ldr	r3, [sp, #8]
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	9302      	str	r3, [sp, #8]
 800ceb2:	4632      	mov	r2, r6
 800ceb4:	463b      	mov	r3, r7
 800ceb6:	4640      	mov	r0, r8
 800ceb8:	4649      	mov	r1, r9
 800ceba:	f7f3 f9f7 	bl	80002ac <__adddf3>
 800cebe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cec2:	4602      	mov	r2, r0
 800cec4:	460b      	mov	r3, r1
 800cec6:	4640      	mov	r0, r8
 800cec8:	4649      	mov	r1, r9
 800ceca:	f7f3 f9ed 	bl	80002a8 <__aeabi_dsub>
 800cece:	4632      	mov	r2, r6
 800ced0:	463b      	mov	r3, r7
 800ced2:	f7f3 f9eb 	bl	80002ac <__adddf3>
 800ced6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ceda:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cede:	ed8a 7b00 	vstr	d7, [sl]
 800cee2:	e76e      	b.n	800cdc2 <__kernel_rem_pio2+0x50a>
 800cee4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cee8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ceec:	4640      	mov	r0, r8
 800ceee:	4632      	mov	r2, r6
 800cef0:	463b      	mov	r3, r7
 800cef2:	4649      	mov	r1, r9
 800cef4:	f7f3 f9da 	bl	80002ac <__adddf3>
 800cef8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cefc:	4602      	mov	r2, r0
 800cefe:	460b      	mov	r3, r1
 800cf00:	4640      	mov	r0, r8
 800cf02:	4649      	mov	r1, r9
 800cf04:	f7f3 f9d0 	bl	80002a8 <__aeabi_dsub>
 800cf08:	4632      	mov	r2, r6
 800cf0a:	463b      	mov	r3, r7
 800cf0c:	f7f3 f9ce 	bl	80002ac <__adddf3>
 800cf10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cf18:	ed84 7b00 	vstr	d7, [r4]
 800cf1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf20:	e755      	b.n	800cdce <__kernel_rem_pio2+0x516>
 800cf22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cf26:	f7f3 f9c1 	bl	80002ac <__adddf3>
 800cf2a:	3d01      	subs	r5, #1
 800cf2c:	e759      	b.n	800cde2 <__kernel_rem_pio2+0x52a>
 800cf2e:	9b01      	ldr	r3, [sp, #4]
 800cf30:	9a01      	ldr	r2, [sp, #4]
 800cf32:	601d      	str	r5, [r3, #0]
 800cf34:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800cf38:	605c      	str	r4, [r3, #4]
 800cf3a:	609f      	str	r7, [r3, #8]
 800cf3c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800cf40:	60d3      	str	r3, [r2, #12]
 800cf42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf46:	6110      	str	r0, [r2, #16]
 800cf48:	6153      	str	r3, [r2, #20]
 800cf4a:	e728      	b.n	800cd9e <__kernel_rem_pio2+0x4e6>
 800cf4c:	41700000 	.word	0x41700000
 800cf50:	3e700000 	.word	0x3e700000
 800cf54:	00000000 	.word	0x00000000

0800cf58 <__kernel_sin>:
 800cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5c:	ed2d 8b04 	vpush	{d8-d9}
 800cf60:	eeb0 8a41 	vmov.f32	s16, s2
 800cf64:	eef0 8a61 	vmov.f32	s17, s3
 800cf68:	ec55 4b10 	vmov	r4, r5, d0
 800cf6c:	b083      	sub	sp, #12
 800cf6e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cf72:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cf76:	9001      	str	r0, [sp, #4]
 800cf78:	da06      	bge.n	800cf88 <__kernel_sin+0x30>
 800cf7a:	ee10 0a10 	vmov	r0, s0
 800cf7e:	4629      	mov	r1, r5
 800cf80:	f7f3 fde4 	bl	8000b4c <__aeabi_d2iz>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d051      	beq.n	800d02c <__kernel_sin+0xd4>
 800cf88:	4622      	mov	r2, r4
 800cf8a:	462b      	mov	r3, r5
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	4629      	mov	r1, r5
 800cf90:	f7f3 fb42 	bl	8000618 <__aeabi_dmul>
 800cf94:	4682      	mov	sl, r0
 800cf96:	468b      	mov	fp, r1
 800cf98:	4602      	mov	r2, r0
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	4629      	mov	r1, r5
 800cfa0:	f7f3 fb3a 	bl	8000618 <__aeabi_dmul>
 800cfa4:	a341      	add	r3, pc, #260	; (adr r3, 800d0ac <__kernel_sin+0x154>)
 800cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfaa:	4680      	mov	r8, r0
 800cfac:	4689      	mov	r9, r1
 800cfae:	4650      	mov	r0, sl
 800cfb0:	4659      	mov	r1, fp
 800cfb2:	f7f3 fb31 	bl	8000618 <__aeabi_dmul>
 800cfb6:	a33f      	add	r3, pc, #252	; (adr r3, 800d0b4 <__kernel_sin+0x15c>)
 800cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbc:	f7f3 f974 	bl	80002a8 <__aeabi_dsub>
 800cfc0:	4652      	mov	r2, sl
 800cfc2:	465b      	mov	r3, fp
 800cfc4:	f7f3 fb28 	bl	8000618 <__aeabi_dmul>
 800cfc8:	a33c      	add	r3, pc, #240	; (adr r3, 800d0bc <__kernel_sin+0x164>)
 800cfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfce:	f7f3 f96d 	bl	80002ac <__adddf3>
 800cfd2:	4652      	mov	r2, sl
 800cfd4:	465b      	mov	r3, fp
 800cfd6:	f7f3 fb1f 	bl	8000618 <__aeabi_dmul>
 800cfda:	a33a      	add	r3, pc, #232	; (adr r3, 800d0c4 <__kernel_sin+0x16c>)
 800cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe0:	f7f3 f962 	bl	80002a8 <__aeabi_dsub>
 800cfe4:	4652      	mov	r2, sl
 800cfe6:	465b      	mov	r3, fp
 800cfe8:	f7f3 fb16 	bl	8000618 <__aeabi_dmul>
 800cfec:	a337      	add	r3, pc, #220	; (adr r3, 800d0cc <__kernel_sin+0x174>)
 800cfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff2:	f7f3 f95b 	bl	80002ac <__adddf3>
 800cff6:	9b01      	ldr	r3, [sp, #4]
 800cff8:	4606      	mov	r6, r0
 800cffa:	460f      	mov	r7, r1
 800cffc:	b9eb      	cbnz	r3, 800d03a <__kernel_sin+0xe2>
 800cffe:	4602      	mov	r2, r0
 800d000:	460b      	mov	r3, r1
 800d002:	4650      	mov	r0, sl
 800d004:	4659      	mov	r1, fp
 800d006:	f7f3 fb07 	bl	8000618 <__aeabi_dmul>
 800d00a:	a325      	add	r3, pc, #148	; (adr r3, 800d0a0 <__kernel_sin+0x148>)
 800d00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d010:	f7f3 f94a 	bl	80002a8 <__aeabi_dsub>
 800d014:	4642      	mov	r2, r8
 800d016:	464b      	mov	r3, r9
 800d018:	f7f3 fafe 	bl	8000618 <__aeabi_dmul>
 800d01c:	4602      	mov	r2, r0
 800d01e:	460b      	mov	r3, r1
 800d020:	4620      	mov	r0, r4
 800d022:	4629      	mov	r1, r5
 800d024:	f7f3 f942 	bl	80002ac <__adddf3>
 800d028:	4604      	mov	r4, r0
 800d02a:	460d      	mov	r5, r1
 800d02c:	ec45 4b10 	vmov	d0, r4, r5
 800d030:	b003      	add	sp, #12
 800d032:	ecbd 8b04 	vpop	{d8-d9}
 800d036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d03a:	4b1b      	ldr	r3, [pc, #108]	; (800d0a8 <__kernel_sin+0x150>)
 800d03c:	ec51 0b18 	vmov	r0, r1, d8
 800d040:	2200      	movs	r2, #0
 800d042:	f7f3 fae9 	bl	8000618 <__aeabi_dmul>
 800d046:	4632      	mov	r2, r6
 800d048:	ec41 0b19 	vmov	d9, r0, r1
 800d04c:	463b      	mov	r3, r7
 800d04e:	4640      	mov	r0, r8
 800d050:	4649      	mov	r1, r9
 800d052:	f7f3 fae1 	bl	8000618 <__aeabi_dmul>
 800d056:	4602      	mov	r2, r0
 800d058:	460b      	mov	r3, r1
 800d05a:	ec51 0b19 	vmov	r0, r1, d9
 800d05e:	f7f3 f923 	bl	80002a8 <__aeabi_dsub>
 800d062:	4652      	mov	r2, sl
 800d064:	465b      	mov	r3, fp
 800d066:	f7f3 fad7 	bl	8000618 <__aeabi_dmul>
 800d06a:	ec53 2b18 	vmov	r2, r3, d8
 800d06e:	f7f3 f91b 	bl	80002a8 <__aeabi_dsub>
 800d072:	a30b      	add	r3, pc, #44	; (adr r3, 800d0a0 <__kernel_sin+0x148>)
 800d074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d078:	4606      	mov	r6, r0
 800d07a:	460f      	mov	r7, r1
 800d07c:	4640      	mov	r0, r8
 800d07e:	4649      	mov	r1, r9
 800d080:	f7f3 faca 	bl	8000618 <__aeabi_dmul>
 800d084:	4602      	mov	r2, r0
 800d086:	460b      	mov	r3, r1
 800d088:	4630      	mov	r0, r6
 800d08a:	4639      	mov	r1, r7
 800d08c:	f7f3 f90e 	bl	80002ac <__adddf3>
 800d090:	4602      	mov	r2, r0
 800d092:	460b      	mov	r3, r1
 800d094:	4620      	mov	r0, r4
 800d096:	4629      	mov	r1, r5
 800d098:	f7f3 f906 	bl	80002a8 <__aeabi_dsub>
 800d09c:	e7c4      	b.n	800d028 <__kernel_sin+0xd0>
 800d09e:	bf00      	nop
 800d0a0:	55555549 	.word	0x55555549
 800d0a4:	3fc55555 	.word	0x3fc55555
 800d0a8:	3fe00000 	.word	0x3fe00000
 800d0ac:	5acfd57c 	.word	0x5acfd57c
 800d0b0:	3de5d93a 	.word	0x3de5d93a
 800d0b4:	8a2b9ceb 	.word	0x8a2b9ceb
 800d0b8:	3e5ae5e6 	.word	0x3e5ae5e6
 800d0bc:	57b1fe7d 	.word	0x57b1fe7d
 800d0c0:	3ec71de3 	.word	0x3ec71de3
 800d0c4:	19c161d5 	.word	0x19c161d5
 800d0c8:	3f2a01a0 	.word	0x3f2a01a0
 800d0cc:	1110f8a6 	.word	0x1110f8a6
 800d0d0:	3f811111 	.word	0x3f811111

0800d0d4 <fabs>:
 800d0d4:	ec51 0b10 	vmov	r0, r1, d0
 800d0d8:	ee10 2a10 	vmov	r2, s0
 800d0dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d0e0:	ec43 2b10 	vmov	d0, r2, r3
 800d0e4:	4770      	bx	lr
	...

0800d0e8 <floor>:
 800d0e8:	ec51 0b10 	vmov	r0, r1, d0
 800d0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d0f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d0f8:	2e13      	cmp	r6, #19
 800d0fa:	ee10 5a10 	vmov	r5, s0
 800d0fe:	ee10 8a10 	vmov	r8, s0
 800d102:	460c      	mov	r4, r1
 800d104:	dc32      	bgt.n	800d16c <floor+0x84>
 800d106:	2e00      	cmp	r6, #0
 800d108:	da14      	bge.n	800d134 <floor+0x4c>
 800d10a:	a333      	add	r3, pc, #204	; (adr r3, 800d1d8 <floor+0xf0>)
 800d10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d110:	f7f3 f8cc 	bl	80002ac <__adddf3>
 800d114:	2200      	movs	r2, #0
 800d116:	2300      	movs	r3, #0
 800d118:	f7f3 fd0e 	bl	8000b38 <__aeabi_dcmpgt>
 800d11c:	b138      	cbz	r0, 800d12e <floor+0x46>
 800d11e:	2c00      	cmp	r4, #0
 800d120:	da57      	bge.n	800d1d2 <floor+0xea>
 800d122:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d126:	431d      	orrs	r5, r3
 800d128:	d001      	beq.n	800d12e <floor+0x46>
 800d12a:	4c2d      	ldr	r4, [pc, #180]	; (800d1e0 <floor+0xf8>)
 800d12c:	2500      	movs	r5, #0
 800d12e:	4621      	mov	r1, r4
 800d130:	4628      	mov	r0, r5
 800d132:	e025      	b.n	800d180 <floor+0x98>
 800d134:	4f2b      	ldr	r7, [pc, #172]	; (800d1e4 <floor+0xfc>)
 800d136:	4137      	asrs	r7, r6
 800d138:	ea01 0307 	and.w	r3, r1, r7
 800d13c:	4303      	orrs	r3, r0
 800d13e:	d01f      	beq.n	800d180 <floor+0x98>
 800d140:	a325      	add	r3, pc, #148	; (adr r3, 800d1d8 <floor+0xf0>)
 800d142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d146:	f7f3 f8b1 	bl	80002ac <__adddf3>
 800d14a:	2200      	movs	r2, #0
 800d14c:	2300      	movs	r3, #0
 800d14e:	f7f3 fcf3 	bl	8000b38 <__aeabi_dcmpgt>
 800d152:	2800      	cmp	r0, #0
 800d154:	d0eb      	beq.n	800d12e <floor+0x46>
 800d156:	2c00      	cmp	r4, #0
 800d158:	bfbe      	ittt	lt
 800d15a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d15e:	fa43 f606 	asrlt.w	r6, r3, r6
 800d162:	19a4      	addlt	r4, r4, r6
 800d164:	ea24 0407 	bic.w	r4, r4, r7
 800d168:	2500      	movs	r5, #0
 800d16a:	e7e0      	b.n	800d12e <floor+0x46>
 800d16c:	2e33      	cmp	r6, #51	; 0x33
 800d16e:	dd0b      	ble.n	800d188 <floor+0xa0>
 800d170:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d174:	d104      	bne.n	800d180 <floor+0x98>
 800d176:	ee10 2a10 	vmov	r2, s0
 800d17a:	460b      	mov	r3, r1
 800d17c:	f7f3 f896 	bl	80002ac <__adddf3>
 800d180:	ec41 0b10 	vmov	d0, r0, r1
 800d184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d188:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d18c:	f04f 33ff 	mov.w	r3, #4294967295
 800d190:	fa23 f707 	lsr.w	r7, r3, r7
 800d194:	4207      	tst	r7, r0
 800d196:	d0f3      	beq.n	800d180 <floor+0x98>
 800d198:	a30f      	add	r3, pc, #60	; (adr r3, 800d1d8 <floor+0xf0>)
 800d19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19e:	f7f3 f885 	bl	80002ac <__adddf3>
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	f7f3 fcc7 	bl	8000b38 <__aeabi_dcmpgt>
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	d0bf      	beq.n	800d12e <floor+0x46>
 800d1ae:	2c00      	cmp	r4, #0
 800d1b0:	da02      	bge.n	800d1b8 <floor+0xd0>
 800d1b2:	2e14      	cmp	r6, #20
 800d1b4:	d103      	bne.n	800d1be <floor+0xd6>
 800d1b6:	3401      	adds	r4, #1
 800d1b8:	ea25 0507 	bic.w	r5, r5, r7
 800d1bc:	e7b7      	b.n	800d12e <floor+0x46>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d1c4:	fa03 f606 	lsl.w	r6, r3, r6
 800d1c8:	4435      	add	r5, r6
 800d1ca:	4545      	cmp	r5, r8
 800d1cc:	bf38      	it	cc
 800d1ce:	18e4      	addcc	r4, r4, r3
 800d1d0:	e7f2      	b.n	800d1b8 <floor+0xd0>
 800d1d2:	2500      	movs	r5, #0
 800d1d4:	462c      	mov	r4, r5
 800d1d6:	e7aa      	b.n	800d12e <floor+0x46>
 800d1d8:	8800759c 	.word	0x8800759c
 800d1dc:	7e37e43c 	.word	0x7e37e43c
 800d1e0:	bff00000 	.word	0xbff00000
 800d1e4:	000fffff 	.word	0x000fffff

0800d1e8 <scalbn>:
 800d1e8:	b570      	push	{r4, r5, r6, lr}
 800d1ea:	ec55 4b10 	vmov	r4, r5, d0
 800d1ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	462b      	mov	r3, r5
 800d1f6:	b99a      	cbnz	r2, 800d220 <scalbn+0x38>
 800d1f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d1fc:	4323      	orrs	r3, r4
 800d1fe:	d036      	beq.n	800d26e <scalbn+0x86>
 800d200:	4b39      	ldr	r3, [pc, #228]	; (800d2e8 <scalbn+0x100>)
 800d202:	4629      	mov	r1, r5
 800d204:	ee10 0a10 	vmov	r0, s0
 800d208:	2200      	movs	r2, #0
 800d20a:	f7f3 fa05 	bl	8000618 <__aeabi_dmul>
 800d20e:	4b37      	ldr	r3, [pc, #220]	; (800d2ec <scalbn+0x104>)
 800d210:	429e      	cmp	r6, r3
 800d212:	4604      	mov	r4, r0
 800d214:	460d      	mov	r5, r1
 800d216:	da10      	bge.n	800d23a <scalbn+0x52>
 800d218:	a32b      	add	r3, pc, #172	; (adr r3, 800d2c8 <scalbn+0xe0>)
 800d21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21e:	e03a      	b.n	800d296 <scalbn+0xae>
 800d220:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d224:	428a      	cmp	r2, r1
 800d226:	d10c      	bne.n	800d242 <scalbn+0x5a>
 800d228:	ee10 2a10 	vmov	r2, s0
 800d22c:	4620      	mov	r0, r4
 800d22e:	4629      	mov	r1, r5
 800d230:	f7f3 f83c 	bl	80002ac <__adddf3>
 800d234:	4604      	mov	r4, r0
 800d236:	460d      	mov	r5, r1
 800d238:	e019      	b.n	800d26e <scalbn+0x86>
 800d23a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d23e:	460b      	mov	r3, r1
 800d240:	3a36      	subs	r2, #54	; 0x36
 800d242:	4432      	add	r2, r6
 800d244:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d248:	428a      	cmp	r2, r1
 800d24a:	dd08      	ble.n	800d25e <scalbn+0x76>
 800d24c:	2d00      	cmp	r5, #0
 800d24e:	a120      	add	r1, pc, #128	; (adr r1, 800d2d0 <scalbn+0xe8>)
 800d250:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d254:	da1c      	bge.n	800d290 <scalbn+0xa8>
 800d256:	a120      	add	r1, pc, #128	; (adr r1, 800d2d8 <scalbn+0xf0>)
 800d258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d25c:	e018      	b.n	800d290 <scalbn+0xa8>
 800d25e:	2a00      	cmp	r2, #0
 800d260:	dd08      	ble.n	800d274 <scalbn+0x8c>
 800d262:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d266:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d26a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d26e:	ec45 4b10 	vmov	d0, r4, r5
 800d272:	bd70      	pop	{r4, r5, r6, pc}
 800d274:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d278:	da19      	bge.n	800d2ae <scalbn+0xc6>
 800d27a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d27e:	429e      	cmp	r6, r3
 800d280:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d284:	dd0a      	ble.n	800d29c <scalbn+0xb4>
 800d286:	a112      	add	r1, pc, #72	; (adr r1, 800d2d0 <scalbn+0xe8>)
 800d288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1e2      	bne.n	800d256 <scalbn+0x6e>
 800d290:	a30f      	add	r3, pc, #60	; (adr r3, 800d2d0 <scalbn+0xe8>)
 800d292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d296:	f7f3 f9bf 	bl	8000618 <__aeabi_dmul>
 800d29a:	e7cb      	b.n	800d234 <scalbn+0x4c>
 800d29c:	a10a      	add	r1, pc, #40	; (adr r1, 800d2c8 <scalbn+0xe0>)
 800d29e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d0b8      	beq.n	800d218 <scalbn+0x30>
 800d2a6:	a10e      	add	r1, pc, #56	; (adr r1, 800d2e0 <scalbn+0xf8>)
 800d2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2ac:	e7b4      	b.n	800d218 <scalbn+0x30>
 800d2ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d2b2:	3236      	adds	r2, #54	; 0x36
 800d2b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d2b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d2bc:	4620      	mov	r0, r4
 800d2be:	4b0c      	ldr	r3, [pc, #48]	; (800d2f0 <scalbn+0x108>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	e7e8      	b.n	800d296 <scalbn+0xae>
 800d2c4:	f3af 8000 	nop.w
 800d2c8:	c2f8f359 	.word	0xc2f8f359
 800d2cc:	01a56e1f 	.word	0x01a56e1f
 800d2d0:	8800759c 	.word	0x8800759c
 800d2d4:	7e37e43c 	.word	0x7e37e43c
 800d2d8:	8800759c 	.word	0x8800759c
 800d2dc:	fe37e43c 	.word	0xfe37e43c
 800d2e0:	c2f8f359 	.word	0xc2f8f359
 800d2e4:	81a56e1f 	.word	0x81a56e1f
 800d2e8:	43500000 	.word	0x43500000
 800d2ec:	ffff3cb0 	.word	0xffff3cb0
 800d2f0:	3c900000 	.word	0x3c900000

0800d2f4 <_init>:
 800d2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f6:	bf00      	nop
 800d2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2fa:	bc08      	pop	{r3}
 800d2fc:	469e      	mov	lr, r3
 800d2fe:	4770      	bx	lr

0800d300 <_fini>:
 800d300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d302:	bf00      	nop
 800d304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d306:	bc08      	pop	{r3}
 800d308:	469e      	mov	lr, r3
 800d30a:	4770      	bx	lr
