
finalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f0  0800af18  0800af18  0001af18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b708  0800b708  0002019c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b708  0800b708  0002019c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b708  0800b708  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b708  0800b708  0001b708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b70c  0800b70c  0001b70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  0800b710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002019c  2**0
                  CONTENTS
 10 .bss          00000700  200001a0  200001a0  000201a0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200008a0  200008a0  000201a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d388  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003498  00000000  00000000  0003d554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  000409f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016c8  00000000  00000000  000421e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020bbd  00000000  00000000  000438b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f1a9  00000000  00000000  0006446d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7624  00000000  00000000  00083616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ac3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bf8  00000000  00000000  0014ac8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af00 	.word	0x0800af00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	0800af00 	.word	0x0800af00

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08e      	sub	sp, #56	; 0x38
 80002a4:	af0a      	add	r7, sp, #40	; 0x28
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	4608      	mov	r0, r1
 80002aa:	4611      	mov	r1, r2
 80002ac:	461a      	mov	r2, r3
 80002ae:	4603      	mov	r3, r0
 80002b0:	817b      	strh	r3, [r7, #10]
 80002b2:	460b      	mov	r3, r1
 80002b4:	813b      	strh	r3, [r7, #8]
 80002b6:	4613      	mov	r3, r2
 80002b8:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80002ba:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <LiquidCrystal+0x90>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d019      	beq.n	80002f6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002c2:	8939      	ldrh	r1, [r7, #8]
 80002c4:	897a      	ldrh	r2, [r7, #10]
 80002c6:	2300      	movs	r3, #0
 80002c8:	9308      	str	r3, [sp, #32]
 80002ca:	2300      	movs	r3, #0
 80002cc:	9307      	str	r3, [sp, #28]
 80002ce:	2300      	movs	r3, #0
 80002d0:	9306      	str	r3, [sp, #24]
 80002d2:	2300      	movs	r3, #0
 80002d4:	9305      	str	r3, [sp, #20]
 80002d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002d8:	9304      	str	r3, [sp, #16]
 80002da:	8c3b      	ldrh	r3, [r7, #32]
 80002dc:	9303      	str	r3, [sp, #12]
 80002de:	8bbb      	ldrh	r3, [r7, #28]
 80002e0:	9302      	str	r3, [sp, #8]
 80002e2:	8b3b      	ldrh	r3, [r7, #24]
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	88fb      	ldrh	r3, [r7, #6]
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	460b      	mov	r3, r1
 80002ec:	68f9      	ldr	r1, [r7, #12]
 80002ee:	2001      	movs	r0, #1
 80002f0:	f000 f820 	bl	8000334 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002f4:	e018      	b.n	8000328 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002f6:	8939      	ldrh	r1, [r7, #8]
 80002f8:	897a      	ldrh	r2, [r7, #10]
 80002fa:	2300      	movs	r3, #0
 80002fc:	9308      	str	r3, [sp, #32]
 80002fe:	2300      	movs	r3, #0
 8000300:	9307      	str	r3, [sp, #28]
 8000302:	2300      	movs	r3, #0
 8000304:	9306      	str	r3, [sp, #24]
 8000306:	2300      	movs	r3, #0
 8000308:	9305      	str	r3, [sp, #20]
 800030a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800030c:	9304      	str	r3, [sp, #16]
 800030e:	8c3b      	ldrh	r3, [r7, #32]
 8000310:	9303      	str	r3, [sp, #12]
 8000312:	8bbb      	ldrh	r3, [r7, #28]
 8000314:	9302      	str	r3, [sp, #8]
 8000316:	8b3b      	ldrh	r3, [r7, #24]
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	460b      	mov	r3, r1
 8000320:	68f9      	ldr	r1, [r7, #12]
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f806 	bl	8000334 <init>
}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000000 	.word	0x20000000

08000334 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	60b9      	str	r1, [r7, #8]
 800033c:	4611      	mov	r1, r2
 800033e:	461a      	mov	r2, r3
 8000340:	4603      	mov	r3, r0
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	460b      	mov	r3, r1
 8000346:	81bb      	strh	r3, [r7, #12]
 8000348:	4613      	mov	r3, r2
 800034a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800034c:	4a1a      	ldr	r2, [pc, #104]	; (80003b8 <init+0x84>)
 800034e:	89bb      	ldrh	r3, [r7, #12]
 8000350:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000352:	4a1a      	ldr	r2, [pc, #104]	; (80003bc <init+0x88>)
 8000354:	88fb      	ldrh	r3, [r7, #6]
 8000356:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000358:	4a19      	ldr	r2, [pc, #100]	; (80003c0 <init+0x8c>)
 800035a:	8b3b      	ldrh	r3, [r7, #24]
 800035c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800035e:	4a19      	ldr	r2, [pc, #100]	; (80003c4 <init+0x90>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000364:	4a18      	ldr	r2, [pc, #96]	; (80003c8 <init+0x94>)
 8000366:	8bbb      	ldrh	r3, [r7, #28]
 8000368:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800036a:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <init+0x94>)
 800036c:	8c3b      	ldrh	r3, [r7, #32]
 800036e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000370:	4a15      	ldr	r2, [pc, #84]	; (80003c8 <init+0x94>)
 8000372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000374:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000376:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <init+0x94>)
 8000378:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800037a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800037c:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <init+0x94>)
 800037e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000380:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000382:	4a11      	ldr	r2, [pc, #68]	; (80003c8 <init+0x94>)
 8000384:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000386:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <init+0x94>)
 800038a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800038c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <init+0x94>)
 8000390:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000392:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d003      	beq.n	80003a2 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <init+0x98>)
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
 80003a0:	e002      	b.n	80003a8 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <init+0x98>)
 80003a4:	2210      	movs	r2, #16
 80003a6:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 80003a8:	2102      	movs	r1, #2
 80003aa:	2010      	movs	r0, #16
 80003ac:	f000 f810 	bl	80003d0 <begin>
}
 80003b0:	bf00      	nop
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	200001be 	.word	0x200001be
 80003bc:	200001c0 	.word	0x200001c0
 80003c0:	200001c2 	.word	0x200001c2
 80003c4:	200001d4 	.word	0x200001d4
 80003c8:	200001c4 	.word	0x200001c4
 80003cc:	200001d8 	.word	0x200001d8

080003d0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	460a      	mov	r2, r1
 80003da:	71fb      	strb	r3, [r7, #7]
 80003dc:	4613      	mov	r3, r2
 80003de:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003e0:	79bb      	ldrb	r3, [r7, #6]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d906      	bls.n	80003f4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003e6:	4b77      	ldr	r3, [pc, #476]	; (80005c4 <begin+0x1f4>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	4b74      	ldr	r3, [pc, #464]	; (80005c4 <begin+0x1f4>)
 80003f2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003f4:	4a74      	ldr	r2, [pc, #464]	; (80005c8 <begin+0x1f8>)
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003fa:	79fa      	ldrb	r2, [r7, #7]
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	3340      	adds	r3, #64	; 0x40
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	2000      	movs	r0, #0
 8000404:	f000 f988 	bl	8000718 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000408:	4b70      	ldr	r3, [pc, #448]	; (80005cc <begin+0x1fc>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d009      	beq.n	8000424 <begin+0x54>
 8000410:	79bb      	ldrb	r3, [r7, #6]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d106      	bne.n	8000424 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000416:	4b6b      	ldr	r3, [pc, #428]	; (80005c4 <begin+0x1f4>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b68      	ldr	r3, [pc, #416]	; (80005c4 <begin+0x1f4>)
 8000422:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000424:	f000 f8e4 	bl	80005f0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000428:	2303      	movs	r3, #3
 800042a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	2301      	movs	r3, #1
 800042e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000430:	4b67      	ldr	r3, [pc, #412]	; (80005d0 <begin+0x200>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d01b      	beq.n	8000470 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000438:	4b66      	ldr	r3, [pc, #408]	; (80005d4 <begin+0x204>)
 800043a:	881a      	ldrh	r2, [r3, #0]
 800043c:	4b66      	ldr	r3, [pc, #408]	; (80005d8 <begin+0x208>)
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b65      	ldr	r3, [pc, #404]	; (80005dc <begin+0x20c>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29a      	uxth	r2, r3
 800044c:	4b64      	ldr	r3, [pc, #400]	; (80005e0 <begin+0x210>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	4313      	orrs	r3, r2
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b62      	ldr	r3, [pc, #392]	; (80005e0 <begin+0x210>)
 8000456:	885b      	ldrh	r3, [r3, #2]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b60      	ldr	r3, [pc, #384]	; (80005e0 <begin+0x210>)
 800045e:	889b      	ldrh	r3, [r3, #4]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
 8000464:	4b5e      	ldr	r3, [pc, #376]	; (80005e0 <begin+0x210>)
 8000466:	88db      	ldrh	r3, [r3, #6]
 8000468:	4313      	orrs	r3, r2
 800046a:	b29b      	uxth	r3, r3
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	e02a      	b.n	80004c6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4b58      	ldr	r3, [pc, #352]	; (80005d4 <begin+0x204>)
 8000472:	881a      	ldrh	r2, [r3, #0]
 8000474:	4b58      	ldr	r3, [pc, #352]	; (80005d8 <begin+0x208>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
 800047c:	4b57      	ldr	r3, [pc, #348]	; (80005dc <begin+0x20c>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000484:	4b56      	ldr	r3, [pc, #344]	; (80005e0 <begin+0x210>)
 8000486:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800048c:	4b54      	ldr	r3, [pc, #336]	; (80005e0 <begin+0x210>)
 800048e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000494:	4b52      	ldr	r3, [pc, #328]	; (80005e0 <begin+0x210>)
 8000496:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800049c:	4b50      	ldr	r3, [pc, #320]	; (80005e0 <begin+0x210>)
 800049e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	4b4e      	ldr	r3, [pc, #312]	; (80005e0 <begin+0x210>)
 80004a6:	891b      	ldrh	r3, [r3, #8]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	4b4c      	ldr	r3, [pc, #304]	; (80005e0 <begin+0x210>)
 80004ae:	895b      	ldrh	r3, [r3, #10]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	4b4a      	ldr	r3, [pc, #296]	; (80005e0 <begin+0x210>)
 80004b6:	899b      	ldrh	r3, [r3, #12]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b48      	ldr	r3, [pc, #288]	; (80005e0 <begin+0x210>)
 80004be:	89db      	ldrh	r3, [r3, #14]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004c4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004c6:	4b47      	ldr	r3, [pc, #284]	; (80005e4 <begin+0x214>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f107 020c 	add.w	r2, r7, #12
 80004ce:	4611      	mov	r1, r2
 80004d0:	4618      	mov	r0, r3
 80004d2:	f005 fef1 	bl	80062b8 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004d6:	2032      	movs	r0, #50	; 0x32
 80004d8:	f004 fa16 	bl	8004908 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004dc:	4b41      	ldr	r3, [pc, #260]	; (80005e4 <begin+0x214>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a3c      	ldr	r2, [pc, #240]	; (80005d4 <begin+0x204>)
 80004e2:	8811      	ldrh	r1, [r2, #0]
 80004e4:	2200      	movs	r2, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f006 f878 	bl	80065dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004ec:	4b3d      	ldr	r3, [pc, #244]	; (80005e4 <begin+0x214>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a3a      	ldr	r2, [pc, #232]	; (80005dc <begin+0x20c>)
 80004f2:	8811      	ldrh	r1, [r2, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f006 f870 	bl	80065dc <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004fc:	4b36      	ldr	r3, [pc, #216]	; (80005d8 <begin+0x208>)
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	2bff      	cmp	r3, #255	; 0xff
 8000502:	d007      	beq.n	8000514 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000504:	4b37      	ldr	r3, [pc, #220]	; (80005e4 <begin+0x214>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a33      	ldr	r2, [pc, #204]	; (80005d8 <begin+0x208>)
 800050a:	8811      	ldrh	r1, [r2, #0]
 800050c:	2200      	movs	r2, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f006 f864 	bl	80065dc <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000514:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <begin+0x1f4>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	f003 0310 	and.w	r3, r3, #16
 800051c:	2b00      	cmp	r3, #0
 800051e:	d115      	bne.n	800054c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000520:	2003      	movs	r0, #3
 8000522:	f000 fa1b 	bl	800095c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000526:	2005      	movs	r0, #5
 8000528:	f004 f9ee 	bl	8004908 <HAL_Delay>

    // second try
    write4bits(0x03);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 fa15 	bl	800095c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000532:	2005      	movs	r0, #5
 8000534:	f004 f9e8 	bl	8004908 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000538:	2003      	movs	r0, #3
 800053a:	f000 fa0f 	bl	800095c <write4bits>
    HAL_Delay(1);
 800053e:	2001      	movs	r0, #1
 8000540:	f004 f9e2 	bl	8004908 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000544:	2002      	movs	r0, #2
 8000546:	f000 fa09 	bl	800095c <write4bits>
 800054a:	e01d      	b.n	8000588 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <begin+0x1f4>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	f043 0320 	orr.w	r3, r3, #32
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f000 f97b 	bl	8000852 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800055c:	2005      	movs	r0, #5
 800055e:	f004 f9d3 	bl	8004908 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <begin+0x1f4>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f970 	bl	8000852 <command>
    HAL_Delay(1);
 8000572:	2001      	movs	r0, #1
 8000574:	f004 f9c8 	bl	8004908 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <begin+0x1f4>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f043 0320 	orr.w	r3, r3, #32
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f965 	bl	8000852 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <begin+0x1f4>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	f043 0320 	orr.w	r3, r3, #32
 8000590:	b2db      	uxtb	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f95d 	bl	8000852 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <begin+0x218>)
 800059a:	2204      	movs	r2, #4
 800059c:	701a      	strb	r2, [r3, #0]
  display();
 800059e:	f000 f917 	bl	80007d0 <display>

  // clear it off
  clear();
 80005a2:	f000 f8d9 	bl	8000758 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <begin+0x21c>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <begin+0x21c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f94b 	bl	8000852 <command>

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200001d8 	.word	0x200001d8
 80005c8:	200001db 	.word	0x200001db
 80005cc:	200001bc 	.word	0x200001bc
 80005d0:	20000000 	.word	0x20000000
 80005d4:	200001be 	.word	0x200001be
 80005d8:	200001c0 	.word	0x200001c0
 80005dc:	200001c2 	.word	0x200001c2
 80005e0:	200001c4 	.word	0x200001c4
 80005e4:	200001d4 	.word	0x200001d4
 80005e8:	200001d9 	.word	0x200001d9
 80005ec:	200001da 	.word	0x200001da

080005f0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005f0:	b480      	push	{r7}
 80005f2:	b089      	sub	sp, #36	; 0x24
 80005f4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005f6:	4b41      	ldr	r3, [pc, #260]	; (80006fc <enableClock+0x10c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005fe:	d10c      	bne.n	800061a <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b3f      	ldr	r3, [pc, #252]	; (8000700 <enableClock+0x110>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a3e      	ldr	r2, [pc, #248]	; (8000700 <enableClock+0x110>)
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060a:	6153      	str	r3, [r2, #20]
 800060c:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <enableClock+0x110>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000614:	61fb      	str	r3, [r7, #28]
 8000616:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000618:	e06a      	b.n	80006f0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061a:	4b38      	ldr	r3, [pc, #224]	; (80006fc <enableClock+0x10c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a39      	ldr	r2, [pc, #228]	; (8000704 <enableClock+0x114>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d10c      	bne.n	800063e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <enableClock+0x110>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a35      	ldr	r2, [pc, #212]	; (8000700 <enableClock+0x110>)
 800062a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800062e:	6153      	str	r3, [r2, #20]
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <enableClock+0x110>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000638:	61bb      	str	r3, [r7, #24]
 800063a:	69bb      	ldr	r3, [r7, #24]
}
 800063c:	e058      	b.n	80006f0 <enableClock+0x100>
  else if(_port == GPIOB)
 800063e:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <enableClock+0x10c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a30      	ldr	r2, [pc, #192]	; (8000704 <enableClock+0x114>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d10c      	bne.n	8000662 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <enableClock+0x110>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	4a2c      	ldr	r2, [pc, #176]	; (8000700 <enableClock+0x110>)
 800064e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000652:	6153      	str	r3, [r2, #20]
 8000654:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <enableClock+0x110>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	697b      	ldr	r3, [r7, #20]
}
 8000660:	e046      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <enableClock+0x10c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a28      	ldr	r2, [pc, #160]	; (8000708 <enableClock+0x118>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d10c      	bne.n	8000686 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <enableClock+0x110>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a23      	ldr	r2, [pc, #140]	; (8000700 <enableClock+0x110>)
 8000672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000676:	6153      	str	r3, [r2, #20]
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <enableClock+0x110>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]
}
 8000684:	e034      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <enableClock+0x10c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a20      	ldr	r2, [pc, #128]	; (800070c <enableClock+0x11c>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d10c      	bne.n	80006aa <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <enableClock+0x110>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <enableClock+0x110>)
 8000696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069a:	6153      	str	r3, [r2, #20]
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <enableClock+0x110>)
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	e022      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOE)
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <enableClock+0x10c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <enableClock+0x120>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d10c      	bne.n	80006ce <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <enableClock+0x110>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a11      	ldr	r2, [pc, #68]	; (8000700 <enableClock+0x110>)
 80006ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006be:	6153      	str	r3, [r2, #20]
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <enableClock+0x110>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
}
 80006cc:	e010      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <enableClock+0x10c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a10      	ldr	r2, [pc, #64]	; (8000714 <enableClock+0x124>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d10b      	bne.n	80006f0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <enableClock+0x110>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <enableClock+0x110>)
 80006de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006e2:	6153      	str	r3, [r2, #20]
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <enableClock+0x110>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
}
 80006f0:	bf00      	nop
 80006f2:	3724      	adds	r7, #36	; 0x24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	200001d4 	.word	0x200001d4
 8000700:	40021000 	.word	0x40021000
 8000704:	48000400 	.word	0x48000400
 8000708:	48000800 	.word	0x48000800
 800070c:	48000c00 	.word	0x48000c00
 8000710:	48001000 	.word	0x48001000
 8000714:	48001400 	.word	0x48001400

08000718 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <setRowOffsets+0x3c>)
 800072c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <setRowOffsets+0x3c>)
 8000734:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <setRowOffsets+0x3c>)
 800073c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <setRowOffsets+0x3c>)
 8000744:	70da      	strb	r2, [r3, #3]
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	200001dc 	.word	0x200001dc

08000758 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800075c:	2001      	movs	r0, #1
 800075e:	f000 f878 	bl	8000852 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000762:	2002      	movs	r0, #2
 8000764:	f004 f8d0 	bl	8004908 <HAL_Delay>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800077c:	2304      	movs	r3, #4
 800077e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	429a      	cmp	r2, r3
 8000786:	d803      	bhi.n	8000790 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	3b01      	subs	r3, #1
 800078e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <setCursor+0x5c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	429a      	cmp	r2, r3
 8000798:	d303      	bcc.n	80007a2 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <setCursor+0x5c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	3b01      	subs	r3, #1
 80007a0:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <setCursor+0x60>)
 80007a6:	5cd2      	ldrb	r2, [r2, r3]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4413      	add	r3, r2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f84a 	bl	8000852 <command>
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200001db 	.word	0x200001db
 80007cc:	200001dc 	.word	0x200001dc

080007d0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <display+0x28>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <display+0x28>)
 80007e0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <display+0x28>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	f043 0308 	orr.w	r3, r3, #8
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f830 	bl	8000852 <command>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200001d9 	.word	0x200001d9

080007fc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d101      	bne.n	800080e <print+0x12>
 800080a:	2300      	movs	r3, #0
 800080c:	e01d      	b.n	800084a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff fce6 	bl	80001e4 <strlen>
 8000818:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]

  while (size--) {
 800081e:	e00c      	b.n	800083a <print+0x3e>
    if (write(*buffer++)) n++;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	617a      	str	r2, [r7, #20]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f820 	bl	800086e <write>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d008      	beq.n	8000846 <print+0x4a>
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	1e5a      	subs	r2, r3, #1
 800083e:	613a      	str	r2, [r7, #16]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1ed      	bne.n	8000820 <print+0x24>
 8000844:	e000      	b.n	8000848 <print+0x4c>
    else break;
 8000846:	bf00      	nop
  }
  return n;
 8000848:	68fb      	ldr	r3, [r7, #12]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f813 	bl	800088c <send>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <write>:

inline size_t write(uint8_t value) {
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2101      	movs	r1, #1
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f805 	bl	800088c <send>
  return 1; // assume sucess
 8000882:	2301      	movs	r3, #1
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	460a      	mov	r2, r1
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	4613      	mov	r3, r2
 800089a:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <send+0x6c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a16      	ldr	r2, [pc, #88]	; (80008fc <send+0x70>)
 80008a2:	8811      	ldrh	r1, [r2, #0]
 80008a4:	79ba      	ldrb	r2, [r7, #6]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f005 fe98 	bl	80065dc <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <send+0x74>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	2bff      	cmp	r3, #255	; 0xff
 80008b2:	d007      	beq.n	80008c4 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <send+0x6c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a11      	ldr	r2, [pc, #68]	; (8000900 <send+0x74>)
 80008ba:	8811      	ldrh	r1, [r2, #0]
 80008bc:	2200      	movs	r2, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f005 fe8c 	bl	80065dc <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <send+0x78>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	f003 0310 	and.w	r3, r3, #16
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d004      	beq.n	80008da <send+0x4e>
    write8bits(value); 
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f86c 	bl	80009b0 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 80008d8:	e009      	b.n	80008ee <send+0x62>
    write4bits(value>>4);
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	091b      	lsrs	r3, r3, #4
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f83b 	bl	800095c <write4bits>
    write4bits(value);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 f837 	bl	800095c <write4bits>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200001d4 	.word	0x200001d4
 80008fc:	200001be 	.word	0x200001be
 8000900:	200001c0 	.word	0x200001c0
 8000904:	200001d8 	.word	0x200001d8

08000908 <pulseEnable>:

void pulseEnable(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <pulseEnable+0x4c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a11      	ldr	r2, [pc, #68]	; (8000958 <pulseEnable+0x50>)
 8000912:	8811      	ldrh	r1, [r2, #0]
 8000914:	2200      	movs	r2, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f005 fe60 	bl	80065dc <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 800091c:	2001      	movs	r0, #1
 800091e:	f003 fff3 	bl	8004908 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <pulseEnable+0x4c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a0c      	ldr	r2, [pc, #48]	; (8000958 <pulseEnable+0x50>)
 8000928:	8811      	ldrh	r1, [r2, #0]
 800092a:	2201      	movs	r2, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f005 fe55 	bl	80065dc <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000932:	2001      	movs	r0, #1
 8000934:	f003 ffe8 	bl	8004908 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <pulseEnable+0x4c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <pulseEnable+0x50>)
 800093e:	8811      	ldrh	r1, [r2, #0]
 8000940:	2200      	movs	r2, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f005 fe4a 	bl	80065dc <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8000948:	2001      	movs	r0, #1
 800094a:	f003 ffdd 	bl	8004908 <HAL_Delay>
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200001d4 	.word	0x200001d4
 8000958:	200001c2 	.word	0x200001c2

0800095c <write4bits>:

void write4bits(uint8_t value) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	e013      	b.n	8000994 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <write4bits+0x4c>)
 800096e:	6818      	ldr	r0, [r3, #0]
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <write4bits+0x50>)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	fa42 f303 	asr.w	r3, r2, r3
 8000980:	b2db      	uxtb	r3, r3
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	b2db      	uxtb	r3, r3
 8000988:	461a      	mov	r2, r3
 800098a:	f005 fe27 	bl	80065dc <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3301      	adds	r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2b03      	cmp	r3, #3
 8000998:	dde8      	ble.n	800096c <write4bits+0x10>
  }

  pulseEnable();
 800099a:	f7ff ffb5 	bl	8000908 <pulseEnable>
}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200001d4 	.word	0x200001d4
 80009ac:	200001c4 	.word	0x200001c4

080009b0 <write8bits>:

void write8bits(uint8_t value) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	e013      	b.n	80009e8 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <write8bits+0x4c>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <write8bits+0x50>)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009cc:	79fa      	ldrb	r2, [r7, #7]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	fa42 f303 	asr.w	r3, r2, r3
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	f005 fdfd 	bl	80065dc <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2b07      	cmp	r3, #7
 80009ec:	dde8      	ble.n	80009c0 <write8bits+0x10>
  }
  
  pulseEnable();
 80009ee:	f7ff ff8b 	bl	8000908 <pulseEnable>
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200001d4 	.word	0x200001d4
 8000a00:	200001c4 	.word	0x200001c4

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0a:	f003 ff17 	bl	800483c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0e:	f000 f851 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a12:	f000 fb17 	bl	8001044 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a16:	f000 f981 	bl	8000d1c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a1a:	f000 f9bf 	bl	8000d9c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000a1e:	f000 f9fb 	bl	8000e18 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a22:	f000 fa6f 	bl	8000f04 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000a26:	f000 fabb 	bl	8000fa0 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8000a2a:	f000 fae9 	bl	8001000 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000a2e:	f000 f8a7 	bl	8000b80 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000a32:	f000 f915 	bl	8000c60 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000a36:	2201      	movs	r2, #1
 8000a38:	2101      	movs	r1, #1
 8000a3a:	481b      	ldr	r0, [pc, #108]	; (8000aa8 <main+0xa4>)
 8000a3c:	f005 fdce 	bl	80065dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2102      	movs	r1, #2
 8000a44:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <main+0xa4>)
 8000a46:	f005 fdc9 	bl	80065dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2104      	movs	r1, #4
 8000a4e:	4816      	ldr	r0, [pc, #88]	; (8000aa8 <main+0xa4>)
 8000a50:	f005 fdc4 	bl	80065dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2108      	movs	r1, #8
 8000a58:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <main+0xa4>)
 8000a5a:	f005 fdbf 	bl	80065dc <HAL_GPIO_WritePin>
    LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 8000a5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a62:	9303      	str	r3, [sp, #12]
 8000a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a68:	9302      	str	r3, [sp, #8]
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a82:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <main+0xa4>)
 8000a84:	f7ff fc0c 	bl	80002a0 <LiquidCrystal>
	HAL_TIM_Base_Start_IT(&htim3);
 8000a88:	4808      	ldr	r0, [pc, #32]	; (8000aac <main+0xa8>)
 8000a8a:	f007 fd27 	bl	80084dc <HAL_TIM_Base_Start_IT>
    begin(20,4);
 8000a8e:	2104      	movs	r1, #4
 8000a90:	2014      	movs	r0, #20
 8000a92:	f7ff fc9d 	bl	80003d0 <begin>
    setCursor(0,0);
 8000a96:	2100      	movs	r1, #0
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff fe67 	bl	800076c <setCursor>
    print(">> ControlPanel");
 8000a9e:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <main+0xac>)
 8000aa0:	f7ff feac 	bl	80007fc <print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <main+0xa0>
 8000aa6:	bf00      	nop
 8000aa8:	48000c00 	.word	0x48000c00
 8000aac:	2000037c 	.word	0x2000037c
 8000ab0:	0800af18 	.word	0x0800af18

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09e      	sub	sp, #120	; 0x78
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000abe:	2228      	movs	r2, #40	; 0x28
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f009 fd9c 	bl	800a600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad8:	463b      	mov	r3, r7
 8000ada:	223c      	movs	r2, #60	; 0x3c
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f009 fd8e 	bl	800a600 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ae8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af2:	2301      	movs	r3, #1
 8000af4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af6:	2310      	movs	r3, #16
 8000af8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afa:	2302      	movs	r3, #2
 8000afc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b02:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b08:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f005 ffbe 	bl	8006a90 <HAL_RCC_OscConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b1a:	f000 fb73 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1e:	230f      	movs	r3, #15
 8000b20:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b22:	2302      	movs	r3, #2
 8000b24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f006 ffe6 	bl	8007b0c <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b46:	f000 fb5d 	bl	8001204 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <SystemClock_Config+0xc8>)
 8000b4c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	4618      	mov	r0, r3
 8000b66:	f007 fa07 	bl	8007f78 <HAL_RCCEx_PeriphCLKConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b70:	f000 fb48 	bl	8001204 <Error_Handler>
  }
}
 8000b74:	bf00      	nop
 8000b76:	3778      	adds	r7, #120	; 0x78
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	000200a2 	.word	0x000200a2

08000b80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
 8000ba0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ba2:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000ba4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ba8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000baa:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bbc:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000bec:	2204      	movs	r2, #4
 8000bee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bfc:	4817      	ldr	r0, [pc, #92]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000bfe:	f003 fec5 	bl	800498c <HAL_ADC_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000c08:	f000 fafc 	bl	8001204 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	4811      	ldr	r0, [pc, #68]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000c18:	f005 f80a 	bl	8005c30 <HAL_ADCEx_MultiModeConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c22:	f000 faef 	bl	8001204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000c32:	2307      	movs	r3, #7
 8000c34:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	4619      	mov	r1, r3
 8000c42:	4806      	ldr	r0, [pc, #24]	; (8000c5c <MX_ADC1_Init+0xdc>)
 8000c44:	f004 fd08 	bl	8005658 <HAL_ADC_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000c4e:	f000 fad9 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200001e0 	.word	0x200001e0

08000c60 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c66:	463b      	mov	r3, r7
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c76:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000c78:	4a27      	ldr	r2, [pc, #156]	; (8000d18 <MX_ADC2_Init+0xb8>)
 8000c7a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c7c:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c82:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c88:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cce:	4811      	ldr	r0, [pc, #68]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000cd0:	f003 fe5c 	bl	800498c <HAL_ADC_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000cda:	f000 fa93 	bl	8001204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000cea:	2307      	movs	r3, #7
 8000cec:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <MX_ADC2_Init+0xb4>)
 8000cfc:	f004 fcac 	bl	8005658 <HAL_ADC_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d06:	f000 fa7d 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000230 	.word	0x20000230
 8000d18:	50000100 	.word	0x50000100

08000d1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <MX_I2C1_Init+0x78>)
 8000d24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <MX_I2C1_Init+0x7c>)
 8000d2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d56:	480e      	ldr	r0, [pc, #56]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d58:	f005 fc95 	bl	8006686 <HAL_I2C_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d62:	f000 fa4f 	bl	8001204 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d6a:	f005 fd1b 	bl	80067a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d74:	f000 fa46 	bl	8001204 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_I2C1_Init+0x74>)
 8000d7c:	f005 fd5d 	bl	800683a <HAL_I2CEx_ConfigDigitalFilter>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d86:	f000 fa3d 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000280 	.word	0x20000280
 8000d94:	40005400 	.word	0x40005400
 8000d98:	2000090e 	.word	0x2000090e

08000d9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000da2:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <MX_SPI1_Init+0x78>)
 8000da4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000da8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000db6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000dba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000dd2:	2208      	movs	r2, #8
 8000dd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000dea:	2207      	movs	r2, #7
 8000dec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000df6:	2208      	movs	r2, #8
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_SPI1_Init+0x74>)
 8000dfc:	f007 fa6c 	bl	80082d8 <HAL_SPI_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e06:	f000 f9fd 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200002cc 	.word	0x200002cc
 8000e14:	40013000 	.word	0x40013000

08000e18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <MX_TIM2_Init+0xe8>)
 8000e4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e52:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <MX_TIM2_Init+0xe8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <MX_TIM2_Init+0xe8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e5e:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <MX_TIM2_Init+0xe8>)
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <MX_TIM2_Init+0xe8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <MX_TIM2_Init+0xe8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e72:	4823      	ldr	r0, [pc, #140]	; (8000f00 <MX_TIM2_Init+0xe8>)
 8000e74:	f007 fadb 	bl	800842e <HAL_TIM_Base_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e7e:	f000 f9c1 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481c      	ldr	r0, [pc, #112]	; (8000f00 <MX_TIM2_Init+0xe8>)
 8000e90:	f007 fe22 	bl	8008ad8 <HAL_TIM_ConfigClockSource>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e9a:	f000 f9b3 	bl	8001204 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e9e:	4818      	ldr	r0, [pc, #96]	; (8000f00 <MX_TIM2_Init+0xe8>)
 8000ea0:	f007 fb86 	bl	80085b0 <HAL_TIM_PWM_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000eaa:	f000 f9ab 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4810      	ldr	r0, [pc, #64]	; (8000f00 <MX_TIM2_Init+0xe8>)
 8000ebe:	f008 fb07 	bl	80094d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ec8:	f000 f99c 	bl	8001204 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ecc:	2360      	movs	r3, #96	; 0x60
 8000ece:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000edc:	463b      	mov	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <MX_TIM2_Init+0xe8>)
 8000ee4:	f007 fce4 	bl	80088b0 <HAL_TIM_PWM_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000eee:	f000 f989 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <MX_TIM2_Init+0xe8>)
 8000ef4:	f000 fafc 	bl	80014f0 <HAL_TIM_MspPostInit>

}
 8000ef8:	bf00      	nop
 8000efa:	3738      	adds	r7, #56	; 0x38
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000330 	.word	0x20000330

08000f04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_TIM3_Init+0x94>)
 8000f24:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <MX_TIM3_Init+0x98>)
 8000f26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4799;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_TIM3_Init+0x94>)
 8000f2a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000f2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_TIM3_Init+0x94>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_TIM3_Init+0x94>)
 8000f38:	2264      	movs	r2, #100	; 0x64
 8000f3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_TIM3_Init+0x94>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_TIM3_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f48:	4813      	ldr	r0, [pc, #76]	; (8000f98 <MX_TIM3_Init+0x94>)
 8000f4a:	f007 fa70 	bl	800842e <HAL_TIM_Base_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f54:	f000 f956 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4619      	mov	r1, r3
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <MX_TIM3_Init+0x94>)
 8000f66:	f007 fdb7 	bl	8008ad8 <HAL_TIM_ConfigClockSource>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f70:	f000 f948 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_TIM3_Init+0x94>)
 8000f82:	f008 faa5 	bl	80094d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f8c:	f000 f93a 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2000037c 	.word	0x2000037c
 8000f9c:	40000400 	.word	0x40000400

08000fa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fa6:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <MX_USART2_UART_Init+0x5c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fe4:	f008 fb12 	bl	800960c <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fee:	f000 f909 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200003c8 	.word	0x200003c8
 8000ffc:	40004400 	.word	0x40004400

08001000 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <MX_USB_PCD_Init+0x3c>)
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <MX_USB_PCD_Init+0x40>)
 8001008:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USB_PCD_Init+0x3c>)
 800100c:	2208      	movs	r2, #8
 800100e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <MX_USB_PCD_Init+0x3c>)
 8001012:	2202      	movs	r2, #2
 8001014:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USB_PCD_Init+0x3c>)
 8001018:	2202      	movs	r2, #2
 800101a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <MX_USB_PCD_Init+0x3c>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USB_PCD_Init+0x3c>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <MX_USB_PCD_Init+0x3c>)
 800102a:	f005 fc52 	bl	80068d2 <HAL_PCD_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001034:	f000 f8e6 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000044c 	.word	0x2000044c
 8001040:	40005c00 	.word	0x40005c00

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800105a:	4b66      	ldr	r3, [pc, #408]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a65      	ldr	r2, [pc, #404]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 8001060:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b63      	ldr	r3, [pc, #396]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	4b60      	ldr	r3, [pc, #384]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	4a5f      	ldr	r2, [pc, #380]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 8001078:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800107c:	6153      	str	r3, [r2, #20]
 800107e:	4b5d      	ldr	r3, [pc, #372]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108a:	4b5a      	ldr	r3, [pc, #360]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a59      	ldr	r2, [pc, #356]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 8001090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b57      	ldr	r3, [pc, #348]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a53      	ldr	r2, [pc, #332]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b51      	ldr	r3, [pc, #324]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a4d      	ldr	r2, [pc, #308]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 80010c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b4b      	ldr	r3, [pc, #300]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4b48      	ldr	r3, [pc, #288]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	4a47      	ldr	r2, [pc, #284]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 80010d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010dc:	6153      	str	r3, [r2, #20]
 80010de:	4b45      	ldr	r3, [pc, #276]	; (80011f4 <MX_GPIO_Init+0x1b0>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010ea:	2200      	movs	r2, #0
 80010ec:	f64f 7108 	movw	r1, #65288	; 0xff08
 80010f0:	4841      	ldr	r0, [pc, #260]	; (80011f8 <MX_GPIO_Init+0x1b4>)
 80010f2:	f005 fa73 	bl	80065dc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_Pin|LCDD9_Pin|LCDD10_Pin|LCDD11_Pin
 80010f6:	2200      	movs	r2, #0
 80010f8:	f647 710f 	movw	r1, #32527	; 0x7f0f
 80010fc:	483f      	ldr	r0, [pc, #252]	; (80011fc <MX_GPIO_Init+0x1b8>)
 80010fe:	f005 fa6d 	bl	80065dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001102:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001106:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4837      	ldr	r0, [pc, #220]	; (80011f8 <MX_GPIO_Init+0x1b4>)
 800111c:	f005 f8cc 	bl	80062b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : keyPad_Pin PC1 PC2 PC3
                           PC5 */
  GPIO_InitStruct.Pin = keyPad_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001120:	232f      	movs	r3, #47	; 0x2f
 8001122:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001124:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800112a:	2302      	movs	r3, #2
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4832      	ldr	r0, [pc, #200]	; (8001200 <MX_GPIO_Init+0x1bc>)
 8001136:	f005 f8bf 	bl	80062b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800113a:	2301      	movs	r3, #1
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f005 f8b2 	bl	80062b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 8001154:	2310      	movs	r3, #16
 8001156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001158:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800115c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	4825      	ldr	r0, [pc, #148]	; (8001200 <MX_GPIO_Init+0x1bc>)
 800116a:	f005 f8a5 	bl	80062b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Pin LCDD9_Pin LCDD10_Pin LCDD11_Pin
                           LCDD12_Pin LCDD13_Pin LCDD14_Pin keyPadO_Pin
                           PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = LCD_Pin|LCDD9_Pin|LCDD10_Pin|LCDD11_Pin
 800116e:	f647 730f 	movw	r3, #32527	; 0x7f0f
 8001172:	61fb      	str	r3, [r7, #28]
                          |LCDD12_Pin|LCDD13_Pin|LCDD14_Pin|keyPadO_Pin
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	481d      	ldr	r0, [pc, #116]	; (80011fc <MX_GPIO_Init+0x1b8>)
 8001188:	f005 f896 	bl	80062b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2101      	movs	r1, #1
 8001190:	2006      	movs	r0, #6
 8001192:	f004 ffe4 	bl	800615e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001196:	2006      	movs	r0, #6
 8001198:	f004 fffd 	bl	8006196 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2101      	movs	r1, #1
 80011a0:	2007      	movs	r0, #7
 80011a2:	f004 ffdc 	bl	800615e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011a6:	2007      	movs	r0, #7
 80011a8:	f004 fff5 	bl	8006196 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 1, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2101      	movs	r1, #1
 80011b0:	2008      	movs	r0, #8
 80011b2:	f004 ffd4 	bl	800615e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80011b6:	2008      	movs	r0, #8
 80011b8:	f004 ffed 	bl	8006196 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2101      	movs	r1, #1
 80011c0:	2009      	movs	r0, #9
 80011c2:	f004 ffcc 	bl	800615e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011c6:	2009      	movs	r0, #9
 80011c8:	f004 ffe5 	bl	8006196 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2101      	movs	r1, #1
 80011d0:	200a      	movs	r0, #10
 80011d2:	f004 ffc4 	bl	800615e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011d6:	200a      	movs	r0, #10
 80011d8:	f004 ffdd 	bl	8006196 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2101      	movs	r1, #1
 80011e0:	2017      	movs	r0, #23
 80011e2:	f004 ffbc 	bl	800615e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011e6:	2017      	movs	r0, #23
 80011e8:	f004 ffd5 	bl	8006196 <HAL_NVIC_EnableIRQ>

}
 80011ec:	bf00      	nop
 80011ee:	3730      	adds	r7, #48	; 0x30
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000
 80011f8:	48001000 	.word	0x48001000
 80011fc:	48000c00 	.word	0x48000c00
 8001200:	48000800 	.word	0x48000800

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	e7fe      	b.n	800120c <Error_Handler+0x8>
	...

08001210 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_MspInit+0x44>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_MspInit+0x44>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_MspInit+0x44>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_MspInit+0x44>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_MspInit+0x44>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_MspInit+0x44>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001246:	2006      	movs	r0, #6
 8001248:	f004 ff7e 	bl	8006148 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	; 0x30
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001278:	d136      	bne.n	80012e8 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800127a:	4b3b      	ldr	r3, [pc, #236]	; (8001368 <HAL_ADC_MspInit+0x110>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	4a39      	ldr	r2, [pc, #228]	; (8001368 <HAL_ADC_MspInit+0x110>)
 8001282:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001284:	4b38      	ldr	r3, [pc, #224]	; (8001368 <HAL_ADC_MspInit+0x110>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d10b      	bne.n	80012a4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800128c:	4b37      	ldr	r3, [pc, #220]	; (800136c <HAL_ADC_MspInit+0x114>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	4a36      	ldr	r2, [pc, #216]	; (800136c <HAL_ADC_MspInit+0x114>)
 8001292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001296:	6153      	str	r3, [r2, #20]
 8001298:	4b34      	ldr	r3, [pc, #208]	; (800136c <HAL_ADC_MspInit+0x114>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b31      	ldr	r3, [pc, #196]	; (800136c <HAL_ADC_MspInit+0x114>)
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	4a30      	ldr	r2, [pc, #192]	; (800136c <HAL_ADC_MspInit+0x114>)
 80012aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ae:	6153      	str	r3, [r2, #20]
 80012b0:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_ADC_MspInit+0x114>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = LUM_Pin;
 80012bc:	2302      	movs	r3, #2
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c0:	2303      	movs	r3, #3
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LUM_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f004 fff1 	bl	80062b8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2012      	movs	r0, #18
 80012dc:	f004 ff3f 	bl	800615e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012e0:	2012      	movs	r0, #18
 80012e2:	f004 ff58 	bl	8006196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80012e6:	e03a      	b.n	800135e <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a20      	ldr	r2, [pc, #128]	; (8001370 <HAL_ADC_MspInit+0x118>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d135      	bne.n	800135e <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <HAL_ADC_MspInit+0x110>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	4a1b      	ldr	r2, [pc, #108]	; (8001368 <HAL_ADC_MspInit+0x110>)
 80012fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_ADC_MspInit+0x110>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d10b      	bne.n	800131c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_ADC_MspInit+0x114>)
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	4a18      	ldr	r2, [pc, #96]	; (800136c <HAL_ADC_MspInit+0x114>)
 800130a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130e:	6153      	str	r3, [r2, #20]
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_ADC_MspInit+0x114>)
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_ADC_MspInit+0x114>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	4a12      	ldr	r2, [pc, #72]	; (800136c <HAL_ADC_MspInit+0x114>)
 8001322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001326:	6153      	str	r3, [r2, #20]
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_ADC_MspInit+0x114>)
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TEM_Pin;
 8001334:	2310      	movs	r3, #16
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001338:	2303      	movs	r3, #3
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TEM_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f004 ffb5 	bl	80062b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2012      	movs	r0, #18
 8001354:	f004 ff03 	bl	800615e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001358:	2012      	movs	r0, #18
 800135a:	f004 ff1c 	bl	8006196 <HAL_NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	3730      	adds	r7, #48	; 0x30
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000738 	.word	0x20000738
 800136c:	40021000 	.word	0x40021000
 8001370:	50000100 	.word	0x50000100

08001374 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <HAL_I2C_MspInit+0x7c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d127      	bne.n	80013e6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_I2C_MspInit+0x80>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <HAL_I2C_MspInit+0x80>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a0:	6153      	str	r3, [r2, #20]
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_I2C_MspInit+0x80>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80013ae:	23c0      	movs	r3, #192	; 0xc0
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b2:	2312      	movs	r3, #18
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013be:	2304      	movs	r3, #4
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	480b      	ldr	r0, [pc, #44]	; (80013f8 <HAL_I2C_MspInit+0x84>)
 80013ca:	f004 ff75 	bl	80062b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_I2C_MspInit+0x80>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_I2C_MspInit+0x80>)
 80013d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_I2C_MspInit+0x80>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013e6:	bf00      	nop
 80013e8:	3728      	adds	r7, #40	; 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40005400 	.word	0x40005400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000400 	.word	0x48000400

080013fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_SPI_MspInit+0x7c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d128      	bne.n	8001470 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_SPI_MspInit+0x80>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	4a16      	ldr	r2, [pc, #88]	; (800147c <HAL_SPI_MspInit+0x80>)
 8001424:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001428:	6193      	str	r3, [r2, #24]
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_SPI_MspInit+0x80>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_SPI_MspInit+0x80>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_SPI_MspInit+0x80>)
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	6153      	str	r3, [r2, #20]
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_SPI_MspInit+0x80>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800144e:	23e0      	movs	r3, #224	; 0xe0
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800145e:	2305      	movs	r3, #5
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146c:	f004 ff24 	bl	80062b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40013000 	.word	0x40013000
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001490:	d10c      	bne.n	80014ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_TIM_Base_MspInit+0x68>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <HAL_TIM_Base_MspInit+0x68>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	61d3      	str	r3, [r2, #28]
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_TIM_Base_MspInit+0x68>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014aa:	e018      	b.n	80014de <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_TIM_Base_MspInit+0x6c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d113      	bne.n	80014de <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_TIM_Base_MspInit+0x68>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_TIM_Base_MspInit+0x68>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_TIM_Base_MspInit+0x68>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	201d      	movs	r0, #29
 80014d4:	f004 fe43 	bl	800615e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014d8:	201d      	movs	r0, #29
 80014da:	f004 fe5c 	bl	8006196 <HAL_NVIC_EnableIRQ>
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40000400 	.word	0x40000400

080014f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001510:	d11d      	bne.n	800154e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_TIM_MspPostInit+0x68>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_TIM_MspPostInit+0x68>)
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	6153      	str	r3, [r2, #20]
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_TIM_MspPostInit+0x68>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800152a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800152e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800153c:	2301      	movs	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154a:	f004 feb5 	bl	80062b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800154e:	bf00      	nop
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1b      	ldr	r2, [pc, #108]	; (80015e8 <HAL_UART_MspInit+0x8c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d130      	bne.n	80015e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_UART_MspInit+0x90>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	4a1a      	ldr	r2, [pc, #104]	; (80015ec <HAL_UART_MspInit+0x90>)
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	61d3      	str	r3, [r2, #28]
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_UART_MspInit+0x90>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_UART_MspInit+0x90>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	4a14      	ldr	r2, [pc, #80]	; (80015ec <HAL_UART_MspInit+0x90>)
 800159c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a0:	6153      	str	r3, [r2, #20]
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_UART_MspInit+0x90>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ae:	230c      	movs	r3, #12
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015be:	2307      	movs	r3, #7
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015cc:	f004 fe74 	bl	80062b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2026      	movs	r0, #38	; 0x26
 80015d6:	f004 fdc2 	bl	800615e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015da:	2026      	movs	r0, #38	; 0x26
 80015dc:	f004 fddb 	bl	8006196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	; 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40004400 	.word	0x40004400
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a18      	ldr	r2, [pc, #96]	; (8001670 <HAL_PCD_MspInit+0x80>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d129      	bne.n	8001666 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_PCD_MspInit+0x84>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a17      	ldr	r2, [pc, #92]	; (8001674 <HAL_PCD_MspInit+0x84>)
 8001618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161c:	6153      	str	r3, [r2, #20]
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_PCD_MspInit+0x84>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800162a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800163c:	230e      	movs	r3, #14
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164a:	f004 fe35 	bl	80062b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_PCD_MspInit+0x84>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_PCD_MspInit+0x84>)
 8001654:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_PCD_MspInit+0x84>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40005c00 	.word	0x40005c00
 8001674:	40021000 	.word	0x40021000

08001678 <createNode>:
    struct TreeNode* child8;
    struct TreeNode* parent;
    struct menuScreen screen;
};

struct TreeNode* createNode(struct menuScreen screen, struct TreeNode* parent) {
 8001678:	b084      	sub	sp, #16
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	f107 0c10 	add.w	ip, r7, #16
 8001684:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
 8001688:	f44f 709a 	mov.w	r0, #308	; 0x134
 800168c:	f008 ffa2 	bl	800a5d4 <malloc>
 8001690:	4603      	mov	r3, r0
 8001692:	607b      	str	r3, [r7, #4]
    newNode->child1 = NULL;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
    newNode->child2 = NULL;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
    newNode->child3 = NULL;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
    newNode->child4 = NULL;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
    newNode->child5 = NULL;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
    newNode->child6 = NULL;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
    newNode->child7 = NULL;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
    newNode->child8 = NULL;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	61da      	str	r2, [r3, #28]
    newNode->parent = parent;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80016ca:	621a      	str	r2, [r3, #32]
    newNode->screen = screen;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3324      	adds	r3, #36	; 0x24
 80016d0:	f107 0110 	add.w	r1, r7, #16
 80016d4:	f44f 7288 	mov.w	r2, #272	; 0x110
 80016d8:	4618      	mov	r0, r3
 80016da:	f008 ff83 	bl	800a5e4 <memcpy>
    return newNode;
 80016de:	687b      	ldr	r3, [r7, #4]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016ea:	b004      	add	sp, #16
 80016ec:	4770      	bx	lr
	...

080016f0 <GenerateMenu>:
struct TreeNode* node19;
struct TreeNode* node_1;

struct TreeNode* currentNode;

void GenerateMenu(){
 80016f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f2:	f5ad 5dba 	sub.w	sp, sp, #5952	; 0x1740
 80016f6:	b087      	sub	sp, #28
 80016f8:	af42      	add	r7, sp, #264	; 0x108
	struct menuScreen mainMenu = {0, 1, 1, {">> ControlPanel   "}, ""};
 80016fa:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80016fe:	f103 0310 	add.w	r3, r3, #16
 8001702:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001706:	4618      	mov	r0, r3
 8001708:	f44f 7388 	mov.w	r3, #272	; 0x110
 800170c:	461a      	mov	r2, r3
 800170e:	2100      	movs	r1, #0
 8001710:	f008 ff76 	bl	800a600 <memset>
 8001714:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001718:	f103 0310 	add.w	r3, r3, #16
 800171c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001720:	2201      	movs	r2, #1
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001728:	f103 0310 	add.w	r3, r3, #16
 800172c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001730:	2201      	movs	r2, #1
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001738:	f103 0310 	add.w	r3, r3, #16
 800173c:	f5a3 7688 	sub.w	r6, r3, #272	; 0x110
 8001740:	4bd8      	ldr	r3, [pc, #864]	; (8001aa4 <GenerateMenu+0x3b4>)
 8001742:	f106 040c 	add.w	r4, r6, #12
 8001746:	461d      	mov	r5, r3
 8001748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800174a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	8022      	strh	r2, [r4, #0]
 8001752:	3402      	adds	r4, #2
 8001754:	0c1b      	lsrs	r3, r3, #16
 8001756:	7023      	strb	r3, [r4, #0]
 8001758:	2300      	movs	r3, #0
 800175a:	77f3      	strb	r3, [r6, #31]
    struct menuScreen controlPanel = {1, 7, 1, {">> Temperature   ", "> Security       ", "> Lights       ", "> Scenarios    ", "> StartSetting   ","> AddScenario   ","> ShutDown   "}, ""};
 800175c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001760:	f103 0310 	add.w	r3, r3, #16
 8001764:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001768:	4618      	mov	r0, r3
 800176a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800176e:	461a      	mov	r2, r3
 8001770:	2100      	movs	r1, #0
 8001772:	f008 ff45 	bl	800a600 <memset>
 8001776:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800177a:	f103 0310 	add.w	r3, r3, #16
 800177e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800178a:	f103 0310 	add.w	r3, r3, #16
 800178e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001792:	2207      	movs	r2, #7
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800179a:	f103 0310 	add.w	r3, r3, #16
 800179e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80017a2:	2201      	movs	r2, #1
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80017aa:	f103 0310 	add.w	r3, r3, #16
 80017ae:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 80017b2:	4bbd      	ldr	r3, [pc, #756]	; (8001aa8 <GenerateMenu+0x3b8>)
 80017b4:	f106 040c 	add.w	r4, r6, #12
 80017b8:	461d      	mov	r5, r3
 80017ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017be:	682b      	ldr	r3, [r5, #0]
 80017c0:	8023      	strh	r3, [r4, #0]
 80017c2:	2300      	movs	r3, #0
 80017c4:	83f3      	strh	r3, [r6, #30]
 80017c6:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80017ca:	f103 0310 	add.w	r3, r3, #16
 80017ce:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 80017d2:	4bb6      	ldr	r3, [pc, #728]	; (8001aac <GenerateMenu+0x3bc>)
 80017d4:	f106 0420 	add.w	r4, r6, #32
 80017d8:	461d      	mov	r5, r3
 80017da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017de:	682b      	ldr	r3, [r5, #0]
 80017e0:	8023      	strh	r3, [r4, #0]
 80017e2:	2300      	movs	r3, #0
 80017e4:	8673      	strh	r3, [r6, #50]	; 0x32
 80017e6:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80017ea:	f103 0310 	add.w	r3, r3, #16
 80017ee:	f5a3 7408 	sub.w	r4, r3, #544	; 0x220
 80017f2:	4baf      	ldr	r3, [pc, #700]	; (8001ab0 <GenerateMenu+0x3c0>)
 80017f4:	f104 0534 	add.w	r5, r4, #52	; 0x34
 80017f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017fe:	2300      	movs	r3, #0
 8001800:	6463      	str	r3, [r4, #68]	; 0x44
 8001802:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001806:	f103 0310 	add.w	r3, r3, #16
 800180a:	f5a3 7408 	sub.w	r4, r3, #544	; 0x220
 800180e:	4ba9      	ldr	r3, [pc, #676]	; (8001ab4 <GenerateMenu+0x3c4>)
 8001810:	f104 0548 	add.w	r5, r4, #72	; 0x48
 8001814:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001816:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800181a:	2300      	movs	r3, #0
 800181c:	65a3      	str	r3, [r4, #88]	; 0x58
 800181e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001822:	f103 0310 	add.w	r3, r3, #16
 8001826:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 800182a:	4ba3      	ldr	r3, [pc, #652]	; (8001ab8 <GenerateMenu+0x3c8>)
 800182c:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 8001830:	461d      	mov	r5, r3
 8001832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001836:	682b      	ldr	r3, [r5, #0]
 8001838:	8023      	strh	r3, [r4, #0]
 800183a:	2300      	movs	r3, #0
 800183c:	f8a6 306e 	strh.w	r3, [r6, #110]	; 0x6e
 8001840:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001844:	f103 0310 	add.w	r3, r3, #16
 8001848:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 800184c:	4b9b      	ldr	r3, [pc, #620]	; (8001abc <GenerateMenu+0x3cc>)
 800184e:	f106 0470 	add.w	r4, r6, #112	; 0x70
 8001852:	461d      	mov	r5, r3
 8001854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001858:	682b      	ldr	r3, [r5, #0]
 800185a:	7023      	strb	r3, [r4, #0]
 800185c:	f106 0381 	add.w	r3, r6, #129	; 0x81
 8001860:	2200      	movs	r2, #0
 8001862:	801a      	strh	r2, [r3, #0]
 8001864:	709a      	strb	r2, [r3, #2]
 8001866:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800186a:	f103 0310 	add.w	r3, r3, #16
 800186e:	f5a3 7508 	sub.w	r5, r3, #544	; 0x220
 8001872:	4b93      	ldr	r3, [pc, #588]	; (8001ac0 <GenerateMenu+0x3d0>)
 8001874:	f105 0484 	add.w	r4, r5, #132	; 0x84
 8001878:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800187a:	c407      	stmia	r4!, {r0, r1, r2}
 800187c:	8023      	strh	r3, [r4, #0]
 800187e:	f105 0392 	add.w	r3, r5, #146	; 0x92
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	809a      	strh	r2, [r3, #4]
    struct menuScreen temperature = {2, 2, 1, {">> Threshold    ", "> AlarmSound   "}, ""};
 8001888:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800188c:	f103 0310 	add.w	r3, r3, #16
 8001890:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001894:	4618      	mov	r0, r3
 8001896:	f44f 7388 	mov.w	r3, #272	; 0x110
 800189a:	461a      	mov	r2, r3
 800189c:	2100      	movs	r1, #0
 800189e:	f008 feaf 	bl	800a600 <memset>
 80018a2:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80018a6:	f103 0310 	add.w	r3, r3, #16
 80018aa:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80018ae:	2202      	movs	r2, #2
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80018b6:	f103 0310 	add.w	r3, r3, #16
 80018ba:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80018be:	2202      	movs	r2, #2
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80018c6:	f103 0310 	add.w	r3, r3, #16
 80018ca:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80018ce:	2201      	movs	r2, #1
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80018d6:	f103 0310 	add.w	r3, r3, #16
 80018da:	f5a3 764c 	sub.w	r6, r3, #816	; 0x330
 80018de:	4b79      	ldr	r3, [pc, #484]	; (8001ac4 <GenerateMenu+0x3d4>)
 80018e0:	f106 040c 	add.w	r4, r6, #12
 80018e4:	461d      	mov	r5, r3
 80018e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ea:	682b      	ldr	r3, [r5, #0]
 80018ec:	7023      	strb	r3, [r4, #0]
 80018ee:	f106 031d 	add.w	r3, r6, #29
 80018f2:	2200      	movs	r2, #0
 80018f4:	801a      	strh	r2, [r3, #0]
 80018f6:	709a      	strb	r2, [r3, #2]
 80018f8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80018fc:	f103 0310 	add.w	r3, r3, #16
 8001900:	f5a3 744c 	sub.w	r4, r3, #816	; 0x330
 8001904:	4b70      	ldr	r3, [pc, #448]	; (8001ac8 <GenerateMenu+0x3d8>)
 8001906:	f104 0520 	add.w	r5, r4, #32
 800190a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800190c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001910:	2300      	movs	r3, #0
 8001912:	6323      	str	r3, [r4, #48]	; 0x30
    struct menuScreen security = {3, 2, 1, {">> Activation   ", "> AlarmSound   "}, ""};
 8001914:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001918:	f103 0310 	add.w	r3, r3, #16
 800191c:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8001920:	4618      	mov	r0, r3
 8001922:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001926:	461a      	mov	r2, r3
 8001928:	2100      	movs	r1, #0
 800192a:	f008 fe69 	bl	800a600 <memset>
 800192e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001932:	f103 0310 	add.w	r3, r3, #16
 8001936:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800193a:	2203      	movs	r2, #3
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001942:	f103 0310 	add.w	r3, r3, #16
 8001946:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800194a:	2202      	movs	r2, #2
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001952:	f103 0310 	add.w	r3, r3, #16
 8001956:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800195a:	2201      	movs	r2, #1
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001962:	f103 0310 	add.w	r3, r3, #16
 8001966:	f5a3 6688 	sub.w	r6, r3, #1088	; 0x440
 800196a:	4b58      	ldr	r3, [pc, #352]	; (8001acc <GenerateMenu+0x3dc>)
 800196c:	f106 040c 	add.w	r4, r6, #12
 8001970:	461d      	mov	r5, r3
 8001972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001976:	682b      	ldr	r3, [r5, #0]
 8001978:	7023      	strb	r3, [r4, #0]
 800197a:	f106 031d 	add.w	r3, r6, #29
 800197e:	2200      	movs	r2, #0
 8001980:	801a      	strh	r2, [r3, #0]
 8001982:	709a      	strb	r2, [r3, #2]
 8001984:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001988:	f103 0310 	add.w	r3, r3, #16
 800198c:	f5a3 6488 	sub.w	r4, r3, #1088	; 0x440
 8001990:	4b4d      	ldr	r3, [pc, #308]	; (8001ac8 <GenerateMenu+0x3d8>)
 8001992:	f104 0520 	add.w	r5, r4, #32
 8001996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001998:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800199c:	2300      	movs	r3, #0
 800199e:	6323      	str	r3, [r4, #48]	; 0x30
    struct menuScreen lightsControl = {4, 0, 0, {""}, "X  X  X  X"};
 80019a0:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80019a4:	f103 0310 	add.w	r3, r3, #16
 80019a8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80019ac:	4618      	mov	r0, r3
 80019ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80019b2:	461a      	mov	r2, r3
 80019b4:	2100      	movs	r1, #0
 80019b6:	f008 fe23 	bl	800a600 <memset>
 80019ba:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80019be:	f103 0310 	add.w	r3, r3, #16
 80019c2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80019c6:	2204      	movs	r2, #4
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80019ce:	f103 0310 	add.w	r3, r3, #16
 80019d2:	f5a3 64aa 	sub.w	r4, r3, #1360	; 0x550
 80019d6:	4a3e      	ldr	r2, [pc, #248]	; (8001ad0 <GenerateMenu+0x3e0>)
 80019d8:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 80019dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80019de:	c303      	stmia	r3!, {r0, r1}
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	3302      	adds	r3, #2
 80019e4:	0c12      	lsrs	r2, r2, #16
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	f104 03b7 	add.w	r3, r4, #183	; 0xb7
 80019ec:	2259      	movs	r2, #89	; 0x59
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f008 fe05 	bl	800a600 <memset>
    struct menuScreen scenarios = {5, 2, 1, {">> Scenario 1   ", "> Scenario 2   "}, ""};
 80019f6:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80019fa:	f103 0310 	add.w	r3, r3, #16
 80019fe:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001a02:	4618      	mov	r0, r3
 8001a04:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	f008 fdf8 	bl	800a600 <memset>
 8001a10:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001a14:	f103 0310 	add.w	r3, r3, #16
 8001a18:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001a1c:	2205      	movs	r2, #5
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001a24:	f103 0310 	add.w	r3, r3, #16
 8001a28:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001a34:	f103 0310 	add.w	r3, r3, #16
 8001a38:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001a44:	f103 0310 	add.w	r3, r3, #16
 8001a48:	f5a3 66cc 	sub.w	r6, r3, #1632	; 0x660
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <GenerateMenu+0x3e4>)
 8001a4e:	f106 040c 	add.w	r4, r6, #12
 8001a52:	461d      	mov	r5, r3
 8001a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a58:	682b      	ldr	r3, [r5, #0]
 8001a5a:	7023      	strb	r3, [r4, #0]
 8001a5c:	f106 031d 	add.w	r3, r6, #29
 8001a60:	2200      	movs	r2, #0
 8001a62:	801a      	strh	r2, [r3, #0]
 8001a64:	709a      	strb	r2, [r3, #2]
 8001a66:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001a6a:	f103 0310 	add.w	r3, r3, #16
 8001a6e:	f5a3 64cc 	sub.w	r4, r3, #1632	; 0x660
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <GenerateMenu+0x3e8>)
 8001a74:	f104 0520 	add.w	r5, r4, #32
 8001a78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a7e:	2300      	movs	r3, #0
 8001a80:	6323      	str	r3, [r4, #48]	; 0x30
    struct menuScreen nameSet = {6, 1, 0, {"write your phrase"}," " };
 8001a82:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001a86:	f103 0310 	add.w	r3, r3, #16
 8001a8a:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a94:	461a      	mov	r2, r3
 8001a96:	2100      	movs	r1, #0
 8001a98:	f008 fdb2 	bl	800a600 <memset>
 8001a9c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001aa0:	e01c      	b.n	8001adc <GenerateMenu+0x3ec>
 8001aa2:	bf00      	nop
 8001aa4:	0800af28 	.word	0x0800af28
 8001aa8:	0800af3c 	.word	0x0800af3c
 8001aac:	0800af50 	.word	0x0800af50
 8001ab0:	0800af64 	.word	0x0800af64
 8001ab4:	0800af78 	.word	0x0800af78
 8001ab8:	0800af8c 	.word	0x0800af8c
 8001abc:	0800afa0 	.word	0x0800afa0
 8001ac0:	0800afb4 	.word	0x0800afb4
 8001ac4:	0800afc8 	.word	0x0800afc8
 8001ac8:	0800afdc 	.word	0x0800afdc
 8001acc:	0800aff0 	.word	0x0800aff0
 8001ad0:	0800b004 	.word	0x0800b004
 8001ad4:	0800b068 	.word	0x0800b068
 8001ad8:	0800b07c 	.word	0x0800b07c
 8001adc:	f103 0310 	add.w	r3, r3, #16
 8001ae0:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 8001ae4:	2206      	movs	r2, #6
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001aec:	f103 0310 	add.w	r3, r3, #16
 8001af0:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 8001af4:	2201      	movs	r2, #1
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001afc:	f103 0310 	add.w	r3, r3, #16
 8001b00:	f5a3 66ee 	sub.w	r6, r3, #1904	; 0x770
 8001b04:	4bde      	ldr	r3, [pc, #888]	; (8001e80 <GenerateMenu+0x790>)
 8001b06:	f106 040c 	add.w	r4, r6, #12
 8001b0a:	461d      	mov	r5, r3
 8001b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b10:	682b      	ldr	r3, [r5, #0]
 8001b12:	8023      	strh	r3, [r4, #0]
 8001b14:	2300      	movs	r3, #0
 8001b16:	83f3      	strh	r3, [r6, #30]
 8001b18:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001b1c:	f103 0310 	add.w	r3, r3, #16
 8001b20:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 8001b24:	2220      	movs	r2, #32
 8001b26:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8001b2a:	33b0      	adds	r3, #176	; 0xb0
 8001b2c:	2260      	movs	r2, #96	; 0x60
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f008 fd65 	bl	800a600 <memset>
    struct menuScreen temThresh = {7, 0, 0, {""}, "<  10  >"};
 8001b36:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001b3a:	f103 0310 	add.w	r3, r3, #16
 8001b3e:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 8001b42:	4618      	mov	r0, r3
 8001b44:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	f008 fd58 	bl	800a600 <memset>
 8001b50:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001b54:	f103 0310 	add.w	r3, r3, #16
 8001b58:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001b64:	f103 0310 	add.w	r3, r3, #16
 8001b68:	f5a3 6408 	sub.w	r4, r3, #2176	; 0x880
 8001b6c:	4ac5      	ldr	r2, [pc, #788]	; (8001e84 <GenerateMenu+0x794>)
 8001b6e:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001b72:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b74:	c303      	stmia	r3!, {r0, r1}
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001b7c:	225b      	movs	r2, #91	; 0x5b
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f008 fd3d 	bl	800a600 <memset>
    struct menuScreen temAlarm = {8, 0, 0, {""}, "<  on  >"};
 8001b86:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001b8a:	f103 0310 	add.w	r3, r3, #16
 8001b8e:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 8001b92:	4618      	mov	r0, r3
 8001b94:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	f008 fd30 	bl	800a600 <memset>
 8001ba0:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001ba4:	f103 0310 	add.w	r3, r3, #16
 8001ba8:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 8001bac:	2208      	movs	r2, #8
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001bb4:	f103 0310 	add.w	r3, r3, #16
 8001bb8:	f5a3 6419 	sub.w	r4, r3, #2448	; 0x990
 8001bbc:	4ab2      	ldr	r2, [pc, #712]	; (8001e88 <GenerateMenu+0x798>)
 8001bbe:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001bc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bc4:	c303      	stmia	r3!, {r0, r1}
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001bcc:	225b      	movs	r2, #91	; 0x5b
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f008 fd15 	bl	800a600 <memset>
    struct menuScreen securityActivation = {9, 0, 0, {""}, "<  on  >"};
 8001bd6:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001bda:	f103 0310 	add.w	r3, r3, #16
 8001bde:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001be8:	461a      	mov	r2, r3
 8001bea:	2100      	movs	r1, #0
 8001bec:	f008 fd08 	bl	800a600 <memset>
 8001bf0:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001bf4:	f103 0310 	add.w	r3, r3, #16
 8001bf8:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 8001bfc:	2209      	movs	r2, #9
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001c04:	f103 0310 	add.w	r3, r3, #16
 8001c08:	f5a3 642a 	sub.w	r4, r3, #2720	; 0xaa0
 8001c0c:	4a9e      	ldr	r2, [pc, #632]	; (8001e88 <GenerateMenu+0x798>)
 8001c0e:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001c12:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c14:	c303      	stmia	r3!, {r0, r1}
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001c1c:	225b      	movs	r2, #91	; 0x5b
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f008 fced 	bl	800a600 <memset>
    struct menuScreen securityAlarm = {10, 0, 0, {""}, "<  on  >"};
 8001c26:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001c2a:	f103 0310 	add.w	r3, r3, #16
 8001c2e:	f5a3 633b 	sub.w	r3, r3, #2992	; 0xbb0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001c38:	461a      	mov	r2, r3
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	f008 fce0 	bl	800a600 <memset>
 8001c40:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001c44:	f103 0310 	add.w	r3, r3, #16
 8001c48:	f5a3 633b 	sub.w	r3, r3, #2992	; 0xbb0
 8001c4c:	220a      	movs	r2, #10
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001c54:	f103 0310 	add.w	r3, r3, #16
 8001c58:	f5a3 643b 	sub.w	r4, r3, #2992	; 0xbb0
 8001c5c:	4a8a      	ldr	r2, [pc, #552]	; (8001e88 <GenerateMenu+0x798>)
 8001c5e:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001c62:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c64:	c303      	stmia	r3!, {r0, r1}
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001c6c:	225b      	movs	r2, #91	; 0x5b
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f008 fcc5 	bl	800a600 <memset>
    struct menuScreen scenario1 = {11, 8, 0, {"temTHreshold=22","temAlarm=on","securityAlarm=off","securityAlert=on","light1=on","light2=on","light3=off","light4=off"}, "<  off  >"};
 8001c76:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001c7a:	f103 0310 	add.w	r3, r3, #16
 8001c7e:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 8001c82:	4a82      	ldr	r2, [pc, #520]	; (8001e8c <GenerateMenu+0x79c>)
 8001c84:	4618      	mov	r0, r3
 8001c86:	4611      	mov	r1, r2
 8001c88:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	f008 fca9 	bl	800a5e4 <memcpy>
    struct menuScreen scenario2 = {12, 8, 0, {"temTHreshold=35","temAlarm=on","securityAlarm=on","securityAlert=on","light1=off","light2=off","light3=off","light4=off"}, "<  off  >"};
 8001c92:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001c96:	f103 0310 	add.w	r3, r3, #16
 8001c9a:	f5a3 635d 	sub.w	r3, r3, #3536	; 0xdd0
 8001c9e:	4a7c      	ldr	r2, [pc, #496]	; (8001e90 <GenerateMenu+0x7a0>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001ca8:	461a      	mov	r2, r3
 8001caa:	f008 fc9b 	bl	800a5e4 <memcpy>

    struct menuScreen AddScenario= {13, 6, 1, {">> temTHreshold    ","> temAlarm    ","> securityAlarm   ","> securityAlert   ","> lights        ","> create         "}, ""};
 8001cae:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001cb2:	f103 0310 	add.w	r3, r3, #16
 8001cb6:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	f008 fc9c 	bl	800a600 <memset>
 8001cc8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001ccc:	f103 0310 	add.w	r3, r3, #16
 8001cd0:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8001cd4:	220d      	movs	r2, #13
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001cdc:	f103 0310 	add.w	r3, r3, #16
 8001ce0:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8001ce4:	2206      	movs	r2, #6
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001cec:	f103 0310 	add.w	r3, r3, #16
 8001cf0:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001cfc:	f103 0310 	add.w	r3, r3, #16
 8001d00:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8001d04:	4a63      	ldr	r2, [pc, #396]	; (8001e94 <GenerateMenu+0x7a4>)
 8001d06:	f103 040c 	add.w	r4, r3, #12
 8001d0a:	4615      	mov	r5, r2
 8001d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d10:	682b      	ldr	r3, [r5, #0]
 8001d12:	6023      	str	r3, [r4, #0]
 8001d14:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001d18:	f103 0310 	add.w	r3, r3, #16
 8001d1c:	f5a3 656e 	sub.w	r5, r3, #3808	; 0xee0
 8001d20:	4b5d      	ldr	r3, [pc, #372]	; (8001e98 <GenerateMenu+0x7a8>)
 8001d22:	f105 0420 	add.w	r4, r5, #32
 8001d26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d28:	c407      	stmia	r4!, {r0, r1, r2}
 8001d2a:	8023      	strh	r3, [r4, #0]
 8001d2c:	3402      	adds	r4, #2
 8001d2e:	0c1b      	lsrs	r3, r3, #16
 8001d30:	7023      	strb	r3, [r4, #0]
 8001d32:	f105 032f 	add.w	r3, r5, #47	; 0x2f
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	711a      	strb	r2, [r3, #4]
 8001d3c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001d40:	f103 0310 	add.w	r3, r3, #16
 8001d44:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 8001d48:	4b54      	ldr	r3, [pc, #336]	; (8001e9c <GenerateMenu+0x7ac>)
 8001d4a:	f106 0434 	add.w	r4, r6, #52	; 0x34
 8001d4e:	461d      	mov	r5, r3
 8001d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	8022      	strh	r2, [r4, #0]
 8001d5a:	3402      	adds	r4, #2
 8001d5c:	0c1b      	lsrs	r3, r3, #16
 8001d5e:	7023      	strb	r3, [r4, #0]
 8001d60:	2300      	movs	r3, #0
 8001d62:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
 8001d66:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001d6a:	f103 0310 	add.w	r3, r3, #16
 8001d6e:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 8001d72:	4b4b      	ldr	r3, [pc, #300]	; (8001ea0 <GenerateMenu+0x7b0>)
 8001d74:	f106 0448 	add.w	r4, r6, #72	; 0x48
 8001d78:	461d      	mov	r5, r3
 8001d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7e:	682b      	ldr	r3, [r5, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	8022      	strh	r2, [r4, #0]
 8001d84:	3402      	adds	r4, #2
 8001d86:	0c1b      	lsrs	r3, r3, #16
 8001d88:	7023      	strb	r3, [r4, #0]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f886 305b 	strb.w	r3, [r6, #91]	; 0x5b
 8001d90:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001d94:	f103 0310 	add.w	r3, r3, #16
 8001d98:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 8001d9c:	4b41      	ldr	r3, [pc, #260]	; (8001ea4 <GenerateMenu+0x7b4>)
 8001d9e:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 8001da2:	461d      	mov	r5, r3
 8001da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da8:	682b      	ldr	r3, [r5, #0]
 8001daa:	7023      	strb	r3, [r4, #0]
 8001dac:	f106 036d 	add.w	r3, r6, #109	; 0x6d
 8001db0:	2200      	movs	r2, #0
 8001db2:	801a      	strh	r2, [r3, #0]
 8001db4:	709a      	strb	r2, [r3, #2]
 8001db6:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001dba:	f103 0310 	add.w	r3, r3, #16
 8001dbe:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 8001dc2:	4b39      	ldr	r3, [pc, #228]	; (8001ea8 <GenerateMenu+0x7b8>)
 8001dc4:	f106 0470 	add.w	r4, r6, #112	; 0x70
 8001dc8:	461d      	mov	r5, r3
 8001dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dce:	682b      	ldr	r3, [r5, #0]
 8001dd0:	8023      	strh	r3, [r4, #0]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
    struct menuScreen scenTemThreshold = {14,0,0, {""}, "<  10  >"};
 8001dd8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001ddc:	f103 0310 	add.w	r3, r3, #16
 8001de0:	f5a3 637f 	sub.w	r3, r3, #4080	; 0xff0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001dea:	461a      	mov	r2, r3
 8001dec:	2100      	movs	r1, #0
 8001dee:	f008 fc07 	bl	800a600 <memset>
 8001df2:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001df6:	f103 0310 	add.w	r3, r3, #16
 8001dfa:	f5a3 637f 	sub.w	r3, r3, #4080	; 0xff0
 8001dfe:	220e      	movs	r2, #14
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001e06:	f103 0310 	add.w	r3, r3, #16
 8001e0a:	f5a3 647f 	sub.w	r4, r3, #4080	; 0xff0
 8001e0e:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <GenerateMenu+0x794>)
 8001e10:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001e14:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e16:	c303      	stmia	r3!, {r0, r1}
 8001e18:	701a      	strb	r2, [r3, #0]
 8001e1a:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001e1e:	225b      	movs	r2, #91	; 0x5b
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f008 fbec 	bl	800a600 <memset>
    struct menuScreen scenTemAlarm = {15, 0, 0, {""}, "<  on  >"};
 8001e28:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001e2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e30:	4618      	mov	r0, r3
 8001e32:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001e36:	461a      	mov	r2, r3
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f008 fbe1 	bl	800a600 <memset>
 8001e3e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001e42:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e46:	220f      	movs	r2, #15
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001e4e:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 8001e52:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <GenerateMenu+0x798>)
 8001e54:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001e58:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e5a:	c303      	stmia	r3!, {r0, r1}
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001e62:	225b      	movs	r2, #91	; 0x5b
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f008 fbca 	bl	800a600 <memset>
	struct menuScreen scenSecAlarm = {16, 0, 0, {""}, "<  on  >"};
 8001e6c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001e70:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001e74:	4618      	mov	r0, r3
 8001e76:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	e015      	b.n	8001eac <GenerateMenu+0x7bc>
 8001e80:	0800b090 	.word	0x0800b090
 8001e84:	0800b0a4 	.word	0x0800b0a4
 8001e88:	0800b108 	.word	0x0800b108
 8001e8c:	0800b16c 	.word	0x0800b16c
 8001e90:	0800b27c 	.word	0x0800b27c
 8001e94:	0800b38c 	.word	0x0800b38c
 8001e98:	0800b3a0 	.word	0x0800b3a0
 8001e9c:	0800b3b4 	.word	0x0800b3b4
 8001ea0:	0800b3c8 	.word	0x0800b3c8
 8001ea4:	0800b3dc 	.word	0x0800b3dc
 8001ea8:	0800b3f0 	.word	0x0800b3f0
 8001eac:	f008 fba8 	bl	800a600 <memset>
 8001eb0:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001eb4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001eb8:	2210      	movs	r2, #16
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001ec0:	f5a3 7404 	sub.w	r4, r3, #528	; 0x210
 8001ec4:	4ad6      	ldr	r2, [pc, #856]	; (8002220 <GenerateMenu+0xb30>)
 8001ec6:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001eca:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ecc:	c303      	stmia	r3!, {r0, r1}
 8001ece:	701a      	strb	r2, [r3, #0]
 8001ed0:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001ed4:	225b      	movs	r2, #91	; 0x5b
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f008 fb91 	bl	800a600 <memset>
	struct menuScreen scenSecAlert = {17, 0, 0, {""}, "<  on  >"};
 8001ede:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001ee2:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001eec:	461a      	mov	r2, r3
 8001eee:	2100      	movs	r1, #0
 8001ef0:	f008 fb86 	bl	800a600 <memset>
 8001ef4:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001ef8:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8001efc:	2211      	movs	r2, #17
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001f04:	f5a3 7448 	sub.w	r4, r3, #800	; 0x320
 8001f08:	4ac5      	ldr	r2, [pc, #788]	; (8002220 <GenerateMenu+0xb30>)
 8001f0a:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001f0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f10:	c303      	stmia	r3!, {r0, r1}
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001f18:	225b      	movs	r2, #91	; 0x5b
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f008 fb6f 	bl	800a600 <memset>
	struct menuScreen scenLight = {18, 0, 0, {""}, "X  X  X  X"};
 8001f22:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001f26:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001f30:	461a      	mov	r2, r3
 8001f32:	2100      	movs	r1, #0
 8001f34:	f008 fb64 	bl	800a600 <memset>
 8001f38:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001f3c:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8001f40:	2212      	movs	r2, #18
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001f48:	f5a3 6486 	sub.w	r4, r3, #1072	; 0x430
 8001f4c:	4ab5      	ldr	r2, [pc, #724]	; (8002224 <GenerateMenu+0xb34>)
 8001f4e:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001f52:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f54:	c303      	stmia	r3!, {r0, r1}
 8001f56:	801a      	strh	r2, [r3, #0]
 8001f58:	3302      	adds	r3, #2
 8001f5a:	0c12      	lsrs	r2, r2, #16
 8001f5c:	701a      	strb	r2, [r3, #0]
 8001f5e:	f104 03b7 	add.w	r3, r4, #183	; 0xb7
 8001f62:	2259      	movs	r2, #89	; 0x59
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f008 fb4a 	bl	800a600 <memset>
	struct menuScreen create = {19, 0, 0, {""}, "new scenario created"};
 8001f6c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001f70:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8001f74:	4618      	mov	r0, r3
 8001f76:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	f008 fb3f 	bl	800a600 <memset>
 8001f82:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001f86:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8001f8a:	2213      	movs	r2, #19
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001f92:	f5a3 66a8 	sub.w	r6, r3, #1344	; 0x540
 8001f96:	4ba4      	ldr	r3, [pc, #656]	; (8002228 <GenerateMenu+0xb38>)
 8001f98:	f106 04ac 	add.w	r4, r6, #172	; 0xac
 8001f9c:	461d      	mov	r5, r3
 8001f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fa6:	6020      	str	r0, [r4, #0]
 8001fa8:	3404      	adds	r4, #4
 8001faa:	7021      	strb	r1, [r4, #0]
 8001fac:	f106 03c1 	add.w	r3, r6, #193	; 0xc1
 8001fb0:	224f      	movs	r2, #79	; 0x4f
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f008 fb23 	bl	800a600 <memset>

	struct menuScreen shutDown = {-1, 0, 0, {""}, "Turning Off... "};
 8001fba:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001fbe:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2100      	movs	r1, #0
 8001fcc:	f008 fb18 	bl	800a600 <memset>
 8001fd0:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001fd4:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001fe2:	f5a3 64ca 	sub.w	r4, r3, #1616	; 0x650
 8001fe6:	4b91      	ldr	r3, [pc, #580]	; (800222c <GenerateMenu+0xb3c>)
 8001fe8:	f104 05ac 	add.w	r5, r4, #172	; 0xac
 8001fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001ff2:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8001ff6:	2254      	movs	r2, #84	; 0x54
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f008 fb00 	bl	800a600 <memset>


    lastId = 19;
 8002000:	4b8b      	ldr	r3, [pc, #556]	; (8002230 <GenerateMenu+0xb40>)
 8002002:	2213      	movs	r2, #19
 8002004:	601a      	str	r2, [r3, #0]
    lastPagesId = 19;
 8002006:	4b8b      	ldr	r3, [pc, #556]	; (8002234 <GenerateMenu+0xb44>)
 8002008:	2213      	movs	r2, #19
 800200a:	601a      	str	r2, [r3, #0]

    root = createNode(mainMenu, NULL);
 800200c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002010:	f103 0310 	add.w	r3, r3, #16
 8002014:	f5a3 7488 	sub.w	r4, r3, #272	; 0x110
 8002018:	2300      	movs	r3, #0
 800201a:	9340      	str	r3, [sp, #256]	; 0x100
 800201c:	4668      	mov	r0, sp
 800201e:	f104 0310 	add.w	r3, r4, #16
 8002022:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002026:	4619      	mov	r1, r3
 8002028:	f008 fadc 	bl	800a5e4 <memcpy>
 800202c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002030:	f7ff fb22 	bl	8001678 <createNode>
 8002034:	4603      	mov	r3, r0
 8002036:	4a80      	ldr	r2, [pc, #512]	; (8002238 <GenerateMenu+0xb48>)
 8002038:	6013      	str	r3, [r2, #0]
    node1 = createNode(controlPanel, root);
 800203a:	4b7f      	ldr	r3, [pc, #508]	; (8002238 <GenerateMenu+0xb48>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002042:	f102 0210 	add.w	r2, r2, #16
 8002046:	f5a2 7408 	sub.w	r4, r2, #544	; 0x220
 800204a:	9340      	str	r3, [sp, #256]	; 0x100
 800204c:	4668      	mov	r0, sp
 800204e:	f104 0310 	add.w	r3, r4, #16
 8002052:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002056:	4619      	mov	r1, r3
 8002058:	f008 fac4 	bl	800a5e4 <memcpy>
 800205c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002060:	f7ff fb0a 	bl	8001678 <createNode>
 8002064:	4603      	mov	r3, r0
 8002066:	4a75      	ldr	r2, [pc, #468]	; (800223c <GenerateMenu+0xb4c>)
 8002068:	6013      	str	r3, [r2, #0]
    node2 = createNode(temperature, node1);
 800206a:	4b74      	ldr	r3, [pc, #464]	; (800223c <GenerateMenu+0xb4c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002072:	f102 0210 	add.w	r2, r2, #16
 8002076:	f5a2 744c 	sub.w	r4, r2, #816	; 0x330
 800207a:	9340      	str	r3, [sp, #256]	; 0x100
 800207c:	4668      	mov	r0, sp
 800207e:	f104 0310 	add.w	r3, r4, #16
 8002082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002086:	4619      	mov	r1, r3
 8002088:	f008 faac 	bl	800a5e4 <memcpy>
 800208c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002090:	f7ff faf2 	bl	8001678 <createNode>
 8002094:	4603      	mov	r3, r0
 8002096:	4a6a      	ldr	r2, [pc, #424]	; (8002240 <GenerateMenu+0xb50>)
 8002098:	6013      	str	r3, [r2, #0]
    node3 = createNode(security, node1);
 800209a:	4b68      	ldr	r3, [pc, #416]	; (800223c <GenerateMenu+0xb4c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80020a2:	f102 0210 	add.w	r2, r2, #16
 80020a6:	f5a2 6488 	sub.w	r4, r2, #1088	; 0x440
 80020aa:	9340      	str	r3, [sp, #256]	; 0x100
 80020ac:	4668      	mov	r0, sp
 80020ae:	f104 0310 	add.w	r3, r4, #16
 80020b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b6:	4619      	mov	r1, r3
 80020b8:	f008 fa94 	bl	800a5e4 <memcpy>
 80020bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020c0:	f7ff fada 	bl	8001678 <createNode>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4a5f      	ldr	r2, [pc, #380]	; (8002244 <GenerateMenu+0xb54>)
 80020c8:	6013      	str	r3, [r2, #0]
    node4 = createNode(lightsControl, node1);
 80020ca:	4b5c      	ldr	r3, [pc, #368]	; (800223c <GenerateMenu+0xb4c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80020d2:	f102 0210 	add.w	r2, r2, #16
 80020d6:	f5a2 64aa 	sub.w	r4, r2, #1360	; 0x550
 80020da:	9340      	str	r3, [sp, #256]	; 0x100
 80020dc:	4668      	mov	r0, sp
 80020de:	f104 0310 	add.w	r3, r4, #16
 80020e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e6:	4619      	mov	r1, r3
 80020e8:	f008 fa7c 	bl	800a5e4 <memcpy>
 80020ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020f0:	f7ff fac2 	bl	8001678 <createNode>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4a54      	ldr	r2, [pc, #336]	; (8002248 <GenerateMenu+0xb58>)
 80020f8:	6013      	str	r3, [r2, #0]
    node5 = createNode(scenarios, node1);
 80020fa:	4b50      	ldr	r3, [pc, #320]	; (800223c <GenerateMenu+0xb4c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002102:	f102 0210 	add.w	r2, r2, #16
 8002106:	f5a2 64cc 	sub.w	r4, r2, #1632	; 0x660
 800210a:	9340      	str	r3, [sp, #256]	; 0x100
 800210c:	4668      	mov	r0, sp
 800210e:	f104 0310 	add.w	r3, r4, #16
 8002112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002116:	4619      	mov	r1, r3
 8002118:	f008 fa64 	bl	800a5e4 <memcpy>
 800211c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002120:	f7ff faaa 	bl	8001678 <createNode>
 8002124:	4603      	mov	r3, r0
 8002126:	4a49      	ldr	r2, [pc, #292]	; (800224c <GenerateMenu+0xb5c>)
 8002128:	6013      	str	r3, [r2, #0]
    node6 = createNode(nameSet, node1);
 800212a:	4b44      	ldr	r3, [pc, #272]	; (800223c <GenerateMenu+0xb4c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002132:	f102 0210 	add.w	r2, r2, #16
 8002136:	f5a2 64ee 	sub.w	r4, r2, #1904	; 0x770
 800213a:	9340      	str	r3, [sp, #256]	; 0x100
 800213c:	4668      	mov	r0, sp
 800213e:	f104 0310 	add.w	r3, r4, #16
 8002142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002146:	4619      	mov	r1, r3
 8002148:	f008 fa4c 	bl	800a5e4 <memcpy>
 800214c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002150:	f7ff fa92 	bl	8001678 <createNode>
 8002154:	4603      	mov	r3, r0
 8002156:	4a3e      	ldr	r2, [pc, #248]	; (8002250 <GenerateMenu+0xb60>)
 8002158:	6013      	str	r3, [r2, #0]
    node7 = createNode(temThresh, node2);
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <GenerateMenu+0xb50>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002162:	f102 0210 	add.w	r2, r2, #16
 8002166:	f5a2 6408 	sub.w	r4, r2, #2176	; 0x880
 800216a:	9340      	str	r3, [sp, #256]	; 0x100
 800216c:	4668      	mov	r0, sp
 800216e:	f104 0310 	add.w	r3, r4, #16
 8002172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002176:	4619      	mov	r1, r3
 8002178:	f008 fa34 	bl	800a5e4 <memcpy>
 800217c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002180:	f7ff fa7a 	bl	8001678 <createNode>
 8002184:	4603      	mov	r3, r0
 8002186:	4a33      	ldr	r2, [pc, #204]	; (8002254 <GenerateMenu+0xb64>)
 8002188:	6013      	str	r3, [r2, #0]
    node8 = createNode(temAlarm, node2);
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <GenerateMenu+0xb50>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002192:	f102 0210 	add.w	r2, r2, #16
 8002196:	f5a2 6419 	sub.w	r4, r2, #2448	; 0x990
 800219a:	9340      	str	r3, [sp, #256]	; 0x100
 800219c:	4668      	mov	r0, sp
 800219e:	f104 0310 	add.w	r3, r4, #16
 80021a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a6:	4619      	mov	r1, r3
 80021a8:	f008 fa1c 	bl	800a5e4 <memcpy>
 80021ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021b0:	f7ff fa62 	bl	8001678 <createNode>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a28      	ldr	r2, [pc, #160]	; (8002258 <GenerateMenu+0xb68>)
 80021b8:	6013      	str	r3, [r2, #0]
    node9 = createNode(securityActivation, node3);
 80021ba:	4b22      	ldr	r3, [pc, #136]	; (8002244 <GenerateMenu+0xb54>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80021c2:	f102 0210 	add.w	r2, r2, #16
 80021c6:	f5a2 642a 	sub.w	r4, r2, #2720	; 0xaa0
 80021ca:	9340      	str	r3, [sp, #256]	; 0x100
 80021cc:	4668      	mov	r0, sp
 80021ce:	f104 0310 	add.w	r3, r4, #16
 80021d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d6:	4619      	mov	r1, r3
 80021d8:	f008 fa04 	bl	800a5e4 <memcpy>
 80021dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021e0:	f7ff fa4a 	bl	8001678 <createNode>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <GenerateMenu+0xb6c>)
 80021e8:	6013      	str	r3, [r2, #0]
    node10 = createNode(securityAlarm, node3);
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <GenerateMenu+0xb54>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80021f2:	f102 0210 	add.w	r2, r2, #16
 80021f6:	f5a2 643b 	sub.w	r4, r2, #2992	; 0xbb0
 80021fa:	9340      	str	r3, [sp, #256]	; 0x100
 80021fc:	4668      	mov	r0, sp
 80021fe:	f104 0310 	add.w	r3, r4, #16
 8002202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002206:	4619      	mov	r1, r3
 8002208:	f008 f9ec 	bl	800a5e4 <memcpy>
 800220c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002210:	f7ff fa32 	bl	8001678 <createNode>
 8002214:	4603      	mov	r3, r0
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <GenerateMenu+0xb70>)
 8002218:	6013      	str	r3, [r2, #0]
    node11 = createNode(scenario1, node5);
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <GenerateMenu+0xb5c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	e021      	b.n	8002264 <GenerateMenu+0xb74>
 8002220:	0800b108 	.word	0x0800b108
 8002224:	0800b004 	.word	0x0800b004
 8002228:	0800b404 	.word	0x0800b404
 800222c:	0800b468 	.word	0x0800b468
 8002230:	20000818 	.word	0x20000818
 8002234:	2000081c 	.word	0x2000081c
 8002238:	20000824 	.word	0x20000824
 800223c:	20000828 	.word	0x20000828
 8002240:	2000082c 	.word	0x2000082c
 8002244:	20000830 	.word	0x20000830
 8002248:	20000834 	.word	0x20000834
 800224c:	20000838 	.word	0x20000838
 8002250:	2000083c 	.word	0x2000083c
 8002254:	20000840 	.word	0x20000840
 8002258:	20000844 	.word	0x20000844
 800225c:	20000848 	.word	0x20000848
 8002260:	2000084c 	.word	0x2000084c
 8002264:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002268:	f102 0210 	add.w	r2, r2, #16
 800226c:	f5a2 644c 	sub.w	r4, r2, #3264	; 0xcc0
 8002270:	9340      	str	r3, [sp, #256]	; 0x100
 8002272:	4668      	mov	r0, sp
 8002274:	f104 0310 	add.w	r3, r4, #16
 8002278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800227c:	4619      	mov	r1, r3
 800227e:	f008 f9b1 	bl	800a5e4 <memcpy>
 8002282:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002286:	f7ff f9f7 	bl	8001678 <createNode>
 800228a:	4603      	mov	r3, r0
 800228c:	4a9d      	ldr	r2, [pc, #628]	; (8002504 <GenerateMenu+0xe14>)
 800228e:	6013      	str	r3, [r2, #0]
    node12 = createNode(scenario2, node5);
 8002290:	4b9d      	ldr	r3, [pc, #628]	; (8002508 <GenerateMenu+0xe18>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002298:	f102 0210 	add.w	r2, r2, #16
 800229c:	f5a2 645d 	sub.w	r4, r2, #3536	; 0xdd0
 80022a0:	9340      	str	r3, [sp, #256]	; 0x100
 80022a2:	4668      	mov	r0, sp
 80022a4:	f104 0310 	add.w	r3, r4, #16
 80022a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ac:	4619      	mov	r1, r3
 80022ae:	f008 f999 	bl	800a5e4 <memcpy>
 80022b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022b6:	f7ff f9df 	bl	8001678 <createNode>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4a93      	ldr	r2, [pc, #588]	; (800250c <GenerateMenu+0xe1c>)
 80022be:	6013      	str	r3, [r2, #0]

    node13 = createNode(AddScenario, node1);
 80022c0:	4b93      	ldr	r3, [pc, #588]	; (8002510 <GenerateMenu+0xe20>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80022c8:	f102 0210 	add.w	r2, r2, #16
 80022cc:	f5a2 646e 	sub.w	r4, r2, #3808	; 0xee0
 80022d0:	9340      	str	r3, [sp, #256]	; 0x100
 80022d2:	4668      	mov	r0, sp
 80022d4:	f104 0310 	add.w	r3, r4, #16
 80022d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022dc:	4619      	mov	r1, r3
 80022de:	f008 f981 	bl	800a5e4 <memcpy>
 80022e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022e6:	f7ff f9c7 	bl	8001678 <createNode>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4a89      	ldr	r2, [pc, #548]	; (8002514 <GenerateMenu+0xe24>)
 80022ee:	6013      	str	r3, [r2, #0]
    node14 = createNode(scenTemThreshold, node13);
 80022f0:	4b88      	ldr	r3, [pc, #544]	; (8002514 <GenerateMenu+0xe24>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80022f8:	f102 0210 	add.w	r2, r2, #16
 80022fc:	f5a2 647f 	sub.w	r4, r2, #4080	; 0xff0
 8002300:	9340      	str	r3, [sp, #256]	; 0x100
 8002302:	4668      	mov	r0, sp
 8002304:	f104 0310 	add.w	r3, r4, #16
 8002308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800230c:	4619      	mov	r1, r3
 800230e:	f008 f969 	bl	800a5e4 <memcpy>
 8002312:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002316:	f7ff f9af 	bl	8001678 <createNode>
 800231a:	4603      	mov	r3, r0
 800231c:	4a7e      	ldr	r2, [pc, #504]	; (8002518 <GenerateMenu+0xe28>)
 800231e:	6013      	str	r3, [r2, #0]
    node15 = createNode(scenTemAlarm, node13);
 8002320:	4b7c      	ldr	r3, [pc, #496]	; (8002514 <GenerateMenu+0xe24>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002328:	f5a2 7480 	sub.w	r4, r2, #256	; 0x100
 800232c:	9340      	str	r3, [sp, #256]	; 0x100
 800232e:	4668      	mov	r0, sp
 8002330:	f104 0310 	add.w	r3, r4, #16
 8002334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002338:	4619      	mov	r1, r3
 800233a:	f008 f953 	bl	800a5e4 <memcpy>
 800233e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002342:	f7ff f999 	bl	8001678 <createNode>
 8002346:	4603      	mov	r3, r0
 8002348:	4a74      	ldr	r2, [pc, #464]	; (800251c <GenerateMenu+0xe2c>)
 800234a:	6013      	str	r3, [r2, #0]
    node16 = createNode(scenSecAlarm, node13);
 800234c:	4b71      	ldr	r3, [pc, #452]	; (8002514 <GenerateMenu+0xe24>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002354:	f5a2 7404 	sub.w	r4, r2, #528	; 0x210
 8002358:	9340      	str	r3, [sp, #256]	; 0x100
 800235a:	4668      	mov	r0, sp
 800235c:	f104 0310 	add.w	r3, r4, #16
 8002360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002364:	4619      	mov	r1, r3
 8002366:	f008 f93d 	bl	800a5e4 <memcpy>
 800236a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800236e:	f7ff f983 	bl	8001678 <createNode>
 8002372:	4603      	mov	r3, r0
 8002374:	4a6a      	ldr	r2, [pc, #424]	; (8002520 <GenerateMenu+0xe30>)
 8002376:	6013      	str	r3, [r2, #0]
    node17 = createNode(scenSecAlert, node13);
 8002378:	4b66      	ldr	r3, [pc, #408]	; (8002514 <GenerateMenu+0xe24>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002380:	f5a2 7448 	sub.w	r4, r2, #800	; 0x320
 8002384:	9340      	str	r3, [sp, #256]	; 0x100
 8002386:	4668      	mov	r0, sp
 8002388:	f104 0310 	add.w	r3, r4, #16
 800238c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002390:	4619      	mov	r1, r3
 8002392:	f008 f927 	bl	800a5e4 <memcpy>
 8002396:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800239a:	f7ff f96d 	bl	8001678 <createNode>
 800239e:	4603      	mov	r3, r0
 80023a0:	4a60      	ldr	r2, [pc, #384]	; (8002524 <GenerateMenu+0xe34>)
 80023a2:	6013      	str	r3, [r2, #0]
    node18 = createNode(scenLight, node13);
 80023a4:	4b5b      	ldr	r3, [pc, #364]	; (8002514 <GenerateMenu+0xe24>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 80023ac:	f5a2 6486 	sub.w	r4, r2, #1072	; 0x430
 80023b0:	9340      	str	r3, [sp, #256]	; 0x100
 80023b2:	4668      	mov	r0, sp
 80023b4:	f104 0310 	add.w	r3, r4, #16
 80023b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023bc:	4619      	mov	r1, r3
 80023be:	f008 f911 	bl	800a5e4 <memcpy>
 80023c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023c6:	f7ff f957 	bl	8001678 <createNode>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4a56      	ldr	r2, [pc, #344]	; (8002528 <GenerateMenu+0xe38>)
 80023ce:	6013      	str	r3, [r2, #0]
    node19 = createNode(create, node13);
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <GenerateMenu+0xe24>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 80023d8:	f5a2 64a8 	sub.w	r4, r2, #1344	; 0x540
 80023dc:	9340      	str	r3, [sp, #256]	; 0x100
 80023de:	4668      	mov	r0, sp
 80023e0:	f104 0310 	add.w	r3, r4, #16
 80023e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023e8:	4619      	mov	r1, r3
 80023ea:	f008 f8fb 	bl	800a5e4 <memcpy>
 80023ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023f2:	f7ff f941 	bl	8001678 <createNode>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4a4c      	ldr	r2, [pc, #304]	; (800252c <GenerateMenu+0xe3c>)
 80023fa:	6013      	str	r3, [r2, #0]

    node_1 = createNode(shutDown, node1);
 80023fc:	4b44      	ldr	r3, [pc, #272]	; (8002510 <GenerateMenu+0xe20>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002404:	f5a2 64ca 	sub.w	r4, r2, #1616	; 0x650
 8002408:	9340      	str	r3, [sp, #256]	; 0x100
 800240a:	4668      	mov	r0, sp
 800240c:	f104 0310 	add.w	r3, r4, #16
 8002410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002414:	4619      	mov	r1, r3
 8002416:	f008 f8e5 	bl	800a5e4 <memcpy>
 800241a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800241e:	f7ff f92b 	bl	8001678 <createNode>
 8002422:	4603      	mov	r3, r0
 8002424:	4a42      	ldr	r2, [pc, #264]	; (8002530 <GenerateMenu+0xe40>)
 8002426:	6013      	str	r3, [r2, #0]


    root->child1 = node1;
 8002428:	4b42      	ldr	r3, [pc, #264]	; (8002534 <GenerateMenu+0xe44>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a38      	ldr	r2, [pc, #224]	; (8002510 <GenerateMenu+0xe20>)
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	601a      	str	r2, [r3, #0]
    node1->child1 = node2;
 8002432:	4b37      	ldr	r3, [pc, #220]	; (8002510 <GenerateMenu+0xe20>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a40      	ldr	r2, [pc, #256]	; (8002538 <GenerateMenu+0xe48>)
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	601a      	str	r2, [r3, #0]
    node1->child2 = node3;
 800243c:	4b34      	ldr	r3, [pc, #208]	; (8002510 <GenerateMenu+0xe20>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a3e      	ldr	r2, [pc, #248]	; (800253c <GenerateMenu+0xe4c>)
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	605a      	str	r2, [r3, #4]
    node1->child3 = node4;
 8002446:	4b32      	ldr	r3, [pc, #200]	; (8002510 <GenerateMenu+0xe20>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a3d      	ldr	r2, [pc, #244]	; (8002540 <GenerateMenu+0xe50>)
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	609a      	str	r2, [r3, #8]
    node1->child4 = node5;
 8002450:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <GenerateMenu+0xe20>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a2c      	ldr	r2, [pc, #176]	; (8002508 <GenerateMenu+0xe18>)
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	60da      	str	r2, [r3, #12]
    node1->child5 = node6;
 800245a:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <GenerateMenu+0xe20>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a39      	ldr	r2, [pc, #228]	; (8002544 <GenerateMenu+0xe54>)
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	611a      	str	r2, [r3, #16]
    node1->child6 = node13;
 8002464:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <GenerateMenu+0xe20>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a2a      	ldr	r2, [pc, #168]	; (8002514 <GenerateMenu+0xe24>)
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	615a      	str	r2, [r3, #20]
    node1->child7 = node_1;
 800246e:	4b28      	ldr	r3, [pc, #160]	; (8002510 <GenerateMenu+0xe20>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a2f      	ldr	r2, [pc, #188]	; (8002530 <GenerateMenu+0xe40>)
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	619a      	str	r2, [r3, #24]


    node2->child1 = node7;
 8002478:	4b2f      	ldr	r3, [pc, #188]	; (8002538 <GenerateMenu+0xe48>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a32      	ldr	r2, [pc, #200]	; (8002548 <GenerateMenu+0xe58>)
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	601a      	str	r2, [r3, #0]
    node2->child2 = node8;
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <GenerateMenu+0xe48>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a31      	ldr	r2, [pc, #196]	; (800254c <GenerateMenu+0xe5c>)
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	605a      	str	r2, [r3, #4]

    node3->child1 = node9;
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <GenerateMenu+0xe4c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a2f      	ldr	r2, [pc, #188]	; (8002550 <GenerateMenu+0xe60>)
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	601a      	str	r2, [r3, #0]
    node3->child2 = node10;
 8002496:	4b29      	ldr	r3, [pc, #164]	; (800253c <GenerateMenu+0xe4c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a2e      	ldr	r2, [pc, #184]	; (8002554 <GenerateMenu+0xe64>)
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	605a      	str	r2, [r3, #4]

    node5->child1 = node11;
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <GenerateMenu+0xe18>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a17      	ldr	r2, [pc, #92]	; (8002504 <GenerateMenu+0xe14>)
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	601a      	str	r2, [r3, #0]
    node5->child2 = node12;
 80024aa:	4b17      	ldr	r3, [pc, #92]	; (8002508 <GenerateMenu+0xe18>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a17      	ldr	r2, [pc, #92]	; (800250c <GenerateMenu+0xe1c>)
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	605a      	str	r2, [r3, #4]

    node13->child1 = node14;
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <GenerateMenu+0xe24>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a17      	ldr	r2, [pc, #92]	; (8002518 <GenerateMenu+0xe28>)
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	601a      	str	r2, [r3, #0]
    node13->child2 = node15;
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <GenerateMenu+0xe24>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a16      	ldr	r2, [pc, #88]	; (800251c <GenerateMenu+0xe2c>)
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	605a      	str	r2, [r3, #4]
    node13->child3 = node16;
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <GenerateMenu+0xe24>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a14      	ldr	r2, [pc, #80]	; (8002520 <GenerateMenu+0xe30>)
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	609a      	str	r2, [r3, #8]
    node13->child4 = node17;
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <GenerateMenu+0xe24>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a13      	ldr	r2, [pc, #76]	; (8002524 <GenerateMenu+0xe34>)
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	60da      	str	r2, [r3, #12]
    node13->child5 = node18;
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <GenerateMenu+0xe24>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a11      	ldr	r2, [pc, #68]	; (8002528 <GenerateMenu+0xe38>)
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	611a      	str	r2, [r3, #16]
    node13->child6 = node19;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <GenerateMenu+0xe24>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a10      	ldr	r2, [pc, #64]	; (800252c <GenerateMenu+0xe3c>)
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	615a      	str	r2, [r3, #20]

    currentNode = root;
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <GenerateMenu+0xe44>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a18      	ldr	r2, [pc, #96]	; (8002558 <GenerateMenu+0xe68>)
 80024f6:	6013      	str	r3, [r2, #0]

}
 80024f8:	bf00      	nop
 80024fa:	f507 57b2 	add.w	r7, r7, #5696	; 0x1640
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002504:	20000850 	.word	0x20000850
 8002508:	20000838 	.word	0x20000838
 800250c:	20000854 	.word	0x20000854
 8002510:	20000828 	.word	0x20000828
 8002514:	20000858 	.word	0x20000858
 8002518:	2000085c 	.word	0x2000085c
 800251c:	20000860 	.word	0x20000860
 8002520:	20000864 	.word	0x20000864
 8002524:	20000868 	.word	0x20000868
 8002528:	2000086c 	.word	0x2000086c
 800252c:	20000870 	.word	0x20000870
 8002530:	20000874 	.word	0x20000874
 8002534:	20000824 	.word	0x20000824
 8002538:	2000082c 	.word	0x2000082c
 800253c:	20000830 	.word	0x20000830
 8002540:	20000834 	.word	0x20000834
 8002544:	2000083c 	.word	0x2000083c
 8002548:	20000840 	.word	0x20000840
 800254c:	20000844 	.word	0x20000844
 8002550:	20000848 	.word	0x20000848
 8002554:	2000084c 	.word	0x2000084c
 8002558:	20000878 	.word	0x20000878

0800255c <createScenario>:
void createScenario() {
 800255c:	b5b0      	push	{r4, r5, r7, lr}
 800255e:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 8002562:	af42      	add	r7, sp, #264	; 0x108
    lastId++;
 8002564:	4bb0      	ldr	r3, [pc, #704]	; (8002828 <createScenario+0x2cc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	4aaf      	ldr	r2, [pc, #700]	; (8002828 <createScenario+0x2cc>)
 800256c:	6013      	str	r3, [r2, #0]

    char str1[20] ="";
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8002574:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
	char str2[20]="";
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002588:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
	char str3[20]="";
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 800259c:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
	char str4[20]="";
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80025b0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
    char str5[4][20]={"","","",""};
 80025be:	4a9b      	ldr	r2, [pc, #620]	; (800282c <createScenario+0x2d0>)
 80025c0:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80025c4:	4611      	mov	r1, r2
 80025c6:	2250      	movs	r2, #80	; 0x50
 80025c8:	4618      	mov	r0, r3
 80025ca:	f008 f80b 	bl	800a5e4 <memcpy>
    sprintf(str1, "temThreshold=%d", newSceneTemThreshold);
 80025ce:	4b98      	ldr	r3, [pc, #608]	; (8002830 <createScenario+0x2d4>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80025d6:	4997      	ldr	r1, [pc, #604]	; (8002834 <createScenario+0x2d8>)
 80025d8:	4618      	mov	r0, r3
 80025da:	f008 f909 	bl	800a7f0 <siprintf>

    if (newSceneTemAlarm == 1)
 80025de:	4b96      	ldr	r3, [pc, #600]	; (8002838 <createScenario+0x2dc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d106      	bne.n	80025f4 <createScenario+0x98>
        strcpy(str2, "temAlarm=on");
 80025e6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80025ea:	4a94      	ldr	r2, [pc, #592]	; (800283c <createScenario+0x2e0>)
 80025ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80025ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80025f2:	e007      	b.n	8002604 <createScenario+0xa8>
    else
        strcpy(str2, "temAlarm=off");
 80025f4:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80025f8:	4a91      	ldr	r2, [pc, #580]	; (8002840 <createScenario+0x2e4>)
 80025fa:	461c      	mov	r4, r3
 80025fc:	4613      	mov	r3, r2
 80025fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002600:	c407      	stmia	r4!, {r0, r1, r2}
 8002602:	7023      	strb	r3, [r4, #0]

    if (newScenesecurityAlarm == 1)
 8002604:	4b8f      	ldr	r3, [pc, #572]	; (8002844 <createScenario+0x2e8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d109      	bne.n	8002620 <createScenario+0xc4>
        strcpy(str3, "securityAlarm=on");
 800260c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002610:	4a8d      	ldr	r2, [pc, #564]	; (8002848 <createScenario+0x2ec>)
 8002612:	461c      	mov	r4, r3
 8002614:	4615      	mov	r5, r2
 8002616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800261a:	682b      	ldr	r3, [r5, #0]
 800261c:	7023      	strb	r3, [r4, #0]
 800261e:	e008      	b.n	8002632 <createScenario+0xd6>
    else
        strcpy(str3, "securityAlarm=off");
 8002620:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002624:	4a89      	ldr	r2, [pc, #548]	; (800284c <createScenario+0x2f0>)
 8002626:	461c      	mov	r4, r3
 8002628:	4615      	mov	r5, r2
 800262a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800262c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800262e:	682b      	ldr	r3, [r5, #0]
 8002630:	8023      	strh	r3, [r4, #0]

    if (newSceneSecurityAlert == 1)
 8002632:	4b87      	ldr	r3, [pc, #540]	; (8002850 <createScenario+0x2f4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d109      	bne.n	800264e <createScenario+0xf2>
        strcpy(str4, "securityAlert=on");
 800263a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800263e:	4a85      	ldr	r2, [pc, #532]	; (8002854 <createScenario+0x2f8>)
 8002640:	461c      	mov	r4, r3
 8002642:	4615      	mov	r5, r2
 8002644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002648:	682b      	ldr	r3, [r5, #0]
 800264a:	7023      	strb	r3, [r4, #0]
 800264c:	e008      	b.n	8002660 <createScenario+0x104>
    else
        strcpy(str4, "securityAlert=off");
 800264e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8002652:	4a81      	ldr	r2, [pc, #516]	; (8002858 <createScenario+0x2fc>)
 8002654:	461c      	mov	r4, r3
 8002656:	4615      	mov	r5, r2
 8002658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	8023      	strh	r3, [r4, #0]

    for (int i = 0; i < 4; i++) {
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8002666:	e02a      	b.n	80026be <createScenario+0x162>
        if (newScenarioLights[i] == 1)
 8002668:	4a7c      	ldr	r2, [pc, #496]	; (800285c <createScenario+0x300>)
 800266a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d10f      	bne.n	8002696 <createScenario+0x13a>
            sprintf(str5[i], "Light%d=on", i);
 8002676:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 800267a:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800268c:	4974      	ldr	r1, [pc, #464]	; (8002860 <createScenario+0x304>)
 800268e:	4618      	mov	r0, r3
 8002690:	f008 f8ae 	bl	800a7f0 <siprintf>
 8002694:	e00e      	b.n	80026b4 <createScenario+0x158>
        else
            sprintf(str5[i], "Light%d=off", i);
 8002696:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 800269a:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80026ac:	496d      	ldr	r1, [pc, #436]	; (8002864 <createScenario+0x308>)
 80026ae:	4618      	mov	r0, r3
 80026b0:	f008 f89e 	bl	800a7f0 <siprintf>
    for (int i = 0; i < 4; i++) {
 80026b4:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80026b8:	3301      	adds	r3, #1
 80026ba:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80026be:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	ddd0      	ble.n	8002668 <createScenario+0x10c>
    }

    addedScenarios[lastScenarioIndex][0] = newSceneTemThreshold;
 80026c6:	4b68      	ldr	r3, [pc, #416]	; (8002868 <createScenario+0x30c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a59      	ldr	r2, [pc, #356]	; (8002830 <createScenario+0x2d4>)
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	4967      	ldr	r1, [pc, #412]	; (800286c <createScenario+0x310>)
 80026d0:	015b      	lsls	r3, r3, #5
 80026d2:	440b      	add	r3, r1
 80026d4:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][1] = newSceneTemAlarm;
 80026d6:	4b64      	ldr	r3, [pc, #400]	; (8002868 <createScenario+0x30c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a57      	ldr	r2, [pc, #348]	; (8002838 <createScenario+0x2dc>)
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	4963      	ldr	r1, [pc, #396]	; (800286c <createScenario+0x310>)
 80026e0:	015b      	lsls	r3, r3, #5
 80026e2:	440b      	add	r3, r1
 80026e4:	3304      	adds	r3, #4
 80026e6:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][2] = newScenesecurityAlarm;
 80026e8:	4b5f      	ldr	r3, [pc, #380]	; (8002868 <createScenario+0x30c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a55      	ldr	r2, [pc, #340]	; (8002844 <createScenario+0x2e8>)
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	495e      	ldr	r1, [pc, #376]	; (800286c <createScenario+0x310>)
 80026f2:	015b      	lsls	r3, r3, #5
 80026f4:	440b      	add	r3, r1
 80026f6:	3308      	adds	r3, #8
 80026f8:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][3] = newSceneSecurityAlert;
 80026fa:	4b5b      	ldr	r3, [pc, #364]	; (8002868 <createScenario+0x30c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a54      	ldr	r2, [pc, #336]	; (8002850 <createScenario+0x2f4>)
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	495a      	ldr	r1, [pc, #360]	; (800286c <createScenario+0x310>)
 8002704:	015b      	lsls	r3, r3, #5
 8002706:	440b      	add	r3, r1
 8002708:	330c      	adds	r3, #12
 800270a:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][4] = newScenarioLights[0];
 800270c:	4b56      	ldr	r3, [pc, #344]	; (8002868 <createScenario+0x30c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a52      	ldr	r2, [pc, #328]	; (800285c <createScenario+0x300>)
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	4955      	ldr	r1, [pc, #340]	; (800286c <createScenario+0x310>)
 8002716:	015b      	lsls	r3, r3, #5
 8002718:	440b      	add	r3, r1
 800271a:	3310      	adds	r3, #16
 800271c:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][5] = newScenarioLights[1];
 800271e:	4b52      	ldr	r3, [pc, #328]	; (8002868 <createScenario+0x30c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a4e      	ldr	r2, [pc, #312]	; (800285c <createScenario+0x300>)
 8002724:	6852      	ldr	r2, [r2, #4]
 8002726:	4951      	ldr	r1, [pc, #324]	; (800286c <createScenario+0x310>)
 8002728:	015b      	lsls	r3, r3, #5
 800272a:	440b      	add	r3, r1
 800272c:	3314      	adds	r3, #20
 800272e:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][6] = newScenarioLights[2];
 8002730:	4b4d      	ldr	r3, [pc, #308]	; (8002868 <createScenario+0x30c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a49      	ldr	r2, [pc, #292]	; (800285c <createScenario+0x300>)
 8002736:	6892      	ldr	r2, [r2, #8]
 8002738:	494c      	ldr	r1, [pc, #304]	; (800286c <createScenario+0x310>)
 800273a:	015b      	lsls	r3, r3, #5
 800273c:	440b      	add	r3, r1
 800273e:	3318      	adds	r3, #24
 8002740:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][7] = newScenarioLights[3];
 8002742:	4b49      	ldr	r3, [pc, #292]	; (8002868 <createScenario+0x30c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a45      	ldr	r2, [pc, #276]	; (800285c <createScenario+0x300>)
 8002748:	68d2      	ldr	r2, [r2, #12]
 800274a:	4948      	ldr	r1, [pc, #288]	; (800286c <createScenario+0x310>)
 800274c:	015b      	lsls	r3, r3, #5
 800274e:	440b      	add	r3, r1
 8002750:	331c      	adds	r3, #28
 8002752:	601a      	str	r2, [r3, #0]

    char strArray[8][20]; // Array to hold str1 to str4

    strcpy(strArray[0], str1);
 8002754:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002758:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f008 f875 	bl	800a84e <strcpy>
    strcpy(strArray[1], str2);
 8002764:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8002768:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800276c:	3314      	adds	r3, #20
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f008 f86c 	bl	800a84e <strcpy>
    strcpy(strArray[2], str3);
 8002776:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800277a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800277e:	3328      	adds	r3, #40	; 0x28
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f008 f863 	bl	800a84e <strcpy>
    strcpy(strArray[3], str4);
 8002788:	f507 7205 	add.w	r2, r7, #532	; 0x214
 800278c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002790:	333c      	adds	r3, #60	; 0x3c
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f008 f85a 	bl	800a84e <strcpy>
    strcpy(strArray[4], str5[0]);
 800279a:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 800279e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80027a2:	3350      	adds	r3, #80	; 0x50
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f008 f851 	bl	800a84e <strcpy>
    strcpy(strArray[5], str5[1]);
 80027ac:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80027b0:	f103 0214 	add.w	r2, r3, #20
 80027b4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80027b8:	3364      	adds	r3, #100	; 0x64
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f008 f846 	bl	800a84e <strcpy>
    strcpy(strArray[6], str5[2]);
 80027c2:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80027c6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80027ca:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80027ce:	3378      	adds	r3, #120	; 0x78
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f008 f83b 	bl	800a84e <strcpy>
    strcpy(strArray[7], str5[3]);
 80027d8:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80027dc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80027e0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80027e4:	338c      	adds	r3, #140	; 0x8c
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f008 f830 	bl	800a84e <strcpy>

    struct menuScreen newScenario = {lastId, 8, 0};
 80027ee:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80027f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80027f6:	4618      	mov	r0, r3
 80027f8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80027fc:	461a      	mov	r2, r3
 80027fe:	2100      	movs	r1, #0
 8002800:	f007 fefe 	bl	800a600 <memset>
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <createScenario+0x2cc>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800280c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002816:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800281a:	2208      	movs	r2, #8
 800281c:	605a      	str	r2, [r3, #4]

    for (int i = 0; i < 8; i++) {
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8002824:	e040      	b.n	80028a8 <createScenario+0x34c>
 8002826:	bf00      	nop
 8002828:	20000818 	.word	0x20000818
 800282c:	0800b57c 	.word	0x0800b57c
 8002830:	20000018 	.word	0x20000018
 8002834:	0800b4cc 	.word	0x0800b4cc
 8002838:	2000001c 	.word	0x2000001c
 800283c:	0800b4dc 	.word	0x0800b4dc
 8002840:	0800b4e8 	.word	0x0800b4e8
 8002844:	20000020 	.word	0x20000020
 8002848:	0800b4f8 	.word	0x0800b4f8
 800284c:	0800b50c 	.word	0x0800b50c
 8002850:	20000024 	.word	0x20000024
 8002854:	0800b520 	.word	0x0800b520
 8002858:	0800b534 	.word	0x0800b534
 800285c:	200007e8 	.word	0x200007e8
 8002860:	0800b548 	.word	0x0800b548
 8002864:	0800b554 	.word	0x0800b554
 8002868:	200007d0 	.word	0x200007d0
 800286c:	20000750 	.word	0x20000750
        strcpy(newScenario.menuItems[i], strArray[i]);
 8002870:	f107 0114 	add.w	r1, r7, #20
 8002874:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	3308      	adds	r3, #8
 8002882:	440b      	add	r3, r1
 8002884:	1d18      	adds	r0, r3, #4
 8002886:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800288a:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	4619      	mov	r1, r3
 800289a:	f007 ffd8 	bl	800a84e <strcpy>
    for (int i = 0; i < 8; i++) {
 800289e:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80028a2:	3301      	adds	r3, #1
 80028a4:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80028a8:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80028ac:	2b07      	cmp	r3, #7
 80028ae:	dddf      	ble.n	8002870 <createScenario+0x314>
    }

    strcpy(newScenario.content, "<  off  >");
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	33ac      	adds	r3, #172	; 0xac
 80028b6:	4a34      	ldr	r2, [pc, #208]	; (8002988 <createScenario+0x42c>)
 80028b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80028ba:	c303      	stmia	r3!, {r0, r1}
 80028bc:	801a      	strh	r2, [r3, #0]

//    struct menuScreen newScenario = {lastId, 8, 0, strArray, "<  off  >"};

    struct TreeNode* newNode = createNode(newScenario, node5);
 80028be:	4b33      	ldr	r3, [pc, #204]	; (800298c <createScenario+0x430>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f507 721c 	add.w	r2, r7, #624	; 0x270
 80028c6:	f5a2 7417 	sub.w	r4, r2, #604	; 0x25c
 80028ca:	9340      	str	r3, [sp, #256]	; 0x100
 80028cc:	4668      	mov	r0, sp
 80028ce:	f104 0310 	add.w	r3, r4, #16
 80028d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d6:	4619      	mov	r1, r3
 80028d8:	f007 fe84 	bl	800a5e4 <memcpy>
 80028dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028e0:	f7fe feca 	bl	8001678 <createNode>
 80028e4:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264

    switch (lastScenarioIndex) {
 80028e8:	4b29      	ldr	r3, [pc, #164]	; (8002990 <createScenario+0x434>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d823      	bhi.n	8002938 <createScenario+0x3dc>
 80028f0:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <createScenario+0x39c>)
 80028f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f6:	bf00      	nop
 80028f8:	08002909 	.word	0x08002909
 80028fc:	08002915 	.word	0x08002915
 8002900:	08002921 	.word	0x08002921
 8002904:	0800292d 	.word	0x0800292d
        case 0:
            node5->child3 = newNode;
 8002908:	4b20      	ldr	r3, [pc, #128]	; (800298c <createScenario+0x430>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8002910:	609a      	str	r2, [r3, #8]
            break;
 8002912:	e011      	b.n	8002938 <createScenario+0x3dc>
        case 1:
            node5->child4 = newNode;
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <createScenario+0x430>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800291c:	60da      	str	r2, [r3, #12]
            break;
 800291e:	e00b      	b.n	8002938 <createScenario+0x3dc>
        case 2:
            node5->child5 = newNode;
 8002920:	4b1a      	ldr	r3, [pc, #104]	; (800298c <createScenario+0x430>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8002928:	611a      	str	r2, [r3, #16]
            break;
 800292a:	e005      	b.n	8002938 <createScenario+0x3dc>
        case 3:
            node5->child6 = newNode;
 800292c:	4b17      	ldr	r3, [pc, #92]	; (800298c <createScenario+0x430>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8002934:	615a      	str	r2, [r3, #20]
            break;
 8002936:	bf00      	nop
    }
    char newStr[20];
    sprintf(newStr,"> scenario %d",lastScenarioIndex+3);
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <createScenario+0x434>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	1cda      	adds	r2, r3, #3
 800293e:	463b      	mov	r3, r7
 8002940:	4914      	ldr	r1, [pc, #80]	; (8002994 <createScenario+0x438>)
 8002942:	4618      	mov	r0, r3
 8002944:	f007 ff54 	bl	800a7f0 <siprintf>
    strcpy(node5->screen.menuItems[node5->screen.optionCount],newStr);
 8002948:	4b10      	ldr	r3, [pc, #64]	; (800298c <createScenario+0x430>)
 800294a:	6819      	ldr	r1, [r3, #0]
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <createScenario+0x430>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	3328      	adds	r3, #40	; 0x28
 800295c:	440b      	add	r3, r1
 800295e:	3308      	adds	r3, #8
 8002960:	463a      	mov	r2, r7
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f007 ff72 	bl	800a84e <strcpy>
    node5->screen.optionCount++;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <createScenario+0x430>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002970:	3201      	adds	r2, #1
 8002972:	629a      	str	r2, [r3, #40]	; 0x28
    lastScenarioIndex++;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <createScenario+0x434>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3301      	adds	r3, #1
 800297a:	4a05      	ldr	r2, [pc, #20]	; (8002990 <createScenario+0x434>)
 800297c:	6013      	str	r3, [r2, #0]
}
 800297e:	bf00      	nop
 8002980:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8002984:	46bd      	mov	sp, r7
 8002986:	bdb0      	pop	{r4, r5, r7, pc}
 8002988:	0800b560 	.word	0x0800b560
 800298c:	20000838 	.word	0x20000838
 8002990:	200007d0 	.word	0x200007d0
 8002994:	0800b56c 	.word	0x0800b56c

08002998 <ShowMenu>:

void ShowMenu(){
 8002998:	b5b0      	push	{r4, r5, r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
	int p = page * 4;
 800299e:	4b39      	ldr	r3, [pc, #228]	; (8002a84 <ShowMenu+0xec>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	617b      	str	r3, [r7, #20]
//    clear();
	char temp[20] = "                   ";
 80029a6:	4b38      	ldr	r3, [pc, #224]	; (8002a88 <ShowMenu+0xf0>)
 80029a8:	463c      	mov	r4, r7
 80029aa:	461d      	mov	r5, r3
 80029ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029b0:	682b      	ldr	r3, [r5, #0]
 80029b2:	6023      	str	r3, [r4, #0]
    setCursor(0,0);
 80029b4:	2100      	movs	r1, #0
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7fd fed8 	bl	800076c <setCursor>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 80029bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029c0:	4832      	ldr	r0, [pc, #200]	; (8002a8c <ShowMenu+0xf4>)
 80029c2:	f003 fe23 	bl	800660c <HAL_GPIO_TogglePin>
    print(currentMenu[p]);
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4a2f      	ldr	r2, [pc, #188]	; (8002a90 <ShowMenu+0xf8>)
 80029d2:	4413      	add	r3, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd ff11 	bl	80007fc <print>
    setCursor(0,1);
 80029da:	2101      	movs	r1, #1
 80029dc:	2000      	movs	r0, #0
 80029de:	f7fd fec5 	bl	800076c <setCursor>
    if(p+1 >= MenuoptionCounts)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <ShowMenu+0xfc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	db04      	blt.n	80029f8 <ShowMenu+0x60>
        print(temp);
 80029ee:	463b      	mov	r3, r7
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd ff03 	bl	80007fc <print>
 80029f6:	e00a      	b.n	8002a0e <ShowMenu+0x76>
    else
    	print(currentMenu[p+1]);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <ShowMenu+0xf8>)
 8002a06:	4413      	add	r3, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fef7 	bl	80007fc <print>
    setCursor(0,2);
 8002a0e:	2102      	movs	r1, #2
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fd feab 	bl	800076c <setCursor>
    if(p+2 >= MenuoptionCounts)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	1c9a      	adds	r2, r3, #2
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <ShowMenu+0xfc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	db04      	blt.n	8002a2c <ShowMenu+0x94>
        print(temp);
 8002a22:	463b      	mov	r3, r7
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fd fee9 	bl	80007fc <print>
 8002a2a:	e00a      	b.n	8002a42 <ShowMenu+0xaa>
    else
    	print(currentMenu[p+2]);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	1c9a      	adds	r2, r3, #2
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <ShowMenu+0xf8>)
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fedd 	bl	80007fc <print>
    setCursor(0,3);
 8002a42:	2103      	movs	r1, #3
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fd fe91 	bl	800076c <setCursor>
    if(p+3 >= MenuoptionCounts)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	1cda      	adds	r2, r3, #3
 8002a4e:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <ShowMenu+0xfc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	db04      	blt.n	8002a60 <ShowMenu+0xc8>
        print(temp);
 8002a56:	463b      	mov	r3, r7
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd fecf 	bl	80007fc <print>
 8002a5e:	e00a      	b.n	8002a76 <ShowMenu+0xde>
    else
    	print(currentMenu[p+3]);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	1cda      	adds	r2, r3, #3
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <ShowMenu+0xf8>)
 8002a6e:	4413      	add	r3, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fec3 	bl	80007fc <print>
    display();
 8002a76:	f7fd feab 	bl	80007d0 <display>
}
 8002a7a:	bf00      	nop
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bdb0      	pop	{r4, r5, r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000808 	.word	0x20000808
 8002a88:	0800b5cc 	.word	0x0800b5cc
 8002a8c:	48001000 	.word	0x48001000
 8002a90:	20000030 	.word	0x20000030
 8002a94:	20000804 	.word	0x20000804

08002a98 <ShowInfo>:
void ShowInfo(struct menuScreen info){
 8002a98:	b084      	sub	sp, #16
 8002a9a:	b5b0      	push	{r4, r5, r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int p = page * 3;
 8002aa8:	4b34      	ldr	r3, [pc, #208]	; (8002b7c <ShowInfo+0xe4>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4413      	add	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
    clear();
 8002ab4:	f7fd fe50 	bl	8000758 <clear>
	char temp[20] = "                   ";
 8002ab8:	4b31      	ldr	r3, [pc, #196]	; (8002b80 <ShowInfo+0xe8>)
 8002aba:	463c      	mov	r4, r7
 8002abc:	461d      	mov	r5, r3
 8002abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ac2:	682b      	ldr	r3, [r5, #0]
 8002ac4:	6023      	str	r3, [r4, #0]
    setCursor(0,0);
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7fd fe4f 	bl	800076c <setCursor>
    print(info.content);
 8002ace:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fe92 	bl	80007fc <print>
    setCursor(0,1);
 8002ad8:	2101      	movs	r1, #1
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fd fe46 	bl	800076c <setCursor>
    print(info.menuItems[p]);
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	3308      	adds	r3, #8
 8002aec:	3328      	adds	r3, #40	; 0x28
 8002aee:	443b      	add	r3, r7
 8002af0:	3304      	adds	r3, #4
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd fe82 	bl	80007fc <print>
    setCursor(0,2);
 8002af8:	2102      	movs	r1, #2
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7fd fe36 	bl	800076c <setCursor>
    if(p+1 >= MenuoptionCounts)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <ShowInfo+0xec>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	db04      	blt.n	8002b16 <ShowInfo+0x7e>
        print(temp);
 8002b0c:	463b      	mov	r3, r7
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fe74 	bl	80007fc <print>
 8002b14:	e00c      	b.n	8002b30 <ShowInfo+0x98>
	else
		print(info.menuItems[p+1]);
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	3308      	adds	r3, #8
 8002b24:	3328      	adds	r3, #40	; 0x28
 8002b26:	443b      	add	r3, r7
 8002b28:	3304      	adds	r3, #4
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fe66 	bl	80007fc <print>
    setCursor(0,3);
 8002b30:	2103      	movs	r1, #3
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7fd fe1a 	bl	800076c <setCursor>
    if(p+2 >= MenuoptionCounts)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	1c9a      	adds	r2, r3, #2
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <ShowInfo+0xec>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	db04      	blt.n	8002b4e <ShowInfo+0xb6>
        print(temp);
 8002b44:	463b      	mov	r3, r7
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fe58 	bl	80007fc <print>
 8002b4c:	e00c      	b.n	8002b68 <ShowInfo+0xd0>
	else
		print(info.menuItems[p+2]);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	1c9a      	adds	r2, r3, #2
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	3308      	adds	r3, #8
 8002b5c:	3328      	adds	r3, #40	; 0x28
 8002b5e:	443b      	add	r3, r7
 8002b60:	3304      	adds	r3, #4
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fe4a 	bl	80007fc <print>
    display();
 8002b68:	f7fd fe32 	bl	80007d0 <display>
}
 8002b6c:	bf00      	nop
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002b76:	b004      	add	sp, #16
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000808 	.word	0x20000808
 8002b80:	0800b5cc 	.word	0x0800b5cc
 8002b84:	20000804 	.word	0x20000804

08002b88 <changeOption>:
void changeOption(int down){
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	b08d      	sub	sp, #52	; 0x34
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	char newStr[20] = ">";
 8002b90:	233e      	movs	r3, #62	; 0x3e
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
	strcat(newStr,currentMenu[CurrentMenuOption]);
 8002ba2:	4b58      	ldr	r3, [pc, #352]	; (8002d04 <changeOption+0x17c>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4a56      	ldr	r2, [pc, #344]	; (8002d08 <changeOption+0x180>)
 8002bb0:	441a      	add	r2, r3
 8002bb2:	f107 030c 	add.w	r3, r7, #12
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f007 fe39 	bl	800a830 <strcat>
	strcpy(currentMenu[CurrentMenuOption],newStr);
 8002bbe:	4b51      	ldr	r3, [pc, #324]	; (8002d04 <changeOption+0x17c>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4a4f      	ldr	r2, [pc, #316]	; (8002d08 <changeOption+0x180>)
 8002bcc:	4413      	add	r3, r2
 8002bce:	f107 020c 	add.w	r2, r7, #12
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f007 fe3a 	bl	800a84e <strcpy>
	if(down == 1){
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d145      	bne.n	8002c6c <changeOption+0xe4>
		if(CurrentMenuOption > 0){
 8002be0:	4b48      	ldr	r3, [pc, #288]	; (8002d04 <changeOption+0x17c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f340 8087 	ble.w	8002cf8 <changeOption+0x170>
			int length  = strlen(currentMenu[CurrentMenuOption - 1]) - 1;
 8002bea:	4b46      	ldr	r3, [pc, #280]	; (8002d04 <changeOption+0x17c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	1e5a      	subs	r2, r3, #1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4a43      	ldr	r2, [pc, #268]	; (8002d08 <changeOption+0x180>)
 8002bfa:	4413      	add	r3, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd faf1 	bl	80001e4 <strlen>
 8002c02:	4603      	mov	r3, r0
 8002c04:	3b01      	subs	r3, #1
 8002c06:	623b      	str	r3, [r7, #32]
			for (int i = 0; i< length ;i++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c0c:	e01c      	b.n	8002c48 <changeOption+0xc0>
			{
				currentMenu[CurrentMenuOption - 1][i] = currentMenu[CurrentMenuOption - 1][i+1];
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <changeOption+0x17c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	1e59      	subs	r1, r3, #1
 8002c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c16:	1c58      	adds	r0, r3, #1
 8002c18:	4b3a      	ldr	r3, [pc, #232]	; (8002d04 <changeOption+0x17c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	1e5a      	subs	r2, r3, #1
 8002c1e:	4c3a      	ldr	r4, [pc, #232]	; (8002d08 <changeOption+0x180>)
 8002c20:	460b      	mov	r3, r1
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4423      	add	r3, r4
 8002c2a:	4403      	add	r3, r0
 8002c2c:	7818      	ldrb	r0, [r3, #0]
 8002c2e:	4936      	ldr	r1, [pc, #216]	; (8002d08 <changeOption+0x180>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	18ca      	adds	r2, r1, r3
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	4413      	add	r3, r2
 8002c3e:	4602      	mov	r2, r0
 8002c40:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i< length ;i++)
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	3301      	adds	r3, #1
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	dbde      	blt.n	8002c0e <changeOption+0x86>
			}
			currentMenu[CurrentMenuOption - 1][length] = '\0';
 8002c50:	4b2c      	ldr	r3, [pc, #176]	; (8002d04 <changeOption+0x17c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	1e5a      	subs	r2, r3, #1
 8002c56:	492c      	ldr	r1, [pc, #176]	; (8002d08 <changeOption+0x180>)
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	18ca      	adds	r2, r1, r3
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	4413      	add	r3, r2
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e045      	b.n	8002cf8 <changeOption+0x170>
		}
	}
	else{
		if(CurrentMenuOption < MenuoptionCounts){
 8002c6c:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <changeOption+0x17c>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <changeOption+0x184>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	da3f      	bge.n	8002cf8 <changeOption+0x170>
			int length  = strlen(currentMenu[CurrentMenuOption + 1]) - 1;
 8002c78:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <changeOption+0x17c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <changeOption+0x180>)
 8002c88:	4413      	add	r3, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd faaa 	bl	80001e4 <strlen>
 8002c90:	4603      	mov	r3, r0
 8002c92:	3b01      	subs	r3, #1
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
			for (int i = 0; i< length ;i++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c9a:	e01c      	b.n	8002cd6 <changeOption+0x14e>
			{
				currentMenu[CurrentMenuOption + 1][i] = currentMenu[CurrentMenuOption + 1][i+1];
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <changeOption+0x17c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	1c59      	adds	r1, r3, #1
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	1c58      	adds	r0, r3, #1
 8002ca6:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <changeOption+0x17c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	4c16      	ldr	r4, [pc, #88]	; (8002d08 <changeOption+0x180>)
 8002cae:	460b      	mov	r3, r1
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4423      	add	r3, r4
 8002cb8:	4403      	add	r3, r0
 8002cba:	7818      	ldrb	r0, [r3, #0]
 8002cbc:	4912      	ldr	r1, [pc, #72]	; (8002d08 <changeOption+0x180>)
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	18ca      	adds	r2, r1, r3
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	4413      	add	r3, r2
 8002ccc:	4602      	mov	r2, r0
 8002cce:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i< length ;i++)
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	dbde      	blt.n	8002c9c <changeOption+0x114>
			}
			currentMenu[CurrentMenuOption + 1][length] = '\0';
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <changeOption+0x17c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	4908      	ldr	r1, [pc, #32]	; (8002d08 <changeOption+0x180>)
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	18ca      	adds	r2, r1, r3
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	4413      	add	r3, r2
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
		}
	}
	ShowMenu();
 8002cf8:	f7ff fe4e 	bl	8002998 <ShowMenu>
}
 8002cfc:	bf00      	nop
 8002cfe:	3734      	adds	r7, #52	; 0x34
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd90      	pop	{r4, r7, pc}
 8002d04:	20000800 	.word	0x20000800
 8002d08:	20000030 	.word	0x20000030
 8002d0c:	20000804 	.word	0x20000804

08002d10 <SetMenu>:
void SetMenu(char MenuItems[][20]){
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 12 ; i++){
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e00b      	b.n	8002d36 <SetMenu+0x26>
	    strcpy(currentMenu[i],"");
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <SetMenu+0x70>)
 8002d2a:	4413      	add	r3, r2
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 12 ; i++){
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3301      	adds	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b0b      	cmp	r3, #11
 8002d3a:	ddf0      	ble.n	8002d1e <SetMenu+0xe>
	}
	for(int i = 0; i < MenuoptionCounts; i++){
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	e014      	b.n	8002d6c <SetMenu+0x5c>
	    strcpy(currentMenu[i],MenuItems[i]);
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <SetMenu+0x70>)
 8002d4e:	1898      	adds	r0, r3, r2
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	f007 fd74 	bl	800a84e <strcpy>
	for(int i = 0; i < MenuoptionCounts; i++){
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <SetMenu+0x74>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	dbe5      	blt.n	8002d42 <SetMenu+0x32>
	}
}
 8002d76:	bf00      	nop
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000030 	.word	0x20000030
 8002d84:	20000804 	.word	0x20000804

08002d88 <messageSetter>:
void messageSetter(struct TreeNode* node, char* newChar){
 8002d88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
	if(strcmp(newChar,"null") != 0 && strcmp(newChar,"dell") != 0){
 8002d94:	4933      	ldr	r1, [pc, #204]	; (8002e64 <messageSetter+0xdc>)
 8002d96:	6838      	ldr	r0, [r7, #0]
 8002d98:	f7fd fa1a 	bl	80001d0 <strcmp>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03d      	beq.n	8002e1e <messageSetter+0x96>
 8002da2:	4931      	ldr	r1, [pc, #196]	; (8002e68 <messageSetter+0xe0>)
 8002da4:	6838      	ldr	r0, [r7, #0]
 8002da6:	f7fd fa13 	bl	80001d0 <strcmp>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d036      	beq.n	8002e1e <messageSetter+0x96>
		int len = strlen(node->screen.content);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	33d0      	adds	r3, #208	; 0xd0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fa15 	bl	80001e4 <strlen>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	60fb      	str	r3, [r7, #12]
		if(HAL_GetTick()- lastPress < 800  && sameKeyPressed){
 8002dbe:	f001 fd97 	bl	80048f0 <HAL_GetTick>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	4698      	mov	r8, r3
 8002dc8:	4691      	mov	r9, r2
 8002dca:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <messageSetter+0xe4>)
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	ebb8 0402 	subs.w	r4, r8, r2
 8002dd4:	eb69 0503 	sbc.w	r5, r9, r3
 8002dd8:	f5b4 7f48 	cmp.w	r4, #800	; 0x320
 8002ddc:	f175 0300 	sbcs.w	r3, r5, #0
 8002de0:	d20d      	bcs.n	8002dfe <messageSetter+0x76>
 8002de2:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <messageSetter+0xe8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <messageSetter+0x76>
			node->screen.content[len - 1] = newChar[0];
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	7811      	ldrb	r1, [r2, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	460a      	mov	r2, r1
 8002df8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	if(strcmp(newChar,"null") != 0 && strcmp(newChar,"dell") != 0){
 8002dfc:	e027      	b.n	8002e4e <messageSetter+0xc6>
		}
		else{
			node->screen.content[len] = newChar[0];
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	7819      	ldrb	r1, [r3, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	33d0      	adds	r3, #208	; 0xd0
 8002e0a:	460a      	mov	r2, r1
 8002e0c:	701a      	strb	r2, [r3, #0]
			node->screen.content[len+1] = '\0';
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3301      	adds	r3, #1
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	if(strcmp(newChar,"null") != 0 && strcmp(newChar,"dell") != 0){
 8002e1c:	e017      	b.n	8002e4e <messageSetter+0xc6>
		}
	}
	else if(strcmp(newChar,"dell") == 0){
 8002e1e:	4912      	ldr	r1, [pc, #72]	; (8002e68 <messageSetter+0xe0>)
 8002e20:	6838      	ldr	r0, [r7, #0]
 8002e22:	f7fd f9d5 	bl	80001d0 <strcmp>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d110      	bne.n	8002e4e <messageSetter+0xc6>
		int len = strlen(node->screen.content);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	33d0      	adds	r3, #208	; 0xd0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd f9d7 	bl	80001e4 <strlen>
 8002e36:	4603      	mov	r3, r0
 8002e38:	60bb      	str	r3, [r7, #8]
		if(len >0){
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	dd06      	ble.n	8002e4e <messageSetter+0xc6>
			node->screen.content[len - 1] = '\0';
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
		}
	}
	strcpy(startMassage,node->screen.content);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	33d0      	adds	r3, #208	; 0xd0
 8002e52:	4619      	mov	r1, r3
 8002e54:	4807      	ldr	r0, [pc, #28]	; (8002e74 <messageSetter+0xec>)
 8002e56:	f007 fcfa 	bl	800a84e <strcpy>
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e64:	0800b5e0 	.word	0x0800b5e0
 8002e68:	0800b5e8 	.word	0x0800b5e8
 8002e6c:	200007f8 	.word	0x200007f8
 8002e70:	20000814 	.word	0x20000814
 8002e74:	200007d4 	.word	0x200007d4

08002e78 <setOn>:
void setOn(struct menuScreen* screen){
 8002e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e7a:	b08b      	sub	sp, #44	; 0x2c
 8002e7c:	af04      	add	r7, sp, #16
 8002e7e:	60f8      	str	r0, [r7, #12]
	if(strcmp(screen->content,"<  on  >") != 0 ){
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	33ac      	adds	r3, #172	; 0xac
 8002e84:	497b      	ldr	r1, [pc, #492]	; (8003074 <setOn+0x1fc>)
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd f9a2 	bl	80001d0 <strcmp>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80ac 	beq.w	8002fec <setOn+0x174>
		strcpy(screen->content,"<  on  >");
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	33ac      	adds	r3, #172	; 0xac
 8002e98:	4976      	ldr	r1, [pc, #472]	; (8003074 <setOn+0x1fc>)
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	cb03      	ldmia	r3!, {r0, r1}
 8002ea0:	6010      	str	r0, [r2, #0]
 8002ea2:	6051      	str	r1, [r2, #4]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	7213      	strb	r3, [r2, #8]
		if(screen->id > lastPagesId){
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b72      	ldr	r3, [pc, #456]	; (8003078 <setOn+0x200>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	dd48      	ble.n	8002f46 <setOn+0xce>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 8002eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002eb8:	4870      	ldr	r0, [pc, #448]	; (800307c <setOn+0x204>)
 8002eba:	f003 fba7 	bl	800660c <HAL_GPIO_TogglePin>
			int index = screen->id - lastPagesId - 1;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4b6d      	ldr	r3, [pc, #436]	; (8003078 <setOn+0x200>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
			setScenario(addedScenarios[index][0], addedScenarios[index][1], addedScenarios[index][2], addedScenarios[index][3], addedScenarios[index][4], addedScenarios[index][5], addedScenarios[index][6], addedScenarios[index][7]);
 8002ecc:	4a6c      	ldr	r2, [pc, #432]	; (8003080 <setOn+0x208>)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	015b      	lsls	r3, r3, #5
 8002ed2:	4413      	add	r3, r2
 8002ed4:	681c      	ldr	r4, [r3, #0]
 8002ed6:	4a6a      	ldr	r2, [pc, #424]	; (8003080 <setOn+0x208>)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	015b      	lsls	r3, r3, #5
 8002edc:	4413      	add	r3, r2
 8002ede:	3304      	adds	r3, #4
 8002ee0:	681d      	ldr	r5, [r3, #0]
 8002ee2:	4a67      	ldr	r2, [pc, #412]	; (8003080 <setOn+0x208>)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	015b      	lsls	r3, r3, #5
 8002ee8:	4413      	add	r3, r2
 8002eea:	3308      	adds	r3, #8
 8002eec:	681e      	ldr	r6, [r3, #0]
 8002eee:	4a64      	ldr	r2, [pc, #400]	; (8003080 <setOn+0x208>)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	015b      	lsls	r3, r3, #5
 8002ef4:	4413      	add	r3, r2
 8002ef6:	330c      	adds	r3, #12
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	4a60      	ldr	r2, [pc, #384]	; (8003080 <setOn+0x208>)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	015b      	lsls	r3, r3, #5
 8002f02:	4413      	add	r3, r2
 8002f04:	3310      	adds	r3, #16
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	495d      	ldr	r1, [pc, #372]	; (8003080 <setOn+0x208>)
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	0152      	lsls	r2, r2, #5
 8002f0e:	440a      	add	r2, r1
 8002f10:	3214      	adds	r2, #20
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	485a      	ldr	r0, [pc, #360]	; (8003080 <setOn+0x208>)
 8002f18:	6979      	ldr	r1, [r7, #20]
 8002f1a:	0149      	lsls	r1, r1, #5
 8002f1c:	4401      	add	r1, r0
 8002f1e:	3118      	adds	r1, #24
 8002f20:	6809      	ldr	r1, [r1, #0]
 8002f22:	4857      	ldr	r0, [pc, #348]	; (8003080 <setOn+0x208>)
 8002f24:	4602      	mov	r2, r0
 8002f26:	6978      	ldr	r0, [r7, #20]
 8002f28:	0140      	lsls	r0, r0, #5
 8002f2a:	4410      	add	r0, r2
 8002f2c:	301c      	adds	r0, #28
 8002f2e:	6800      	ldr	r0, [r0, #0]
 8002f30:	9003      	str	r0, [sp, #12]
 8002f32:	9102      	str	r1, [sp, #8]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	9201      	str	r2, [sp, #4]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4632      	mov	r2, r6
 8002f3e:	4629      	mov	r1, r5
 8002f40:	4620      	mov	r0, r4
 8002f42:	f000 fa09 	bl	8003358 <setScenario>
		}
		switch(screen->id){
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3b08      	subs	r3, #8
 8002f4c:	2b09      	cmp	r3, #9
 8002f4e:	f200 808c 	bhi.w	800306a <setOn+0x1f2>
 8002f52:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <setOn+0xe0>)
 8002f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f58:	08002f81 	.word	0x08002f81
 8002f5c:	08002f89 	.word	0x08002f89
 8002f60:	08002f91 	.word	0x08002f91
 8002f64:	08002f99 	.word	0x08002f99
 8002f68:	08002fb7 	.word	0x08002fb7
 8002f6c:	0800306b 	.word	0x0800306b
 8002f70:	0800306b 	.word	0x0800306b
 8002f74:	08002fd5 	.word	0x08002fd5
 8002f78:	08002fdd 	.word	0x08002fdd
 8002f7c:	08002fe5 	.word	0x08002fe5
			case 8:
				temAlarm = 1;
 8002f80:	4b40      	ldr	r3, [pc, #256]	; (8003084 <setOn+0x20c>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
				break;
 8002f86:	e070      	b.n	800306a <setOn+0x1f2>
			case 9:
				securityAlert = 1;
 8002f88:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <setOn+0x210>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
				break;
 8002f8e:	e06c      	b.n	800306a <setOn+0x1f2>
			case 10:
				securityAlarm = 1;
 8002f90:	4b3e      	ldr	r3, [pc, #248]	; (800308c <setOn+0x214>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
				break;
 8002f96:	e068      	b.n	800306a <setOn+0x1f2>
			case 11: // scenario 1: entering the house
				setScenario(22, 1, 0, 1, 1, 1, 0, 0);
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9303      	str	r3, [sp, #12]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	9302      	str	r3, [sp, #8]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2301      	movs	r3, #1
 8002faa:	2200      	movs	r2, #0
 8002fac:	2101      	movs	r1, #1
 8002fae:	2016      	movs	r0, #22
 8002fb0:	f000 f9d2 	bl	8003358 <setScenario>
				break;
 8002fb4:	e059      	b.n	800306a <setOn+0x1f2>
			case 12:// scenario 2: leaving the house
				setScenario(35, 1, 1, 1, 0, 0, 0, 0);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	9303      	str	r3, [sp, #12]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9302      	str	r3, [sp, #8]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	2201      	movs	r2, #1
 8002fca:	2101      	movs	r1, #1
 8002fcc:	2023      	movs	r0, #35	; 0x23
 8002fce:	f000 f9c3 	bl	8003358 <setScenario>
				break;
 8002fd2:	e04a      	b.n	800306a <setOn+0x1f2>
			case 15:
				newSceneTemAlarm = 1;
 8002fd4:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <setOn+0x218>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
				break;
 8002fda:	e046      	b.n	800306a <setOn+0x1f2>
			case 16:
				newScenesecurityAlarm = 1;
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <setOn+0x21c>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]
				break;
 8002fe2:	e042      	b.n	800306a <setOn+0x1f2>
			case 17:
				newSceneSecurityAlert = 1;
 8002fe4:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <setOn+0x220>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
				break;
 8002fea:	e03e      	b.n	800306a <setOn+0x1f2>
		}

	}
	else{
		strcpy(screen->content,"<  off  >");
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	33ac      	adds	r3, #172	; 0xac
 8002ff0:	492a      	ldr	r1, [pc, #168]	; (800309c <setOn+0x224>)
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	cb03      	ldmia	r3!, {r0, r1}
 8002ff8:	6010      	str	r0, [r2, #0]
 8002ffa:	6051      	str	r1, [r2, #4]
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	8113      	strh	r3, [r2, #8]
		switch(screen->id){
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3b08      	subs	r3, #8
 8003006:	2b09      	cmp	r3, #9
 8003008:	d82f      	bhi.n	800306a <setOn+0x1f2>
 800300a:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <setOn+0x198>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	08003039 	.word	0x08003039
 8003014:	08003041 	.word	0x08003041
 8003018:	08003049 	.word	0x08003049
 800301c:	08003069 	.word	0x08003069
 8003020:	08003069 	.word	0x08003069
 8003024:	0800306b 	.word	0x0800306b
 8003028:	0800306b 	.word	0x0800306b
 800302c:	08003051 	.word	0x08003051
 8003030:	08003059 	.word	0x08003059
 8003034:	08003061 	.word	0x08003061
			case 8:
				temAlarm = 0;
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <setOn+0x20c>)
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
				break;
 800303e:	e014      	b.n	800306a <setOn+0x1f2>
			case 9:
				securityAlert = 0;
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <setOn+0x210>)
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
				break;
 8003046:	e010      	b.n	800306a <setOn+0x1f2>
			case 10:
				securityAlarm = 0;
 8003048:	4b10      	ldr	r3, [pc, #64]	; (800308c <setOn+0x214>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
				break;
 800304e:	e00c      	b.n	800306a <setOn+0x1f2>
			case 11:
				break;
			case 12:
				break;
			case 15:
				newSceneTemAlarm = 0;
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <setOn+0x218>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
				break;
 8003056:	e008      	b.n	800306a <setOn+0x1f2>
			case 16:
				newScenesecurityAlarm = 0;
 8003058:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <setOn+0x21c>)
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
				break;
 800305e:	e004      	b.n	800306a <setOn+0x1f2>
			case 17:
				newSceneSecurityAlert = 0;
 8003060:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <setOn+0x220>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
				break;
 8003066:	e000      	b.n	800306a <setOn+0x1f2>
				break;
 8003068:	bf00      	nop
		}
	}
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003072:	bf00      	nop
 8003074:	0800b5f0 	.word	0x0800b5f0
 8003078:	2000081c 	.word	0x2000081c
 800307c:	48001000 	.word	0x48001000
 8003080:	20000750 	.word	0x20000750
 8003084:	2000000c 	.word	0x2000000c
 8003088:	20000014 	.word	0x20000014
 800308c:	20000010 	.word	0x20000010
 8003090:	2000001c 	.word	0x2000001c
 8003094:	20000020 	.word	0x20000020
 8003098:	20000024 	.word	0x20000024
 800309c:	0800b560 	.word	0x0800b560

080030a0 <setExactOn>:
void setExactOn(struct menuScreen* screen,int value){
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
	if(value == 1){
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d13d      	bne.n	800312c <setExactOn+0x8c>
			strcpy(screen->content,"<  on  >");
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	33ac      	adds	r3, #172	; 0xac
 80030b4:	493f      	ldr	r1, [pc, #252]	; (80031b4 <setExactOn+0x114>)
 80030b6:	461a      	mov	r2, r3
 80030b8:	460b      	mov	r3, r1
 80030ba:	cb03      	ldmia	r3!, {r0, r1}
 80030bc:	6010      	str	r0, [r2, #0]
 80030be:	6051      	str	r1, [r2, #4]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	7213      	strb	r3, [r2, #8]
			switch(screen->id){
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3b08      	subs	r3, #8
 80030ca:	2b09      	cmp	r3, #9
 80030cc:	d86c      	bhi.n	80031a8 <setExactOn+0x108>
 80030ce:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <setExactOn+0x34>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	080030fd 	.word	0x080030fd
 80030d8:	08003105 	.word	0x08003105
 80030dc:	0800310d 	.word	0x0800310d
 80030e0:	080031a9 	.word	0x080031a9
 80030e4:	080031a9 	.word	0x080031a9
 80030e8:	080031a9 	.word	0x080031a9
 80030ec:	080031a9 	.word	0x080031a9
 80030f0:	08003115 	.word	0x08003115
 80030f4:	0800311d 	.word	0x0800311d
 80030f8:	08003125 	.word	0x08003125
				case 8:
					temAlarm = 1;
 80030fc:	4b2e      	ldr	r3, [pc, #184]	; (80031b8 <setExactOn+0x118>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]
					break;
 8003102:	e051      	b.n	80031a8 <setExactOn+0x108>
				case 9:
					securityAlert = 1;
 8003104:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <setExactOn+0x11c>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]
					break;
 800310a:	e04d      	b.n	80031a8 <setExactOn+0x108>
				case 10:
					securityAlarm = 1;
 800310c:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <setExactOn+0x120>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]
					break;
 8003112:	e049      	b.n	80031a8 <setExactOn+0x108>
				case 15:
					newSceneTemAlarm = 1;
 8003114:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <setExactOn+0x124>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]
					break;
 800311a:	e045      	b.n	80031a8 <setExactOn+0x108>
				case 16:
					newScenesecurityAlarm = 1;
 800311c:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <setExactOn+0x128>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]
					break;
 8003122:	e041      	b.n	80031a8 <setExactOn+0x108>
				case 17:
					newSceneSecurityAlert = 1;
 8003124:	4b29      	ldr	r3, [pc, #164]	; (80031cc <setExactOn+0x12c>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]
					break;
 800312a:	e03d      	b.n	80031a8 <setExactOn+0x108>
			}
		}
		else{
			strcpy(screen->content,"<  off  >");
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	33ac      	adds	r3, #172	; 0xac
 8003130:	4927      	ldr	r1, [pc, #156]	; (80031d0 <setExactOn+0x130>)
 8003132:	461a      	mov	r2, r3
 8003134:	460b      	mov	r3, r1
 8003136:	cb03      	ldmia	r3!, {r0, r1}
 8003138:	6010      	str	r0, [r2, #0]
 800313a:	6051      	str	r1, [r2, #4]
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	8113      	strh	r3, [r2, #8]
			switch(screen->id){
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3b08      	subs	r3, #8
 8003146:	2b09      	cmp	r3, #9
 8003148:	d82e      	bhi.n	80031a8 <setExactOn+0x108>
 800314a:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <setExactOn+0xb0>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	08003179 	.word	0x08003179
 8003154:	08003181 	.word	0x08003181
 8003158:	08003189 	.word	0x08003189
 800315c:	080031a9 	.word	0x080031a9
 8003160:	080031a9 	.word	0x080031a9
 8003164:	080031a9 	.word	0x080031a9
 8003168:	080031a9 	.word	0x080031a9
 800316c:	08003191 	.word	0x08003191
 8003170:	08003199 	.word	0x08003199
 8003174:	080031a1 	.word	0x080031a1
				case 8:
					temAlarm = 0;
 8003178:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <setExactOn+0x118>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
					break;
 800317e:	e013      	b.n	80031a8 <setExactOn+0x108>
				case 9:
					securityAlert = 0;
 8003180:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <setExactOn+0x11c>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
					break;
 8003186:	e00f      	b.n	80031a8 <setExactOn+0x108>
				case 10:
					securityAlarm = 0;
 8003188:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <setExactOn+0x120>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
					break;
 800318e:	e00b      	b.n	80031a8 <setExactOn+0x108>
				case 15:
					newSceneTemAlarm = 0;
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <setExactOn+0x124>)
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
					break;
 8003196:	e007      	b.n	80031a8 <setExactOn+0x108>
				case 16:
					newScenesecurityAlarm = 0;
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <setExactOn+0x128>)
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
					break;
 800319e:	e003      	b.n	80031a8 <setExactOn+0x108>
				case 17:
					newSceneSecurityAlert = 0;
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <setExactOn+0x12c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
					break;
 80031a6:	bf00      	nop
			}
		}
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	0800b5f0 	.word	0x0800b5f0
 80031b8:	2000000c 	.word	0x2000000c
 80031bc:	20000014 	.word	0x20000014
 80031c0:	20000010 	.word	0x20000010
 80031c4:	2000001c 	.word	0x2000001c
 80031c8:	20000020 	.word	0x20000020
 80031cc:	20000024 	.word	0x20000024
 80031d0:	0800b560 	.word	0x0800b560

080031d4 <setThreshold>:
void setThreshold(struct menuScreen* screen, int increase, int temperId){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
	if(temperId == 0){
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d11a      	bne.n	800321c <setThreshold+0x48>
		if(increase && temThreshold > 0)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <setThreshold+0x2c>
 80031ec:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <setThreshold+0x8c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	dd05      	ble.n	8003200 <setThreshold+0x2c>
			temThreshold++;
 80031f4:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <setThreshold+0x8c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	4a19      	ldr	r2, [pc, #100]	; (8003260 <setThreshold+0x8c>)
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e004      	b.n	800320a <setThreshold+0x36>
		else
			temThreshold--;
 8003200:	4b17      	ldr	r3, [pc, #92]	; (8003260 <setThreshold+0x8c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3b01      	subs	r3, #1
 8003206:	4a16      	ldr	r2, [pc, #88]	; (8003260 <setThreshold+0x8c>)
 8003208:	6013      	str	r3, [r2, #0]

	    sprintf(screen->content,"<  %d  >", temThreshold);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	33ac      	adds	r3, #172	; 0xac
 800320e:	4a14      	ldr	r2, [pc, #80]	; (8003260 <setThreshold+0x8c>)
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	4914      	ldr	r1, [pc, #80]	; (8003264 <setThreshold+0x90>)
 8003214:	4618      	mov	r0, r3
 8003216:	f007 faeb 	bl	800a7f0 <siprintf>
			newSceneTemThreshold--;
	    sprintf(screen->content,"<  %d  >", newSceneTemThreshold);

	}

}
 800321a:	e01c      	b.n	8003256 <setThreshold+0x82>
	else if(temperId == 1){
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d119      	bne.n	8003256 <setThreshold+0x82>
		if(increase && newSceneTemThreshold > 0)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d009      	beq.n	800323c <setThreshold+0x68>
 8003228:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <setThreshold+0x94>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	dd05      	ble.n	800323c <setThreshold+0x68>
			newSceneTemThreshold++;
 8003230:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <setThreshold+0x94>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	4a0c      	ldr	r2, [pc, #48]	; (8003268 <setThreshold+0x94>)
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e004      	b.n	8003246 <setThreshold+0x72>
			newSceneTemThreshold--;
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <setThreshold+0x94>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3b01      	subs	r3, #1
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <setThreshold+0x94>)
 8003244:	6013      	str	r3, [r2, #0]
	    sprintf(screen->content,"<  %d  >", newSceneTemThreshold);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	33ac      	adds	r3, #172	; 0xac
 800324a:	4a07      	ldr	r2, [pc, #28]	; (8003268 <setThreshold+0x94>)
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	4905      	ldr	r1, [pc, #20]	; (8003264 <setThreshold+0x90>)
 8003250:	4618      	mov	r0, r3
 8003252:	f007 facd 	bl	800a7f0 <siprintf>
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000008 	.word	0x20000008
 8003264:	0800b5fc 	.word	0x0800b5fc
 8003268:	20000018 	.word	0x20000018

0800326c <setExcactThreshold>:
void setExcactThreshold(struct menuScreen* screen, int threshold){
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
	temThreshold = threshold;
 8003276:	4a07      	ldr	r2, [pc, #28]	; (8003294 <setExcactThreshold+0x28>)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	6013      	str	r3, [r2, #0]
    sprintf(screen->content,"<  %d  >", temThreshold);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	33ac      	adds	r3, #172	; 0xac
 8003280:	4a04      	ldr	r2, [pc, #16]	; (8003294 <setExcactThreshold+0x28>)
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	4904      	ldr	r1, [pc, #16]	; (8003298 <setExcactThreshold+0x2c>)
 8003286:	4618      	mov	r0, r3
 8003288:	f007 fab2 	bl	800a7f0 <siprintf>
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000008 	.word	0x20000008
 8003298:	0800b5fc 	.word	0x0800b5fc

0800329c <setLigthToggle>:
void setLigthToggle(struct menuScreen* screen, int index,int* lights){
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
	lights[index] = 1 - lights[index];
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	440b      	add	r3, r1
 80032ba:	f1c2 0201 	rsb	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]
	if(lights[index] == 1)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d109      	bne.n	80032e2 <setLigthToggle+0x46>
		screen->content[index * 3] = 'O';
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	4613      	mov	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4413      	add	r3, r2
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4413      	add	r3, r2
 80032da:	224f      	movs	r2, #79	; 0x4f
 80032dc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	else
		screen->content[index * 3] = 'X';

}
 80032e0:	e008      	b.n	80032f4 <setLigthToggle+0x58>
		screen->content[index * 3] = 'X';
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4413      	add	r3, r2
 80032ee:	2258      	movs	r2, #88	; 0x58
 80032f0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <setExactLight>:
void setExactLight(struct menuScreen* screen, int index,int value){
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
	Lights[index] = value;
 800330c:	4911      	ldr	r1, [pc, #68]	; (8003354 <setExactLight+0x54>)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(Lights[index] == 1)
 8003316:	4a0f      	ldr	r2, [pc, #60]	; (8003354 <setExactLight+0x54>)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d109      	bne.n	8003336 <setExactLight+0x36>
			screen->content[index * 3] = 'O';
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	4613      	mov	r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	4413      	add	r3, r2
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4413      	add	r3, r2
 800332e:	224f      	movs	r2, #79	; 0x4f
 8003330:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		else
			screen->content[index * 3] = 'X';
}
 8003334:	e008      	b.n	8003348 <setExactLight+0x48>
			screen->content[index * 3] = 'X';
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	4613      	mov	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4413      	add	r3, r2
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4413      	add	r3, r2
 8003342:	2258      	movs	r2, #88	; 0x58
 8003344:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	20000740 	.word	0x20000740

08003358 <setScenario>:
void setScenario(int temperatureThreshold, int temperatureAlarm,int secAlarm, int secAlert, int l1,int l2, int l3, int l4){
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
	// calling previous functions
	setExcactThreshold(&(node7->screen),temperatureThreshold);
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <setScenario+0x90>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3324      	adds	r3, #36	; 0x24
 800336c:	68f9      	ldr	r1, [r7, #12]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff ff7c 	bl	800326c <setExcactThreshold>
	setExactLight(&(node4->screen),0,l1);
 8003374:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <setScenario+0x94>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3324      	adds	r3, #36	; 0x24
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff ffbe 	bl	8003300 <setExactLight>
	setExactLight(&(node4->screen),1,l2);
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <setScenario+0x94>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3324      	adds	r3, #36	; 0x24
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	2101      	movs	r1, #1
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ffb6 	bl	8003300 <setExactLight>
	setExactLight(&(node4->screen),2,l3);
 8003394:	4b15      	ldr	r3, [pc, #84]	; (80033ec <setScenario+0x94>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3324      	adds	r3, #36	; 0x24
 800339a:	6a3a      	ldr	r2, [r7, #32]
 800339c:	2102      	movs	r1, #2
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ffae 	bl	8003300 <setExactLight>
	setExactLight(&(node4->screen),3,l4);
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <setScenario+0x94>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3324      	adds	r3, #36	; 0x24
 80033aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ac:	2103      	movs	r1, #3
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff ffa6 	bl	8003300 <setExactLight>
	setExactOn(&(node8->screen),temperatureAlarm);
 80033b4:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <setScenario+0x98>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3324      	adds	r3, #36	; 0x24
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fe6f 	bl	80030a0 <setExactOn>
	setExactOn(&(node10->screen),secAlarm);
 80033c2:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <setScenario+0x9c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3324      	adds	r3, #36	; 0x24
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fe68 	bl	80030a0 <setExactOn>
	setExactOn(&(node9->screen),secAlert);
 80033d0:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <setScenario+0xa0>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3324      	adds	r3, #36	; 0x24
 80033d6:	6839      	ldr	r1, [r7, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fe61 	bl	80030a0 <setExactOn>
}
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000840 	.word	0x20000840
 80033ec:	20000834 	.word	0x20000834
 80033f0:	20000844 	.word	0x20000844
 80033f4:	2000084c 	.word	0x2000084c
 80033f8:	20000848 	.word	0x20000848

080033fc <charSelector>:
char* charSelector(int key, int count) {
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
    switch (key) {
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3b01      	subs	r3, #1
 800340a:	2b0d      	cmp	r3, #13
 800340c:	f200 810f 	bhi.w	800362e <charSelector+0x232>
 8003410:	a201      	add	r2, pc, #4	; (adr r2, 8003418 <charSelector+0x1c>)
 8003412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003416:	bf00      	nop
 8003418:	08003451 	.word	0x08003451
 800341c:	08003479 	.word	0x08003479
 8003420:	080034a9 	.word	0x080034a9
 8003424:	0800362f 	.word	0x0800362f
 8003428:	080034d9 	.word	0x080034d9
 800342c:	08003509 	.word	0x08003509
 8003430:	08003539 	.word	0x08003539
 8003434:	0800362f 	.word	0x0800362f
 8003438:	08003569 	.word	0x08003569
 800343c:	080035a1 	.word	0x080035a1
 8003440:	080035d1 	.word	0x080035d1
 8003444:	0800362f 	.word	0x0800362f
 8003448:	0800362f 	.word	0x0800362f
 800344c:	08003609 	.word	0x08003609
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d00e      	beq.n	8003474 <charSelector+0x78>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b03      	cmp	r3, #3
 800345a:	f300 80d7 	bgt.w	800360c <charSelector+0x210>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d003      	beq.n	800346c <charSelector+0x70>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d002      	beq.n	8003470 <charSelector+0x74>
                case 2:
                    return "1";
                case 3:
                    return " ";
            }
            break;
 800346a:	e0cf      	b.n	800360c <charSelector+0x210>
                    return "0";
 800346c:	4b73      	ldr	r3, [pc, #460]	; (800363c <charSelector+0x240>)
 800346e:	e0df      	b.n	8003630 <charSelector+0x234>
                    return "1";
 8003470:	4b73      	ldr	r3, [pc, #460]	; (8003640 <charSelector+0x244>)
 8003472:	e0dd      	b.n	8003630 <charSelector+0x234>
                    return " ";
 8003474:	4b73      	ldr	r3, [pc, #460]	; (8003644 <charSelector+0x248>)
 8003476:	e0db      	b.n	8003630 <charSelector+0x234>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	3b01      	subs	r3, #1
 800347c:	2b03      	cmp	r3, #3
 800347e:	f200 80c7 	bhi.w	8003610 <charSelector+0x214>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <charSelector+0x8c>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	08003499 	.word	0x08003499
 800348c:	0800349d 	.word	0x0800349d
 8003490:	080034a1 	.word	0x080034a1
 8003494:	080034a5 	.word	0x080034a5
        case 2:
            switch (count) {
                case 1:
                    return "2";
 8003498:	4b6b      	ldr	r3, [pc, #428]	; (8003648 <charSelector+0x24c>)
 800349a:	e0c9      	b.n	8003630 <charSelector+0x234>
                case 2:
                    return "a";
 800349c:	4b6b      	ldr	r3, [pc, #428]	; (800364c <charSelector+0x250>)
 800349e:	e0c7      	b.n	8003630 <charSelector+0x234>
                case 3:
                    return "b";
 80034a0:	4b6b      	ldr	r3, [pc, #428]	; (8003650 <charSelector+0x254>)
 80034a2:	e0c5      	b.n	8003630 <charSelector+0x234>
                case 4:
                    return "c";
 80034a4:	4b6b      	ldr	r3, [pc, #428]	; (8003654 <charSelector+0x258>)
 80034a6:	e0c3      	b.n	8003630 <charSelector+0x234>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	f200 80b1 	bhi.w	8003614 <charSelector+0x218>
 80034b2:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <charSelector+0xbc>)
 80034b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b8:	080034c9 	.word	0x080034c9
 80034bc:	080034cd 	.word	0x080034cd
 80034c0:	080034d1 	.word	0x080034d1
 80034c4:	080034d5 	.word	0x080034d5
            }
            break;
        case 3:
            switch (count) {
                case 1:
                    return "3";
 80034c8:	4b63      	ldr	r3, [pc, #396]	; (8003658 <charSelector+0x25c>)
 80034ca:	e0b1      	b.n	8003630 <charSelector+0x234>
                case 2:
                    return "d";
 80034cc:	4b63      	ldr	r3, [pc, #396]	; (800365c <charSelector+0x260>)
 80034ce:	e0af      	b.n	8003630 <charSelector+0x234>
                case 3:
                    return "e";
 80034d0:	4b63      	ldr	r3, [pc, #396]	; (8003660 <charSelector+0x264>)
 80034d2:	e0ad      	b.n	8003630 <charSelector+0x234>
                case 4:
                    return "f";
 80034d4:	4b63      	ldr	r3, [pc, #396]	; (8003664 <charSelector+0x268>)
 80034d6:	e0ab      	b.n	8003630 <charSelector+0x234>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	3b01      	subs	r3, #1
 80034dc:	2b03      	cmp	r3, #3
 80034de:	f200 809b 	bhi.w	8003618 <charSelector+0x21c>
 80034e2:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <charSelector+0xec>)
 80034e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e8:	080034f9 	.word	0x080034f9
 80034ec:	080034fd 	.word	0x080034fd
 80034f0:	08003501 	.word	0x08003501
 80034f4:	08003505 	.word	0x08003505
            }
            break;
        case 5:
            switch (count) {
                case 1:
                    return "4";
 80034f8:	4b5b      	ldr	r3, [pc, #364]	; (8003668 <charSelector+0x26c>)
 80034fa:	e099      	b.n	8003630 <charSelector+0x234>
                case 2:
                    return "g";
 80034fc:	4b5b      	ldr	r3, [pc, #364]	; (800366c <charSelector+0x270>)
 80034fe:	e097      	b.n	8003630 <charSelector+0x234>
                case 3:
                    return "h";
 8003500:	4b5b      	ldr	r3, [pc, #364]	; (8003670 <charSelector+0x274>)
 8003502:	e095      	b.n	8003630 <charSelector+0x234>
                case 4:
                    return "i";
 8003504:	4b5b      	ldr	r3, [pc, #364]	; (8003674 <charSelector+0x278>)
 8003506:	e093      	b.n	8003630 <charSelector+0x234>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	3b01      	subs	r3, #1
 800350c:	2b03      	cmp	r3, #3
 800350e:	f200 8085 	bhi.w	800361c <charSelector+0x220>
 8003512:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <charSelector+0x11c>)
 8003514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003518:	08003529 	.word	0x08003529
 800351c:	0800352d 	.word	0x0800352d
 8003520:	08003531 	.word	0x08003531
 8003524:	08003535 	.word	0x08003535
            }
            break;
        case 6:
            switch (count) {
                case 1:
                    return "5";
 8003528:	4b53      	ldr	r3, [pc, #332]	; (8003678 <charSelector+0x27c>)
 800352a:	e081      	b.n	8003630 <charSelector+0x234>
                case 2:
                    return "j";
 800352c:	4b53      	ldr	r3, [pc, #332]	; (800367c <charSelector+0x280>)
 800352e:	e07f      	b.n	8003630 <charSelector+0x234>
                case 3:
                    return "k";
 8003530:	4b53      	ldr	r3, [pc, #332]	; (8003680 <charSelector+0x284>)
 8003532:	e07d      	b.n	8003630 <charSelector+0x234>
                case 4:
                    return "l";
 8003534:	4b53      	ldr	r3, [pc, #332]	; (8003684 <charSelector+0x288>)
 8003536:	e07b      	b.n	8003630 <charSelector+0x234>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	3b01      	subs	r3, #1
 800353c:	2b03      	cmp	r3, #3
 800353e:	d86f      	bhi.n	8003620 <charSelector+0x224>
 8003540:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <charSelector+0x14c>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	08003559 	.word	0x08003559
 800354c:	0800355d 	.word	0x0800355d
 8003550:	08003561 	.word	0x08003561
 8003554:	08003565 	.word	0x08003565
            }
            break;
        case 7:
            switch (count) {
                case 1:
                    return "6";
 8003558:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <charSelector+0x28c>)
 800355a:	e069      	b.n	8003630 <charSelector+0x234>
                case 2:
                    return "m";
 800355c:	4b4b      	ldr	r3, [pc, #300]	; (800368c <charSelector+0x290>)
 800355e:	e067      	b.n	8003630 <charSelector+0x234>
                case 3:
                    return "n";
 8003560:	4b4b      	ldr	r3, [pc, #300]	; (8003690 <charSelector+0x294>)
 8003562:	e065      	b.n	8003630 <charSelector+0x234>
                case 4:
                    return "o";
 8003564:	4b4b      	ldr	r3, [pc, #300]	; (8003694 <charSelector+0x298>)
 8003566:	e063      	b.n	8003630 <charSelector+0x234>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	3b01      	subs	r3, #1
 800356c:	2b04      	cmp	r3, #4
 800356e:	d859      	bhi.n	8003624 <charSelector+0x228>
 8003570:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <charSelector+0x17c>)
 8003572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003576:	bf00      	nop
 8003578:	0800358d 	.word	0x0800358d
 800357c:	08003591 	.word	0x08003591
 8003580:	08003595 	.word	0x08003595
 8003584:	08003599 	.word	0x08003599
 8003588:	0800359d 	.word	0x0800359d
            }
            break;
        case 9:
            switch (count) {
                case 1:
                    return "7";
 800358c:	4b42      	ldr	r3, [pc, #264]	; (8003698 <charSelector+0x29c>)
 800358e:	e04f      	b.n	8003630 <charSelector+0x234>
                case 2:
                    return "p";
 8003590:	4b42      	ldr	r3, [pc, #264]	; (800369c <charSelector+0x2a0>)
 8003592:	e04d      	b.n	8003630 <charSelector+0x234>
                case 3:
                    return "q";
 8003594:	4b42      	ldr	r3, [pc, #264]	; (80036a0 <charSelector+0x2a4>)
 8003596:	e04b      	b.n	8003630 <charSelector+0x234>
                case 4:
                    return "r";
 8003598:	4b42      	ldr	r3, [pc, #264]	; (80036a4 <charSelector+0x2a8>)
 800359a:	e049      	b.n	8003630 <charSelector+0x234>
                case 5:
                    return "s";
 800359c:	4b42      	ldr	r3, [pc, #264]	; (80036a8 <charSelector+0x2ac>)
 800359e:	e047      	b.n	8003630 <charSelector+0x234>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d83f      	bhi.n	8003628 <charSelector+0x22c>
 80035a8:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <charSelector+0x1b4>)
 80035aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ae:	bf00      	nop
 80035b0:	080035c1 	.word	0x080035c1
 80035b4:	080035c5 	.word	0x080035c5
 80035b8:	080035c9 	.word	0x080035c9
 80035bc:	080035cd 	.word	0x080035cd
            }
            break;
        case 10:
            switch (count) {
                case 1:
                    return "8";
 80035c0:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <charSelector+0x2b0>)
 80035c2:	e035      	b.n	8003630 <charSelector+0x234>
                case 2:
                    return "t";
 80035c4:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <charSelector+0x2b4>)
 80035c6:	e033      	b.n	8003630 <charSelector+0x234>
                case 3:
                    return "u";
 80035c8:	4b3a      	ldr	r3, [pc, #232]	; (80036b4 <charSelector+0x2b8>)
 80035ca:	e031      	b.n	8003630 <charSelector+0x234>
                case 4:
                    return "v";
 80035cc:	4b3a      	ldr	r3, [pc, #232]	; (80036b8 <charSelector+0x2bc>)
 80035ce:	e02f      	b.n	8003630 <charSelector+0x234>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d829      	bhi.n	800362c <charSelector+0x230>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <charSelector+0x1e4>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	080035f5 	.word	0x080035f5
 80035e4:	080035f9 	.word	0x080035f9
 80035e8:	080035fd 	.word	0x080035fd
 80035ec:	08003601 	.word	0x08003601
 80035f0:	08003605 	.word	0x08003605
            }
            break;
        case 11:
            switch (count) {
                case 1:
                    return "9";
 80035f4:	4b31      	ldr	r3, [pc, #196]	; (80036bc <charSelector+0x2c0>)
 80035f6:	e01b      	b.n	8003630 <charSelector+0x234>
                case 2:
                    return "w";
 80035f8:	4b31      	ldr	r3, [pc, #196]	; (80036c0 <charSelector+0x2c4>)
 80035fa:	e019      	b.n	8003630 <charSelector+0x234>
                case 3:
                    return "x";
 80035fc:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <charSelector+0x2c8>)
 80035fe:	e017      	b.n	8003630 <charSelector+0x234>
                case 4:
                    return "y";
 8003600:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <charSelector+0x2cc>)
 8003602:	e015      	b.n	8003630 <charSelector+0x234>
                case 5:
                    return "z";
 8003604:	4b31      	ldr	r3, [pc, #196]	; (80036cc <charSelector+0x2d0>)
 8003606:	e013      	b.n	8003630 <charSelector+0x234>
            }
            break;
        case 14:
            return "dell";
 8003608:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <charSelector+0x2d4>)
 800360a:	e011      	b.n	8003630 <charSelector+0x234>
            break;
 800360c:	bf00      	nop
 800360e:	e00e      	b.n	800362e <charSelector+0x232>
            break;
 8003610:	bf00      	nop
 8003612:	e00c      	b.n	800362e <charSelector+0x232>
            break;
 8003614:	bf00      	nop
 8003616:	e00a      	b.n	800362e <charSelector+0x232>
            break;
 8003618:	bf00      	nop
 800361a:	e008      	b.n	800362e <charSelector+0x232>
            break;
 800361c:	bf00      	nop
 800361e:	e006      	b.n	800362e <charSelector+0x232>
            break;
 8003620:	bf00      	nop
 8003622:	e004      	b.n	800362e <charSelector+0x232>
            break;
 8003624:	bf00      	nop
 8003626:	e002      	b.n	800362e <charSelector+0x232>
            break;
 8003628:	bf00      	nop
 800362a:	e000      	b.n	800362e <charSelector+0x232>
            break;
 800362c:	bf00      	nop
    }

    return "null";
 800362e:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <charSelector+0x2d8>)
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	0800b608 	.word	0x0800b608
 8003640:	0800b60c 	.word	0x0800b60c
 8003644:	0800b610 	.word	0x0800b610
 8003648:	0800b614 	.word	0x0800b614
 800364c:	0800b618 	.word	0x0800b618
 8003650:	0800b61c 	.word	0x0800b61c
 8003654:	0800b620 	.word	0x0800b620
 8003658:	0800b624 	.word	0x0800b624
 800365c:	0800b628 	.word	0x0800b628
 8003660:	0800b62c 	.word	0x0800b62c
 8003664:	0800b630 	.word	0x0800b630
 8003668:	0800b634 	.word	0x0800b634
 800366c:	0800b638 	.word	0x0800b638
 8003670:	0800b63c 	.word	0x0800b63c
 8003674:	0800b640 	.word	0x0800b640
 8003678:	0800b644 	.word	0x0800b644
 800367c:	0800b648 	.word	0x0800b648
 8003680:	0800b64c 	.word	0x0800b64c
 8003684:	0800b650 	.word	0x0800b650
 8003688:	0800b654 	.word	0x0800b654
 800368c:	0800b658 	.word	0x0800b658
 8003690:	0800b65c 	.word	0x0800b65c
 8003694:	0800b660 	.word	0x0800b660
 8003698:	0800b664 	.word	0x0800b664
 800369c:	0800b668 	.word	0x0800b668
 80036a0:	0800b66c 	.word	0x0800b66c
 80036a4:	0800b670 	.word	0x0800b670
 80036a8:	0800b674 	.word	0x0800b674
 80036ac:	0800b678 	.word	0x0800b678
 80036b0:	0800b67c 	.word	0x0800b67c
 80036b4:	0800b680 	.word	0x0800b680
 80036b8:	0800b684 	.word	0x0800b684
 80036bc:	0800b688 	.word	0x0800b688
 80036c0:	0800b68c 	.word	0x0800b68c
 80036c4:	0800b690 	.word	0x0800b690
 80036c8:	0800b694 	.word	0x0800b694
 80036cc:	0800b698 	.word	0x0800b698
 80036d0:	0800b5e8 	.word	0x0800b5e8
 80036d4:	0800b5e0 	.word	0x0800b5e0

080036d8 <stateCountsForEachKey>:
int stateCountsForEachKey(int key){
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
		switch(key){
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	2b0a      	cmp	r3, #10
 80036e6:	d82b      	bhi.n	8003740 <stateCountsForEachKey+0x68>
 80036e8:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <stateCountsForEachKey+0x18>)
 80036ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ee:	bf00      	nop
 80036f0:	0800371d 	.word	0x0800371d
 80036f4:	08003721 	.word	0x08003721
 80036f8:	08003725 	.word	0x08003725
 80036fc:	08003741 	.word	0x08003741
 8003700:	08003729 	.word	0x08003729
 8003704:	0800372d 	.word	0x0800372d
 8003708:	08003731 	.word	0x08003731
 800370c:	08003741 	.word	0x08003741
 8003710:	08003735 	.word	0x08003735
 8003714:	08003739 	.word	0x08003739
 8003718:	0800373d 	.word	0x0800373d
		case 1:
			return 3;
 800371c:	2303      	movs	r3, #3
 800371e:	e010      	b.n	8003742 <stateCountsForEachKey+0x6a>
		case 2:
			return 4;
 8003720:	2304      	movs	r3, #4
 8003722:	e00e      	b.n	8003742 <stateCountsForEachKey+0x6a>
		case 3:
			return 4;
 8003724:	2304      	movs	r3, #4
 8003726:	e00c      	b.n	8003742 <stateCountsForEachKey+0x6a>
		case 5:
			return 4;
 8003728:	2304      	movs	r3, #4
 800372a:	e00a      	b.n	8003742 <stateCountsForEachKey+0x6a>
		case 6:
			return 4;
 800372c:	2304      	movs	r3, #4
 800372e:	e008      	b.n	8003742 <stateCountsForEachKey+0x6a>
		case 7:
			return 4;
 8003730:	2304      	movs	r3, #4
 8003732:	e006      	b.n	8003742 <stateCountsForEachKey+0x6a>
		case 9:
			return 5;
 8003734:	2305      	movs	r3, #5
 8003736:	e004      	b.n	8003742 <stateCountsForEachKey+0x6a>
		case 10:
			return 4;
 8003738:	2304      	movs	r3, #4
 800373a:	e002      	b.n	8003742 <stateCountsForEachKey+0x6a>
		case 11:
			return 5;
 800373c:	2305      	movs	r3, #5
 800373e:	e000      	b.n	8003742 <stateCountsForEachKey+0x6a>

	}
		return 0;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop

08003750 <nextCurrentNode>:
void nextCurrentNode(){
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
	switch(CurrentMenuOption){
 8003754:	4b26      	ldr	r3, [pc, #152]	; (80037f0 <nextCurrentNode+0xa0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b07      	cmp	r3, #7
 800375a:	d843      	bhi.n	80037e4 <nextCurrentNode+0x94>
 800375c:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <nextCurrentNode+0x14>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	08003785 	.word	0x08003785
 8003768:	08003791 	.word	0x08003791
 800376c:	0800379d 	.word	0x0800379d
 8003770:	080037a9 	.word	0x080037a9
 8003774:	080037b5 	.word	0x080037b5
 8003778:	080037c1 	.word	0x080037c1
 800377c:	080037cd 	.word	0x080037cd
 8003780:	080037d9 	.word	0x080037d9
		case 0:
			currentNode = currentNode->child1;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <nextCurrentNode+0xa4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1a      	ldr	r2, [pc, #104]	; (80037f4 <nextCurrentNode+0xa4>)
 800378c:	6013      	str	r3, [r2, #0]
			break;
 800378e:	e029      	b.n	80037e4 <nextCurrentNode+0x94>
		case 1:
			currentNode = currentNode->child2;
 8003790:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <nextCurrentNode+0xa4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <nextCurrentNode+0xa4>)
 8003798:	6013      	str	r3, [r2, #0]
			break;
 800379a:	e023      	b.n	80037e4 <nextCurrentNode+0x94>
		case 2:
			currentNode = currentNode->child3;
 800379c:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <nextCurrentNode+0xa4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <nextCurrentNode+0xa4>)
 80037a4:	6013      	str	r3, [r2, #0]
			break;
 80037a6:	e01d      	b.n	80037e4 <nextCurrentNode+0x94>
		case 3:
			currentNode = currentNode->child4;
 80037a8:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <nextCurrentNode+0xa4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	4a11      	ldr	r2, [pc, #68]	; (80037f4 <nextCurrentNode+0xa4>)
 80037b0:	6013      	str	r3, [r2, #0]
			break;
 80037b2:	e017      	b.n	80037e4 <nextCurrentNode+0x94>
		case 4:
			currentNode = currentNode->child5;
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <nextCurrentNode+0xa4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	4a0e      	ldr	r2, [pc, #56]	; (80037f4 <nextCurrentNode+0xa4>)
 80037bc:	6013      	str	r3, [r2, #0]
			break;
 80037be:	e011      	b.n	80037e4 <nextCurrentNode+0x94>
		case 5:
			currentNode = currentNode->child6;
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <nextCurrentNode+0xa4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <nextCurrentNode+0xa4>)
 80037c8:	6013      	str	r3, [r2, #0]
			break;
 80037ca:	e00b      	b.n	80037e4 <nextCurrentNode+0x94>
		case 6:
			currentNode = currentNode->child7;
 80037cc:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <nextCurrentNode+0xa4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <nextCurrentNode+0xa4>)
 80037d4:	6013      	str	r3, [r2, #0]
			break;
 80037d6:	e005      	b.n	80037e4 <nextCurrentNode+0x94>
		case 7:
			currentNode = currentNode->child8;
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <nextCurrentNode+0xa4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	4a05      	ldr	r2, [pc, #20]	; (80037f4 <nextCurrentNode+0xa4>)
 80037e0:	6013      	str	r3, [r2, #0]
			break;
 80037e2:	bf00      	nop
	}
}
 80037e4:	bf00      	nop
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000800 	.word	0x20000800
 80037f4:	20000878 	.word	0x20000878

080037f8 <keyHandler>:
	print("                   ");
	display();
}


void keyHandler(){
 80037f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037fc:	b0c2      	sub	sp, #264	; 0x108
 80037fe:	af40      	add	r7, sp, #256	; 0x100
//	if(startState == 2){
		if(HAL_GetTick()- lastPress<300 ) return;
 8003800:	f001 f876 	bl	80048f0 <HAL_GetTick>
 8003804:	4603      	mov	r3, r0
 8003806:	2200      	movs	r2, #0
 8003808:	4698      	mov	r8, r3
 800380a:	4691      	mov	r9, r2
 800380c:	4b86      	ldr	r3, [pc, #536]	; (8003a28 <keyHandler+0x230>)
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	ebb8 0402 	subs.w	r4, r8, r2
 8003816:	eb69 0503 	sbc.w	r5, r9, r3
 800381a:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 800381e:	f175 0300 	sbcs.w	r3, r5, #0
 8003822:	f0c0 83b2 	bcc.w	8003f8a <keyHandler+0x792>
		int key = row * 4 + col +1;
 8003826:	4b81      	ldr	r3, [pc, #516]	; (8003a2c <keyHandler+0x234>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	009a      	lsls	r2, r3, #2
 800382c:	4b80      	ldr	r3, [pc, #512]	; (8003a30 <keyHandler+0x238>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4413      	add	r3, r2
 8003832:	3301      	adds	r3, #1
 8003834:	607b      	str	r3, [r7, #4]
		if(!generateMenu){
 8003836:	4b7f      	ldr	r3, [pc, #508]	; (8003a34 <keyHandler+0x23c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <keyHandler+0x50>
			GenerateMenu();
 800383e:	f7fd ff57 	bl	80016f0 <GenerateMenu>
			generateMenu = 1;
 8003842:	4b7c      	ldr	r3, [pc, #496]	; (8003a34 <keyHandler+0x23c>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]
		}

		if(currentNode->screen.id == 19){
 8003848:	4b7b      	ldr	r3, [pc, #492]	; (8003a38 <keyHandler+0x240>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b13      	cmp	r3, #19
 8003850:	d101      	bne.n	8003856 <keyHandler+0x5e>
			createScenario();
 8003852:	f7fe fe83 	bl	800255c <createScenario>
		}
		if(currentNode->screen.id == 6){
 8003856:	4b78      	ldr	r3, [pc, #480]	; (8003a38 <keyHandler+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	2b06      	cmp	r3, #6
 800385e:	d140      	bne.n	80038e2 <keyHandler+0xea>
			if(key != lastKeyPressed){
 8003860:	4b76      	ldr	r3, [pc, #472]	; (8003a3c <keyHandler+0x244>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	429a      	cmp	r2, r3
 8003868:	d009      	beq.n	800387e <keyHandler+0x86>
				lastKeyPressed = key;
 800386a:	4a74      	ldr	r2, [pc, #464]	; (8003a3c <keyHandler+0x244>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6013      	str	r3, [r2, #0]
				typingCount = 1;
 8003870:	4b73      	ldr	r3, [pc, #460]	; (8003a40 <keyHandler+0x248>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]
				sameKeyPressed = 0;
 8003876:	4b73      	ldr	r3, [pc, #460]	; (8003a44 <keyHandler+0x24c>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e015      	b.n	80038aa <keyHandler+0xb2>
			}
			else{
				sameKeyPressed = 1;
 800387e:	4b71      	ldr	r3, [pc, #452]	; (8003a44 <keyHandler+0x24c>)
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]
				typingCount++;
 8003884:	4b6e      	ldr	r3, [pc, #440]	; (8003a40 <keyHandler+0x248>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	4a6d      	ldr	r2, [pc, #436]	; (8003a40 <keyHandler+0x248>)
 800388c:	6013      	str	r3, [r2, #0]
				typingCount = typingCount % (stateCountsForEachKey(key)+1);
 800388e:	4b6c      	ldr	r3, [pc, #432]	; (8003a40 <keyHandler+0x248>)
 8003890:	681c      	ldr	r4, [r3, #0]
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ff20 	bl	80036d8 <stateCountsForEachKey>
 8003898:	4603      	mov	r3, r0
 800389a:	3301      	adds	r3, #1
 800389c:	fb94 f2f3 	sdiv	r2, r4, r3
 80038a0:	fb02 f303 	mul.w	r3, r2, r3
 80038a4:	1ae3      	subs	r3, r4, r3
 80038a6:	4a66      	ldr	r2, [pc, #408]	; (8003a40 <keyHandler+0x248>)
 80038a8:	6013      	str	r3, [r2, #0]
			}
			messageSetter(currentNode, charSelector(key, typingCount));
 80038aa:	4b63      	ldr	r3, [pc, #396]	; (8003a38 <keyHandler+0x240>)
 80038ac:	681c      	ldr	r4, [r3, #0]
 80038ae:	4b64      	ldr	r3, [pc, #400]	; (8003a40 <keyHandler+0x248>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff fda1 	bl	80033fc <charSelector>
 80038ba:	4603      	mov	r3, r0
 80038bc:	4619      	mov	r1, r3
 80038be:	4620      	mov	r0, r4
 80038c0:	f7ff fa62 	bl	8002d88 <messageSetter>
			ShowInfo(currentNode->screen);
 80038c4:	4b5c      	ldr	r3, [pc, #368]	; (8003a38 <keyHandler+0x240>)
 80038c6:	681c      	ldr	r4, [r3, #0]
 80038c8:	4668      	mov	r0, sp
 80038ca:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80038ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038d2:	4619      	mov	r1, r3
 80038d4:	f006 fe86 	bl	800a5e4 <memcpy>
 80038d8:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80038dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038de:	f7ff f8db 	bl	8002a98 <ShowInfo>
		}

		switch (key) {
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3b02      	subs	r3, #2
 80038e6:	2b0e      	cmp	r3, #14
 80038e8:	f200 8379 	bhi.w	8003fde <keyHandler+0x7e6>
 80038ec:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <keyHandler+0xfc>)
 80038ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f2:	bf00      	nop
 80038f4:	08003931 	.word	0x08003931
 80038f8:	08003fdf 	.word	0x08003fdf
 80038fc:	080039b3 	.word	0x080039b3
 8003900:	08003a61 	.word	0x08003a61
 8003904:	08003b61 	.word	0x08003b61
 8003908:	08003bed 	.word	0x08003bed
 800390c:	08003d19 	.word	0x08003d19
 8003910:	08003fdf 	.word	0x08003fdf
 8003914:	08003fdf 	.word	0x08003fdf
 8003918:	08003fdf 	.word	0x08003fdf
 800391c:	08003d8f 	.word	0x08003d8f
 8003920:	08003e05 	.word	0x08003e05
 8003924:	08003fdf 	.word	0x08003fdf
 8003928:	08003e89 	.word	0x08003e89
 800392c:	08003f17 	.word	0x08003f17
			case 2: // up key
				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);// does not work
 8003930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003934:	4844      	ldr	r0, [pc, #272]	; (8003a48 <keyHandler+0x250>)
 8003936:	f002 fe69 	bl	800660c <HAL_GPIO_TogglePin>
				if(inMenu && CurrentMenuOption > 0){
 800393a:	4b44      	ldr	r3, [pc, #272]	; (8003a4c <keyHandler+0x254>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d018      	beq.n	8003974 <keyHandler+0x17c>
 8003942:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <keyHandler+0x258>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	dd14      	ble.n	8003974 <keyHandler+0x17c>
					if(inMenu && CurrentMenuOption == 4)
 800394a:	4b40      	ldr	r3, [pc, #256]	; (8003a4c <keyHandler+0x254>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <keyHandler+0x16c>
 8003952:	4b3f      	ldr	r3, [pc, #252]	; (8003a50 <keyHandler+0x258>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b04      	cmp	r3, #4
 8003958:	d104      	bne.n	8003964 <keyHandler+0x16c>
						page--;
 800395a:	4b3e      	ldr	r3, [pc, #248]	; (8003a54 <keyHandler+0x25c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3b01      	subs	r3, #1
 8003960:	4a3c      	ldr	r2, [pc, #240]	; (8003a54 <keyHandler+0x25c>)
 8003962:	6013      	str	r3, [r2, #0]
					CurrentMenuOption--;
 8003964:	4b3a      	ldr	r3, [pc, #232]	; (8003a50 <keyHandler+0x258>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3b01      	subs	r3, #1
 800396a:	4a39      	ldr	r2, [pc, #228]	; (8003a50 <keyHandler+0x258>)
 800396c:	6013      	str	r3, [r2, #0]
					changeOption(0);
 800396e:	2000      	movs	r0, #0
 8003970:	f7ff f90a 	bl	8002b88 <changeOption>
				}
				if(!inMenu && page>0){
 8003974:	4b35      	ldr	r3, [pc, #212]	; (8003a4c <keyHandler+0x254>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	f040 8308 	bne.w	8003f8e <keyHandler+0x796>
 800397e:	4b35      	ldr	r3, [pc, #212]	; (8003a54 <keyHandler+0x25c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f340 8303 	ble.w	8003f8e <keyHandler+0x796>
					page--;
 8003988:	4b32      	ldr	r3, [pc, #200]	; (8003a54 <keyHandler+0x25c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3b01      	subs	r3, #1
 800398e:	4a31      	ldr	r2, [pc, #196]	; (8003a54 <keyHandler+0x25c>)
 8003990:	6013      	str	r3, [r2, #0]
					ShowInfo(currentNode->screen);
 8003992:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <keyHandler+0x240>)
 8003994:	681c      	ldr	r4, [r3, #0]
 8003996:	4668      	mov	r0, sp
 8003998:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800399c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039a0:	4619      	mov	r1, r3
 80039a2:	f006 fe1f 	bl	800a5e4 <memcpy>
 80039a6:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80039aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039ac:	f7ff f874 	bl	8002a98 <ShowInfo>
				}
				break;
 80039b0:	e2ed      	b.n	8003f8e <keyHandler+0x796>

			case 4:
				if(currentNode->screen.id == 4 ){
 80039b2:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <keyHandler+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d117      	bne.n	80039ec <keyHandler+0x1f4>
					setLigthToggle(&(currentNode->screen),0,Lights);
 80039bc:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <keyHandler+0x240>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3324      	adds	r3, #36	; 0x24
 80039c2:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <keyHandler+0x260>)
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fc68 	bl	800329c <setLigthToggle>
					ShowInfo(currentNode->screen);
 80039cc:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <keyHandler+0x240>)
 80039ce:	681c      	ldr	r4, [r3, #0]
 80039d0:	4668      	mov	r0, sp
 80039d2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80039d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039da:	4619      	mov	r1, r3
 80039dc:	f006 fe02 	bl	800a5e4 <memcpy>
 80039e0:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80039e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039e6:	f7ff f857 	bl	8002a98 <ShowInfo>
				}
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),0,newScenarioLights);
					ShowInfo(currentNode->screen);
				}
				break;
 80039ea:	e2e7      	b.n	8003fbc <keyHandler+0x7c4>
				else if(currentNode->screen.id == 18){
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <keyHandler+0x240>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	2b12      	cmp	r3, #18
 80039f4:	f040 82e2 	bne.w	8003fbc <keyHandler+0x7c4>
					setLigthToggle(&(currentNode->screen),0,newScenarioLights);
 80039f8:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <keyHandler+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3324      	adds	r3, #36	; 0x24
 80039fe:	4a17      	ldr	r2, [pc, #92]	; (8003a5c <keyHandler+0x264>)
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fc4a 	bl	800329c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <keyHandler+0x240>)
 8003a0a:	681c      	ldr	r4, [r3, #0]
 8003a0c:	4668      	mov	r0, sp
 8003a0e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a16:	4619      	mov	r1, r3
 8003a18:	f006 fde4 	bl	800a5e4 <memcpy>
 8003a1c:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003a20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a22:	f7ff f839 	bl	8002a98 <ShowInfo>
				break;
 8003a26:	e2c9      	b.n	8003fbc <keyHandler+0x7c4>
 8003a28:	200007f8 	.word	0x200007f8
 8003a2c:	2000002c 	.word	0x2000002c
 8003a30:	20000028 	.word	0x20000028
 8003a34:	2000080c 	.word	0x2000080c
 8003a38:	20000878 	.word	0x20000878
 8003a3c:	20000810 	.word	0x20000810
 8003a40:	20000124 	.word	0x20000124
 8003a44:	20000814 	.word	0x20000814
 8003a48:	48001000 	.word	0x48001000
 8003a4c:	20000120 	.word	0x20000120
 8003a50:	20000800 	.word	0x20000800
 8003a54:	20000808 	.word	0x20000808
 8003a58:	20000740 	.word	0x20000740
 8003a5c:	200007e8 	.word	0x200007e8

			case 5: // left key
				if(currentNode->screen.id == 8 ||currentNode->screen.id == 9 || currentNode->screen.id == 10 || currentNode->screen.id == 11 || currentNode->screen.id == 12 || currentNode->screen.id == 15 || currentNode->screen.id == 16 || currentNode->screen.id == 17 ||currentNode->screen.id >lastPagesId){
 8003a60:	4b96      	ldr	r3, [pc, #600]	; (8003cbc <keyHandler+0x4c4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d029      	beq.n	8003abe <keyHandler+0x2c6>
 8003a6a:	4b94      	ldr	r3, [pc, #592]	; (8003cbc <keyHandler+0x4c4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	2b09      	cmp	r3, #9
 8003a72:	d024      	beq.n	8003abe <keyHandler+0x2c6>
 8003a74:	4b91      	ldr	r3, [pc, #580]	; (8003cbc <keyHandler+0x4c4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	2b0a      	cmp	r3, #10
 8003a7c:	d01f      	beq.n	8003abe <keyHandler+0x2c6>
 8003a7e:	4b8f      	ldr	r3, [pc, #572]	; (8003cbc <keyHandler+0x4c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	2b0b      	cmp	r3, #11
 8003a86:	d01a      	beq.n	8003abe <keyHandler+0x2c6>
 8003a88:	4b8c      	ldr	r3, [pc, #560]	; (8003cbc <keyHandler+0x4c4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d015      	beq.n	8003abe <keyHandler+0x2c6>
 8003a92:	4b8a      	ldr	r3, [pc, #552]	; (8003cbc <keyHandler+0x4c4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	2b0f      	cmp	r3, #15
 8003a9a:	d010      	beq.n	8003abe <keyHandler+0x2c6>
 8003a9c:	4b87      	ldr	r3, [pc, #540]	; (8003cbc <keyHandler+0x4c4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d00b      	beq.n	8003abe <keyHandler+0x2c6>
 8003aa6:	4b85      	ldr	r3, [pc, #532]	; (8003cbc <keyHandler+0x4c4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	2b11      	cmp	r3, #17
 8003aae:	d006      	beq.n	8003abe <keyHandler+0x2c6>
 8003ab0:	4b82      	ldr	r3, [pc, #520]	; (8003cbc <keyHandler+0x4c4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab6:	4b82      	ldr	r3, [pc, #520]	; (8003cc0 <keyHandler+0x4c8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	dd15      	ble.n	8003aea <keyHandler+0x2f2>
					setOn(&(currentNode->screen));
 8003abe:	4b7f      	ldr	r3, [pc, #508]	; (8003cbc <keyHandler+0x4c4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3324      	adds	r3, #36	; 0x24
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff f9d7 	bl	8002e78 <setOn>
					ShowInfo(currentNode->screen);
 8003aca:	4b7c      	ldr	r3, [pc, #496]	; (8003cbc <keyHandler+0x4c4>)
 8003acc:	681c      	ldr	r4, [r3, #0]
 8003ace:	4668      	mov	r0, sp
 8003ad0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f006 fd83 	bl	800a5e4 <memcpy>
 8003ade:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ae4:	f7fe ffd8 	bl	8002a98 <ShowInfo>
				}
				else if(currentNode->screen.id == 14){
					setThreshold(&(currentNode->screen), 0,1);
					ShowInfo(currentNode->screen);
				}
				break;
 8003ae8:	e26a      	b.n	8003fc0 <keyHandler+0x7c8>
				else if(currentNode->screen.id == 7 ){
 8003aea:	4b74      	ldr	r3, [pc, #464]	; (8003cbc <keyHandler+0x4c4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	2b07      	cmp	r3, #7
 8003af2:	d117      	bne.n	8003b24 <keyHandler+0x32c>
					setThreshold(&(currentNode->screen), 0,0);
 8003af4:	4b71      	ldr	r3, [pc, #452]	; (8003cbc <keyHandler+0x4c4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3324      	adds	r3, #36	; 0x24
 8003afa:	2200      	movs	r2, #0
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fb68 	bl	80031d4 <setThreshold>
					ShowInfo(currentNode->screen);
 8003b04:	4b6d      	ldr	r3, [pc, #436]	; (8003cbc <keyHandler+0x4c4>)
 8003b06:	681c      	ldr	r4, [r3, #0]
 8003b08:	4668      	mov	r0, sp
 8003b0a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b12:	4619      	mov	r1, r3
 8003b14:	f006 fd66 	bl	800a5e4 <memcpy>
 8003b18:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003b1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b1e:	f7fe ffbb 	bl	8002a98 <ShowInfo>
				break;
 8003b22:	e24d      	b.n	8003fc0 <keyHandler+0x7c8>
				else if(currentNode->screen.id == 14){
 8003b24:	4b65      	ldr	r3, [pc, #404]	; (8003cbc <keyHandler+0x4c4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2b0e      	cmp	r3, #14
 8003b2c:	f040 8248 	bne.w	8003fc0 <keyHandler+0x7c8>
					setThreshold(&(currentNode->screen), 0,1);
 8003b30:	4b62      	ldr	r3, [pc, #392]	; (8003cbc <keyHandler+0x4c4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3324      	adds	r3, #36	; 0x24
 8003b36:	2201      	movs	r2, #1
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fb4a 	bl	80031d4 <setThreshold>
					ShowInfo(currentNode->screen);
 8003b40:	4b5e      	ldr	r3, [pc, #376]	; (8003cbc <keyHandler+0x4c4>)
 8003b42:	681c      	ldr	r4, [r3, #0]
 8003b44:	4668      	mov	r0, sp
 8003b46:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f006 fd48 	bl	800a5e4 <memcpy>
 8003b54:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b5a:	f7fe ff9d 	bl	8002a98 <ShowInfo>
				break;
 8003b5e:	e22f      	b.n	8003fc0 <keyHandler+0x7c8>
			case 6: // down key
				if(inMenu && CurrentMenuOption < MenuoptionCounts - 1) {
 8003b60:	4b58      	ldr	r3, [pc, #352]	; (8003cc4 <keyHandler+0x4cc>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d019      	beq.n	8003b9c <keyHandler+0x3a4>
 8003b68:	4b57      	ldr	r3, [pc, #348]	; (8003cc8 <keyHandler+0x4d0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	1e5a      	subs	r2, r3, #1
 8003b6e:	4b57      	ldr	r3, [pc, #348]	; (8003ccc <keyHandler+0x4d4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	dd12      	ble.n	8003b9c <keyHandler+0x3a4>
					if(inMenu && CurrentMenuOption == 3)
 8003b76:	4b53      	ldr	r3, [pc, #332]	; (8003cc4 <keyHandler+0x4cc>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <keyHandler+0x394>
 8003b7e:	4b53      	ldr	r3, [pc, #332]	; (8003ccc <keyHandler+0x4d4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d102      	bne.n	8003b8c <keyHandler+0x394>
						page = 1;
 8003b86:	4b52      	ldr	r3, [pc, #328]	; (8003cd0 <keyHandler+0x4d8>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
					CurrentMenuOption++;
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <keyHandler+0x4d4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	4a4e      	ldr	r2, [pc, #312]	; (8003ccc <keyHandler+0x4d4>)
 8003b94:	6013      	str	r3, [r2, #0]
					changeOption(1);
 8003b96:	2001      	movs	r0, #1
 8003b98:	f7fe fff6 	bl	8002b88 <changeOption>
				}
				if(!inMenu && page < (currentNode->screen.optionCount-1) / 3){
 8003b9c:	4b49      	ldr	r3, [pc, #292]	; (8003cc4 <keyHandler+0x4cc>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f040 820f 	bne.w	8003fc4 <keyHandler+0x7cc>
 8003ba6:	4b45      	ldr	r3, [pc, #276]	; (8003cbc <keyHandler+0x4c4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	3b01      	subs	r3, #1
 8003bae:	4a49      	ldr	r2, [pc, #292]	; (8003cd4 <keyHandler+0x4dc>)
 8003bb0:	fb82 1203 	smull	r1, r2, r2, r3
 8003bb4:	17db      	asrs	r3, r3, #31
 8003bb6:	1ad2      	subs	r2, r2, r3
 8003bb8:	4b45      	ldr	r3, [pc, #276]	; (8003cd0 <keyHandler+0x4d8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	f340 8201 	ble.w	8003fc4 <keyHandler+0x7cc>
					page++;
 8003bc2:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <keyHandler+0x4d8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	4a41      	ldr	r2, [pc, #260]	; (8003cd0 <keyHandler+0x4d8>)
 8003bca:	6013      	str	r3, [r2, #0]
					ShowInfo(currentNode->screen);
 8003bcc:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <keyHandler+0x4c4>)
 8003bce:	681c      	ldr	r4, [r3, #0]
 8003bd0:	4668      	mov	r0, sp
 8003bd2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f006 fd02 	bl	800a5e4 <memcpy>
 8003be0:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003be4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003be6:	f7fe ff57 	bl	8002a98 <ShowInfo>

				}

				break;
 8003bea:	e1eb      	b.n	8003fc4 <keyHandler+0x7cc>
			case 7: // right key
				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8003bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bf0:	4839      	ldr	r0, [pc, #228]	; (8003cd8 <keyHandler+0x4e0>)
 8003bf2:	f002 fd0b 	bl	800660c <HAL_GPIO_TogglePin>

				if(currentNode->screen.id == 8 ||currentNode->screen.id == 9 || currentNode->screen.id == 10 || currentNode->screen.id == 11 || currentNode->screen.id == 12 || currentNode->screen.id == 15 || currentNode->screen.id == 16 || currentNode->screen.id == 17 ||currentNode->screen.id >lastPagesId){
 8003bf6:	4b31      	ldr	r3, [pc, #196]	; (8003cbc <keyHandler+0x4c4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d029      	beq.n	8003c54 <keyHandler+0x45c>
 8003c00:	4b2e      	ldr	r3, [pc, #184]	; (8003cbc <keyHandler+0x4c4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	2b09      	cmp	r3, #9
 8003c08:	d024      	beq.n	8003c54 <keyHandler+0x45c>
 8003c0a:	4b2c      	ldr	r3, [pc, #176]	; (8003cbc <keyHandler+0x4c4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	2b0a      	cmp	r3, #10
 8003c12:	d01f      	beq.n	8003c54 <keyHandler+0x45c>
 8003c14:	4b29      	ldr	r3, [pc, #164]	; (8003cbc <keyHandler+0x4c4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b0b      	cmp	r3, #11
 8003c1c:	d01a      	beq.n	8003c54 <keyHandler+0x45c>
 8003c1e:	4b27      	ldr	r3, [pc, #156]	; (8003cbc <keyHandler+0x4c4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	2b0c      	cmp	r3, #12
 8003c26:	d015      	beq.n	8003c54 <keyHandler+0x45c>
 8003c28:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <keyHandler+0x4c4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	2b0f      	cmp	r3, #15
 8003c30:	d010      	beq.n	8003c54 <keyHandler+0x45c>
 8003c32:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <keyHandler+0x4c4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d00b      	beq.n	8003c54 <keyHandler+0x45c>
 8003c3c:	4b1f      	ldr	r3, [pc, #124]	; (8003cbc <keyHandler+0x4c4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	2b11      	cmp	r3, #17
 8003c44:	d006      	beq.n	8003c54 <keyHandler+0x45c>
 8003c46:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <keyHandler+0x4c4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c4c:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <keyHandler+0x4c8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	dd15      	ble.n	8003c80 <keyHandler+0x488>
					setOn(&(currentNode->screen));
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <keyHandler+0x4c4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3324      	adds	r3, #36	; 0x24
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff f90c 	bl	8002e78 <setOn>
					ShowInfo(currentNode->screen);
 8003c60:	4b16      	ldr	r3, [pc, #88]	; (8003cbc <keyHandler+0x4c4>)
 8003c62:	681c      	ldr	r4, [r3, #0]
 8003c64:	4668      	mov	r0, sp
 8003c66:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f006 fcb8 	bl	800a5e4 <memcpy>
 8003c74:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003c78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c7a:	f7fe ff0d 	bl	8002a98 <ShowInfo>
				}
				else if(currentNode->screen.id == 14){
					setThreshold(&(currentNode->screen), 1,1);
					ShowInfo(currentNode->screen);
				}
				break;
 8003c7e:	e1a3      	b.n	8003fc8 <keyHandler+0x7d0>
				else if(currentNode->screen.id == 7){
 8003c80:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <keyHandler+0x4c4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	2b07      	cmp	r3, #7
 8003c88:	d128      	bne.n	8003cdc <keyHandler+0x4e4>
					setThreshold(&(currentNode->screen), 1,0);
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <keyHandler+0x4c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3324      	adds	r3, #36	; 0x24
 8003c90:	2200      	movs	r2, #0
 8003c92:	2101      	movs	r1, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fa9d 	bl	80031d4 <setThreshold>
					ShowInfo(currentNode->screen);
 8003c9a:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <keyHandler+0x4c4>)
 8003c9c:	681c      	ldr	r4, [r3, #0]
 8003c9e:	4668      	mov	r0, sp
 8003ca0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f006 fc9b 	bl	800a5e4 <memcpy>
 8003cae:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003cb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cb4:	f7fe fef0 	bl	8002a98 <ShowInfo>
				break;
 8003cb8:	e186      	b.n	8003fc8 <keyHandler+0x7d0>
 8003cba:	bf00      	nop
 8003cbc:	20000878 	.word	0x20000878
 8003cc0:	2000081c 	.word	0x2000081c
 8003cc4:	20000120 	.word	0x20000120
 8003cc8:	20000804 	.word	0x20000804
 8003ccc:	20000800 	.word	0x20000800
 8003cd0:	20000808 	.word	0x20000808
 8003cd4:	55555556 	.word	0x55555556
 8003cd8:	48001000 	.word	0x48001000
				else if(currentNode->screen.id == 14){
 8003cdc:	4bad      	ldr	r3, [pc, #692]	; (8003f94 <keyHandler+0x79c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	2b0e      	cmp	r3, #14
 8003ce4:	f040 8170 	bne.w	8003fc8 <keyHandler+0x7d0>
					setThreshold(&(currentNode->screen), 1,1);
 8003ce8:	4baa      	ldr	r3, [pc, #680]	; (8003f94 <keyHandler+0x79c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3324      	adds	r3, #36	; 0x24
 8003cee:	2201      	movs	r2, #1
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fa6e 	bl	80031d4 <setThreshold>
					ShowInfo(currentNode->screen);
 8003cf8:	4ba6      	ldr	r3, [pc, #664]	; (8003f94 <keyHandler+0x79c>)
 8003cfa:	681c      	ldr	r4, [r3, #0]
 8003cfc:	4668      	mov	r0, sp
 8003cfe:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d06:	4619      	mov	r1, r3
 8003d08:	f006 fc6c 	bl	800a5e4 <memcpy>
 8003d0c:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003d10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d12:	f7fe fec1 	bl	8002a98 <ShowInfo>
				break;
 8003d16:	e157      	b.n	8003fc8 <keyHandler+0x7d0>
			case 8:
				if(currentNode->screen.id == 4){
 8003d18:	4b9e      	ldr	r3, [pc, #632]	; (8003f94 <keyHandler+0x79c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d117      	bne.n	8003d52 <keyHandler+0x55a>
					setLigthToggle(&(currentNode->screen),1,Lights);
 8003d22:	4b9c      	ldr	r3, [pc, #624]	; (8003f94 <keyHandler+0x79c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3324      	adds	r3, #36	; 0x24
 8003d28:	4a9b      	ldr	r2, [pc, #620]	; (8003f98 <keyHandler+0x7a0>)
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fab5 	bl	800329c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8003d32:	4b98      	ldr	r3, [pc, #608]	; (8003f94 <keyHandler+0x79c>)
 8003d34:	681c      	ldr	r4, [r3, #0]
 8003d36:	4668      	mov	r0, sp
 8003d38:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d40:	4619      	mov	r1, r3
 8003d42:	f006 fc4f 	bl	800a5e4 <memcpy>
 8003d46:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d4c:	f7fe fea4 	bl	8002a98 <ShowInfo>
				}
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),1,newScenarioLights);
					ShowInfo(currentNode->screen);
				}
				break;
 8003d50:	e13c      	b.n	8003fcc <keyHandler+0x7d4>
				else if(currentNode->screen.id == 18){
 8003d52:	4b90      	ldr	r3, [pc, #576]	; (8003f94 <keyHandler+0x79c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	2b12      	cmp	r3, #18
 8003d5a:	f040 8137 	bne.w	8003fcc <keyHandler+0x7d4>
					setLigthToggle(&(currentNode->screen),1,newScenarioLights);
 8003d5e:	4b8d      	ldr	r3, [pc, #564]	; (8003f94 <keyHandler+0x79c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3324      	adds	r3, #36	; 0x24
 8003d64:	4a8d      	ldr	r2, [pc, #564]	; (8003f9c <keyHandler+0x7a4>)
 8003d66:	2101      	movs	r1, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fa97 	bl	800329c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8003d6e:	4b89      	ldr	r3, [pc, #548]	; (8003f94 <keyHandler+0x79c>)
 8003d70:	681c      	ldr	r4, [r3, #0]
 8003d72:	4668      	mov	r0, sp
 8003d74:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f006 fc31 	bl	800a5e4 <memcpy>
 8003d82:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003d86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d88:	f7fe fe86 	bl	8002a98 <ShowInfo>
				break;
 8003d8c:	e11e      	b.n	8003fcc <keyHandler+0x7d4>
			case 12:
				if(currentNode->screen.id == 4){
 8003d8e:	4b81      	ldr	r3, [pc, #516]	; (8003f94 <keyHandler+0x79c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d117      	bne.n	8003dc8 <keyHandler+0x5d0>
					setLigthToggle(&(currentNode->screen),2,Lights);
 8003d98:	4b7e      	ldr	r3, [pc, #504]	; (8003f94 <keyHandler+0x79c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3324      	adds	r3, #36	; 0x24
 8003d9e:	4a7e      	ldr	r2, [pc, #504]	; (8003f98 <keyHandler+0x7a0>)
 8003da0:	2102      	movs	r1, #2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff fa7a 	bl	800329c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8003da8:	4b7a      	ldr	r3, [pc, #488]	; (8003f94 <keyHandler+0x79c>)
 8003daa:	681c      	ldr	r4, [r3, #0]
 8003dac:	4668      	mov	r0, sp
 8003dae:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003db6:	4619      	mov	r1, r3
 8003db8:	f006 fc14 	bl	800a5e4 <memcpy>
 8003dbc:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003dc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dc2:	f7fe fe69 	bl	8002a98 <ShowInfo>
				}
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),2,newScenarioLights);
					ShowInfo(currentNode->screen);
				}
				break;
 8003dc6:	e103      	b.n	8003fd0 <keyHandler+0x7d8>
				else if(currentNode->screen.id == 18){
 8003dc8:	4b72      	ldr	r3, [pc, #456]	; (8003f94 <keyHandler+0x79c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	2b12      	cmp	r3, #18
 8003dd0:	f040 80fe 	bne.w	8003fd0 <keyHandler+0x7d8>
					setLigthToggle(&(currentNode->screen),2,newScenarioLights);
 8003dd4:	4b6f      	ldr	r3, [pc, #444]	; (8003f94 <keyHandler+0x79c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3324      	adds	r3, #36	; 0x24
 8003dda:	4a70      	ldr	r2, [pc, #448]	; (8003f9c <keyHandler+0x7a4>)
 8003ddc:	2102      	movs	r1, #2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fa5c 	bl	800329c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8003de4:	4b6b      	ldr	r3, [pc, #428]	; (8003f94 <keyHandler+0x79c>)
 8003de6:	681c      	ldr	r4, [r3, #0]
 8003de8:	4668      	mov	r0, sp
 8003dea:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003df2:	4619      	mov	r1, r3
 8003df4:	f006 fbf6 	bl	800a5e4 <memcpy>
 8003df8:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003dfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dfe:	f7fe fe4b 	bl	8002a98 <ShowInfo>
				break;
 8003e02:	e0e5      	b.n	8003fd0 <keyHandler+0x7d8>
			case 13: // back key
				if(currentNode != root){
 8003e04:	4b63      	ldr	r3, [pc, #396]	; (8003f94 <keyHandler+0x79c>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4b65      	ldr	r3, [pc, #404]	; (8003fa0 <keyHandler+0x7a8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	f000 80e1 	beq.w	8003fd4 <keyHandler+0x7dc>
					clear();
 8003e12:	f7fc fca1 	bl	8000758 <clear>
					page = 0;
 8003e16:	4b63      	ldr	r3, [pc, #396]	; (8003fa4 <keyHandler+0x7ac>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
					MenuoptionCounts = currentNode->screen.optionCount;
 8003e1c:	4b5d      	ldr	r3, [pc, #372]	; (8003f94 <keyHandler+0x79c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	4a61      	ldr	r2, [pc, #388]	; (8003fa8 <keyHandler+0x7b0>)
 8003e24:	6013      	str	r3, [r2, #0]
					currentNode = currentNode->parent;
 8003e26:	4b5b      	ldr	r3, [pc, #364]	; (8003f94 <keyHandler+0x79c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4a59      	ldr	r2, [pc, #356]	; (8003f94 <keyHandler+0x79c>)
 8003e2e:	6013      	str	r3, [r2, #0]
					if(currentNode->screen.isMenu){
 8003e30:	4b58      	ldr	r3, [pc, #352]	; (8003f94 <keyHandler+0x79c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d013      	beq.n	8003e62 <keyHandler+0x66a>
						CurrentMenuOption = 0;
 8003e3a:	4b5c      	ldr	r3, [pc, #368]	; (8003fac <keyHandler+0x7b4>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
						MenuoptionCounts = currentNode->screen.optionCount;
 8003e40:	4b54      	ldr	r3, [pc, #336]	; (8003f94 <keyHandler+0x79c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	4a58      	ldr	r2, [pc, #352]	; (8003fa8 <keyHandler+0x7b0>)
 8003e48:	6013      	str	r3, [r2, #0]
						SetMenu(currentNode->screen.menuItems);
 8003e4a:	4b52      	ldr	r3, [pc, #328]	; (8003f94 <keyHandler+0x79c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3330      	adds	r3, #48	; 0x30
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe ff5d 	bl	8002d10 <SetMenu>
						ShowMenu();
 8003e56:	f7fe fd9f 	bl	8002998 <ShowMenu>
						inMenu = 1;
 8003e5a:	4b55      	ldr	r3, [pc, #340]	; (8003fb0 <keyHandler+0x7b8>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
						ShowInfo(currentNode->screen);
						inMenu = 0;
					}
				}

				break;
 8003e60:	e0b8      	b.n	8003fd4 <keyHandler+0x7dc>
						ShowInfo(currentNode->screen);
 8003e62:	4b4c      	ldr	r3, [pc, #304]	; (8003f94 <keyHandler+0x79c>)
 8003e64:	681c      	ldr	r4, [r3, #0]
 8003e66:	4668      	mov	r0, sp
 8003e68:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e70:	4619      	mov	r1, r3
 8003e72:	f006 fbb7 	bl	800a5e4 <memcpy>
 8003e76:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003e7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e7c:	f7fe fe0c 	bl	8002a98 <ShowInfo>
						inMenu = 0;
 8003e80:	4b4b      	ldr	r3, [pc, #300]	; (8003fb0 <keyHandler+0x7b8>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
				break;
 8003e86:	e0a5      	b.n	8003fd4 <keyHandler+0x7dc>
			case 15: // okay key
				if(inMenu){
 8003e88:	4b49      	ldr	r3, [pc, #292]	; (8003fb0 <keyHandler+0x7b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80a3 	beq.w	8003fd8 <keyHandler+0x7e0>
					page = 0;
 8003e92:	4b44      	ldr	r3, [pc, #272]	; (8003fa4 <keyHandler+0x7ac>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
					nextCurrentNode();
 8003e98:	f7ff fc5a 	bl	8003750 <nextCurrentNode>
					MenuoptionCounts = currentNode->screen.optionCount;
 8003e9c:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <keyHandler+0x79c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	4a41      	ldr	r2, [pc, #260]	; (8003fa8 <keyHandler+0x7b0>)
 8003ea4:	6013      	str	r3, [r2, #0]
					if(currentNode->screen.isMenu){
 8003ea6:	4b3b      	ldr	r3, [pc, #236]	; (8003f94 <keyHandler+0x79c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00e      	beq.n	8003ece <keyHandler+0x6d6>
						CurrentMenuOption = 0;
 8003eb0:	4b3e      	ldr	r3, [pc, #248]	; (8003fac <keyHandler+0x7b4>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
						SetMenu(currentNode->screen.menuItems);
 8003eb6:	4b37      	ldr	r3, [pc, #220]	; (8003f94 <keyHandler+0x79c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3330      	adds	r3, #48	; 0x30
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe ff27 	bl	8002d10 <SetMenu>
						ShowMenu();
 8003ec2:	f7fe fd69 	bl	8002998 <ShowMenu>
						inMenu = 1;
 8003ec6:	4b3a      	ldr	r3, [pc, #232]	; (8003fb0 <keyHandler+0x7b8>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
							startStateLastTime = HAL_GetTick();
						}
					}

				}
				break;
 8003ecc:	e084      	b.n	8003fd8 <keyHandler+0x7e0>
						clear();
 8003ece:	f7fc fc43 	bl	8000758 <clear>
						ShowInfo(currentNode->screen);
 8003ed2:	4b30      	ldr	r3, [pc, #192]	; (8003f94 <keyHandler+0x79c>)
 8003ed4:	681c      	ldr	r4, [r3, #0]
 8003ed6:	4668      	mov	r0, sp
 8003ed8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003edc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f006 fb7f 	bl	800a5e4 <memcpy>
 8003ee6:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003eec:	f7fe fdd4 	bl	8002a98 <ShowInfo>
						inMenu = 0;
 8003ef0:	4b2f      	ldr	r3, [pc, #188]	; (8003fb0 <keyHandler+0x7b8>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
						if(currentNode->screen.id == -1){
 8003ef6:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <keyHandler+0x79c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d16a      	bne.n	8003fd8 <keyHandler+0x7e0>
							startState = 3;
 8003f02:	4b2c      	ldr	r3, [pc, #176]	; (8003fb4 <keyHandler+0x7bc>)
 8003f04:	2203      	movs	r2, #3
 8003f06:	601a      	str	r2, [r3, #0]
							startStateLastTime = HAL_GetTick();
 8003f08:	f000 fcf2 	bl	80048f0 <HAL_GetTick>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b29      	ldr	r3, [pc, #164]	; (8003fb8 <keyHandler+0x7c0>)
 8003f12:	601a      	str	r2, [r3, #0]
				break;
 8003f14:	e060      	b.n	8003fd8 <keyHandler+0x7e0>
			case 16:
				if(currentNode->screen.id == 4){
 8003f16:	4b1f      	ldr	r3, [pc, #124]	; (8003f94 <keyHandler+0x79c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d117      	bne.n	8003f50 <keyHandler+0x758>
					setLigthToggle(&(currentNode->screen),3,Lights);
 8003f20:	4b1c      	ldr	r3, [pc, #112]	; (8003f94 <keyHandler+0x79c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3324      	adds	r3, #36	; 0x24
 8003f26:	4a1c      	ldr	r2, [pc, #112]	; (8003f98 <keyHandler+0x7a0>)
 8003f28:	2103      	movs	r1, #3
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff f9b6 	bl	800329c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8003f30:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <keyHandler+0x79c>)
 8003f32:	681c      	ldr	r4, [r3, #0]
 8003f34:	4668      	mov	r0, sp
 8003f36:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f006 fb50 	bl	800a5e4 <memcpy>
 8003f44:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f4a:	f7fe fda5 	bl	8002a98 <ShowInfo>
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),3,newScenarioLights);
					ShowInfo(currentNode->screen);
				}

			break;
 8003f4e:	e045      	b.n	8003fdc <keyHandler+0x7e4>
				else if(currentNode->screen.id == 18){
 8003f50:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <keyHandler+0x79c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	2b12      	cmp	r3, #18
 8003f58:	d140      	bne.n	8003fdc <keyHandler+0x7e4>
					setLigthToggle(&(currentNode->screen),3,newScenarioLights);
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <keyHandler+0x79c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3324      	adds	r3, #36	; 0x24
 8003f60:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <keyHandler+0x7a4>)
 8003f62:	2103      	movs	r1, #3
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff f999 	bl	800329c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <keyHandler+0x79c>)
 8003f6c:	681c      	ldr	r4, [r3, #0]
 8003f6e:	4668      	mov	r0, sp
 8003f70:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f006 fb33 	bl	800a5e4 <memcpy>
 8003f7e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f84:	f7fe fd88 	bl	8002a98 <ShowInfo>
			break;
 8003f88:	e028      	b.n	8003fdc <keyHandler+0x7e4>
		if(HAL_GetTick()- lastPress<300 ) return;
 8003f8a:	bf00      	nop
 8003f8c:	e027      	b.n	8003fde <keyHandler+0x7e6>
				break;
 8003f8e:	bf00      	nop
 8003f90:	e025      	b.n	8003fde <keyHandler+0x7e6>
 8003f92:	bf00      	nop
 8003f94:	20000878 	.word	0x20000878
 8003f98:	20000740 	.word	0x20000740
 8003f9c:	200007e8 	.word	0x200007e8
 8003fa0:	20000824 	.word	0x20000824
 8003fa4:	20000808 	.word	0x20000808
 8003fa8:	20000804 	.word	0x20000804
 8003fac:	20000800 	.word	0x20000800
 8003fb0:	20000120 	.word	0x20000120
 8003fb4:	20000128 	.word	0x20000128
 8003fb8:	20000820 	.word	0x20000820
				break;
 8003fbc:	bf00      	nop
 8003fbe:	e00e      	b.n	8003fde <keyHandler+0x7e6>
				break;
 8003fc0:	bf00      	nop
 8003fc2:	e00c      	b.n	8003fde <keyHandler+0x7e6>
				break;
 8003fc4:	bf00      	nop
 8003fc6:	e00a      	b.n	8003fde <keyHandler+0x7e6>
				break;
 8003fc8:	bf00      	nop
 8003fca:	e008      	b.n	8003fde <keyHandler+0x7e6>
				break;
 8003fcc:	bf00      	nop
 8003fce:	e006      	b.n	8003fde <keyHandler+0x7e6>
				break;
 8003fd0:	bf00      	nop
 8003fd2:	e004      	b.n	8003fde <keyHandler+0x7e6>
				break;
 8003fd4:	bf00      	nop
 8003fd6:	e002      	b.n	8003fde <keyHandler+0x7e6>
				break;
 8003fd8:	bf00      	nop
 8003fda:	e000      	b.n	8003fde <keyHandler+0x7e6>
			break;
 8003fdc:	bf00      	nop

		}
//	}

}
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003fe6:	bf00      	nop

08003fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fec:	e7fe      	b.n	8003fec <NMI_Handler+0x4>

08003fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ff2:	e7fe      	b.n	8003ff2 <HardFault_Handler+0x4>

08003ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ff8:	e7fe      	b.n	8003ff8 <MemManage_Handler+0x4>

08003ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ffe:	e7fe      	b.n	8003ffe <BusFault_Handler+0x4>

08004000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004004:	e7fe      	b.n	8004004 <UsageFault_Handler+0x4>

08004006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800400a:	bf00      	nop
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004022:	b480      	push	{r7}
 8004024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004034:	f000 fc48 	bl	80048c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}

0800403c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800403c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if(HAL_GetTick() - lastPress >200){
 8004044:	f000 fc54 	bl	80048f0 <HAL_GetTick>
 8004048:	4603      	mov	r3, r0
 800404a:	2200      	movs	r2, #0
 800404c:	4698      	mov	r8, r3
 800404e:	4691      	mov	r9, r2
 8004050:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <EXTI0_IRQHandler+0x144>)
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	ebb8 0402 	subs.w	r4, r8, r2
 800405a:	eb69 0503 	sbc.w	r5, r9, r3
 800405e:	2cc9      	cmp	r4, #201	; 0xc9
 8004060:	f175 0300 	sbcs.w	r3, r5, #0
 8004064:	d37b      	bcc.n	800415e <EXTI0_IRQHandler+0x122>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8004066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800406a:	4846      	ldr	r0, [pc, #280]	; (8004184 <EXTI0_IRQHandler+0x148>)
 800406c:	f002 face 	bl	800660c <HAL_GPIO_TogglePin>

		col =0;
 8004070:	4b45      	ldr	r3, [pc, #276]	; (8004188 <EXTI0_IRQHandler+0x14c>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
		for (int i = 0 ; i < 4 ; i++ ){
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	e05d      	b.n	8004138 <EXTI0_IRQHandler+0xfc>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,GPIO_PIN_RESET);
 800407c:	2200      	movs	r2, #0
 800407e:	210f      	movs	r1, #15
 8004080:	4842      	ldr	r0, [pc, #264]	; (800418c <EXTI0_IRQHandler+0x150>)
 8004082:	f002 faab 	bl	80065dc <HAL_GPIO_WritePin>
			switch (i) {
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b03      	cmp	r3, #3
 800408a:	d852      	bhi.n	8004132 <EXTI0_IRQHandler+0xf6>
 800408c:	a201      	add	r2, pc, #4	; (adr r2, 8004094 <EXTI0_IRQHandler+0x58>)
 800408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004092:	bf00      	nop
 8004094:	080040a5 	.word	0x080040a5
 8004098:	080040c5 	.word	0x080040c5
 800409c:	080040e5 	.word	0x080040e5
 80040a0:	08004105 	.word	0x08004105
				case 0:
					   HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,GPIO_PIN_SET);
 80040a4:	2201      	movs	r2, #1
 80040a6:	2101      	movs	r1, #1
 80040a8:	4838      	ldr	r0, [pc, #224]	; (800418c <EXTI0_IRQHandler+0x150>)
 80040aa:	f002 fa97 	bl	80065dc <HAL_GPIO_WritePin>
					if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 0 ;
 80040ae:	2101      	movs	r1, #1
 80040b0:	4837      	ldr	r0, [pc, #220]	; (8004190 <EXTI0_IRQHandler+0x154>)
 80040b2:	f002 fa7b 	bl	80065ac <HAL_GPIO_ReadPin>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d033      	beq.n	8004124 <EXTI0_IRQHandler+0xe8>
 80040bc:	4b35      	ldr	r3, [pc, #212]	; (8004194 <EXTI0_IRQHandler+0x158>)
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
					break;
 80040c2:	e02f      	b.n	8004124 <EXTI0_IRQHandler+0xe8>
				case 1:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,GPIO_PIN_SET);
 80040c4:	2201      	movs	r2, #1
 80040c6:	2102      	movs	r1, #2
 80040c8:	4830      	ldr	r0, [pc, #192]	; (800418c <EXTI0_IRQHandler+0x150>)
 80040ca:	f002 fa87 	bl	80065dc <HAL_GPIO_WritePin>
					if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 1 ;
 80040ce:	2101      	movs	r1, #1
 80040d0:	482f      	ldr	r0, [pc, #188]	; (8004190 <EXTI0_IRQHandler+0x154>)
 80040d2:	f002 fa6b 	bl	80065ac <HAL_GPIO_ReadPin>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d025      	beq.n	8004128 <EXTI0_IRQHandler+0xec>
 80040dc:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <EXTI0_IRQHandler+0x158>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
					break;
 80040e2:	e021      	b.n	8004128 <EXTI0_IRQHandler+0xec>
				case 2:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_SET);
 80040e4:	2201      	movs	r2, #1
 80040e6:	2104      	movs	r1, #4
 80040e8:	4828      	ldr	r0, [pc, #160]	; (800418c <EXTI0_IRQHandler+0x150>)
 80040ea:	f002 fa77 	bl	80065dc <HAL_GPIO_WritePin>
					if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 2 ;
 80040ee:	2101      	movs	r1, #1
 80040f0:	4827      	ldr	r0, [pc, #156]	; (8004190 <EXTI0_IRQHandler+0x154>)
 80040f2:	f002 fa5b 	bl	80065ac <HAL_GPIO_ReadPin>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d017      	beq.n	800412c <EXTI0_IRQHandler+0xf0>
 80040fc:	4b25      	ldr	r3, [pc, #148]	; (8004194 <EXTI0_IRQHandler+0x158>)
 80040fe:	2202      	movs	r2, #2
 8004100:	601a      	str	r2, [r3, #0]
					break;
 8004102:	e013      	b.n	800412c <EXTI0_IRQHandler+0xf0>
				case 3:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,GPIO_PIN_SET);
 8004104:	2201      	movs	r2, #1
 8004106:	2108      	movs	r1, #8
 8004108:	4820      	ldr	r0, [pc, #128]	; (800418c <EXTI0_IRQHandler+0x150>)
 800410a:	f002 fa67 	bl	80065dc <HAL_GPIO_WritePin>
					if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 3 ;
 800410e:	2101      	movs	r1, #1
 8004110:	481f      	ldr	r0, [pc, #124]	; (8004190 <EXTI0_IRQHandler+0x154>)
 8004112:	f002 fa4b 	bl	80065ac <HAL_GPIO_ReadPin>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d009      	beq.n	8004130 <EXTI0_IRQHandler+0xf4>
 800411c:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <EXTI0_IRQHandler+0x158>)
 800411e:	2203      	movs	r2, #3
 8004120:	601a      	str	r2, [r3, #0]
					break;
 8004122:	e005      	b.n	8004130 <EXTI0_IRQHandler+0xf4>
					break;
 8004124:	bf00      	nop
 8004126:	e004      	b.n	8004132 <EXTI0_IRQHandler+0xf6>
					break;
 8004128:	bf00      	nop
 800412a:	e002      	b.n	8004132 <EXTI0_IRQHandler+0xf6>
					break;
 800412c:	bf00      	nop
 800412e:	e000      	b.n	8004132 <EXTI0_IRQHandler+0xf6>
					break;
 8004130:	bf00      	nop
		for (int i = 0 ; i < 4 ; i++ ){
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3301      	adds	r3, #1
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b03      	cmp	r3, #3
 800413c:	dd9e      	ble.n	800407c <EXTI0_IRQHandler+0x40>

			}
		}

		keyHandler();
 800413e:	f7ff fb5b 	bl	80037f8 <keyHandler>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,GPIO_PIN_SET);
 8004142:	2201      	movs	r2, #1
 8004144:	210f      	movs	r1, #15
 8004146:	4811      	ldr	r0, [pc, #68]	; (800418c <EXTI0_IRQHandler+0x150>)
 8004148:	f002 fa48 	bl	80065dc <HAL_GPIO_WritePin>

		lastPress = HAL_GetTick();
 800414c:	f000 fbd0 	bl	80048f0 <HAL_GetTick>
 8004150:	4603      	mov	r3, r0
 8004152:	2200      	movs	r2, #0
 8004154:	469a      	mov	sl, r3
 8004156:	4693      	mov	fp, r2
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <EXTI0_IRQHandler+0x144>)
 800415a:	e9c3 ab00 	strd	sl, fp, [r3]

	}
	while (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0));
 800415e:	bf00      	nop
 8004160:	2101      	movs	r1, #1
 8004162:	480b      	ldr	r0, [pc, #44]	; (8004190 <EXTI0_IRQHandler+0x154>)
 8004164:	f002 fa22 	bl	80065ac <HAL_GPIO_ReadPin>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f8      	bne.n	8004160 <EXTI0_IRQHandler+0x124>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(keyPad_Pin);
 800416e:	2001      	movs	r0, #1
 8004170:	f002 fa66 	bl	8006640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800417e:	bf00      	nop
 8004180:	200007f8 	.word	0x200007f8
 8004184:	48001000 	.word	0x48001000
 8004188:	20000028 	.word	0x20000028
 800418c:	48000c00 	.word	0x48000c00
 8004190:	48000800 	.word	0x48000800
 8004194:	2000002c 	.word	0x2000002c

08004198 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
    if (HAL_GetTick() - lastPress > 200) {
 80041a0:	f000 fba6 	bl	80048f0 <HAL_GetTick>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2200      	movs	r2, #0
 80041a8:	4698      	mov	r8, r3
 80041aa:	4691      	mov	r9, r2
 80041ac:	4b4b      	ldr	r3, [pc, #300]	; (80042dc <EXTI1_IRQHandler+0x144>)
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	ebb8 0402 	subs.w	r4, r8, r2
 80041b6:	eb69 0503 	sbc.w	r5, r9, r3
 80041ba:	2cc9      	cmp	r4, #201	; 0xc9
 80041bc:	f175 0300 	sbcs.w	r3, r5, #0
 80041c0:	d37b      	bcc.n	80042ba <EXTI1_IRQHandler+0x122>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 80041c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041c6:	4846      	ldr	r0, [pc, #280]	; (80042e0 <EXTI1_IRQHandler+0x148>)
 80041c8:	f002 fa20 	bl	800660c <HAL_GPIO_TogglePin>

        col = 1;
 80041cc:	4b45      	ldr	r3, [pc, #276]	; (80042e4 <EXTI1_IRQHandler+0x14c>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < 4; i++) {
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	e05d      	b.n	8004294 <EXTI1_IRQHandler+0xfc>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 80041d8:	2200      	movs	r2, #0
 80041da:	210f      	movs	r1, #15
 80041dc:	4842      	ldr	r0, [pc, #264]	; (80042e8 <EXTI1_IRQHandler+0x150>)
 80041de:	f002 f9fd 	bl	80065dc <HAL_GPIO_WritePin>
            switch (i) {
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d852      	bhi.n	800428e <EXTI1_IRQHandler+0xf6>
 80041e8:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <EXTI1_IRQHandler+0x58>)
 80041ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ee:	bf00      	nop
 80041f0:	08004201 	.word	0x08004201
 80041f4:	08004221 	.word	0x08004221
 80041f8:	08004241 	.word	0x08004241
 80041fc:	08004261 	.word	0x08004261
                case 0:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8004200:	2201      	movs	r2, #1
 8004202:	2101      	movs	r1, #1
 8004204:	4838      	ldr	r0, [pc, #224]	; (80042e8 <EXTI1_IRQHandler+0x150>)
 8004206:	f002 f9e9 	bl	80065dc <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 0;
 800420a:	2102      	movs	r1, #2
 800420c:	4837      	ldr	r0, [pc, #220]	; (80042ec <EXTI1_IRQHandler+0x154>)
 800420e:	f002 f9cd 	bl	80065ac <HAL_GPIO_ReadPin>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d033      	beq.n	8004280 <EXTI1_IRQHandler+0xe8>
 8004218:	4b35      	ldr	r3, [pc, #212]	; (80042f0 <EXTI1_IRQHandler+0x158>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
                    break;
 800421e:	e02f      	b.n	8004280 <EXTI1_IRQHandler+0xe8>
                case 1:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8004220:	2201      	movs	r2, #1
 8004222:	2102      	movs	r1, #2
 8004224:	4830      	ldr	r0, [pc, #192]	; (80042e8 <EXTI1_IRQHandler+0x150>)
 8004226:	f002 f9d9 	bl	80065dc <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 1;
 800422a:	2102      	movs	r1, #2
 800422c:	482f      	ldr	r0, [pc, #188]	; (80042ec <EXTI1_IRQHandler+0x154>)
 800422e:	f002 f9bd 	bl	80065ac <HAL_GPIO_ReadPin>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d025      	beq.n	8004284 <EXTI1_IRQHandler+0xec>
 8004238:	4b2d      	ldr	r3, [pc, #180]	; (80042f0 <EXTI1_IRQHandler+0x158>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]
                    break;
 800423e:	e021      	b.n	8004284 <EXTI1_IRQHandler+0xec>
                case 2:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8004240:	2201      	movs	r2, #1
 8004242:	2104      	movs	r1, #4
 8004244:	4828      	ldr	r0, [pc, #160]	; (80042e8 <EXTI1_IRQHandler+0x150>)
 8004246:	f002 f9c9 	bl	80065dc <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 2;
 800424a:	2102      	movs	r1, #2
 800424c:	4827      	ldr	r0, [pc, #156]	; (80042ec <EXTI1_IRQHandler+0x154>)
 800424e:	f002 f9ad 	bl	80065ac <HAL_GPIO_ReadPin>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d017      	beq.n	8004288 <EXTI1_IRQHandler+0xf0>
 8004258:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <EXTI1_IRQHandler+0x158>)
 800425a:	2202      	movs	r2, #2
 800425c:	601a      	str	r2, [r3, #0]
                    break;
 800425e:	e013      	b.n	8004288 <EXTI1_IRQHandler+0xf0>
                case 3:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8004260:	2201      	movs	r2, #1
 8004262:	2108      	movs	r1, #8
 8004264:	4820      	ldr	r0, [pc, #128]	; (80042e8 <EXTI1_IRQHandler+0x150>)
 8004266:	f002 f9b9 	bl	80065dc <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 3;
 800426a:	2102      	movs	r1, #2
 800426c:	481f      	ldr	r0, [pc, #124]	; (80042ec <EXTI1_IRQHandler+0x154>)
 800426e:	f002 f99d 	bl	80065ac <HAL_GPIO_ReadPin>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d009      	beq.n	800428c <EXTI1_IRQHandler+0xf4>
 8004278:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <EXTI1_IRQHandler+0x158>)
 800427a:	2203      	movs	r2, #3
 800427c:	601a      	str	r2, [r3, #0]
                    break;
 800427e:	e005      	b.n	800428c <EXTI1_IRQHandler+0xf4>
                    break;
 8004280:	bf00      	nop
 8004282:	e004      	b.n	800428e <EXTI1_IRQHandler+0xf6>
                    break;
 8004284:	bf00      	nop
 8004286:	e002      	b.n	800428e <EXTI1_IRQHandler+0xf6>
                    break;
 8004288:	bf00      	nop
 800428a:	e000      	b.n	800428e <EXTI1_IRQHandler+0xf6>
                    break;
 800428c:	bf00      	nop
        for (int i = 0; i < 4; i++) {
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3301      	adds	r3, #1
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b03      	cmp	r3, #3
 8004298:	dd9e      	ble.n	80041d8 <EXTI1_IRQHandler+0x40>

            }
        }

        keyHandler();
 800429a:	f7ff faad 	bl	80037f8 <keyHandler>
        lastPress = HAL_GetTick();
 800429e:	f000 fb27 	bl	80048f0 <HAL_GetTick>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2200      	movs	r2, #0
 80042a6:	469a      	mov	sl, r3
 80042a8:	4693      	mov	fp, r2
 80042aa:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <EXTI1_IRQHandler+0x144>)
 80042ac:	e9c3 ab00 	strd	sl, fp, [r3]
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 80042b0:	2201      	movs	r2, #1
 80042b2:	210f      	movs	r1, #15
 80042b4:	480c      	ldr	r0, [pc, #48]	; (80042e8 <EXTI1_IRQHandler+0x150>)
 80042b6:	f002 f991 	bl	80065dc <HAL_GPIO_WritePin>
    }
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1));
 80042ba:	bf00      	nop
 80042bc:	2102      	movs	r1, #2
 80042be:	480b      	ldr	r0, [pc, #44]	; (80042ec <EXTI1_IRQHandler+0x154>)
 80042c0:	f002 f974 	bl	80065ac <HAL_GPIO_ReadPin>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f8      	bne.n	80042bc <EXTI1_IRQHandler+0x124>

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80042ca:	2002      	movs	r0, #2
 80042cc:	f002 f9b8 	bl	8006640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042da:	bf00      	nop
 80042dc:	200007f8 	.word	0x200007f8
 80042e0:	48001000 	.word	0x48001000
 80042e4:	20000028 	.word	0x20000028
 80042e8:	48000c00 	.word	0x48000c00
 80042ec:	48000800 	.word	0x48000800
 80042f0:	2000002c 	.word	0x2000002c

080042f4 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80042f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */
		if (HAL_GetTick() - lastPress > 200) {
 80042fc:	f000 faf8 	bl	80048f0 <HAL_GetTick>
 8004300:	4603      	mov	r3, r0
 8004302:	2200      	movs	r2, #0
 8004304:	4698      	mov	r8, r3
 8004306:	4691      	mov	r9, r2
 8004308:	4b4b      	ldr	r3, [pc, #300]	; (8004438 <EXTI2_TSC_IRQHandler+0x144>)
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	ebb8 0402 	subs.w	r4, r8, r2
 8004312:	eb69 0503 	sbc.w	r5, r9, r3
 8004316:	2cc9      	cmp	r4, #201	; 0xc9
 8004318:	f175 0300 	sbcs.w	r3, r5, #0
 800431c:	d37b      	bcc.n	8004416 <EXTI2_TSC_IRQHandler+0x122>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 800431e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004322:	4846      	ldr	r0, [pc, #280]	; (800443c <EXTI2_TSC_IRQHandler+0x148>)
 8004324:	f002 f972 	bl	800660c <HAL_GPIO_TogglePin>

			col = 2;
 8004328:	4b45      	ldr	r3, [pc, #276]	; (8004440 <EXTI2_TSC_IRQHandler+0x14c>)
 800432a:	2202      	movs	r2, #2
 800432c:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 800432e:	2300      	movs	r3, #0
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	e05d      	b.n	80043f0 <EXTI2_TSC_IRQHandler+0xfc>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 8004334:	2200      	movs	r2, #0
 8004336:	210f      	movs	r1, #15
 8004338:	4842      	ldr	r0, [pc, #264]	; (8004444 <EXTI2_TSC_IRQHandler+0x150>)
 800433a:	f002 f94f 	bl	80065dc <HAL_GPIO_WritePin>
				switch (i) {
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d852      	bhi.n	80043ea <EXTI2_TSC_IRQHandler+0xf6>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <EXTI2_TSC_IRQHandler+0x58>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	0800435d 	.word	0x0800435d
 8004350:	0800437d 	.word	0x0800437d
 8004354:	0800439d 	.word	0x0800439d
 8004358:	080043bd 	.word	0x080043bd
					case 0:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 800435c:	2201      	movs	r2, #1
 800435e:	2101      	movs	r1, #1
 8004360:	4838      	ldr	r0, [pc, #224]	; (8004444 <EXTI2_TSC_IRQHandler+0x150>)
 8004362:	f002 f93b 	bl	80065dc <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 0;
 8004366:	2104      	movs	r1, #4
 8004368:	4837      	ldr	r0, [pc, #220]	; (8004448 <EXTI2_TSC_IRQHandler+0x154>)
 800436a:	f002 f91f 	bl	80065ac <HAL_GPIO_ReadPin>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d033      	beq.n	80043dc <EXTI2_TSC_IRQHandler+0xe8>
 8004374:	4b35      	ldr	r3, [pc, #212]	; (800444c <EXTI2_TSC_IRQHandler+0x158>)
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
						break;
 800437a:	e02f      	b.n	80043dc <EXTI2_TSC_IRQHandler+0xe8>
					case 1:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 800437c:	2201      	movs	r2, #1
 800437e:	2102      	movs	r1, #2
 8004380:	4830      	ldr	r0, [pc, #192]	; (8004444 <EXTI2_TSC_IRQHandler+0x150>)
 8004382:	f002 f92b 	bl	80065dc <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 1;
 8004386:	2104      	movs	r1, #4
 8004388:	482f      	ldr	r0, [pc, #188]	; (8004448 <EXTI2_TSC_IRQHandler+0x154>)
 800438a:	f002 f90f 	bl	80065ac <HAL_GPIO_ReadPin>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d025      	beq.n	80043e0 <EXTI2_TSC_IRQHandler+0xec>
 8004394:	4b2d      	ldr	r3, [pc, #180]	; (800444c <EXTI2_TSC_IRQHandler+0x158>)
 8004396:	2201      	movs	r2, #1
 8004398:	601a      	str	r2, [r3, #0]
						break;
 800439a:	e021      	b.n	80043e0 <EXTI2_TSC_IRQHandler+0xec>
					case 2:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800439c:	2201      	movs	r2, #1
 800439e:	2104      	movs	r1, #4
 80043a0:	4828      	ldr	r0, [pc, #160]	; (8004444 <EXTI2_TSC_IRQHandler+0x150>)
 80043a2:	f002 f91b 	bl	80065dc <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 2;
 80043a6:	2104      	movs	r1, #4
 80043a8:	4827      	ldr	r0, [pc, #156]	; (8004448 <EXTI2_TSC_IRQHandler+0x154>)
 80043aa:	f002 f8ff 	bl	80065ac <HAL_GPIO_ReadPin>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d017      	beq.n	80043e4 <EXTI2_TSC_IRQHandler+0xf0>
 80043b4:	4b25      	ldr	r3, [pc, #148]	; (800444c <EXTI2_TSC_IRQHandler+0x158>)
 80043b6:	2202      	movs	r2, #2
 80043b8:	601a      	str	r2, [r3, #0]
						break;
 80043ba:	e013      	b.n	80043e4 <EXTI2_TSC_IRQHandler+0xf0>
					case 3:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80043bc:	2201      	movs	r2, #1
 80043be:	2108      	movs	r1, #8
 80043c0:	4820      	ldr	r0, [pc, #128]	; (8004444 <EXTI2_TSC_IRQHandler+0x150>)
 80043c2:	f002 f90b 	bl	80065dc <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 3;
 80043c6:	2104      	movs	r1, #4
 80043c8:	481f      	ldr	r0, [pc, #124]	; (8004448 <EXTI2_TSC_IRQHandler+0x154>)
 80043ca:	f002 f8ef 	bl	80065ac <HAL_GPIO_ReadPin>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d009      	beq.n	80043e8 <EXTI2_TSC_IRQHandler+0xf4>
 80043d4:	4b1d      	ldr	r3, [pc, #116]	; (800444c <EXTI2_TSC_IRQHandler+0x158>)
 80043d6:	2203      	movs	r2, #3
 80043d8:	601a      	str	r2, [r3, #0]
						break;
 80043da:	e005      	b.n	80043e8 <EXTI2_TSC_IRQHandler+0xf4>
						break;
 80043dc:	bf00      	nop
 80043de:	e004      	b.n	80043ea <EXTI2_TSC_IRQHandler+0xf6>
						break;
 80043e0:	bf00      	nop
 80043e2:	e002      	b.n	80043ea <EXTI2_TSC_IRQHandler+0xf6>
						break;
 80043e4:	bf00      	nop
 80043e6:	e000      	b.n	80043ea <EXTI2_TSC_IRQHandler+0xf6>
						break;
 80043e8:	bf00      	nop
			for (int i = 0; i < 4; i++) {
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3301      	adds	r3, #1
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	dd9e      	ble.n	8004334 <EXTI2_TSC_IRQHandler+0x40>

				}
			}

			keyHandler();
 80043f6:	f7ff f9ff 	bl	80037f8 <keyHandler>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 80043fa:	2201      	movs	r2, #1
 80043fc:	210f      	movs	r1, #15
 80043fe:	4811      	ldr	r0, [pc, #68]	; (8004444 <EXTI2_TSC_IRQHandler+0x150>)
 8004400:	f002 f8ec 	bl	80065dc <HAL_GPIO_WritePin>

			lastPress = HAL_GetTick();
 8004404:	f000 fa74 	bl	80048f0 <HAL_GetTick>
 8004408:	4603      	mov	r3, r0
 800440a:	2200      	movs	r2, #0
 800440c:	469a      	mov	sl, r3
 800440e:	4693      	mov	fp, r2
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <EXTI2_TSC_IRQHandler+0x144>)
 8004412:	e9c3 ab00 	strd	sl, fp, [r3]

		}
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2));
 8004416:	bf00      	nop
 8004418:	2104      	movs	r1, #4
 800441a:	480b      	ldr	r0, [pc, #44]	; (8004448 <EXTI2_TSC_IRQHandler+0x154>)
 800441c:	f002 f8c6 	bl	80065ac <HAL_GPIO_ReadPin>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f8      	bne.n	8004418 <EXTI2_TSC_IRQHandler+0x124>

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004426:	2004      	movs	r0, #4
 8004428:	f002 f90a 	bl	8006640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 800442c:	bf00      	nop
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004436:	bf00      	nop
 8004438:	200007f8 	.word	0x200007f8
 800443c:	48001000 	.word	0x48001000
 8004440:	20000028 	.word	0x20000028
 8004444:	48000c00 	.word	0x48000c00
 8004448:	48000800 	.word	0x48000800
 800444c:	2000002c 	.word	0x2000002c

08004450 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
        if (HAL_GetTick() - lastPress > 200) {
 8004458:	f000 fa4a 	bl	80048f0 <HAL_GetTick>
 800445c:	4603      	mov	r3, r0
 800445e:	2200      	movs	r2, #0
 8004460:	4698      	mov	r8, r3
 8004462:	4691      	mov	r9, r2
 8004464:	4b4b      	ldr	r3, [pc, #300]	; (8004594 <EXTI3_IRQHandler+0x144>)
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	ebb8 0402 	subs.w	r4, r8, r2
 800446e:	eb69 0503 	sbc.w	r5, r9, r3
 8004472:	2cc9      	cmp	r4, #201	; 0xc9
 8004474:	f175 0300 	sbcs.w	r3, r5, #0
 8004478:	d37b      	bcc.n	8004572 <EXTI3_IRQHandler+0x122>
    		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 800447a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800447e:	4846      	ldr	r0, [pc, #280]	; (8004598 <EXTI3_IRQHandler+0x148>)
 8004480:	f002 f8c4 	bl	800660c <HAL_GPIO_TogglePin>

            col = 3;
 8004484:	4b45      	ldr	r3, [pc, #276]	; (800459c <EXTI3_IRQHandler+0x14c>)
 8004486:	2203      	movs	r2, #3
 8004488:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 800448a:	2300      	movs	r3, #0
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	e05d      	b.n	800454c <EXTI3_IRQHandler+0xfc>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 8004490:	2200      	movs	r2, #0
 8004492:	210f      	movs	r1, #15
 8004494:	4842      	ldr	r0, [pc, #264]	; (80045a0 <EXTI3_IRQHandler+0x150>)
 8004496:	f002 f8a1 	bl	80065dc <HAL_GPIO_WritePin>
                switch (i) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b03      	cmp	r3, #3
 800449e:	d852      	bhi.n	8004546 <EXTI3_IRQHandler+0xf6>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <EXTI3_IRQHandler+0x58>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044d9 	.word	0x080044d9
 80044b0:	080044f9 	.word	0x080044f9
 80044b4:	08004519 	.word	0x08004519
                    case 0:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 80044b8:	2201      	movs	r2, #1
 80044ba:	2101      	movs	r1, #1
 80044bc:	4838      	ldr	r0, [pc, #224]	; (80045a0 <EXTI3_IRQHandler+0x150>)
 80044be:	f002 f88d 	bl	80065dc <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 0;
 80044c2:	2108      	movs	r1, #8
 80044c4:	4837      	ldr	r0, [pc, #220]	; (80045a4 <EXTI3_IRQHandler+0x154>)
 80044c6:	f002 f871 	bl	80065ac <HAL_GPIO_ReadPin>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d033      	beq.n	8004538 <EXTI3_IRQHandler+0xe8>
 80044d0:	4b35      	ldr	r3, [pc, #212]	; (80045a8 <EXTI3_IRQHandler+0x158>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
                        break;
 80044d6:	e02f      	b.n	8004538 <EXTI3_IRQHandler+0xe8>
                    case 1:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 80044d8:	2201      	movs	r2, #1
 80044da:	2102      	movs	r1, #2
 80044dc:	4830      	ldr	r0, [pc, #192]	; (80045a0 <EXTI3_IRQHandler+0x150>)
 80044de:	f002 f87d 	bl	80065dc <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 1;
 80044e2:	2108      	movs	r1, #8
 80044e4:	482f      	ldr	r0, [pc, #188]	; (80045a4 <EXTI3_IRQHandler+0x154>)
 80044e6:	f002 f861 	bl	80065ac <HAL_GPIO_ReadPin>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d025      	beq.n	800453c <EXTI3_IRQHandler+0xec>
 80044f0:	4b2d      	ldr	r3, [pc, #180]	; (80045a8 <EXTI3_IRQHandler+0x158>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
                        break;
 80044f6:	e021      	b.n	800453c <EXTI3_IRQHandler+0xec>
                    case 2:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80044f8:	2201      	movs	r2, #1
 80044fa:	2104      	movs	r1, #4
 80044fc:	4828      	ldr	r0, [pc, #160]	; (80045a0 <EXTI3_IRQHandler+0x150>)
 80044fe:	f002 f86d 	bl	80065dc <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 2;
 8004502:	2108      	movs	r1, #8
 8004504:	4827      	ldr	r0, [pc, #156]	; (80045a4 <EXTI3_IRQHandler+0x154>)
 8004506:	f002 f851 	bl	80065ac <HAL_GPIO_ReadPin>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d017      	beq.n	8004540 <EXTI3_IRQHandler+0xf0>
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <EXTI3_IRQHandler+0x158>)
 8004512:	2202      	movs	r2, #2
 8004514:	601a      	str	r2, [r3, #0]
                        break;
 8004516:	e013      	b.n	8004540 <EXTI3_IRQHandler+0xf0>
                    case 3:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8004518:	2201      	movs	r2, #1
 800451a:	2108      	movs	r1, #8
 800451c:	4820      	ldr	r0, [pc, #128]	; (80045a0 <EXTI3_IRQHandler+0x150>)
 800451e:	f002 f85d 	bl	80065dc <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 3;
 8004522:	2108      	movs	r1, #8
 8004524:	481f      	ldr	r0, [pc, #124]	; (80045a4 <EXTI3_IRQHandler+0x154>)
 8004526:	f002 f841 	bl	80065ac <HAL_GPIO_ReadPin>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d009      	beq.n	8004544 <EXTI3_IRQHandler+0xf4>
 8004530:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <EXTI3_IRQHandler+0x158>)
 8004532:	2203      	movs	r2, #3
 8004534:	601a      	str	r2, [r3, #0]
                        break;
 8004536:	e005      	b.n	8004544 <EXTI3_IRQHandler+0xf4>
                        break;
 8004538:	bf00      	nop
 800453a:	e004      	b.n	8004546 <EXTI3_IRQHandler+0xf6>
                        break;
 800453c:	bf00      	nop
 800453e:	e002      	b.n	8004546 <EXTI3_IRQHandler+0xf6>
                        break;
 8004540:	bf00      	nop
 8004542:	e000      	b.n	8004546 <EXTI3_IRQHandler+0xf6>
                        break;
 8004544:	bf00      	nop
            for (int i = 0; i < 4; i++) {
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3301      	adds	r3, #1
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b03      	cmp	r3, #3
 8004550:	dd9e      	ble.n	8004490 <EXTI3_IRQHandler+0x40>

                }
            }

            keyHandler();
 8004552:	f7ff f951 	bl	80037f8 <keyHandler>
            lastPress = HAL_GetTick();
 8004556:	f000 f9cb 	bl	80048f0 <HAL_GetTick>
 800455a:	4603      	mov	r3, r0
 800455c:	2200      	movs	r2, #0
 800455e:	469a      	mov	sl, r3
 8004560:	4693      	mov	fp, r2
 8004562:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <EXTI3_IRQHandler+0x144>)
 8004564:	e9c3 ab00 	strd	sl, fp, [r3]
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 8004568:	2201      	movs	r2, #1
 800456a:	210f      	movs	r1, #15
 800456c:	480c      	ldr	r0, [pc, #48]	; (80045a0 <EXTI3_IRQHandler+0x150>)
 800456e:	f002 f835 	bl	80065dc <HAL_GPIO_WritePin>


        }
        while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3));
 8004572:	bf00      	nop
 8004574:	2108      	movs	r1, #8
 8004576:	480b      	ldr	r0, [pc, #44]	; (80045a4 <EXTI3_IRQHandler+0x154>)
 8004578:	f002 f818 	bl	80065ac <HAL_GPIO_ReadPin>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f8      	bne.n	8004574 <EXTI3_IRQHandler+0x124>

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004582:	2008      	movs	r0, #8
 8004584:	f002 f85c 	bl	8006640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004588:	bf00      	nop
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004592:	bf00      	nop
 8004594:	200007f8 	.word	0x200007f8
 8004598:	48001000 	.word	0x48001000
 800459c:	20000028 	.word	0x20000028
 80045a0:	48000c00 	.word	0x48000c00
 80045a4:	48000800 	.word	0x48000800
 80045a8:	2000002c 	.word	0x2000002c

080045ac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_Pin);
 80045b0:	2010      	movs	r0, #16
 80045b2:	f002 f845 	bl	8006640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
    static int counter  =  0 ;
    static int temSum = 0;
    static int lumSum = 0 ;
    counter ++;
 80045c2:	4b48      	ldr	r3, [pc, #288]	; (80046e4 <ADC1_2_IRQHandler+0x128>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3301      	adds	r3, #1
 80045c8:	4a46      	ldr	r2, [pc, #280]	; (80046e4 <ADC1_2_IRQHandler+0x128>)
 80045ca:	6013      	str	r3, [r2, #0]
    if(counter %100== 0){
 80045cc:	4b45      	ldr	r3, [pc, #276]	; (80046e4 <ADC1_2_IRQHandler+0x128>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b45      	ldr	r3, [pc, #276]	; (80046e8 <ADC1_2_IRQHandler+0x12c>)
 80045d2:	fb83 1302 	smull	r1, r3, r3, r2
 80045d6:	1159      	asrs	r1, r3, #5
 80045d8:	17d3      	asrs	r3, r2, #31
 80045da:	1acb      	subs	r3, r1, r3
 80045dc:	2164      	movs	r1, #100	; 0x64
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d16d      	bne.n	80046c4 <ADC1_2_IRQHandler+0x108>

        lumSum +=  (int) ((HAL_ADC_GetValue(&hadc1) * 99) / 1000);
 80045e8:	4840      	ldr	r0, [pc, #256]	; (80046ec <ADC1_2_IRQHandler+0x130>)
 80045ea:	f000 fcef 	bl	8004fcc <HAL_ADC_GetValue>
 80045ee:	4602      	mov	r2, r0
 80045f0:	4613      	mov	r3, r2
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	4413      	add	r3, r2
 80045fa:	4a3d      	ldr	r2, [pc, #244]	; (80046f0 <ADC1_2_IRQHandler+0x134>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	099b      	lsrs	r3, r3, #6
 8004602:	461a      	mov	r2, r3
 8004604:	4b3b      	ldr	r3, [pc, #236]	; (80046f4 <ADC1_2_IRQHandler+0x138>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4413      	add	r3, r2
 800460a:	4a3a      	ldr	r2, [pc, #232]	; (80046f4 <ADC1_2_IRQHandler+0x138>)
 800460c:	6013      	str	r3, [r2, #0]
        int Voltage_mv = (int)(HAL_ADC_GetValue(&hadc2) * 3300 / 4095);
 800460e:	483a      	ldr	r0, [pc, #232]	; (80046f8 <ADC1_2_IRQHandler+0x13c>)
 8004610:	f000 fcdc 	bl	8004fcc <HAL_ADC_GetValue>
 8004614:	4603      	mov	r3, r0
 8004616:	f640 42e4 	movw	r2, #3300	; 0xce4
 800461a:	fb03 f202 	mul.w	r2, r3, r2
 800461e:	4b37      	ldr	r3, [pc, #220]	; (80046fc <ADC1_2_IRQHandler+0x140>)
 8004620:	fba3 1302 	umull	r1, r3, r3, r2
 8004624:	1ad2      	subs	r2, r2, r3
 8004626:	0852      	lsrs	r2, r2, #1
 8004628:	4413      	add	r3, r2
 800462a:	0adb      	lsrs	r3, r3, #11
 800462c:	60fb      	str	r3, [r7, #12]
        temSum += Voltage_mv / 10;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4a33      	ldr	r2, [pc, #204]	; (8004700 <ADC1_2_IRQHandler+0x144>)
 8004632:	fb82 1203 	smull	r1, r2, r2, r3
 8004636:	1092      	asrs	r2, r2, #2
 8004638:	17db      	asrs	r3, r3, #31
 800463a:	1ad2      	subs	r2, r2, r3
 800463c:	4b31      	ldr	r3, [pc, #196]	; (8004704 <ADC1_2_IRQHandler+0x148>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4413      	add	r3, r2
 8004642:	4a30      	ldr	r2, [pc, #192]	; (8004704 <ADC1_2_IRQHandler+0x148>)
 8004644:	6013      	str	r3, [r2, #0]

        if(counter == 900){
 8004646:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <ADC1_2_IRQHandler+0x128>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800464e:	d139      	bne.n	80046c4 <ADC1_2_IRQHandler+0x108>

            int lumCopy = lum;
 8004650:	4b2d      	ldr	r3, [pc, #180]	; (8004708 <ADC1_2_IRQHandler+0x14c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60bb      	str	r3, [r7, #8]
            int temCopy = temperature;
 8004656:	4b2d      	ldr	r3, [pc, #180]	; (800470c <ADC1_2_IRQHandler+0x150>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	607b      	str	r3, [r7, #4]
            lum = lumSum/10;
 800465c:	4b25      	ldr	r3, [pc, #148]	; (80046f4 <ADC1_2_IRQHandler+0x138>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a27      	ldr	r2, [pc, #156]	; (8004700 <ADC1_2_IRQHandler+0x144>)
 8004662:	fb82 1203 	smull	r1, r2, r2, r3
 8004666:	1092      	asrs	r2, r2, #2
 8004668:	17db      	asrs	r3, r3, #31
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	4a26      	ldr	r2, [pc, #152]	; (8004708 <ADC1_2_IRQHandler+0x14c>)
 800466e:	6013      	str	r3, [r2, #0]
            temperature = temSum / 10;
 8004670:	4b24      	ldr	r3, [pc, #144]	; (8004704 <ADC1_2_IRQHandler+0x148>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a22      	ldr	r2, [pc, #136]	; (8004700 <ADC1_2_IRQHandler+0x144>)
 8004676:	fb82 1203 	smull	r1, r2, r2, r3
 800467a:	1092      	asrs	r2, r2, #2
 800467c:	17db      	asrs	r3, r3, #31
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	4a22      	ldr	r2, [pc, #136]	; (800470c <ADC1_2_IRQHandler+0x150>)
 8004682:	6013      	str	r3, [r2, #0]
            counter = 0 ;
 8004684:	4b17      	ldr	r3, [pc, #92]	; (80046e4 <ADC1_2_IRQHandler+0x128>)
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
            temSum = 0 ;
 800468a:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <ADC1_2_IRQHandler+0x148>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
            lumSum = 0 ;
 8004690:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <ADC1_2_IRQHandler+0x138>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]

            if(lum < lumCopy)HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
 8004696:	4b1c      	ldr	r3, [pc, #112]	; (8004708 <ADC1_2_IRQHandler+0x14c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	429a      	cmp	r2, r3
 800469e:	dd05      	ble.n	80046ac <ADC1_2_IRQHandler+0xf0>
 80046a0:	2201      	movs	r2, #1
 80046a2:	2104      	movs	r1, #4
 80046a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046a8:	f001 ff98 	bl	80065dc <HAL_GPIO_WritePin>
            if(temperature > temSum)HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);
 80046ac:	4b17      	ldr	r3, [pc, #92]	; (800470c <ADC1_2_IRQHandler+0x150>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b14      	ldr	r3, [pc, #80]	; (8004704 <ADC1_2_IRQHandler+0x148>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	dd05      	ble.n	80046c4 <ADC1_2_IRQHandler+0x108>
 80046b8:	2200      	movs	r2, #0
 80046ba:	2104      	movs	r1, #4
 80046bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046c0:	f001 ff8c 	bl	80065dc <HAL_GPIO_WritePin>
    }




    HAL_ADC_Start_IT(&hadc1);
 80046c4:	4809      	ldr	r0, [pc, #36]	; (80046ec <ADC1_2_IRQHandler+0x130>)
 80046c6:	f000 fb41 	bl	8004d4c <HAL_ADC_Start_IT>
    HAL_ADC_Start_IT(&hadc2);
 80046ca:	480b      	ldr	r0, [pc, #44]	; (80046f8 <ADC1_2_IRQHandler+0x13c>)
 80046cc:	f000 fb3e 	bl	8004d4c <HAL_ADC_Start_IT>
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80046d0:	4806      	ldr	r0, [pc, #24]	; (80046ec <ADC1_2_IRQHandler+0x130>)
 80046d2:	f000 fc89 	bl	8004fe8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80046d6:	4808      	ldr	r0, [pc, #32]	; (80046f8 <ADC1_2_IRQHandler+0x13c>)
 80046d8:	f000 fc86 	bl	8004fe8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	2000087c 	.word	0x2000087c
 80046e8:	51eb851f 	.word	0x51eb851f
 80046ec:	200001e0 	.word	0x200001e0
 80046f0:	10624dd3 	.word	0x10624dd3
 80046f4:	20000880 	.word	0x20000880
 80046f8:	20000230 	.word	0x20000230
 80046fc:	00100101 	.word	0x00100101
 8004700:	66666667 	.word	0x66666667
 8004704:	20000884 	.word	0x20000884
 8004708:	2000073c 	.word	0x2000073c
 800470c:	20000004 	.word	0x20000004

08004710 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8004714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004718:	4803      	ldr	r0, [pc, #12]	; (8004728 <EXTI9_5_IRQHandler+0x18>)
 800471a:	f001 ff77 	bl	800660c <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800471e:	2020      	movs	r0, #32
 8004720:	f001 ff8e 	bl	8006640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004724:	bf00      	nop
 8004726:	bd80      	pop	{r7, pc}
 8004728:	48001000 	.word	0x48001000

0800472c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
//		shown1 = 1;
//
//	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004730:	4803      	ldr	r0, [pc, #12]	; (8004740 <TIM3_IRQHandler+0x14>)
 8004732:	f003 ff9e 	bl	8008672 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	HAL_TIM_Base_Start_IT(&htim3);
 8004736:	4802      	ldr	r0, [pc, #8]	; (8004740 <TIM3_IRQHandler+0x14>)
 8004738:	f003 fed0 	bl	80084dc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_IRQn 1 */
}
 800473c:	bf00      	nop
 800473e:	bd80      	pop	{r7, pc}
 8004740:	2000037c 	.word	0x2000037c

08004744 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004748:	4802      	ldr	r0, [pc, #8]	; (8004754 <USART2_IRQHandler+0x10>)
 800474a:	f004 ffad 	bl	80096a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800474e:	bf00      	nop
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	200003c8 	.word	0x200003c8

08004758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004760:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <_sbrk+0x5c>)
 8004762:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <_sbrk+0x60>)
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800476c:	4b13      	ldr	r3, [pc, #76]	; (80047bc <_sbrk+0x64>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004774:	4b11      	ldr	r3, [pc, #68]	; (80047bc <_sbrk+0x64>)
 8004776:	4a12      	ldr	r2, [pc, #72]	; (80047c0 <_sbrk+0x68>)
 8004778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800477a:	4b10      	ldr	r3, [pc, #64]	; (80047bc <_sbrk+0x64>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	429a      	cmp	r2, r3
 8004786:	d207      	bcs.n	8004798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004788:	f005 fefa 	bl	800a580 <__errno>
 800478c:	4603      	mov	r3, r0
 800478e:	220c      	movs	r2, #12
 8004790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004792:	f04f 33ff 	mov.w	r3, #4294967295
 8004796:	e009      	b.n	80047ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004798:	4b08      	ldr	r3, [pc, #32]	; (80047bc <_sbrk+0x64>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800479e:	4b07      	ldr	r3, [pc, #28]	; (80047bc <_sbrk+0x64>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4413      	add	r3, r2
 80047a6:	4a05      	ldr	r2, [pc, #20]	; (80047bc <_sbrk+0x64>)
 80047a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047aa:	68fb      	ldr	r3, [r7, #12]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	2000a000 	.word	0x2000a000
 80047b8:	00000400 	.word	0x00000400
 80047bc:	20000888 	.word	0x20000888
 80047c0:	200008a0 	.word	0x200008a0

080047c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <SystemInit+0x20>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	4a05      	ldr	r2, [pc, #20]	; (80047e4 <SystemInit+0x20>)
 80047d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	e000ed00 	.word	0xe000ed00

080047e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80047e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004820 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047ec:	480d      	ldr	r0, [pc, #52]	; (8004824 <LoopForever+0x6>)
  ldr r1, =_edata
 80047ee:	490e      	ldr	r1, [pc, #56]	; (8004828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80047f0:	4a0e      	ldr	r2, [pc, #56]	; (800482c <LoopForever+0xe>)
  movs r3, #0
 80047f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047f4:	e002      	b.n	80047fc <LoopCopyDataInit>

080047f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047fa:	3304      	adds	r3, #4

080047fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004800:	d3f9      	bcc.n	80047f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004802:	4a0b      	ldr	r2, [pc, #44]	; (8004830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004804:	4c0b      	ldr	r4, [pc, #44]	; (8004834 <LoopForever+0x16>)
  movs r3, #0
 8004806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004808:	e001      	b.n	800480e <LoopFillZerobss>

0800480a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800480a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800480c:	3204      	adds	r2, #4

0800480e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800480e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004810:	d3fb      	bcc.n	800480a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004812:	f7ff ffd7 	bl	80047c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004816:	f005 feb9 	bl	800a58c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800481a:	f7fc f8f3 	bl	8000a04 <main>

0800481e <LoopForever>:

LoopForever:
    b LoopForever
 800481e:	e7fe      	b.n	800481e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004820:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004828:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 800482c:	0800b710 	.word	0x0800b710
  ldr r2, =_sbss
 8004830:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8004834:	200008a0 	.word	0x200008a0

08004838 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004838:	e7fe      	b.n	8004838 <ADC3_IRQHandler>
	...

0800483c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004840:	4b08      	ldr	r3, [pc, #32]	; (8004864 <HAL_Init+0x28>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a07      	ldr	r2, [pc, #28]	; (8004864 <HAL_Init+0x28>)
 8004846:	f043 0310 	orr.w	r3, r3, #16
 800484a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800484c:	2003      	movs	r0, #3
 800484e:	f001 fc7b 	bl	8006148 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004852:	2000      	movs	r0, #0
 8004854:	f000 f808 	bl	8004868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004858:	f7fc fcda 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40022000 	.word	0x40022000

08004868 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004870:	4b12      	ldr	r3, [pc, #72]	; (80048bc <HAL_InitTick+0x54>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <HAL_InitTick+0x58>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	4619      	mov	r1, r3
 800487a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800487e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	4618      	mov	r0, r3
 8004888:	f001 fc93 	bl	80061b2 <HAL_SYSTICK_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e00e      	b.n	80048b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b0f      	cmp	r3, #15
 800489a:	d80a      	bhi.n	80048b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800489c:	2200      	movs	r2, #0
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	f001 fc5b 	bl	800615e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048a8:	4a06      	ldr	r2, [pc, #24]	; (80048c4 <HAL_InitTick+0x5c>)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e000      	b.n	80048b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	2000012c 	.word	0x2000012c
 80048c0:	20000134 	.word	0x20000134
 80048c4:	20000130 	.word	0x20000130

080048c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <HAL_IncTick+0x20>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	4b06      	ldr	r3, [pc, #24]	; (80048ec <HAL_IncTick+0x24>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4413      	add	r3, r2
 80048d8:	4a04      	ldr	r2, [pc, #16]	; (80048ec <HAL_IncTick+0x24>)
 80048da:	6013      	str	r3, [r2, #0]
}
 80048dc:	bf00      	nop
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000134 	.word	0x20000134
 80048ec:	2000088c 	.word	0x2000088c

080048f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80048f4:	4b03      	ldr	r3, [pc, #12]	; (8004904 <HAL_GetTick+0x14>)
 80048f6:	681b      	ldr	r3, [r3, #0]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	2000088c 	.word	0x2000088c

08004908 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004910:	f7ff ffee 	bl	80048f0 <HAL_GetTick>
 8004914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d005      	beq.n	800492e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004922:	4b0a      	ldr	r3, [pc, #40]	; (800494c <HAL_Delay+0x44>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800492e:	bf00      	nop
 8004930:	f7ff ffde 	bl	80048f0 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	429a      	cmp	r2, r3
 800493e:	d8f7      	bhi.n	8004930 <HAL_Delay+0x28>
  {
  }
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000134 	.word	0x20000134

08004950 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b09a      	sub	sp, #104	; 0x68
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e1c9      	b.n	8004d40 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d176      	bne.n	8004aac <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d152      	bne.n	8004a6c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7fc fc39 	bl	8001258 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d13b      	bne.n	8004a6c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f001 fa71 	bl	8005edc <ADC_Disable>
 80049fa:	4603      	mov	r3, r0
 80049fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d12f      	bne.n	8004a6c <HAL_ADC_Init+0xe0>
 8004a0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d12b      	bne.n	8004a6c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a1c:	f023 0302 	bic.w	r3, r3, #2
 8004a20:	f043 0202 	orr.w	r2, r3, #2
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a36:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a46:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a48:	4b86      	ldr	r3, [pc, #536]	; (8004c64 <HAL_ADC_Init+0x2d8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a86      	ldr	r2, [pc, #536]	; (8004c68 <HAL_ADC_Init+0x2dc>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	0c9a      	lsrs	r2, r3, #18
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a5e:	e002      	b.n	8004a66 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f9      	bne.n	8004a60 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a88:	d110      	bne.n	8004aac <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f023 0312 	bic.w	r3, r3, #18
 8004a92:	f043 0210 	orr.w	r2, r3, #16
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	f043 0201 	orr.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f040 8136 	bne.w	8004d26 <HAL_ADC_Init+0x39a>
 8004aba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f040 8131 	bne.w	8004d26 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 8129 	bne.w	8004d26 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004adc:	f043 0202 	orr.w	r2, r3, #2
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004aec:	d004      	beq.n	8004af8 <HAL_ADC_Init+0x16c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a5e      	ldr	r2, [pc, #376]	; (8004c6c <HAL_ADC_Init+0x2e0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d101      	bne.n	8004afc <HAL_ADC_Init+0x170>
 8004af8:	4b5d      	ldr	r3, [pc, #372]	; (8004c70 <HAL_ADC_Init+0x2e4>)
 8004afa:	e000      	b.n	8004afe <HAL_ADC_Init+0x172>
 8004afc:	4b5d      	ldr	r3, [pc, #372]	; (8004c74 <HAL_ADC_Init+0x2e8>)
 8004afe:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b08:	d102      	bne.n	8004b10 <HAL_ADC_Init+0x184>
 8004b0a:	4b58      	ldr	r3, [pc, #352]	; (8004c6c <HAL_ADC_Init+0x2e0>)
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	e01a      	b.n	8004b46 <HAL_ADC_Init+0x1ba>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a55      	ldr	r2, [pc, #340]	; (8004c6c <HAL_ADC_Init+0x2e0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d103      	bne.n	8004b22 <HAL_ADC_Init+0x196>
 8004b1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e011      	b.n	8004b46 <HAL_ADC_Init+0x1ba>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a54      	ldr	r2, [pc, #336]	; (8004c78 <HAL_ADC_Init+0x2ec>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d102      	bne.n	8004b32 <HAL_ADC_Init+0x1a6>
 8004b2c:	4b53      	ldr	r3, [pc, #332]	; (8004c7c <HAL_ADC_Init+0x2f0>)
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e009      	b.n	8004b46 <HAL_ADC_Init+0x1ba>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a51      	ldr	r2, [pc, #324]	; (8004c7c <HAL_ADC_Init+0x2f0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d102      	bne.n	8004b42 <HAL_ADC_Init+0x1b6>
 8004b3c:	4b4e      	ldr	r3, [pc, #312]	; (8004c78 <HAL_ADC_Init+0x2ec>)
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	e001      	b.n	8004b46 <HAL_ADC_Init+0x1ba>
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 0303 	and.w	r3, r3, #3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d108      	bne.n	8004b66 <HAL_ADC_Init+0x1da>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_ADC_Init+0x1da>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <HAL_ADC_Init+0x1dc>
 8004b66:	2300      	movs	r3, #0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d11c      	bne.n	8004ba6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004b6c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d010      	beq.n	8004b94 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d107      	bne.n	8004b8e <HAL_ADC_Init+0x202>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_ADC_Init+0x202>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <HAL_ADC_Init+0x204>
 8004b8e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d108      	bne.n	8004ba6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	7e5b      	ldrb	r3, [r3, #25]
 8004baa:	035b      	lsls	r3, r3, #13
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bb0:	2a01      	cmp	r2, #1
 8004bb2:	d002      	beq.n	8004bba <HAL_ADC_Init+0x22e>
 8004bb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bb8:	e000      	b.n	8004bbc <HAL_ADC_Init+0x230>
 8004bba:	2200      	movs	r2, #0
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d11b      	bne.n	8004c12 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7e5b      	ldrb	r3, [r3, #25]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	3b01      	subs	r3, #1
 8004be8:	045a      	lsls	r2, r3, #17
 8004bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf4:	e00d      	b.n	8004c12 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004bfe:	f043 0220 	orr.w	r2, r3, #32
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	f043 0201 	orr.w	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d03a      	beq.n	8004c90 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <HAL_ADC_Init+0x2ec>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d004      	beq.n	8004c2e <HAL_ADC_Init+0x2a2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a14      	ldr	r2, [pc, #80]	; (8004c7c <HAL_ADC_Init+0x2f0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d128      	bne.n	8004c80 <HAL_ADC_Init+0x2f4>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c32:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004c36:	d012      	beq.n	8004c5e <HAL_ADC_Init+0x2d2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c40:	d00a      	beq.n	8004c58 <HAL_ADC_Init+0x2cc>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004c4a:	d002      	beq.n	8004c52 <HAL_ADC_Init+0x2c6>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	e018      	b.n	8004c84 <HAL_ADC_Init+0x2f8>
 8004c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c56:	e015      	b.n	8004c84 <HAL_ADC_Init+0x2f8>
 8004c58:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004c5c:	e012      	b.n	8004c84 <HAL_ADC_Init+0x2f8>
 8004c5e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004c62:	e00f      	b.n	8004c84 <HAL_ADC_Init+0x2f8>
 8004c64:	2000012c 	.word	0x2000012c
 8004c68:	431bde83 	.word	0x431bde83
 8004c6c:	50000100 	.word	0x50000100
 8004c70:	50000300 	.word	0x50000300
 8004c74:	50000700 	.word	0x50000700
 8004c78:	50000400 	.word	0x50000400
 8004c7c:	50000500 	.word	0x50000500
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d114      	bne.n	8004cc8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cac:	f023 0302 	bic.w	r3, r3, #2
 8004cb0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	7e1b      	ldrb	r3, [r3, #24]
 8004cb6:	039a      	lsls	r2, r3, #14
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	4b1e      	ldr	r3, [pc, #120]	; (8004d48 <HAL_ADC_Init+0x3bc>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d10c      	bne.n	8004cfe <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	f023 010f 	bic.w	r1, r3, #15
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	1e5a      	subs	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8004cfc:	e007      	b.n	8004d0e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 020f 	bic.w	r2, r2, #15
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	f023 0303 	bic.w	r3, r3, #3
 8004d1c:	f043 0201 	orr.w	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40
 8004d24:	e00a      	b.n	8004d3c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f023 0312 	bic.w	r3, r3, #18
 8004d2e:	f043 0210 	orr.w	r2, r3, #16
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004d3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3768      	adds	r7, #104	; 0x68
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	fff0c007 	.word	0xfff0c007

08004d4c <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f040 8123 	bne.w	8004fae <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_Start_IT+0x2a>
 8004d72:	2302      	movs	r3, #2
 8004d74:	e11e      	b.n	8004fb4 <HAL_ADC_Start_IT+0x268>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f001 f848 	bl	8005e14 <ADC_Enable>
 8004d84:	4603      	mov	r3, r0
 8004d86:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f040 810a 	bne.w	8004fa4 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dac:	d004      	beq.n	8004db8 <HAL_ADC_Start_IT+0x6c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a82      	ldr	r2, [pc, #520]	; (8004fbc <HAL_ADC_Start_IT+0x270>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d106      	bne.n	8004dc6 <HAL_ADC_Start_IT+0x7a>
 8004db8:	4b81      	ldr	r3, [pc, #516]	; (8004fc0 <HAL_ADC_Start_IT+0x274>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 031f 	and.w	r3, r3, #31
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d010      	beq.n	8004de6 <HAL_ADC_Start_IT+0x9a>
 8004dc4:	e005      	b.n	8004dd2 <HAL_ADC_Start_IT+0x86>
 8004dc6:	4b7f      	ldr	r3, [pc, #508]	; (8004fc4 <HAL_ADC_Start_IT+0x278>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <HAL_ADC_Start_IT+0x9a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dda:	d004      	beq.n	8004de6 <HAL_ADC_Start_IT+0x9a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a79      	ldr	r2, [pc, #484]	; (8004fc8 <HAL_ADC_Start_IT+0x27c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d115      	bne.n	8004e12 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d036      	beq.n	8004e6e <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004e10:	e02d      	b.n	8004e6e <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e26:	d004      	beq.n	8004e32 <HAL_ADC_Start_IT+0xe6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a63      	ldr	r2, [pc, #396]	; (8004fbc <HAL_ADC_Start_IT+0x270>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d10a      	bne.n	8004e48 <HAL_ADC_Start_IT+0xfc>
 8004e32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	e008      	b.n	8004e5a <HAL_ADC_Start_IT+0x10e>
 8004e48:	4b5f      	ldr	r3, [pc, #380]	; (8004fc8 <HAL_ADC_Start_IT+0x27c>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e7a:	d106      	bne.n	8004e8a <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e80:	f023 0206 	bic.w	r2, r3, #6
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	645a      	str	r2, [r3, #68]	; 0x44
 8004e88:	e002      	b.n	8004e90 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	221c      	movs	r2, #28
 8004e9e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d110      	bne.n	8004eca <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0204 	bic.w	r2, r2, #4
 8004eb6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0208 	orr.w	r2, r2, #8
 8004ec6:	605a      	str	r2, [r3, #4]
          break;
 8004ec8:	e008      	b.n	8004edc <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f042 020c 	orr.w	r2, r2, #12
 8004ed8:	605a      	str	r2, [r3, #4]
          break;
 8004eda:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d107      	bne.n	8004ef4 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0210 	bic.w	r2, r2, #16
 8004ef2:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004efc:	d004      	beq.n	8004f08 <HAL_ADC_Start_IT+0x1bc>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a2e      	ldr	r2, [pc, #184]	; (8004fbc <HAL_ADC_Start_IT+0x270>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d106      	bne.n	8004f16 <HAL_ADC_Start_IT+0x1ca>
 8004f08:	4b2d      	ldr	r3, [pc, #180]	; (8004fc0 <HAL_ADC_Start_IT+0x274>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 031f 	and.w	r3, r3, #31
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d03e      	beq.n	8004f92 <HAL_ADC_Start_IT+0x246>
 8004f14:	e005      	b.n	8004f22 <HAL_ADC_Start_IT+0x1d6>
 8004f16:	4b2b      	ldr	r3, [pc, #172]	; (8004fc4 <HAL_ADC_Start_IT+0x278>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d037      	beq.n	8004f92 <HAL_ADC_Start_IT+0x246>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f2a:	d004      	beq.n	8004f36 <HAL_ADC_Start_IT+0x1ea>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a22      	ldr	r2, [pc, #136]	; (8004fbc <HAL_ADC_Start_IT+0x270>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d106      	bne.n	8004f44 <HAL_ADC_Start_IT+0x1f8>
 8004f36:	4b22      	ldr	r3, [pc, #136]	; (8004fc0 <HAL_ADC_Start_IT+0x274>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 031f 	and.w	r3, r3, #31
 8004f3e:	2b05      	cmp	r3, #5
 8004f40:	d027      	beq.n	8004f92 <HAL_ADC_Start_IT+0x246>
 8004f42:	e005      	b.n	8004f50 <HAL_ADC_Start_IT+0x204>
 8004f44:	4b1f      	ldr	r3, [pc, #124]	; (8004fc4 <HAL_ADC_Start_IT+0x278>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 031f 	and.w	r3, r3, #31
 8004f4c:	2b05      	cmp	r3, #5
 8004f4e:	d020      	beq.n	8004f92 <HAL_ADC_Start_IT+0x246>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f58:	d004      	beq.n	8004f64 <HAL_ADC_Start_IT+0x218>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a17      	ldr	r2, [pc, #92]	; (8004fbc <HAL_ADC_Start_IT+0x270>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d106      	bne.n	8004f72 <HAL_ADC_Start_IT+0x226>
 8004f64:	4b16      	ldr	r3, [pc, #88]	; (8004fc0 <HAL_ADC_Start_IT+0x274>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	2b09      	cmp	r3, #9
 8004f6e:	d010      	beq.n	8004f92 <HAL_ADC_Start_IT+0x246>
 8004f70:	e005      	b.n	8004f7e <HAL_ADC_Start_IT+0x232>
 8004f72:	4b14      	ldr	r3, [pc, #80]	; (8004fc4 <HAL_ADC_Start_IT+0x278>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	2b09      	cmp	r3, #9
 8004f7c:	d009      	beq.n	8004f92 <HAL_ADC_Start_IT+0x246>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f86:	d004      	beq.n	8004f92 <HAL_ADC_Start_IT+0x246>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a0e      	ldr	r2, [pc, #56]	; (8004fc8 <HAL_ADC_Start_IT+0x27c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d10f      	bne.n	8004fb2 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0204 	orr.w	r2, r2, #4
 8004fa0:	609a      	str	r2, [r3, #8]
 8004fa2:	e006      	b.n	8004fb2 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004fac:	e001      	b.n	8004fb2 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	50000100 	.word	0x50000100
 8004fc0:	50000300 	.word	0x50000300
 8004fc4:	50000700 	.word	0x50000700
 8004fc8:	50000400 	.word	0x50000400

08004fcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b04      	cmp	r3, #4
 8005008:	d106      	bne.n	8005018 <HAL_ADC_IRQHandler+0x30>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b04      	cmp	r3, #4
 8005016:	d00f      	beq.n	8005038 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8005022:	2b08      	cmp	r3, #8
 8005024:	f040 80c0 	bne.w	80051a8 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b08      	cmp	r3, #8
 8005034:	f040 80b8 	bne.w	80051a8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b00      	cmp	r3, #0
 8005042:	d105      	bne.n	8005050 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005058:	d004      	beq.n	8005064 <HAL_ADC_IRQHandler+0x7c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a8e      	ldr	r2, [pc, #568]	; (8005298 <HAL_ADC_IRQHandler+0x2b0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d106      	bne.n	8005072 <HAL_ADC_IRQHandler+0x8a>
 8005064:	4b8d      	ldr	r3, [pc, #564]	; (800529c <HAL_ADC_IRQHandler+0x2b4>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 031f 	and.w	r3, r3, #31
 800506c:	2b00      	cmp	r3, #0
 800506e:	d03e      	beq.n	80050ee <HAL_ADC_IRQHandler+0x106>
 8005070:	e005      	b.n	800507e <HAL_ADC_IRQHandler+0x96>
 8005072:	4b8b      	ldr	r3, [pc, #556]	; (80052a0 <HAL_ADC_IRQHandler+0x2b8>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 031f 	and.w	r3, r3, #31
 800507a:	2b00      	cmp	r3, #0
 800507c:	d037      	beq.n	80050ee <HAL_ADC_IRQHandler+0x106>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005086:	d004      	beq.n	8005092 <HAL_ADC_IRQHandler+0xaa>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a82      	ldr	r2, [pc, #520]	; (8005298 <HAL_ADC_IRQHandler+0x2b0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d106      	bne.n	80050a0 <HAL_ADC_IRQHandler+0xb8>
 8005092:	4b82      	ldr	r3, [pc, #520]	; (800529c <HAL_ADC_IRQHandler+0x2b4>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	2b05      	cmp	r3, #5
 800509c:	d027      	beq.n	80050ee <HAL_ADC_IRQHandler+0x106>
 800509e:	e005      	b.n	80050ac <HAL_ADC_IRQHandler+0xc4>
 80050a0:	4b7f      	ldr	r3, [pc, #508]	; (80052a0 <HAL_ADC_IRQHandler+0x2b8>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	2b05      	cmp	r3, #5
 80050aa:	d020      	beq.n	80050ee <HAL_ADC_IRQHandler+0x106>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050b4:	d004      	beq.n	80050c0 <HAL_ADC_IRQHandler+0xd8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a77      	ldr	r2, [pc, #476]	; (8005298 <HAL_ADC_IRQHandler+0x2b0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d106      	bne.n	80050ce <HAL_ADC_IRQHandler+0xe6>
 80050c0:	4b76      	ldr	r3, [pc, #472]	; (800529c <HAL_ADC_IRQHandler+0x2b4>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	2b09      	cmp	r3, #9
 80050ca:	d010      	beq.n	80050ee <HAL_ADC_IRQHandler+0x106>
 80050cc:	e005      	b.n	80050da <HAL_ADC_IRQHandler+0xf2>
 80050ce:	4b74      	ldr	r3, [pc, #464]	; (80052a0 <HAL_ADC_IRQHandler+0x2b8>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 031f 	and.w	r3, r3, #31
 80050d6:	2b09      	cmp	r3, #9
 80050d8:	d009      	beq.n	80050ee <HAL_ADC_IRQHandler+0x106>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050e2:	d004      	beq.n	80050ee <HAL_ADC_IRQHandler+0x106>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a6e      	ldr	r2, [pc, #440]	; (80052a4 <HAL_ADC_IRQHandler+0x2bc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d104      	bne.n	80050f8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	e00f      	b.n	8005118 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005100:	d004      	beq.n	800510c <HAL_ADC_IRQHandler+0x124>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a64      	ldr	r2, [pc, #400]	; (8005298 <HAL_ADC_IRQHandler+0x2b0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d102      	bne.n	8005112 <HAL_ADC_IRQHandler+0x12a>
 800510c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005110:	e000      	b.n	8005114 <HAL_ADC_IRQHandler+0x12c>
 8005112:	4b64      	ldr	r3, [pc, #400]	; (80052a4 <HAL_ADC_IRQHandler+0x2bc>)
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005122:	2b00      	cmp	r3, #0
 8005124:	d139      	bne.n	800519a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800512c:	2b00      	cmp	r3, #0
 800512e:	d134      	bne.n	800519a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b08      	cmp	r3, #8
 800513c:	d12d      	bne.n	800519a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d11a      	bne.n	8005182 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 020c 	bic.w	r2, r2, #12
 800515a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d112      	bne.n	800519a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	f043 0201 	orr.w	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
 8005180:	e00b      	b.n	800519a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f043 0210 	orr.w	r2, r3, #16
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff fbd8 	bl	8004950 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	220c      	movs	r2, #12
 80051a6:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d106      	bne.n	80051c4 <HAL_ADC_IRQHandler+0x1dc>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d00f      	beq.n	80051e4 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	f040 8143 	bne.w	800545a <HAL_ADC_IRQHandler+0x472>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	f040 813b 	bne.w	800545a <HAL_ADC_IRQHandler+0x472>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051f8:	d004      	beq.n	8005204 <HAL_ADC_IRQHandler+0x21c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a26      	ldr	r2, [pc, #152]	; (8005298 <HAL_ADC_IRQHandler+0x2b0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d106      	bne.n	8005212 <HAL_ADC_IRQHandler+0x22a>
 8005204:	4b25      	ldr	r3, [pc, #148]	; (800529c <HAL_ADC_IRQHandler+0x2b4>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	2b00      	cmp	r3, #0
 800520e:	d03e      	beq.n	800528e <HAL_ADC_IRQHandler+0x2a6>
 8005210:	e005      	b.n	800521e <HAL_ADC_IRQHandler+0x236>
 8005212:	4b23      	ldr	r3, [pc, #140]	; (80052a0 <HAL_ADC_IRQHandler+0x2b8>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	2b00      	cmp	r3, #0
 800521c:	d037      	beq.n	800528e <HAL_ADC_IRQHandler+0x2a6>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005226:	d004      	beq.n	8005232 <HAL_ADC_IRQHandler+0x24a>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1a      	ldr	r2, [pc, #104]	; (8005298 <HAL_ADC_IRQHandler+0x2b0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d106      	bne.n	8005240 <HAL_ADC_IRQHandler+0x258>
 8005232:	4b1a      	ldr	r3, [pc, #104]	; (800529c <HAL_ADC_IRQHandler+0x2b4>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	2b05      	cmp	r3, #5
 800523c:	d027      	beq.n	800528e <HAL_ADC_IRQHandler+0x2a6>
 800523e:	e005      	b.n	800524c <HAL_ADC_IRQHandler+0x264>
 8005240:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <HAL_ADC_IRQHandler+0x2b8>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	2b05      	cmp	r3, #5
 800524a:	d020      	beq.n	800528e <HAL_ADC_IRQHandler+0x2a6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005254:	d004      	beq.n	8005260 <HAL_ADC_IRQHandler+0x278>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a0f      	ldr	r2, [pc, #60]	; (8005298 <HAL_ADC_IRQHandler+0x2b0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d106      	bne.n	800526e <HAL_ADC_IRQHandler+0x286>
 8005260:	4b0e      	ldr	r3, [pc, #56]	; (800529c <HAL_ADC_IRQHandler+0x2b4>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	2b09      	cmp	r3, #9
 800526a:	d010      	beq.n	800528e <HAL_ADC_IRQHandler+0x2a6>
 800526c:	e005      	b.n	800527a <HAL_ADC_IRQHandler+0x292>
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <HAL_ADC_IRQHandler+0x2b8>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 031f 	and.w	r3, r3, #31
 8005276:	2b09      	cmp	r3, #9
 8005278:	d009      	beq.n	800528e <HAL_ADC_IRQHandler+0x2a6>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005282:	d004      	beq.n	800528e <HAL_ADC_IRQHandler+0x2a6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a06      	ldr	r2, [pc, #24]	; (80052a4 <HAL_ADC_IRQHandler+0x2bc>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d10c      	bne.n	80052a8 <HAL_ADC_IRQHandler+0x2c0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	e017      	b.n	80052c8 <HAL_ADC_IRQHandler+0x2e0>
 8005298:	50000100 	.word	0x50000100
 800529c:	50000300 	.word	0x50000300
 80052a0:	50000700 	.word	0x50000700
 80052a4:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052b0:	d004      	beq.n	80052bc <HAL_ADC_IRQHandler+0x2d4>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a5b      	ldr	r2, [pc, #364]	; (8005424 <HAL_ADC_IRQHandler+0x43c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d102      	bne.n	80052c2 <HAL_ADC_IRQHandler+0x2da>
 80052bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80052c0:	e000      	b.n	80052c4 <HAL_ADC_IRQHandler+0x2dc>
 80052c2:	4b59      	ldr	r3, [pc, #356]	; (8005428 <HAL_ADC_IRQHandler+0x440>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f040 80ba 	bne.w	800544c <HAL_ADC_IRQHandler+0x464>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00d      	beq.n	80052fe <HAL_ADC_IRQHandler+0x316>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f040 80ad 	bne.w	800544c <HAL_ADC_IRQHandler+0x464>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f040 80a7 	bne.w	800544c <HAL_ADC_IRQHandler+0x464>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005308:	2b40      	cmp	r3, #64	; 0x40
 800530a:	f040 809f 	bne.w	800544c <HAL_ADC_IRQHandler+0x464>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005316:	d004      	beq.n	8005322 <HAL_ADC_IRQHandler+0x33a>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a41      	ldr	r2, [pc, #260]	; (8005424 <HAL_ADC_IRQHandler+0x43c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d106      	bne.n	8005330 <HAL_ADC_IRQHandler+0x348>
 8005322:	4b42      	ldr	r3, [pc, #264]	; (800542c <HAL_ADC_IRQHandler+0x444>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	2b00      	cmp	r3, #0
 800532c:	d03e      	beq.n	80053ac <HAL_ADC_IRQHandler+0x3c4>
 800532e:	e005      	b.n	800533c <HAL_ADC_IRQHandler+0x354>
 8005330:	4b3f      	ldr	r3, [pc, #252]	; (8005430 <HAL_ADC_IRQHandler+0x448>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	2b00      	cmp	r3, #0
 800533a:	d037      	beq.n	80053ac <HAL_ADC_IRQHandler+0x3c4>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005344:	d004      	beq.n	8005350 <HAL_ADC_IRQHandler+0x368>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a36      	ldr	r2, [pc, #216]	; (8005424 <HAL_ADC_IRQHandler+0x43c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d106      	bne.n	800535e <HAL_ADC_IRQHandler+0x376>
 8005350:	4b36      	ldr	r3, [pc, #216]	; (800542c <HAL_ADC_IRQHandler+0x444>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 031f 	and.w	r3, r3, #31
 8005358:	2b06      	cmp	r3, #6
 800535a:	d027      	beq.n	80053ac <HAL_ADC_IRQHandler+0x3c4>
 800535c:	e005      	b.n	800536a <HAL_ADC_IRQHandler+0x382>
 800535e:	4b34      	ldr	r3, [pc, #208]	; (8005430 <HAL_ADC_IRQHandler+0x448>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 031f 	and.w	r3, r3, #31
 8005366:	2b06      	cmp	r3, #6
 8005368:	d020      	beq.n	80053ac <HAL_ADC_IRQHandler+0x3c4>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005372:	d004      	beq.n	800537e <HAL_ADC_IRQHandler+0x396>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a2a      	ldr	r2, [pc, #168]	; (8005424 <HAL_ADC_IRQHandler+0x43c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d106      	bne.n	800538c <HAL_ADC_IRQHandler+0x3a4>
 800537e:	4b2b      	ldr	r3, [pc, #172]	; (800542c <HAL_ADC_IRQHandler+0x444>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	2b07      	cmp	r3, #7
 8005388:	d010      	beq.n	80053ac <HAL_ADC_IRQHandler+0x3c4>
 800538a:	e005      	b.n	8005398 <HAL_ADC_IRQHandler+0x3b0>
 800538c:	4b28      	ldr	r3, [pc, #160]	; (8005430 <HAL_ADC_IRQHandler+0x448>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	2b07      	cmp	r3, #7
 8005396:	d009      	beq.n	80053ac <HAL_ADC_IRQHandler+0x3c4>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053a0:	d004      	beq.n	80053ac <HAL_ADC_IRQHandler+0x3c4>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a20      	ldr	r2, [pc, #128]	; (8005428 <HAL_ADC_IRQHandler+0x440>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d104      	bne.n	80053b6 <HAL_ADC_IRQHandler+0x3ce>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	e00f      	b.n	80053d6 <HAL_ADC_IRQHandler+0x3ee>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053be:	d004      	beq.n	80053ca <HAL_ADC_IRQHandler+0x3e2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a17      	ldr	r2, [pc, #92]	; (8005424 <HAL_ADC_IRQHandler+0x43c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d102      	bne.n	80053d0 <HAL_ADC_IRQHandler+0x3e8>
 80053ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80053ce:	e000      	b.n	80053d2 <HAL_ADC_IRQHandler+0x3ea>
 80053d0:	4b15      	ldr	r3, [pc, #84]	; (8005428 <HAL_ADC_IRQHandler+0x440>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d135      	bne.n	800544c <HAL_ADC_IRQHandler+0x464>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d122      	bne.n	8005434 <HAL_ADC_IRQHandler+0x44c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053fc:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005412:	2b00      	cmp	r3, #0
 8005414:	d11a      	bne.n	800544c <HAL_ADC_IRQHandler+0x464>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f043 0201 	orr.w	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	641a      	str	r2, [r3, #64]	; 0x40
 8005422:	e013      	b.n	800544c <HAL_ADC_IRQHandler+0x464>
 8005424:	50000100 	.word	0x50000100
 8005428:	50000400 	.word	0x50000400
 800542c:	50000300 	.word	0x50000300
 8005430:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	f043 0210 	orr.w	r2, r3, #16
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005444:	f043 0201 	orr.w	r2, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f8db 	bl	8005608 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2260      	movs	r2, #96	; 0x60
 8005458:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	2b80      	cmp	r3, #128	; 0x80
 8005466:	d113      	bne.n	8005490 <HAL_ADC_IRQHandler+0x4a8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	d10c      	bne.n	8005490 <HAL_ADC_IRQHandler+0x4a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fa6e 	bl	8004964 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2280      	movs	r2, #128	; 0x80
 800548e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549e:	d115      	bne.n	80054cc <HAL_ADC_IRQHandler+0x4e4>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ae:	d10d      	bne.n	80054cc <HAL_ADC_IRQHandler+0x4e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f8b7 	bl	8005630 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054ca:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054da:	d115      	bne.n	8005508 <HAL_ADC_IRQHandler+0x520>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ea:	d10d      	bne.n	8005508 <HAL_ADC_IRQHandler+0x520>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f8a3 	bl	8005644 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005506:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b10      	cmp	r3, #16
 8005514:	d149      	bne.n	80055aa <HAL_ADC_IRQHandler+0x5c2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b10      	cmp	r3, #16
 8005522:	d142      	bne.n	80055aa <HAL_ADC_IRQHandler+0x5c2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005528:	2b01      	cmp	r3, #1
 800552a:	d102      	bne.n	8005532 <HAL_ADC_IRQHandler+0x54a>
    {
      overrun_error = 1U;
 800552c:	2301      	movs	r3, #1
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e025      	b.n	800557e <HAL_ADC_IRQHandler+0x596>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800553a:	d004      	beq.n	8005546 <HAL_ADC_IRQHandler+0x55e>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a2e      	ldr	r2, [pc, #184]	; (80055fc <HAL_ADC_IRQHandler+0x614>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d101      	bne.n	800554a <HAL_ADC_IRQHandler+0x562>
 8005546:	4b2e      	ldr	r3, [pc, #184]	; (8005600 <HAL_ADC_IRQHandler+0x618>)
 8005548:	e000      	b.n	800554c <HAL_ADC_IRQHandler+0x564>
 800554a:	4b2e      	ldr	r3, [pc, #184]	; (8005604 <HAL_ADC_IRQHandler+0x61c>)
 800554c:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	2b00      	cmp	r3, #0
 8005558:	d109      	bne.n	800556e <HAL_ADC_IRQHandler+0x586>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d10a      	bne.n	800557e <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 8005568:	2301      	movs	r3, #1
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	e007      	b.n	800557e <HAL_ADC_IRQHandler+0x596>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 800557a:	2301      	movs	r3, #1
 800557c:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d10e      	bne.n	80055a2 <HAL_ADC_IRQHandler+0x5ba>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005594:	f043 0202 	orr.w	r2, r3, #2
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff f9eb 	bl	8004978 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2210      	movs	r2, #16
 80055a8:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b8:	d11b      	bne.n	80055f2 <HAL_ADC_IRQHandler+0x60a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c8:	d113      	bne.n	80055f2 <HAL_ADC_IRQHandler+0x60a>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	f043 0208 	orr.w	r2, r3, #8
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055ea:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f815 	bl	800561c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80055f2:	bf00      	nop
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	50000100 	.word	0x50000100
 8005600:	50000300 	.word	0x50000300
 8005604:	50000700 	.word	0x50000700

08005608 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005658:	b480      	push	{r7}
 800565a:	b09b      	sub	sp, #108	; 0x6c
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <HAL_ADC_ConfigChannel+0x22>
 8005676:	2302      	movs	r3, #2
 8005678:	e2ca      	b.n	8005c10 <HAL_ADC_ConfigChannel+0x5b8>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	f040 82ae 	bne.w	8005bee <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b04      	cmp	r3, #4
 8005698:	d81c      	bhi.n	80056d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	4613      	mov	r3, r2
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	4413      	add	r3, r2
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	461a      	mov	r2, r3
 80056ae:	231f      	movs	r3, #31
 80056b0:	4093      	lsls	r3, r2
 80056b2:	43db      	mvns	r3, r3
 80056b4:	4019      	ands	r1, r3
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	4613      	mov	r3, r2
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	4413      	add	r3, r2
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	fa00 f203 	lsl.w	r2, r0, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30
 80056d2:	e063      	b.n	800579c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b09      	cmp	r3, #9
 80056da:	d81e      	bhi.n	800571a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	4613      	mov	r3, r2
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	4413      	add	r3, r2
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	3b1e      	subs	r3, #30
 80056f0:	221f      	movs	r2, #31
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	43db      	mvns	r3, r3
 80056f8:	4019      	ands	r1, r3
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	4413      	add	r3, r2
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	3b1e      	subs	r3, #30
 800570c:	fa00 f203 	lsl.w	r2, r0, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	635a      	str	r2, [r3, #52]	; 0x34
 8005718:	e040      	b.n	800579c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b0e      	cmp	r3, #14
 8005720:	d81e      	bhi.n	8005760 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	4613      	mov	r3, r2
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	4413      	add	r3, r2
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	3b3c      	subs	r3, #60	; 0x3c
 8005736:	221f      	movs	r2, #31
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	43db      	mvns	r3, r3
 800573e:	4019      	ands	r1, r3
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	4413      	add	r3, r2
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	3b3c      	subs	r3, #60	; 0x3c
 8005752:	fa00 f203 	lsl.w	r2, r0, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	639a      	str	r2, [r3, #56]	; 0x38
 800575e:	e01d      	b.n	800579c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	4413      	add	r3, r2
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	3b5a      	subs	r3, #90	; 0x5a
 8005774:	221f      	movs	r2, #31
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	43db      	mvns	r3, r3
 800577c:	4019      	ands	r1, r3
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	4413      	add	r3, r2
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	3b5a      	subs	r3, #90	; 0x5a
 8005790:	fa00 f203 	lsl.w	r2, r0, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 030c 	and.w	r3, r3, #12
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f040 80e5 	bne.w	8005976 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b09      	cmp	r3, #9
 80057b2:	d91c      	bls.n	80057ee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6999      	ldr	r1, [r3, #24]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	3b1e      	subs	r3, #30
 80057c6:	2207      	movs	r2, #7
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	4019      	ands	r1, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6898      	ldr	r0, [r3, #8]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	4613      	mov	r3, r2
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	4413      	add	r3, r2
 80057de:	3b1e      	subs	r3, #30
 80057e0:	fa00 f203 	lsl.w	r2, r0, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	619a      	str	r2, [r3, #24]
 80057ec:	e019      	b.n	8005822 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6959      	ldr	r1, [r3, #20]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	4413      	add	r3, r2
 80057fe:	2207      	movs	r2, #7
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	43db      	mvns	r3, r3
 8005806:	4019      	ands	r1, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	6898      	ldr	r0, [r3, #8]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	4613      	mov	r3, r2
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	4413      	add	r3, r2
 8005816:	fa00 f203 	lsl.w	r2, r0, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	08db      	lsrs	r3, r3, #3
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	3b01      	subs	r3, #1
 8005840:	2b03      	cmp	r3, #3
 8005842:	d84f      	bhi.n	80058e4 <HAL_ADC_ConfigChannel+0x28c>
 8005844:	a201      	add	r2, pc, #4	; (adr r2, 800584c <HAL_ADC_ConfigChannel+0x1f4>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	0800585d 	.word	0x0800585d
 8005850:	0800587f 	.word	0x0800587f
 8005854:	080058a1 	.word	0x080058a1
 8005858:	080058c3 	.word	0x080058c3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005862:	4b9a      	ldr	r3, [pc, #616]	; (8005acc <HAL_ADC_ConfigChannel+0x474>)
 8005864:	4013      	ands	r3, r2
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	0691      	lsls	r1, r2, #26
 800586c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800586e:	430a      	orrs	r2, r1
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800587a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800587c:	e07e      	b.n	800597c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005884:	4b91      	ldr	r3, [pc, #580]	; (8005acc <HAL_ADC_ConfigChannel+0x474>)
 8005886:	4013      	ands	r3, r2
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	6812      	ldr	r2, [r2, #0]
 800588c:	0691      	lsls	r1, r2, #26
 800588e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005890:	430a      	orrs	r2, r1
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800589c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800589e:	e06d      	b.n	800597c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80058a6:	4b89      	ldr	r3, [pc, #548]	; (8005acc <HAL_ADC_ConfigChannel+0x474>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	0691      	lsls	r1, r2, #26
 80058b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058b2:	430a      	orrs	r2, r1
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80058be:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80058c0:	e05c      	b.n	800597c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80058c8:	4b80      	ldr	r3, [pc, #512]	; (8005acc <HAL_ADC_ConfigChannel+0x474>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	6812      	ldr	r2, [r2, #0]
 80058d0:	0691      	lsls	r1, r2, #26
 80058d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058d4:	430a      	orrs	r2, r1
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80058e0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80058e2:	e04b      	b.n	800597c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	069b      	lsls	r3, r3, #26
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d107      	bne.n	8005908 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005906:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800590e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	069b      	lsls	r3, r3, #26
 8005918:	429a      	cmp	r2, r3
 800591a:	d107      	bne.n	800592c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800592a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005932:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	069b      	lsls	r3, r3, #26
 800593c:	429a      	cmp	r2, r3
 800593e:	d107      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800594e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005956:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	069b      	lsls	r3, r3, #26
 8005960:	429a      	cmp	r2, r3
 8005962:	d10a      	bne.n	800597a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005972:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005974:	e001      	b.n	800597a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8005976:	bf00      	nop
 8005978:	e000      	b.n	800597c <HAL_ADC_ConfigChannel+0x324>
      break;
 800597a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b01      	cmp	r3, #1
 8005988:	d108      	bne.n	800599c <HAL_ADC_ConfigChannel+0x344>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_ADC_ConfigChannel+0x344>
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <HAL_ADC_ConfigChannel+0x346>
 800599c:	2300      	movs	r3, #0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f040 8130 	bne.w	8005c04 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d00f      	beq.n	80059cc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2201      	movs	r2, #1
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	43da      	mvns	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	400a      	ands	r2, r1
 80059c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80059ca:	e049      	b.n	8005a60 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2201      	movs	r2, #1
 80059da:	409a      	lsls	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b09      	cmp	r3, #9
 80059ec:	d91c      	bls.n	8005a28 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6999      	ldr	r1, [r3, #24]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	3b1b      	subs	r3, #27
 8005a00:	2207      	movs	r2, #7
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	43db      	mvns	r3, r3
 8005a08:	4019      	ands	r1, r3
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	6898      	ldr	r0, [r3, #8]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4613      	mov	r3, r2
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	4413      	add	r3, r2
 8005a18:	3b1b      	subs	r3, #27
 8005a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	619a      	str	r2, [r3, #24]
 8005a26:	e01b      	b.n	8005a60 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6959      	ldr	r1, [r3, #20]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	4613      	mov	r3, r2
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	4413      	add	r3, r2
 8005a3a:	2207      	movs	r2, #7
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	43db      	mvns	r3, r3
 8005a42:	4019      	ands	r1, r3
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	6898      	ldr	r0, [r3, #8]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	4613      	mov	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	4413      	add	r3, r2
 8005a54:	fa00 f203 	lsl.w	r2, r0, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a68:	d004      	beq.n	8005a74 <HAL_ADC_ConfigChannel+0x41c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <HAL_ADC_ConfigChannel+0x478>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d101      	bne.n	8005a78 <HAL_ADC_ConfigChannel+0x420>
 8005a74:	4b17      	ldr	r3, [pc, #92]	; (8005ad4 <HAL_ADC_ConfigChannel+0x47c>)
 8005a76:	e000      	b.n	8005a7a <HAL_ADC_ConfigChannel+0x422>
 8005a78:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <HAL_ADC_ConfigChannel+0x480>)
 8005a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b10      	cmp	r3, #16
 8005a82:	d105      	bne.n	8005a90 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d015      	beq.n	8005abc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005a94:	2b11      	cmp	r3, #17
 8005a96:	d105      	bne.n	8005aa4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00b      	beq.n	8005abc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005aa8:	2b12      	cmp	r3, #18
 8005aaa:	f040 80ab 	bne.w	8005c04 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 80a4 	bne.w	8005c04 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ac4:	d10a      	bne.n	8005adc <HAL_ADC_ConfigChannel+0x484>
 8005ac6:	4b02      	ldr	r3, [pc, #8]	; (8005ad0 <HAL_ADC_ConfigChannel+0x478>)
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	e022      	b.n	8005b12 <HAL_ADC_ConfigChannel+0x4ba>
 8005acc:	83fff000 	.word	0x83fff000
 8005ad0:	50000100 	.word	0x50000100
 8005ad4:	50000300 	.word	0x50000300
 8005ad8:	50000700 	.word	0x50000700
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a4e      	ldr	r2, [pc, #312]	; (8005c1c <HAL_ADC_ConfigChannel+0x5c4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d103      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x496>
 8005ae6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	e011      	b.n	8005b12 <HAL_ADC_ConfigChannel+0x4ba>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a4b      	ldr	r2, [pc, #300]	; (8005c20 <HAL_ADC_ConfigChannel+0x5c8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d102      	bne.n	8005afe <HAL_ADC_ConfigChannel+0x4a6>
 8005af8:	4b4a      	ldr	r3, [pc, #296]	; (8005c24 <HAL_ADC_ConfigChannel+0x5cc>)
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	e009      	b.n	8005b12 <HAL_ADC_ConfigChannel+0x4ba>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a48      	ldr	r2, [pc, #288]	; (8005c24 <HAL_ADC_ConfigChannel+0x5cc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d102      	bne.n	8005b0e <HAL_ADC_ConfigChannel+0x4b6>
 8005b08:	4b45      	ldr	r3, [pc, #276]	; (8005c20 <HAL_ADC_ConfigChannel+0x5c8>)
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e001      	b.n	8005b12 <HAL_ADC_ConfigChannel+0x4ba>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 0303 	and.w	r3, r3, #3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d108      	bne.n	8005b32 <HAL_ADC_ConfigChannel+0x4da>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_ADC_ConfigChannel+0x4da>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <HAL_ADC_ConfigChannel+0x4dc>
 8005b32:	2300      	movs	r3, #0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d150      	bne.n	8005bda <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005b38:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d010      	beq.n	8005b60 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d107      	bne.n	8005b5a <HAL_ADC_ConfigChannel+0x502>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_ADC_ConfigChannel+0x502>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <HAL_ADC_ConfigChannel+0x504>
 8005b5a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d13c      	bne.n	8005bda <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d11d      	bne.n	8005ba4 <HAL_ADC_ConfigChannel+0x54c>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b70:	d118      	bne.n	8005ba4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b7c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b7e:	4b2a      	ldr	r3, [pc, #168]	; (8005c28 <HAL_ADC_ConfigChannel+0x5d0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a2a      	ldr	r2, [pc, #168]	; (8005c2c <HAL_ADC_ConfigChannel+0x5d4>)
 8005b84:	fba2 2303 	umull	r2, r3, r2, r3
 8005b88:	0c9a      	lsrs	r2, r3, #18
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005b94:	e002      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1f9      	bne.n	8005b96 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005ba2:	e02e      	b.n	8005c02 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b11      	cmp	r3, #17
 8005baa:	d10b      	bne.n	8005bc4 <HAL_ADC_ConfigChannel+0x56c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bb4:	d106      	bne.n	8005bc4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bc0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005bc2:	e01e      	b.n	8005c02 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b12      	cmp	r3, #18
 8005bca:	d11a      	bne.n	8005c02 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005bd8:	e013      	b.n	8005c02 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	f043 0220 	orr.w	r2, r3, #32
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005bec:	e00a      	b.n	8005c04 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	f043 0220 	orr.w	r2, r3, #32
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005c00:	e000      	b.n	8005c04 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005c02:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005c0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	376c      	adds	r7, #108	; 0x6c
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	50000100 	.word	0x50000100
 8005c20:	50000400 	.word	0x50000400
 8005c24:	50000500 	.word	0x50000500
 8005c28:	2000012c 	.word	0x2000012c
 8005c2c:	431bde83 	.word	0x431bde83

08005c30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b099      	sub	sp, #100	; 0x64
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c48:	d102      	bne.n	8005c50 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8005c4a:	4b6d      	ldr	r3, [pc, #436]	; (8005e00 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005c4c:	60bb      	str	r3, [r7, #8]
 8005c4e:	e01a      	b.n	8005c86 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a6a      	ldr	r2, [pc, #424]	; (8005e00 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d103      	bne.n	8005c62 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8005c5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005c5e:	60bb      	str	r3, [r7, #8]
 8005c60:	e011      	b.n	8005c86 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a67      	ldr	r2, [pc, #412]	; (8005e04 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d102      	bne.n	8005c72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005c6c:	4b66      	ldr	r3, [pc, #408]	; (8005e08 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005c6e:	60bb      	str	r3, [r7, #8]
 8005c70:	e009      	b.n	8005c86 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a64      	ldr	r2, [pc, #400]	; (8005e08 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d102      	bne.n	8005c82 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005c7c:	4b61      	ldr	r3, [pc, #388]	; (8005e04 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	e001      	b.n	8005c86 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005c82:	2300      	movs	r3, #0
 8005c84:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e0b0      	b.n	8005df2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d101      	bne.n	8005c9e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e0a9      	b.n	8005df2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f040 808d 	bne.w	8005dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f040 8086 	bne.w	8005dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ccc:	d004      	beq.n	8005cd8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a4b      	ldr	r2, [pc, #300]	; (8005e00 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d101      	bne.n	8005cdc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005cd8:	4b4c      	ldr	r3, [pc, #304]	; (8005e0c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8005cda:	e000      	b.n	8005cde <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005cdc:	4b4c      	ldr	r3, [pc, #304]	; (8005e10 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8005cde:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d040      	beq.n	8005d6a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	6859      	ldr	r1, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cfa:	035b      	lsls	r3, r3, #13
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d02:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d108      	bne.n	8005d24 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8005d24:	2300      	movs	r3, #0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d15c      	bne.n	8005de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d107      	bne.n	8005d46 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8005d46:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d14b      	bne.n	8005de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005d54:	f023 030f 	bic.w	r3, r3, #15
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	6811      	ldr	r1, [r2, #0]
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	6892      	ldr	r2, [r2, #8]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	431a      	orrs	r2, r3
 8005d64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d66:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d68:	e03c      	b.n	8005de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d74:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d108      	bne.n	8005d96 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005d96:	2300      	movs	r3, #0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d123      	bne.n	8005de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d107      	bne.n	8005db8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005db8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d112      	bne.n	8005de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005dc6:	f023 030f 	bic.w	r3, r3, #15
 8005dca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dcc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005dce:	e009      	b.n	8005de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	f043 0220 	orr.w	r2, r3, #32
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005de2:	e000      	b.n	8005de6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005de4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005dee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8005df2:	4618      	mov	r0, r3
 8005df4:	3764      	adds	r7, #100	; 0x64
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	50000100 	.word	0x50000100
 8005e04:	50000400 	.word	0x50000400
 8005e08:	50000500 	.word	0x50000500
 8005e0c:	50000300 	.word	0x50000300
 8005e10:	50000700 	.word	0x50000700

08005e14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d108      	bne.n	8005e40 <ADC_Enable+0x2c>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <ADC_Enable+0x2c>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <ADC_Enable+0x2e>
 8005e40:	2300      	movs	r3, #0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d143      	bne.n	8005ece <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	4b22      	ldr	r3, [pc, #136]	; (8005ed8 <ADC_Enable+0xc4>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00d      	beq.n	8005e70 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	f043 0210 	orr.w	r2, r3, #16
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e64:	f043 0201 	orr.w	r2, r3, #1
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e02f      	b.n	8005ed0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0201 	orr.w	r2, r2, #1
 8005e7e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005e80:	f7fe fd36 	bl	80048f0 <HAL_GetTick>
 8005e84:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005e86:	e01b      	b.n	8005ec0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e88:	f7fe fd32 	bl	80048f0 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d914      	bls.n	8005ec0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d00d      	beq.n	8005ec0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	f043 0210 	orr.w	r2, r3, #16
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb4:	f043 0201 	orr.w	r2, r3, #1
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e007      	b.n	8005ed0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d1dc      	bne.n	8005e88 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	8000003f 	.word	0x8000003f

08005edc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d108      	bne.n	8005f08 <ADC_Disable+0x2c>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <ADC_Disable+0x2c>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <ADC_Disable+0x2e>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d047      	beq.n	8005f9e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 030d 	and.w	r3, r3, #13
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d10f      	bne.n	8005f3c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0202 	orr.w	r2, r2, #2
 8005f2a:	609a      	str	r2, [r3, #8]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2203      	movs	r2, #3
 8005f32:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005f34:	f7fe fcdc 	bl	80048f0 <HAL_GetTick>
 8005f38:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005f3a:	e029      	b.n	8005f90 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	f043 0210 	orr.w	r2, r3, #16
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4c:	f043 0201 	orr.w	r2, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e023      	b.n	8005fa0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005f58:	f7fe fcca 	bl	80048f0 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d914      	bls.n	8005f90 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d10d      	bne.n	8005f90 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	f043 0210 	orr.w	r2, r3, #16
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f84:	f043 0201 	orr.w	r2, r3, #1
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e007      	b.n	8005fa0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d0dc      	beq.n	8005f58 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <__NVIC_SetPriorityGrouping+0x44>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fda:	4a04      	ldr	r2, [pc, #16]	; (8005fec <__NVIC_SetPriorityGrouping+0x44>)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	60d3      	str	r3, [r2, #12]
}
 8005fe0:	bf00      	nop
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	e000ed00 	.word	0xe000ed00

08005ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ff4:	4b04      	ldr	r3, [pc, #16]	; (8006008 <__NVIC_GetPriorityGrouping+0x18>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	0a1b      	lsrs	r3, r3, #8
 8005ffa:	f003 0307 	and.w	r3, r3, #7
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	e000ed00 	.word	0xe000ed00

0800600c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800601a:	2b00      	cmp	r3, #0
 800601c:	db0b      	blt.n	8006036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	f003 021f 	and.w	r2, r3, #31
 8006024:	4907      	ldr	r1, [pc, #28]	; (8006044 <__NVIC_EnableIRQ+0x38>)
 8006026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	2001      	movs	r0, #1
 800602e:	fa00 f202 	lsl.w	r2, r0, r2
 8006032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	e000e100 	.word	0xe000e100

08006048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	4603      	mov	r3, r0
 8006050:	6039      	str	r1, [r7, #0]
 8006052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006058:	2b00      	cmp	r3, #0
 800605a:	db0a      	blt.n	8006072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	490c      	ldr	r1, [pc, #48]	; (8006094 <__NVIC_SetPriority+0x4c>)
 8006062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006066:	0112      	lsls	r2, r2, #4
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	440b      	add	r3, r1
 800606c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006070:	e00a      	b.n	8006088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	b2da      	uxtb	r2, r3
 8006076:	4908      	ldr	r1, [pc, #32]	; (8006098 <__NVIC_SetPriority+0x50>)
 8006078:	79fb      	ldrb	r3, [r7, #7]
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	3b04      	subs	r3, #4
 8006080:	0112      	lsls	r2, r2, #4
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	440b      	add	r3, r1
 8006086:	761a      	strb	r2, [r3, #24]
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	e000e100 	.word	0xe000e100
 8006098:	e000ed00 	.word	0xe000ed00

0800609c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800609c:	b480      	push	{r7}
 800609e:	b089      	sub	sp, #36	; 0x24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f1c3 0307 	rsb	r3, r3, #7
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	bf28      	it	cs
 80060ba:	2304      	movcs	r3, #4
 80060bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	3304      	adds	r3, #4
 80060c2:	2b06      	cmp	r3, #6
 80060c4:	d902      	bls.n	80060cc <NVIC_EncodePriority+0x30>
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	3b03      	subs	r3, #3
 80060ca:	e000      	b.n	80060ce <NVIC_EncodePriority+0x32>
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060d0:	f04f 32ff 	mov.w	r2, #4294967295
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	43da      	mvns	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	401a      	ands	r2, r3
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060e4:	f04f 31ff 	mov.w	r1, #4294967295
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	fa01 f303 	lsl.w	r3, r1, r3
 80060ee:	43d9      	mvns	r1, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060f4:	4313      	orrs	r3, r2
         );
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3724      	adds	r7, #36	; 0x24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3b01      	subs	r3, #1
 8006110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006114:	d301      	bcc.n	800611a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006116:	2301      	movs	r3, #1
 8006118:	e00f      	b.n	800613a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800611a:	4a0a      	ldr	r2, [pc, #40]	; (8006144 <SysTick_Config+0x40>)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3b01      	subs	r3, #1
 8006120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006122:	210f      	movs	r1, #15
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	f7ff ff8e 	bl	8006048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800612c:	4b05      	ldr	r3, [pc, #20]	; (8006144 <SysTick_Config+0x40>)
 800612e:	2200      	movs	r2, #0
 8006130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006132:	4b04      	ldr	r3, [pc, #16]	; (8006144 <SysTick_Config+0x40>)
 8006134:	2207      	movs	r2, #7
 8006136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	e000e010 	.word	0xe000e010

08006148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff ff29 	bl	8005fa8 <__NVIC_SetPriorityGrouping>
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b086      	sub	sp, #24
 8006162:	af00      	add	r7, sp, #0
 8006164:	4603      	mov	r3, r0
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	607a      	str	r2, [r7, #4]
 800616a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006170:	f7ff ff3e 	bl	8005ff0 <__NVIC_GetPriorityGrouping>
 8006174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	6978      	ldr	r0, [r7, #20]
 800617c:	f7ff ff8e 	bl	800609c <NVIC_EncodePriority>
 8006180:	4602      	mov	r2, r0
 8006182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006186:	4611      	mov	r1, r2
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff ff5d 	bl	8006048 <__NVIC_SetPriority>
}
 800618e:	bf00      	nop
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	4603      	mov	r3, r0
 800619e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff ff31 	bl	800600c <__NVIC_EnableIRQ>
}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff ffa2 	bl	8006104 <SysTick_Config>
 80061c0:	4603      	mov	r3, r0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d008      	beq.n	80061ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2204      	movs	r2, #4
 80061e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e020      	b.n	8006230 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 020e 	bic.w	r2, r2, #14
 80061fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0201 	bic.w	r2, r2, #1
 800620c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006216:	2101      	movs	r1, #1
 8006218:	fa01 f202 	lsl.w	r2, r1, r2
 800621c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800624e:	2b02      	cmp	r3, #2
 8006250:	d005      	beq.n	800625e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2204      	movs	r2, #4
 8006256:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	73fb      	strb	r3, [r7, #15]
 800625c:	e027      	b.n	80062ae <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 020e 	bic.w	r2, r2, #14
 800626c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0201 	bic.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006286:	2101      	movs	r1, #1
 8006288:	fa01 f202 	lsl.w	r2, r1, r2
 800628c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	4798      	blx	r3
    } 
  }
  return status;
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80062c2:	2300      	movs	r3, #0
 80062c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062c6:	e154      	b.n	8006572 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	2101      	movs	r1, #1
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	fa01 f303 	lsl.w	r3, r1, r3
 80062d4:	4013      	ands	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8146 	beq.w	800656c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d005      	beq.n	80062f8 <HAL_GPIO_Init+0x40>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f003 0303 	and.w	r3, r3, #3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d130      	bne.n	800635a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	2203      	movs	r2, #3
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	43db      	mvns	r3, r3
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4013      	ands	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800632e:	2201      	movs	r2, #1
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	43db      	mvns	r3, r3
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4013      	ands	r3, r2
 800633c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	091b      	lsrs	r3, r3, #4
 8006344:	f003 0201 	and.w	r2, r3, #1
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	2b03      	cmp	r3, #3
 8006364:	d017      	beq.n	8006396 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	2203      	movs	r2, #3
 8006372:	fa02 f303 	lsl.w	r3, r2, r3
 8006376:	43db      	mvns	r3, r3
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4013      	ands	r3, r2
 800637c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	fa02 f303 	lsl.w	r3, r2, r3
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d123      	bne.n	80063ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	08da      	lsrs	r2, r3, #3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3208      	adds	r2, #8
 80063aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	220f      	movs	r2, #15
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	43db      	mvns	r3, r3
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4013      	ands	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	691a      	ldr	r2, [r3, #16]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	08da      	lsrs	r2, r3, #3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3208      	adds	r2, #8
 80063e4:	6939      	ldr	r1, [r7, #16]
 80063e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	2203      	movs	r2, #3
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	43db      	mvns	r3, r3
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4013      	ands	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f003 0203 	and.w	r2, r3, #3
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 80a0 	beq.w	800656c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800642c:	4b58      	ldr	r3, [pc, #352]	; (8006590 <HAL_GPIO_Init+0x2d8>)
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	4a57      	ldr	r2, [pc, #348]	; (8006590 <HAL_GPIO_Init+0x2d8>)
 8006432:	f043 0301 	orr.w	r3, r3, #1
 8006436:	6193      	str	r3, [r2, #24]
 8006438:	4b55      	ldr	r3, [pc, #340]	; (8006590 <HAL_GPIO_Init+0x2d8>)
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	60bb      	str	r3, [r7, #8]
 8006442:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006444:	4a53      	ldr	r2, [pc, #332]	; (8006594 <HAL_GPIO_Init+0x2dc>)
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	089b      	lsrs	r3, r3, #2
 800644a:	3302      	adds	r3, #2
 800644c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006450:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	220f      	movs	r2, #15
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	43db      	mvns	r3, r3
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4013      	ands	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800646e:	d019      	beq.n	80064a4 <HAL_GPIO_Init+0x1ec>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a49      	ldr	r2, [pc, #292]	; (8006598 <HAL_GPIO_Init+0x2e0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d013      	beq.n	80064a0 <HAL_GPIO_Init+0x1e8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a48      	ldr	r2, [pc, #288]	; (800659c <HAL_GPIO_Init+0x2e4>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00d      	beq.n	800649c <HAL_GPIO_Init+0x1e4>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a47      	ldr	r2, [pc, #284]	; (80065a0 <HAL_GPIO_Init+0x2e8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d007      	beq.n	8006498 <HAL_GPIO_Init+0x1e0>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a46      	ldr	r2, [pc, #280]	; (80065a4 <HAL_GPIO_Init+0x2ec>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d101      	bne.n	8006494 <HAL_GPIO_Init+0x1dc>
 8006490:	2304      	movs	r3, #4
 8006492:	e008      	b.n	80064a6 <HAL_GPIO_Init+0x1ee>
 8006494:	2305      	movs	r3, #5
 8006496:	e006      	b.n	80064a6 <HAL_GPIO_Init+0x1ee>
 8006498:	2303      	movs	r3, #3
 800649a:	e004      	b.n	80064a6 <HAL_GPIO_Init+0x1ee>
 800649c:	2302      	movs	r3, #2
 800649e:	e002      	b.n	80064a6 <HAL_GPIO_Init+0x1ee>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <HAL_GPIO_Init+0x1ee>
 80064a4:	2300      	movs	r3, #0
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	f002 0203 	and.w	r2, r2, #3
 80064ac:	0092      	lsls	r2, r2, #2
 80064ae:	4093      	lsls	r3, r2
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80064b6:	4937      	ldr	r1, [pc, #220]	; (8006594 <HAL_GPIO_Init+0x2dc>)
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	089b      	lsrs	r3, r3, #2
 80064bc:	3302      	adds	r3, #2
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064c4:	4b38      	ldr	r3, [pc, #224]	; (80065a8 <HAL_GPIO_Init+0x2f0>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	43db      	mvns	r3, r3
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4013      	ands	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80064e8:	4a2f      	ldr	r2, [pc, #188]	; (80065a8 <HAL_GPIO_Init+0x2f0>)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80064ee:	4b2e      	ldr	r3, [pc, #184]	; (80065a8 <HAL_GPIO_Init+0x2f0>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	43db      	mvns	r3, r3
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4013      	ands	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006512:	4a25      	ldr	r2, [pc, #148]	; (80065a8 <HAL_GPIO_Init+0x2f0>)
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006518:	4b23      	ldr	r3, [pc, #140]	; (80065a8 <HAL_GPIO_Init+0x2f0>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	43db      	mvns	r3, r3
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4013      	ands	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800653c:	4a1a      	ldr	r2, [pc, #104]	; (80065a8 <HAL_GPIO_Init+0x2f0>)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006542:	4b19      	ldr	r3, [pc, #100]	; (80065a8 <HAL_GPIO_Init+0x2f0>)
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	43db      	mvns	r3, r3
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4013      	ands	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006566:	4a10      	ldr	r2, [pc, #64]	; (80065a8 <HAL_GPIO_Init+0x2f0>)
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	3301      	adds	r3, #1
 8006570:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	fa22 f303 	lsr.w	r3, r2, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	f47f aea3 	bne.w	80062c8 <HAL_GPIO_Init+0x10>
  }
}
 8006582:	bf00      	nop
 8006584:	bf00      	nop
 8006586:	371c      	adds	r7, #28
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	40021000 	.word	0x40021000
 8006594:	40010000 	.word	0x40010000
 8006598:	48000400 	.word	0x48000400
 800659c:	48000800 	.word	0x48000800
 80065a0:	48000c00 	.word	0x48000c00
 80065a4:	48001000 	.word	0x48001000
 80065a8:	40010400 	.word	0x40010400

080065ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	887b      	ldrh	r3, [r7, #2]
 80065be:	4013      	ands	r3, r2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80065c4:	2301      	movs	r3, #1
 80065c6:	73fb      	strb	r3, [r7, #15]
 80065c8:	e001      	b.n	80065ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	807b      	strh	r3, [r7, #2]
 80065e8:	4613      	mov	r3, r2
 80065ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065ec:	787b      	ldrb	r3, [r7, #1]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80065f2:	887a      	ldrh	r2, [r7, #2]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80065f8:	e002      	b.n	8006600 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80065fa:	887a      	ldrh	r2, [r7, #2]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800661e:	887a      	ldrh	r2, [r7, #2]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4013      	ands	r3, r2
 8006624:	041a      	lsls	r2, r3, #16
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	43d9      	mvns	r1, r3
 800662a:	887b      	ldrh	r3, [r7, #2]
 800662c:	400b      	ands	r3, r1
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	619a      	str	r2, [r3, #24]
}
 8006634:	bf00      	nop
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800664a:	4b08      	ldr	r3, [pc, #32]	; (800666c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	88fb      	ldrh	r3, [r7, #6]
 8006650:	4013      	ands	r3, r2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d006      	beq.n	8006664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006656:	4a05      	ldr	r2, [pc, #20]	; (800666c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006658:	88fb      	ldrh	r3, [r7, #6]
 800665a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800665c:	88fb      	ldrh	r3, [r7, #6]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 f806 	bl	8006670 <HAL_GPIO_EXTI_Callback>
  }
}
 8006664:	bf00      	nop
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40010400 	.word	0x40010400

08006670 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b082      	sub	sp, #8
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e081      	b.n	800679c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7fa fe61 	bl	8001374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2224      	movs	r2, #36	; 0x24
 80066b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0201 	bic.w	r2, r2, #1
 80066c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d107      	bne.n	8006700 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066fc:	609a      	str	r2, [r3, #8]
 80066fe:	e006      	b.n	800670e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800670c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	2b02      	cmp	r3, #2
 8006714:	d104      	bne.n	8006720 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800671e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6812      	ldr	r2, [r2, #0]
 800672a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800672e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006732:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006742:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691a      	ldr	r2, [r3, #16]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69d9      	ldr	r1, [r3, #28]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1a      	ldr	r2, [r3, #32]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 0201 	orr.w	r2, r2, #1
 800677c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2220      	movs	r2, #32
 8006788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d138      	bne.n	800682c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d101      	bne.n	80067c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067c4:	2302      	movs	r3, #2
 80067c6:	e032      	b.n	800682e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2224      	movs	r2, #36	; 0x24
 80067d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0201 	bic.w	r2, r2, #1
 80067e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6819      	ldr	r1, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	e000      	b.n	800682e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800682c:	2302      	movs	r3, #2
  }
}
 800682e:	4618      	mov	r0, r3
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b20      	cmp	r3, #32
 800684e:	d139      	bne.n	80068c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800685a:	2302      	movs	r3, #2
 800685c:	e033      	b.n	80068c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2224      	movs	r2, #36	; 0x24
 800686a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800688c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4313      	orrs	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	e000      	b.n	80068c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068c4:	2302      	movs	r3, #2
  }
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80068d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d4:	b08b      	sub	sp, #44	; 0x2c
 80068d6:	af06      	add	r7, sp, #24
 80068d8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e0d0      	b.n	8006a86 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d106      	bne.n	80068fe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7fa fe79 	bl	80015f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2203      	movs	r2, #3
 8006902:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f003 fdfc 	bl	800a508 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006910:	2300      	movs	r3, #0
 8006912:	73fb      	strb	r3, [r7, #15]
 8006914:	e04c      	b.n	80069b0 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	440b      	add	r3, r1
 8006926:	3301      	adds	r3, #1
 8006928:	2201      	movs	r2, #1
 800692a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	4613      	mov	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	440b      	add	r3, r1
 800693c:	7bfa      	ldrb	r2, [r7, #15]
 800693e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006940:	7bfa      	ldrb	r2, [r7, #15]
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	b298      	uxth	r0, r3
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	440b      	add	r3, r1
 8006952:	3336      	adds	r3, #54	; 0x36
 8006954:	4602      	mov	r2, r0
 8006956:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	6879      	ldr	r1, [r7, #4]
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	4613      	mov	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	440b      	add	r3, r1
 8006968:	3303      	adds	r3, #3
 800696a:	2200      	movs	r2, #0
 800696c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800696e:	7bfa      	ldrb	r2, [r7, #15]
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	00db      	lsls	r3, r3, #3
 800697a:	440b      	add	r3, r1
 800697c:	3338      	adds	r3, #56	; 0x38
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006982:	7bfa      	ldrb	r2, [r7, #15]
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	440b      	add	r3, r1
 8006990:	333c      	adds	r3, #60	; 0x3c
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006996:	7bfa      	ldrb	r2, [r7, #15]
 8006998:	6879      	ldr	r1, [r7, #4]
 800699a:	4613      	mov	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	440b      	add	r3, r1
 80069a4:	3340      	adds	r3, #64	; 0x40
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	3301      	adds	r3, #1
 80069ae:	73fb      	strb	r3, [r7, #15]
 80069b0:	7bfa      	ldrb	r2, [r7, #15]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d3ad      	bcc.n	8006916 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069ba:	2300      	movs	r3, #0
 80069bc:	73fb      	strb	r3, [r7, #15]
 80069be:	e044      	b.n	8006a4a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80069c0:	7bfa      	ldrb	r2, [r7, #15]
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	440b      	add	r3, r1
 80069ce:	f203 1369 	addw	r3, r3, #361	; 0x169
 80069d2:	2200      	movs	r2, #0
 80069d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80069d6:	7bfa      	ldrb	r2, [r7, #15]
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	440b      	add	r3, r1
 80069e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80069e8:	7bfa      	ldrb	r2, [r7, #15]
 80069ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80069ec:	7bfa      	ldrb	r2, [r7, #15]
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	440b      	add	r3, r1
 80069fa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80069fe:	2200      	movs	r2, #0
 8006a00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006a02:	7bfa      	ldrb	r2, [r7, #15]
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	440b      	add	r3, r1
 8006a10:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006a18:	7bfa      	ldrb	r2, [r7, #15]
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	440b      	add	r3, r1
 8006a26:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006a2e:	7bfa      	ldrb	r2, [r7, #15]
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	440b      	add	r3, r1
 8006a3c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	3301      	adds	r3, #1
 8006a48:	73fb      	strb	r3, [r7, #15]
 8006a4a:	7bfa      	ldrb	r2, [r7, #15]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d3b5      	bcc.n	80069c0 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	603b      	str	r3, [r7, #0]
 8006a5a:	687e      	ldr	r6, [r7, #4]
 8006a5c:	466d      	mov	r5, sp
 8006a5e:	f106 0410 	add.w	r4, r6, #16
 8006a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	602b      	str	r3, [r5, #0]
 8006a6a:	1d33      	adds	r3, r6, #4
 8006a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a6e:	6838      	ldr	r0, [r7, #0]
 8006a70:	f003 fd65 	bl	800a53e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006aa0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d102      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	f001 b823 	b.w	8007afc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 817d 	beq.w	8006dc6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006acc:	4bbc      	ldr	r3, [pc, #752]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f003 030c 	and.w	r3, r3, #12
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d00c      	beq.n	8006af2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006ad8:	4bb9      	ldr	r3, [pc, #740]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f003 030c 	and.w	r3, r3, #12
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d15c      	bne.n	8006b9e <HAL_RCC_OscConfig+0x10e>
 8006ae4:	4bb6      	ldr	r3, [pc, #728]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af0:	d155      	bne.n	8006b9e <HAL_RCC_OscConfig+0x10e>
 8006af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006af6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006afa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006afe:	fa93 f3a3 	rbit	r3, r3
 8006b02:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006b06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b0a:	fab3 f383 	clz	r3, r3
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	095b      	lsrs	r3, r3, #5
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f043 0301 	orr.w	r3, r3, #1
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d102      	bne.n	8006b24 <HAL_RCC_OscConfig+0x94>
 8006b1e:	4ba8      	ldr	r3, [pc, #672]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	e015      	b.n	8006b50 <HAL_RCC_OscConfig+0xc0>
 8006b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b28:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b2c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006b30:	fa93 f3a3 	rbit	r3, r3
 8006b34:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b3c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006b40:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006b44:	fa93 f3a3 	rbit	r3, r3
 8006b48:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006b4c:	4b9c      	ldr	r3, [pc, #624]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b54:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006b58:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006b5c:	fa92 f2a2 	rbit	r2, r2
 8006b60:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006b64:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006b68:	fab2 f282 	clz	r2, r2
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	f042 0220 	orr.w	r2, r2, #32
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	f002 021f 	and.w	r2, r2, #31
 8006b78:	2101      	movs	r1, #1
 8006b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b7e:	4013      	ands	r3, r2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 811f 	beq.w	8006dc4 <HAL_RCC_OscConfig+0x334>
 8006b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f040 8116 	bne.w	8006dc4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	f000 bfaf 	b.w	8007afc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ba2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bae:	d106      	bne.n	8006bbe <HAL_RCC_OscConfig+0x12e>
 8006bb0:	4b83      	ldr	r3, [pc, #524]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a82      	ldr	r2, [pc, #520]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	e036      	b.n	8006c2c <HAL_RCC_OscConfig+0x19c>
 8006bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10c      	bne.n	8006be8 <HAL_RCC_OscConfig+0x158>
 8006bce:	4b7c      	ldr	r3, [pc, #496]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a7b      	ldr	r2, [pc, #492]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	4b79      	ldr	r3, [pc, #484]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a78      	ldr	r2, [pc, #480]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	e021      	b.n	8006c2c <HAL_RCC_OscConfig+0x19c>
 8006be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bf8:	d10c      	bne.n	8006c14 <HAL_RCC_OscConfig+0x184>
 8006bfa:	4b71      	ldr	r3, [pc, #452]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a70      	ldr	r2, [pc, #448]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	4b6e      	ldr	r3, [pc, #440]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a6d      	ldr	r2, [pc, #436]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	e00b      	b.n	8006c2c <HAL_RCC_OscConfig+0x19c>
 8006c14:	4b6a      	ldr	r3, [pc, #424]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a69      	ldr	r2, [pc, #420]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	4b67      	ldr	r3, [pc, #412]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a66      	ldr	r2, [pc, #408]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c2a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c2c:	4b64      	ldr	r3, [pc, #400]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	f023 020f 	bic.w	r2, r3, #15
 8006c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	495f      	ldr	r1, [pc, #380]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d059      	beq.n	8006d0a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c56:	f7fd fe4b 	bl	80048f0 <HAL_GetTick>
 8006c5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c5e:	e00a      	b.n	8006c76 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c60:	f7fd fe46 	bl	80048f0 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	2b64      	cmp	r3, #100	; 0x64
 8006c6e:	d902      	bls.n	8006c76 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	f000 bf43 	b.w	8007afc <HAL_RCC_OscConfig+0x106c>
 8006c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c7a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c7e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006c82:	fa93 f3a3 	rbit	r3, r3
 8006c86:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006c8a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c8e:	fab3 f383 	clz	r3, r3
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	095b      	lsrs	r3, r3, #5
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d102      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x218>
 8006ca2:	4b47      	ldr	r3, [pc, #284]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	e015      	b.n	8006cd4 <HAL_RCC_OscConfig+0x244>
 8006ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006cb4:	fa93 f3a3 	rbit	r3, r3
 8006cb8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cc0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006cc4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006cc8:	fa93 f3a3 	rbit	r3, r3
 8006ccc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006cd0:	4b3b      	ldr	r3, [pc, #236]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006cd8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006cdc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006ce0:	fa92 f2a2 	rbit	r2, r2
 8006ce4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006ce8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006cec:	fab2 f282 	clz	r2, r2
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	f042 0220 	orr.w	r2, r2, #32
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	f002 021f 	and.w	r2, r2, #31
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8006d02:	4013      	ands	r3, r2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0ab      	beq.n	8006c60 <HAL_RCC_OscConfig+0x1d0>
 8006d08:	e05d      	b.n	8006dc6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d0a:	f7fd fdf1 	bl	80048f0 <HAL_GetTick>
 8006d0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d12:	e00a      	b.n	8006d2a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d14:	f7fd fdec 	bl	80048f0 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b64      	cmp	r3, #100	; 0x64
 8006d22:	d902      	bls.n	8006d2a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	f000 bee9 	b.w	8007afc <HAL_RCC_OscConfig+0x106c>
 8006d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d2e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d32:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006d36:	fa93 f3a3 	rbit	r3, r3
 8006d3a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006d3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d42:	fab3 f383 	clz	r3, r3
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	095b      	lsrs	r3, r3, #5
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f043 0301 	orr.w	r3, r3, #1
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d102      	bne.n	8006d5c <HAL_RCC_OscConfig+0x2cc>
 8006d56:	4b1a      	ldr	r3, [pc, #104]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	e015      	b.n	8006d88 <HAL_RCC_OscConfig+0x2f8>
 8006d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d60:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d64:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006d68:	fa93 f3a3 	rbit	r3, r3
 8006d6c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d74:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006d78:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006d7c:	fa93 f3a3 	rbit	r3, r3
 8006d80:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006d84:	4b0e      	ldr	r3, [pc, #56]	; (8006dc0 <HAL_RCC_OscConfig+0x330>)
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d8c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006d90:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006d94:	fa92 f2a2 	rbit	r2, r2
 8006d98:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006d9c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006da0:	fab2 f282 	clz	r2, r2
 8006da4:	b2d2      	uxtb	r2, r2
 8006da6:	f042 0220 	orr.w	r2, r2, #32
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	f002 021f 	and.w	r2, r2, #31
 8006db0:	2101      	movs	r1, #1
 8006db2:	fa01 f202 	lsl.w	r2, r1, r2
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1ab      	bne.n	8006d14 <HAL_RCC_OscConfig+0x284>
 8006dbc:	e003      	b.n	8006dc6 <HAL_RCC_OscConfig+0x336>
 8006dbe:	bf00      	nop
 8006dc0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 817d 	beq.w	80070d6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006ddc:	4ba6      	ldr	r3, [pc, #664]	; (8007078 <HAL_RCC_OscConfig+0x5e8>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f003 030c 	and.w	r3, r3, #12
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00b      	beq.n	8006e00 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006de8:	4ba3      	ldr	r3, [pc, #652]	; (8007078 <HAL_RCC_OscConfig+0x5e8>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f003 030c 	and.w	r3, r3, #12
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d172      	bne.n	8006eda <HAL_RCC_OscConfig+0x44a>
 8006df4:	4ba0      	ldr	r3, [pc, #640]	; (8007078 <HAL_RCC_OscConfig+0x5e8>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d16c      	bne.n	8006eda <HAL_RCC_OscConfig+0x44a>
 8006e00:	2302      	movs	r3, #2
 8006e02:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e06:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006e0a:	fa93 f3a3 	rbit	r3, r3
 8006e0e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006e12:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e16:	fab3 f383 	clz	r3, r3
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f043 0301 	orr.w	r3, r3, #1
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d102      	bne.n	8006e30 <HAL_RCC_OscConfig+0x3a0>
 8006e2a:	4b93      	ldr	r3, [pc, #588]	; (8007078 <HAL_RCC_OscConfig+0x5e8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	e013      	b.n	8006e58 <HAL_RCC_OscConfig+0x3c8>
 8006e30:	2302      	movs	r3, #2
 8006e32:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e36:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006e3a:	fa93 f3a3 	rbit	r3, r3
 8006e3e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006e42:	2302      	movs	r3, #2
 8006e44:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006e48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006e4c:	fa93 f3a3 	rbit	r3, r3
 8006e50:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006e54:	4b88      	ldr	r3, [pc, #544]	; (8007078 <HAL_RCC_OscConfig+0x5e8>)
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	2202      	movs	r2, #2
 8006e5a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006e5e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006e62:	fa92 f2a2 	rbit	r2, r2
 8006e66:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006e6a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006e6e:	fab2 f282 	clz	r2, r2
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	f042 0220 	orr.w	r2, r2, #32
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	f002 021f 	and.w	r2, r2, #31
 8006e7e:	2101      	movs	r1, #1
 8006e80:	fa01 f202 	lsl.w	r2, r1, r2
 8006e84:	4013      	ands	r3, r2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x410>
 8006e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d002      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f000 be2e 	b.w	8007afc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea0:	4b75      	ldr	r3, [pc, #468]	; (8007078 <HAL_RCC_OscConfig+0x5e8>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	21f8      	movs	r1, #248	; 0xf8
 8006eb6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006ebe:	fa91 f1a1 	rbit	r1, r1
 8006ec2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006ec6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006eca:	fab1 f181 	clz	r1, r1
 8006ece:	b2c9      	uxtb	r1, r1
 8006ed0:	408b      	lsls	r3, r1
 8006ed2:	4969      	ldr	r1, [pc, #420]	; (8007078 <HAL_RCC_OscConfig+0x5e8>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ed8:	e0fd      	b.n	80070d6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 8088 	beq.w	8006ffc <HAL_RCC_OscConfig+0x56c>
 8006eec:	2301      	movs	r3, #1
 8006eee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006ef6:	fa93 f3a3 	rbit	r3, r3
 8006efa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006efe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f02:	fab3 f383 	clz	r3, r3
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	461a      	mov	r2, r3
 8006f14:	2301      	movs	r3, #1
 8006f16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f18:	f7fd fcea 	bl	80048f0 <HAL_GetTick>
 8006f1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f20:	e00a      	b.n	8006f38 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f22:	f7fd fce5 	bl	80048f0 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d902      	bls.n	8006f38 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	f000 bde2 	b.w	8007afc <HAL_RCC_OscConfig+0x106c>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f3e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006f42:	fa93 f3a3 	rbit	r3, r3
 8006f46:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006f4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f4e:	fab3 f383 	clz	r3, r3
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	f043 0301 	orr.w	r3, r3, #1
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d102      	bne.n	8006f68 <HAL_RCC_OscConfig+0x4d8>
 8006f62:	4b45      	ldr	r3, [pc, #276]	; (8007078 <HAL_RCC_OscConfig+0x5e8>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	e013      	b.n	8006f90 <HAL_RCC_OscConfig+0x500>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006f72:	fa93 f3a3 	rbit	r3, r3
 8006f76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006f80:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006f84:	fa93 f3a3 	rbit	r3, r3
 8006f88:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006f8c:	4b3a      	ldr	r3, [pc, #232]	; (8007078 <HAL_RCC_OscConfig+0x5e8>)
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	2202      	movs	r2, #2
 8006f92:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006f96:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006f9a:	fa92 f2a2 	rbit	r2, r2
 8006f9e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006fa2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006fa6:	fab2 f282 	clz	r2, r2
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	f042 0220 	orr.w	r2, r2, #32
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	f002 021f 	and.w	r2, r2, #31
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0af      	beq.n	8006f22 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fc2:	4b2d      	ldr	r3, [pc, #180]	; (8007078 <HAL_RCC_OscConfig+0x5e8>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	21f8      	movs	r1, #248	; 0xf8
 8006fd8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fdc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006fe0:	fa91 f1a1 	rbit	r1, r1
 8006fe4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006fe8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006fec:	fab1 f181 	clz	r1, r1
 8006ff0:	b2c9      	uxtb	r1, r1
 8006ff2:	408b      	lsls	r3, r1
 8006ff4:	4920      	ldr	r1, [pc, #128]	; (8007078 <HAL_RCC_OscConfig+0x5e8>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	600b      	str	r3, [r1, #0]
 8006ffa:	e06c      	b.n	80070d6 <HAL_RCC_OscConfig+0x646>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007002:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007006:	fa93 f3a3 	rbit	r3, r3
 800700a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800700e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007012:	fab3 f383 	clz	r3, r3
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800701c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	461a      	mov	r2, r3
 8007024:	2300      	movs	r3, #0
 8007026:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007028:	f7fd fc62 	bl	80048f0 <HAL_GetTick>
 800702c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007030:	e00a      	b.n	8007048 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007032:	f7fd fc5d 	bl	80048f0 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d902      	bls.n	8007048 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	f000 bd5a 	b.w	8007afc <HAL_RCC_OscConfig+0x106c>
 8007048:	2302      	movs	r3, #2
 800704a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800704e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007052:	fa93 f3a3 	rbit	r3, r3
 8007056:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800705a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800705e:	fab3 f383 	clz	r3, r3
 8007062:	b2db      	uxtb	r3, r3
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	b2db      	uxtb	r3, r3
 8007068:	f043 0301 	orr.w	r3, r3, #1
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b01      	cmp	r3, #1
 8007070:	d104      	bne.n	800707c <HAL_RCC_OscConfig+0x5ec>
 8007072:	4b01      	ldr	r3, [pc, #4]	; (8007078 <HAL_RCC_OscConfig+0x5e8>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	e015      	b.n	80070a4 <HAL_RCC_OscConfig+0x614>
 8007078:	40021000 	.word	0x40021000
 800707c:	2302      	movs	r3, #2
 800707e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007082:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007086:	fa93 f3a3 	rbit	r3, r3
 800708a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800708e:	2302      	movs	r3, #2
 8007090:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007094:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007098:	fa93 f3a3 	rbit	r3, r3
 800709c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80070a0:	4bc8      	ldr	r3, [pc, #800]	; (80073c4 <HAL_RCC_OscConfig+0x934>)
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	2202      	movs	r2, #2
 80070a6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80070aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80070ae:	fa92 f2a2 	rbit	r2, r2
 80070b2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80070b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80070ba:	fab2 f282 	clz	r2, r2
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	f042 0220 	orr.w	r2, r2, #32
 80070c4:	b2d2      	uxtb	r2, r2
 80070c6:	f002 021f 	and.w	r2, r2, #31
 80070ca:	2101      	movs	r1, #1
 80070cc:	fa01 f202 	lsl.w	r2, r1, r2
 80070d0:	4013      	ands	r3, r2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1ad      	bne.n	8007032 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 8110 	beq.w	800730c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d079      	beq.n	80071f0 <HAL_RCC_OscConfig+0x760>
 80070fc:	2301      	movs	r3, #1
 80070fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007102:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007106:	fa93 f3a3 	rbit	r3, r3
 800710a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800710e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007112:	fab3 f383 	clz	r3, r3
 8007116:	b2db      	uxtb	r3, r3
 8007118:	461a      	mov	r2, r3
 800711a:	4bab      	ldr	r3, [pc, #684]	; (80073c8 <HAL_RCC_OscConfig+0x938>)
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	461a      	mov	r2, r3
 8007122:	2301      	movs	r3, #1
 8007124:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007126:	f7fd fbe3 	bl	80048f0 <HAL_GetTick>
 800712a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800712e:	e00a      	b.n	8007146 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007130:	f7fd fbde 	bl	80048f0 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d902      	bls.n	8007146 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	f000 bcdb 	b.w	8007afc <HAL_RCC_OscConfig+0x106c>
 8007146:	2302      	movs	r3, #2
 8007148:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800714c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007150:	fa93 f3a3 	rbit	r3, r3
 8007154:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800715c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007160:	2202      	movs	r2, #2
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007168:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	fa93 f2a3 	rbit	r2, r3
 8007172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007184:	2202      	movs	r2, #2
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800718c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	fa93 f2a3 	rbit	r2, r3
 8007196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800719a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800719e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071a0:	4b88      	ldr	r3, [pc, #544]	; (80073c4 <HAL_RCC_OscConfig+0x934>)
 80071a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80071ac:	2102      	movs	r1, #2
 80071ae:	6019      	str	r1, [r3, #0]
 80071b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	fa93 f1a3 	rbit	r1, r3
 80071be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80071c6:	6019      	str	r1, [r3, #0]
  return result;
 80071c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	fab3 f383 	clz	r3, r3
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f003 031f 	and.w	r3, r3, #31
 80071e2:	2101      	movs	r1, #1
 80071e4:	fa01 f303 	lsl.w	r3, r1, r3
 80071e8:	4013      	ands	r3, r2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0a0      	beq.n	8007130 <HAL_RCC_OscConfig+0x6a0>
 80071ee:	e08d      	b.n	800730c <HAL_RCC_OscConfig+0x87c>
 80071f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80071f8:	2201      	movs	r2, #1
 80071fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007200:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	fa93 f2a3 	rbit	r2, r3
 800720a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800720e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007212:	601a      	str	r2, [r3, #0]
  return result;
 8007214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007218:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800721c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800721e:	fab3 f383 	clz	r3, r3
 8007222:	b2db      	uxtb	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	4b68      	ldr	r3, [pc, #416]	; (80073c8 <HAL_RCC_OscConfig+0x938>)
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	461a      	mov	r2, r3
 800722e:	2300      	movs	r3, #0
 8007230:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007232:	f7fd fb5d 	bl	80048f0 <HAL_GetTick>
 8007236:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800723a:	e00a      	b.n	8007252 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800723c:	f7fd fb58 	bl	80048f0 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	2b02      	cmp	r3, #2
 800724a:	d902      	bls.n	8007252 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	f000 bc55 	b.w	8007afc <HAL_RCC_OscConfig+0x106c>
 8007252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007256:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800725a:	2202      	movs	r2, #2
 800725c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800725e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007262:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	fa93 f2a3 	rbit	r2, r3
 800726c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007270:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800727a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800727e:	2202      	movs	r2, #2
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007286:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	fa93 f2a3 	rbit	r2, r3
 8007290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007294:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800729e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a2:	2202      	movs	r2, #2
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	fa93 f2a3 	rbit	r2, r3
 80072b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80072bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072be:	4b41      	ldr	r3, [pc, #260]	; (80073c4 <HAL_RCC_OscConfig+0x934>)
 80072c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80072ca:	2102      	movs	r1, #2
 80072cc:	6019      	str	r1, [r3, #0]
 80072ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	fa93 f1a3 	rbit	r1, r3
 80072dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80072e4:	6019      	str	r1, [r3, #0]
  return result;
 80072e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072ea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	fab3 f383 	clz	r3, r3
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	f003 031f 	and.w	r3, r3, #31
 8007300:	2101      	movs	r1, #1
 8007302:	fa01 f303 	lsl.w	r3, r1, r3
 8007306:	4013      	ands	r3, r2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d197      	bne.n	800723c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800730c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0304 	and.w	r3, r3, #4
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 81a1 	beq.w	8007664 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007322:	2300      	movs	r3, #0
 8007324:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007328:	4b26      	ldr	r3, [pc, #152]	; (80073c4 <HAL_RCC_OscConfig+0x934>)
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d116      	bne.n	8007362 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007334:	4b23      	ldr	r3, [pc, #140]	; (80073c4 <HAL_RCC_OscConfig+0x934>)
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	4a22      	ldr	r2, [pc, #136]	; (80073c4 <HAL_RCC_OscConfig+0x934>)
 800733a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800733e:	61d3      	str	r3, [r2, #28]
 8007340:	4b20      	ldr	r3, [pc, #128]	; (80073c4 <HAL_RCC_OscConfig+0x934>)
 8007342:	69db      	ldr	r3, [r3, #28]
 8007344:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800734c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007356:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800735a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800735c:	2301      	movs	r3, #1
 800735e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007362:	4b1a      	ldr	r3, [pc, #104]	; (80073cc <HAL_RCC_OscConfig+0x93c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736a:	2b00      	cmp	r3, #0
 800736c:	d11a      	bne.n	80073a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800736e:	4b17      	ldr	r3, [pc, #92]	; (80073cc <HAL_RCC_OscConfig+0x93c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a16      	ldr	r2, [pc, #88]	; (80073cc <HAL_RCC_OscConfig+0x93c>)
 8007374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007378:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800737a:	f7fd fab9 	bl	80048f0 <HAL_GetTick>
 800737e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007382:	e009      	b.n	8007398 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007384:	f7fd fab4 	bl	80048f0 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	2b64      	cmp	r3, #100	; 0x64
 8007392:	d901      	bls.n	8007398 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e3b1      	b.n	8007afc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007398:	4b0c      	ldr	r3, [pc, #48]	; (80073cc <HAL_RCC_OscConfig+0x93c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0ef      	beq.n	8007384 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d10d      	bne.n	80073d0 <HAL_RCC_OscConfig+0x940>
 80073b4:	4b03      	ldr	r3, [pc, #12]	; (80073c4 <HAL_RCC_OscConfig+0x934>)
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	4a02      	ldr	r2, [pc, #8]	; (80073c4 <HAL_RCC_OscConfig+0x934>)
 80073ba:	f043 0301 	orr.w	r3, r3, #1
 80073be:	6213      	str	r3, [r2, #32]
 80073c0:	e03c      	b.n	800743c <HAL_RCC_OscConfig+0x9ac>
 80073c2:	bf00      	nop
 80073c4:	40021000 	.word	0x40021000
 80073c8:	10908120 	.word	0x10908120
 80073cc:	40007000 	.word	0x40007000
 80073d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10c      	bne.n	80073fa <HAL_RCC_OscConfig+0x96a>
 80073e0:	4bc1      	ldr	r3, [pc, #772]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	4ac0      	ldr	r2, [pc, #768]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 80073e6:	f023 0301 	bic.w	r3, r3, #1
 80073ea:	6213      	str	r3, [r2, #32]
 80073ec:	4bbe      	ldr	r3, [pc, #760]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	4abd      	ldr	r2, [pc, #756]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 80073f2:	f023 0304 	bic.w	r3, r3, #4
 80073f6:	6213      	str	r3, [r2, #32]
 80073f8:	e020      	b.n	800743c <HAL_RCC_OscConfig+0x9ac>
 80073fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	2b05      	cmp	r3, #5
 8007408:	d10c      	bne.n	8007424 <HAL_RCC_OscConfig+0x994>
 800740a:	4bb7      	ldr	r3, [pc, #732]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	4ab6      	ldr	r2, [pc, #728]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 8007410:	f043 0304 	orr.w	r3, r3, #4
 8007414:	6213      	str	r3, [r2, #32]
 8007416:	4bb4      	ldr	r3, [pc, #720]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	4ab3      	ldr	r2, [pc, #716]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 800741c:	f043 0301 	orr.w	r3, r3, #1
 8007420:	6213      	str	r3, [r2, #32]
 8007422:	e00b      	b.n	800743c <HAL_RCC_OscConfig+0x9ac>
 8007424:	4bb0      	ldr	r3, [pc, #704]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	4aaf      	ldr	r2, [pc, #700]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	6213      	str	r3, [r2, #32]
 8007430:	4bad      	ldr	r3, [pc, #692]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	4aac      	ldr	r2, [pc, #688]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 8007436:	f023 0304 	bic.w	r3, r3, #4
 800743a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800743c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007440:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 8081 	beq.w	8007550 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800744e:	f7fd fa4f 	bl	80048f0 <HAL_GetTick>
 8007452:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007456:	e00b      	b.n	8007470 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007458:	f7fd fa4a 	bl	80048f0 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	f241 3288 	movw	r2, #5000	; 0x1388
 8007468:	4293      	cmp	r3, r2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e345      	b.n	8007afc <HAL_RCC_OscConfig+0x106c>
 8007470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007474:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007478:	2202      	movs	r2, #2
 800747a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800747c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007480:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	fa93 f2a3 	rbit	r2, r3
 800748a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800748e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007498:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800749c:	2202      	movs	r2, #2
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	fa93 f2a3 	rbit	r2, r3
 80074ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80074b6:	601a      	str	r2, [r3, #0]
  return result;
 80074b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80074c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074c2:	fab3 f383 	clz	r3, r3
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	095b      	lsrs	r3, r3, #5
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	f043 0302 	orr.w	r3, r3, #2
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d102      	bne.n	80074dc <HAL_RCC_OscConfig+0xa4c>
 80074d6:	4b84      	ldr	r3, [pc, #528]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	e013      	b.n	8007504 <HAL_RCC_OscConfig+0xa74>
 80074dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80074e4:	2202      	movs	r2, #2
 80074e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	fa93 f2a3 	rbit	r2, r3
 80074f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80074fe:	601a      	str	r2, [r3, #0]
 8007500:	4b79      	ldr	r3, [pc, #484]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007508:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800750c:	2102      	movs	r1, #2
 800750e:	6011      	str	r1, [r2, #0]
 8007510:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007514:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007518:	6812      	ldr	r2, [r2, #0]
 800751a:	fa92 f1a2 	rbit	r1, r2
 800751e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007522:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007526:	6011      	str	r1, [r2, #0]
  return result;
 8007528:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800752c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007530:	6812      	ldr	r2, [r2, #0]
 8007532:	fab2 f282 	clz	r2, r2
 8007536:	b2d2      	uxtb	r2, r2
 8007538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800753c:	b2d2      	uxtb	r2, r2
 800753e:	f002 021f 	and.w	r2, r2, #31
 8007542:	2101      	movs	r1, #1
 8007544:	fa01 f202 	lsl.w	r2, r1, r2
 8007548:	4013      	ands	r3, r2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d084      	beq.n	8007458 <HAL_RCC_OscConfig+0x9c8>
 800754e:	e07f      	b.n	8007650 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007550:	f7fd f9ce 	bl	80048f0 <HAL_GetTick>
 8007554:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007558:	e00b      	b.n	8007572 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800755a:	f7fd f9c9 	bl	80048f0 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	f241 3288 	movw	r2, #5000	; 0x1388
 800756a:	4293      	cmp	r3, r2
 800756c:	d901      	bls.n	8007572 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e2c4      	b.n	8007afc <HAL_RCC_OscConfig+0x106c>
 8007572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007576:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800757a:	2202      	movs	r2, #2
 800757c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800757e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007582:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	fa93 f2a3 	rbit	r2, r3
 800758c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007590:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800759a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800759e:	2202      	movs	r2, #2
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	fa93 f2a3 	rbit	r2, r3
 80075b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80075b8:	601a      	str	r2, [r3, #0]
  return result;
 80075ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075be:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80075c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075c4:	fab3 f383 	clz	r3, r3
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	095b      	lsrs	r3, r3, #5
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	f043 0302 	orr.w	r3, r3, #2
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d102      	bne.n	80075de <HAL_RCC_OscConfig+0xb4e>
 80075d8:	4b43      	ldr	r3, [pc, #268]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	e013      	b.n	8007606 <HAL_RCC_OscConfig+0xb76>
 80075de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80075e6:	2202      	movs	r2, #2
 80075e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	fa93 f2a3 	rbit	r2, r3
 80075f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	4b39      	ldr	r3, [pc, #228]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800760a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800760e:	2102      	movs	r1, #2
 8007610:	6011      	str	r1, [r2, #0]
 8007612:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007616:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800761a:	6812      	ldr	r2, [r2, #0]
 800761c:	fa92 f1a2 	rbit	r1, r2
 8007620:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007624:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007628:	6011      	str	r1, [r2, #0]
  return result;
 800762a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800762e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007632:	6812      	ldr	r2, [r2, #0]
 8007634:	fab2 f282 	clz	r2, r2
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800763e:	b2d2      	uxtb	r2, r2
 8007640:	f002 021f 	and.w	r2, r2, #31
 8007644:	2101      	movs	r1, #1
 8007646:	fa01 f202 	lsl.w	r2, r1, r2
 800764a:	4013      	ands	r3, r2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d184      	bne.n	800755a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007650:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007654:	2b01      	cmp	r3, #1
 8007656:	d105      	bne.n	8007664 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007658:	4b23      	ldr	r3, [pc, #140]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	4a22      	ldr	r2, [pc, #136]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 800765e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007662:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007668:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 8242 	beq.w	8007afa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007676:	4b1c      	ldr	r3, [pc, #112]	; (80076e8 <HAL_RCC_OscConfig+0xc58>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f003 030c 	and.w	r3, r3, #12
 800767e:	2b08      	cmp	r3, #8
 8007680:	f000 8213 	beq.w	8007aaa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007688:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	2b02      	cmp	r3, #2
 8007692:	f040 8162 	bne.w	800795a <HAL_RCC_OscConfig+0xeca>
 8007696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800769a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800769e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076a8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	fa93 f2a3 	rbit	r2, r3
 80076b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076b6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80076ba:	601a      	str	r2, [r3, #0]
  return result;
 80076bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80076c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076c6:	fab3 f383 	clz	r3, r3
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80076d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	461a      	mov	r2, r3
 80076d8:	2300      	movs	r3, #0
 80076da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076dc:	f7fd f908 	bl	80048f0 <HAL_GetTick>
 80076e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076e4:	e00c      	b.n	8007700 <HAL_RCC_OscConfig+0xc70>
 80076e6:	bf00      	nop
 80076e8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076ec:	f7fd f900 	bl	80048f0 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d901      	bls.n	8007700 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e1fd      	b.n	8007afc <HAL_RCC_OscConfig+0x106c>
 8007700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007704:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007708:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800770c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800770e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007712:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	fa93 f2a3 	rbit	r2, r3
 800771c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007720:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007724:	601a      	str	r2, [r3, #0]
  return result;
 8007726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800772a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800772e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007730:	fab3 f383 	clz	r3, r3
 8007734:	b2db      	uxtb	r3, r3
 8007736:	095b      	lsrs	r3, r3, #5
 8007738:	b2db      	uxtb	r3, r3
 800773a:	f043 0301 	orr.w	r3, r3, #1
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b01      	cmp	r3, #1
 8007742:	d102      	bne.n	800774a <HAL_RCC_OscConfig+0xcba>
 8007744:	4bb0      	ldr	r3, [pc, #704]	; (8007a08 <HAL_RCC_OscConfig+0xf78>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	e027      	b.n	800779a <HAL_RCC_OscConfig+0xd0a>
 800774a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800774e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800775c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	fa93 f2a3 	rbit	r2, r3
 8007766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800776a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007774:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007778:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007782:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	fa93 f2a3 	rbit	r2, r3
 800778c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007790:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	4b9c      	ldr	r3, [pc, #624]	; (8007a08 <HAL_RCC_OscConfig+0xf78>)
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800779e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80077a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80077a6:	6011      	str	r1, [r2, #0]
 80077a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077ac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80077b0:	6812      	ldr	r2, [r2, #0]
 80077b2:	fa92 f1a2 	rbit	r1, r2
 80077b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077ba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80077be:	6011      	str	r1, [r2, #0]
  return result;
 80077c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077c4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80077c8:	6812      	ldr	r2, [r2, #0]
 80077ca:	fab2 f282 	clz	r2, r2
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	f042 0220 	orr.w	r2, r2, #32
 80077d4:	b2d2      	uxtb	r2, r2
 80077d6:	f002 021f 	and.w	r2, r2, #31
 80077da:	2101      	movs	r1, #1
 80077dc:	fa01 f202 	lsl.w	r2, r1, r2
 80077e0:	4013      	ands	r3, r2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d182      	bne.n	80076ec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077e6:	4b88      	ldr	r3, [pc, #544]	; (8007a08 <HAL_RCC_OscConfig+0xf78>)
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80077ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80077fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	430b      	orrs	r3, r1
 8007808:	497f      	ldr	r1, [pc, #508]	; (8007a08 <HAL_RCC_OscConfig+0xf78>)
 800780a:	4313      	orrs	r3, r2
 800780c:	604b      	str	r3, [r1, #4]
 800780e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007812:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007816:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800781a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800781c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007820:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	fa93 f2a3 	rbit	r2, r3
 800782a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800782e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007832:	601a      	str	r2, [r3, #0]
  return result;
 8007834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007838:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800783c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800783e:	fab3 f383 	clz	r3, r3
 8007842:	b2db      	uxtb	r3, r3
 8007844:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007848:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	461a      	mov	r2, r3
 8007850:	2301      	movs	r3, #1
 8007852:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007854:	f7fd f84c 	bl	80048f0 <HAL_GetTick>
 8007858:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800785c:	e009      	b.n	8007872 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800785e:	f7fd f847 	bl	80048f0 <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e144      	b.n	8007afc <HAL_RCC_OscConfig+0x106c>
 8007872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007876:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800787a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800787e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007884:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	fa93 f2a3 	rbit	r2, r3
 800788e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007892:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007896:	601a      	str	r2, [r3, #0]
  return result;
 8007898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800789c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80078a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80078a2:	fab3 f383 	clz	r3, r3
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	095b      	lsrs	r3, r3, #5
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	f043 0301 	orr.w	r3, r3, #1
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d102      	bne.n	80078bc <HAL_RCC_OscConfig+0xe2c>
 80078b6:	4b54      	ldr	r3, [pc, #336]	; (8007a08 <HAL_RCC_OscConfig+0xf78>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	e027      	b.n	800790c <HAL_RCC_OscConfig+0xe7c>
 80078bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078c0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80078c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80078c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078ce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	fa93 f2a3 	rbit	r2, r3
 80078d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078dc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078e6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80078ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078f4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	fa93 f2a3 	rbit	r2, r3
 80078fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007902:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	4b3f      	ldr	r3, [pc, #252]	; (8007a08 <HAL_RCC_OscConfig+0xf78>)
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007910:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007914:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007918:	6011      	str	r1, [r2, #0]
 800791a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800791e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007922:	6812      	ldr	r2, [r2, #0]
 8007924:	fa92 f1a2 	rbit	r1, r2
 8007928:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800792c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007930:	6011      	str	r1, [r2, #0]
  return result;
 8007932:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007936:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800793a:	6812      	ldr	r2, [r2, #0]
 800793c:	fab2 f282 	clz	r2, r2
 8007940:	b2d2      	uxtb	r2, r2
 8007942:	f042 0220 	orr.w	r2, r2, #32
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	f002 021f 	and.w	r2, r2, #31
 800794c:	2101      	movs	r1, #1
 800794e:	fa01 f202 	lsl.w	r2, r1, r2
 8007952:	4013      	ands	r3, r2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d082      	beq.n	800785e <HAL_RCC_OscConfig+0xdce>
 8007958:	e0cf      	b.n	8007afa <HAL_RCC_OscConfig+0x106a>
 800795a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800795e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007962:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800796c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	fa93 f2a3 	rbit	r2, r3
 8007976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800797a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800797e:	601a      	str	r2, [r3, #0]
  return result;
 8007980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007984:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007988:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800798a:	fab3 f383 	clz	r3, r3
 800798e:	b2db      	uxtb	r3, r3
 8007990:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007994:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	461a      	mov	r2, r3
 800799c:	2300      	movs	r3, #0
 800799e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a0:	f7fc ffa6 	bl	80048f0 <HAL_GetTick>
 80079a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079a8:	e009      	b.n	80079be <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079aa:	f7fc ffa1 	bl	80048f0 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e09e      	b.n	8007afc <HAL_RCC_OscConfig+0x106c>
 80079be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079c2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80079c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80079ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079d0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	fa93 f2a3 	rbit	r2, r3
 80079da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079de:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80079e2:	601a      	str	r2, [r3, #0]
  return result;
 80079e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079e8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80079ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079ee:	fab3 f383 	clz	r3, r3
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	095b      	lsrs	r3, r3, #5
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d104      	bne.n	8007a0c <HAL_RCC_OscConfig+0xf7c>
 8007a02:	4b01      	ldr	r3, [pc, #4]	; (8007a08 <HAL_RCC_OscConfig+0xf78>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	e029      	b.n	8007a5c <HAL_RCC_OscConfig+0xfcc>
 8007a08:	40021000 	.word	0x40021000
 8007a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a10:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a1e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	fa93 f2a3 	rbit	r2, r3
 8007a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a36:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a44:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	fa93 f2a3 	rbit	r2, r3
 8007a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a52:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	4b2b      	ldr	r3, [pc, #172]	; (8007b08 <HAL_RCC_OscConfig+0x1078>)
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a60:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007a64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007a68:	6011      	str	r1, [r2, #0]
 8007a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a6e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007a72:	6812      	ldr	r2, [r2, #0]
 8007a74:	fa92 f1a2 	rbit	r1, r2
 8007a78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a7c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007a80:	6011      	str	r1, [r2, #0]
  return result;
 8007a82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a86:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007a8a:	6812      	ldr	r2, [r2, #0]
 8007a8c:	fab2 f282 	clz	r2, r2
 8007a90:	b2d2      	uxtb	r2, r2
 8007a92:	f042 0220 	orr.w	r2, r2, #32
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	f002 021f 	and.w	r2, r2, #31
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d180      	bne.n	80079aa <HAL_RCC_OscConfig+0xf1a>
 8007aa8:	e027      	b.n	8007afa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d101      	bne.n	8007abe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e01e      	b.n	8007afc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007abe:	4b12      	ldr	r3, [pc, #72]	; (8007b08 <HAL_RCC_OscConfig+0x1078>)
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007ac6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007aca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d10b      	bne.n	8007af6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007ade:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007ae2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d001      	beq.n	8007afa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e000      	b.n	8007afc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	40021000 	.word	0x40021000

08007b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b09e      	sub	sp, #120	; 0x78
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e162      	b.n	8007dea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b24:	4b90      	ldr	r3, [pc, #576]	; (8007d68 <HAL_RCC_ClockConfig+0x25c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0307 	and.w	r3, r3, #7
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d910      	bls.n	8007b54 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b32:	4b8d      	ldr	r3, [pc, #564]	; (8007d68 <HAL_RCC_ClockConfig+0x25c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f023 0207 	bic.w	r2, r3, #7
 8007b3a:	498b      	ldr	r1, [pc, #556]	; (8007d68 <HAL_RCC_ClockConfig+0x25c>)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b42:	4b89      	ldr	r3, [pc, #548]	; (8007d68 <HAL_RCC_ClockConfig+0x25c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d001      	beq.n	8007b54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e14a      	b.n	8007dea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b60:	4b82      	ldr	r3, [pc, #520]	; (8007d6c <HAL_RCC_ClockConfig+0x260>)
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	497f      	ldr	r1, [pc, #508]	; (8007d6c <HAL_RCC_ClockConfig+0x260>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 80dc 	beq.w	8007d38 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d13c      	bne.n	8007c02 <HAL_RCC_ClockConfig+0xf6>
 8007b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b8c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b90:	fa93 f3a3 	rbit	r3, r3
 8007b94:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b98:	fab3 f383 	clz	r3, r3
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	095b      	lsrs	r3, r3, #5
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	f043 0301 	orr.w	r3, r3, #1
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d102      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0xa6>
 8007bac:	4b6f      	ldr	r3, [pc, #444]	; (8007d6c <HAL_RCC_ClockConfig+0x260>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	e00f      	b.n	8007bd2 <HAL_RCC_ClockConfig+0xc6>
 8007bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bba:	fa93 f3a3 	rbit	r3, r3
 8007bbe:	667b      	str	r3, [r7, #100]	; 0x64
 8007bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bc4:	663b      	str	r3, [r7, #96]	; 0x60
 8007bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bc8:	fa93 f3a3 	rbit	r3, r3
 8007bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bce:	4b67      	ldr	r3, [pc, #412]	; (8007d6c <HAL_RCC_ClockConfig+0x260>)
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007bd6:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bda:	fa92 f2a2 	rbit	r2, r2
 8007bde:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007be0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007be2:	fab2 f282 	clz	r2, r2
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	f042 0220 	orr.w	r2, r2, #32
 8007bec:	b2d2      	uxtb	r2, r2
 8007bee:	f002 021f 	and.w	r2, r2, #31
 8007bf2:	2101      	movs	r1, #1
 8007bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d17b      	bne.n	8007cf6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e0f3      	b.n	8007dea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d13c      	bne.n	8007c84 <HAL_RCC_ClockConfig+0x178>
 8007c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c12:	fa93 f3a3 	rbit	r3, r3
 8007c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c1a:	fab3 f383 	clz	r3, r3
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	095b      	lsrs	r3, r3, #5
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	f043 0301 	orr.w	r3, r3, #1
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d102      	bne.n	8007c34 <HAL_RCC_ClockConfig+0x128>
 8007c2e:	4b4f      	ldr	r3, [pc, #316]	; (8007d6c <HAL_RCC_ClockConfig+0x260>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	e00f      	b.n	8007c54 <HAL_RCC_ClockConfig+0x148>
 8007c34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c3c:	fa93 f3a3 	rbit	r3, r3
 8007c40:	647b      	str	r3, [r7, #68]	; 0x44
 8007c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c46:	643b      	str	r3, [r7, #64]	; 0x40
 8007c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c4a:	fa93 f3a3 	rbit	r3, r3
 8007c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c50:	4b46      	ldr	r3, [pc, #280]	; (8007d6c <HAL_RCC_ClockConfig+0x260>)
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c58:	63ba      	str	r2, [r7, #56]	; 0x38
 8007c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c5c:	fa92 f2a2 	rbit	r2, r2
 8007c60:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c64:	fab2 f282 	clz	r2, r2
 8007c68:	b2d2      	uxtb	r2, r2
 8007c6a:	f042 0220 	orr.w	r2, r2, #32
 8007c6e:	b2d2      	uxtb	r2, r2
 8007c70:	f002 021f 	and.w	r2, r2, #31
 8007c74:	2101      	movs	r1, #1
 8007c76:	fa01 f202 	lsl.w	r2, r1, r2
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d13a      	bne.n	8007cf6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e0b2      	b.n	8007dea <HAL_RCC_ClockConfig+0x2de>
 8007c84:	2302      	movs	r3, #2
 8007c86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8a:	fa93 f3a3 	rbit	r3, r3
 8007c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c92:	fab3 f383 	clz	r3, r3
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	095b      	lsrs	r3, r3, #5
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f043 0301 	orr.w	r3, r3, #1
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d102      	bne.n	8007cac <HAL_RCC_ClockConfig+0x1a0>
 8007ca6:	4b31      	ldr	r3, [pc, #196]	; (8007d6c <HAL_RCC_ClockConfig+0x260>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	e00d      	b.n	8007cc8 <HAL_RCC_ClockConfig+0x1bc>
 8007cac:	2302      	movs	r3, #2
 8007cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb2:	fa93 f3a3 	rbit	r3, r3
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007cb8:	2302      	movs	r3, #2
 8007cba:	623b      	str	r3, [r7, #32]
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	fa93 f3a3 	rbit	r3, r3
 8007cc2:	61fb      	str	r3, [r7, #28]
 8007cc4:	4b29      	ldr	r3, [pc, #164]	; (8007d6c <HAL_RCC_ClockConfig+0x260>)
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	2202      	movs	r2, #2
 8007cca:	61ba      	str	r2, [r7, #24]
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	fa92 f2a2 	rbit	r2, r2
 8007cd2:	617a      	str	r2, [r7, #20]
  return result;
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	fab2 f282 	clz	r2, r2
 8007cda:	b2d2      	uxtb	r2, r2
 8007cdc:	f042 0220 	orr.w	r2, r2, #32
 8007ce0:	b2d2      	uxtb	r2, r2
 8007ce2:	f002 021f 	and.w	r2, r2, #31
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8007cec:	4013      	ands	r3, r2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e079      	b.n	8007dea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cf6:	4b1d      	ldr	r3, [pc, #116]	; (8007d6c <HAL_RCC_ClockConfig+0x260>)
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f023 0203 	bic.w	r2, r3, #3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	491a      	ldr	r1, [pc, #104]	; (8007d6c <HAL_RCC_ClockConfig+0x260>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d08:	f7fc fdf2 	bl	80048f0 <HAL_GetTick>
 8007d0c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d0e:	e00a      	b.n	8007d26 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d10:	f7fc fdee 	bl	80048f0 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e061      	b.n	8007dea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d26:	4b11      	ldr	r3, [pc, #68]	; (8007d6c <HAL_RCC_ClockConfig+0x260>)
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f003 020c 	and.w	r2, r3, #12
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d1eb      	bne.n	8007d10 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d38:	4b0b      	ldr	r3, [pc, #44]	; (8007d68 <HAL_RCC_ClockConfig+0x25c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d214      	bcs.n	8007d70 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d46:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <HAL_RCC_ClockConfig+0x25c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f023 0207 	bic.w	r2, r3, #7
 8007d4e:	4906      	ldr	r1, [pc, #24]	; (8007d68 <HAL_RCC_ClockConfig+0x25c>)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d56:	4b04      	ldr	r3, [pc, #16]	; (8007d68 <HAL_RCC_ClockConfig+0x25c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d005      	beq.n	8007d70 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e040      	b.n	8007dea <HAL_RCC_ClockConfig+0x2de>
 8007d68:	40022000 	.word	0x40022000
 8007d6c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d008      	beq.n	8007d8e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d7c:	4b1d      	ldr	r3, [pc, #116]	; (8007df4 <HAL_RCC_ClockConfig+0x2e8>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	491a      	ldr	r1, [pc, #104]	; (8007df4 <HAL_RCC_ClockConfig+0x2e8>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0308 	and.w	r3, r3, #8
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d009      	beq.n	8007dae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d9a:	4b16      	ldr	r3, [pc, #88]	; (8007df4 <HAL_RCC_ClockConfig+0x2e8>)
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	00db      	lsls	r3, r3, #3
 8007da8:	4912      	ldr	r1, [pc, #72]	; (8007df4 <HAL_RCC_ClockConfig+0x2e8>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007dae:	f000 f829 	bl	8007e04 <HAL_RCC_GetSysClockFreq>
 8007db2:	4601      	mov	r1, r0
 8007db4:	4b0f      	ldr	r3, [pc, #60]	; (8007df4 <HAL_RCC_ClockConfig+0x2e8>)
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dbc:	22f0      	movs	r2, #240	; 0xf0
 8007dbe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	fa92 f2a2 	rbit	r2, r2
 8007dc6:	60fa      	str	r2, [r7, #12]
  return result;
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	fab2 f282 	clz	r2, r2
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	40d3      	lsrs	r3, r2
 8007dd2:	4a09      	ldr	r2, [pc, #36]	; (8007df8 <HAL_RCC_ClockConfig+0x2ec>)
 8007dd4:	5cd3      	ldrb	r3, [r2, r3]
 8007dd6:	fa21 f303 	lsr.w	r3, r1, r3
 8007dda:	4a08      	ldr	r2, [pc, #32]	; (8007dfc <HAL_RCC_ClockConfig+0x2f0>)
 8007ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007dde:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <HAL_RCC_ClockConfig+0x2f4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fc fd40 	bl	8004868 <HAL_InitTick>
  
  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3778      	adds	r7, #120	; 0x78
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	40021000 	.word	0x40021000
 8007df8:	0800b69c 	.word	0x0800b69c
 8007dfc:	2000012c 	.word	0x2000012c
 8007e00:	20000130 	.word	0x20000130

08007e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b08b      	sub	sp, #44	; 0x2c
 8007e08:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]
 8007e0e:	2300      	movs	r3, #0
 8007e10:	61bb      	str	r3, [r7, #24]
 8007e12:	2300      	movs	r3, #0
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
 8007e16:	2300      	movs	r3, #0
 8007e18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007e1e:	4b29      	ldr	r3, [pc, #164]	; (8007ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f003 030c 	and.w	r3, r3, #12
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d002      	beq.n	8007e34 <HAL_RCC_GetSysClockFreq+0x30>
 8007e2e:	2b08      	cmp	r3, #8
 8007e30:	d003      	beq.n	8007e3a <HAL_RCC_GetSysClockFreq+0x36>
 8007e32:	e03c      	b.n	8007eae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007e34:	4b24      	ldr	r3, [pc, #144]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007e36:	623b      	str	r3, [r7, #32]
      break;
 8007e38:	e03c      	b.n	8007eb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007e40:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007e44:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	fa92 f2a2 	rbit	r2, r2
 8007e4c:	607a      	str	r2, [r7, #4]
  return result;
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	fab2 f282 	clz	r2, r2
 8007e54:	b2d2      	uxtb	r2, r2
 8007e56:	40d3      	lsrs	r3, r2
 8007e58:	4a1c      	ldr	r2, [pc, #112]	; (8007ecc <HAL_RCC_GetSysClockFreq+0xc8>)
 8007e5a:	5cd3      	ldrb	r3, [r2, r3]
 8007e5c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007e5e:	4b19      	ldr	r3, [pc, #100]	; (8007ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e62:	f003 030f 	and.w	r3, r3, #15
 8007e66:	220f      	movs	r2, #15
 8007e68:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	fa92 f2a2 	rbit	r2, r2
 8007e70:	60fa      	str	r2, [r7, #12]
  return result;
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	fab2 f282 	clz	r2, r2
 8007e78:	b2d2      	uxtb	r2, r2
 8007e7a:	40d3      	lsrs	r3, r2
 8007e7c:	4a14      	ldr	r2, [pc, #80]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007e7e:	5cd3      	ldrb	r3, [r2, r3]
 8007e80:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d008      	beq.n	8007e9e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007e8c:	4a0e      	ldr	r2, [pc, #56]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	fb02 f303 	mul.w	r3, r2, r3
 8007e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9c:	e004      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	4a0c      	ldr	r2, [pc, #48]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007ea2:	fb02 f303 	mul.w	r3, r2, r3
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	623b      	str	r3, [r7, #32]
      break;
 8007eac:	e002      	b.n	8007eb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007eae:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007eb0:	623b      	str	r3, [r7, #32]
      break;
 8007eb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	372c      	adds	r7, #44	; 0x2c
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	40021000 	.word	0x40021000
 8007ec8:	007a1200 	.word	0x007a1200
 8007ecc:	0800b6b4 	.word	0x0800b6b4
 8007ed0:	0800b6c4 	.word	0x0800b6c4
 8007ed4:	003d0900 	.word	0x003d0900

08007ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007edc:	4b03      	ldr	r3, [pc, #12]	; (8007eec <HAL_RCC_GetHCLKFreq+0x14>)
 8007ede:	681b      	ldr	r3, [r3, #0]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	2000012c 	.word	0x2000012c

08007ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007ef6:	f7ff ffef 	bl	8007ed8 <HAL_RCC_GetHCLKFreq>
 8007efa:	4601      	mov	r1, r0
 8007efc:	4b0b      	ldr	r3, [pc, #44]	; (8007f2c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f04:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007f08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	fa92 f2a2 	rbit	r2, r2
 8007f10:	603a      	str	r2, [r7, #0]
  return result;
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	fab2 f282 	clz	r2, r2
 8007f18:	b2d2      	uxtb	r2, r2
 8007f1a:	40d3      	lsrs	r3, r2
 8007f1c:	4a04      	ldr	r2, [pc, #16]	; (8007f30 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007f1e:	5cd3      	ldrb	r3, [r2, r3]
 8007f20:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	40021000 	.word	0x40021000
 8007f30:	0800b6ac 	.word	0x0800b6ac

08007f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007f3a:	f7ff ffcd 	bl	8007ed8 <HAL_RCC_GetHCLKFreq>
 8007f3e:	4601      	mov	r1, r0
 8007f40:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007f48:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007f4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	fa92 f2a2 	rbit	r2, r2
 8007f54:	603a      	str	r2, [r7, #0]
  return result;
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	fab2 f282 	clz	r2, r2
 8007f5c:	b2d2      	uxtb	r2, r2
 8007f5e:	40d3      	lsrs	r3, r2
 8007f60:	4a04      	ldr	r2, [pc, #16]	; (8007f74 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007f62:	5cd3      	ldrb	r3, [r2, r3]
 8007f64:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	40021000 	.word	0x40021000
 8007f74:	0800b6ac 	.word	0x0800b6ac

08007f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b092      	sub	sp, #72	; 0x48
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 80d4 	beq.w	8008144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f9c:	4b4e      	ldr	r3, [pc, #312]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10e      	bne.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fa8:	4b4b      	ldr	r3, [pc, #300]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	4a4a      	ldr	r2, [pc, #296]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fb2:	61d3      	str	r3, [r2, #28]
 8007fb4:	4b48      	ldr	r3, [pc, #288]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fbc:	60bb      	str	r3, [r7, #8]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fc6:	4b45      	ldr	r3, [pc, #276]	; (80080dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d118      	bne.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fd2:	4b42      	ldr	r3, [pc, #264]	; (80080dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a41      	ldr	r2, [pc, #260]	; (80080dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fdc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fde:	f7fc fc87 	bl	80048f0 <HAL_GetTick>
 8007fe2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fe4:	e008      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fe6:	f7fc fc83 	bl	80048f0 <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	2b64      	cmp	r3, #100	; 0x64
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e169      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ff8:	4b38      	ldr	r3, [pc, #224]	; (80080dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0f0      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008004:	4b34      	ldr	r3, [pc, #208]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800800c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800800e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 8084 	beq.w	800811e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800801e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008020:	429a      	cmp	r2, r3
 8008022:	d07c      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008024:	4b2c      	ldr	r3, [pc, #176]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800802c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800802e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008032:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008036:	fa93 f3a3 	rbit	r3, r3
 800803a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800803e:	fab3 f383 	clz	r3, r3
 8008042:	b2db      	uxtb	r3, r3
 8008044:	461a      	mov	r2, r3
 8008046:	4b26      	ldr	r3, [pc, #152]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008048:	4413      	add	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	461a      	mov	r2, r3
 800804e:	2301      	movs	r3, #1
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008056:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805a:	fa93 f3a3 	rbit	r3, r3
 800805e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008062:	fab3 f383 	clz	r3, r3
 8008066:	b2db      	uxtb	r3, r3
 8008068:	461a      	mov	r2, r3
 800806a:	4b1d      	ldr	r3, [pc, #116]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	461a      	mov	r2, r3
 8008072:	2300      	movs	r3, #0
 8008074:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008076:	4a18      	ldr	r2, [pc, #96]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800807c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d04b      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008086:	f7fc fc33 	bl	80048f0 <HAL_GetTick>
 800808a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800808c:	e00a      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800808e:	f7fc fc2f 	bl	80048f0 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	f241 3288 	movw	r2, #5000	; 0x1388
 800809c:	4293      	cmp	r3, r2
 800809e:	d901      	bls.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e113      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x354>
 80080a4:	2302      	movs	r3, #2
 80080a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	fa93 f3a3 	rbit	r3, r3
 80080ae:	627b      	str	r3, [r7, #36]	; 0x24
 80080b0:	2302      	movs	r3, #2
 80080b2:	623b      	str	r3, [r7, #32]
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	fa93 f3a3 	rbit	r3, r3
 80080ba:	61fb      	str	r3, [r7, #28]
  return result;
 80080bc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080be:	fab3 f383 	clz	r3, r3
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	095b      	lsrs	r3, r3, #5
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f043 0302 	orr.w	r3, r3, #2
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d108      	bne.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80080d2:	4b01      	ldr	r3, [pc, #4]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	e00d      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80080d8:	40021000 	.word	0x40021000
 80080dc:	40007000 	.word	0x40007000
 80080e0:	10908100 	.word	0x10908100
 80080e4:	2302      	movs	r3, #2
 80080e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	fa93 f3a3 	rbit	r3, r3
 80080ee:	617b      	str	r3, [r7, #20]
 80080f0:	4b78      	ldr	r3, [pc, #480]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	2202      	movs	r2, #2
 80080f6:	613a      	str	r2, [r7, #16]
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	fa92 f2a2 	rbit	r2, r2
 80080fe:	60fa      	str	r2, [r7, #12]
  return result;
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	fab2 f282 	clz	r2, r2
 8008106:	b2d2      	uxtb	r2, r2
 8008108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800810c:	b2d2      	uxtb	r2, r2
 800810e:	f002 021f 	and.w	r2, r2, #31
 8008112:	2101      	movs	r1, #1
 8008114:	fa01 f202 	lsl.w	r2, r1, r2
 8008118:	4013      	ands	r3, r2
 800811a:	2b00      	cmp	r3, #0
 800811c:	d0b7      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800811e:	4b6d      	ldr	r3, [pc, #436]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	496a      	ldr	r1, [pc, #424]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800812c:	4313      	orrs	r3, r2
 800812e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008130:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008134:	2b01      	cmp	r3, #1
 8008136:	d105      	bne.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008138:	4b66      	ldr	r3, [pc, #408]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	4a65      	ldr	r2, [pc, #404]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800813e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008142:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	d008      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008150:	4b60      	ldr	r3, [pc, #384]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008154:	f023 0203 	bic.w	r2, r3, #3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	495d      	ldr	r1, [pc, #372]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800815e:	4313      	orrs	r3, r2
 8008160:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b00      	cmp	r3, #0
 800816c:	d008      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800816e:	4b59      	ldr	r3, [pc, #356]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008172:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	4956      	ldr	r1, [pc, #344]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800817c:	4313      	orrs	r3, r2
 800817e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0304 	and.w	r3, r3, #4
 8008188:	2b00      	cmp	r3, #0
 800818a:	d008      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800818c:	4b51      	ldr	r3, [pc, #324]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800818e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008190:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	494e      	ldr	r1, [pc, #312]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800819a:	4313      	orrs	r3, r2
 800819c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0320 	and.w	r3, r3, #32
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d008      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80081aa:	4b4a      	ldr	r3, [pc, #296]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80081ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ae:	f023 0210 	bic.w	r2, r3, #16
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	4947      	ldr	r1, [pc, #284]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d008      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80081c8:	4b42      	ldr	r3, [pc, #264]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	493f      	ldr	r1, [pc, #252]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d008      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80081e6:	4b3b      	ldr	r3, [pc, #236]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80081e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ea:	f023 0220 	bic.w	r2, r3, #32
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	4938      	ldr	r1, [pc, #224]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0308 	and.w	r3, r3, #8
 8008200:	2b00      	cmp	r3, #0
 8008202:	d008      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008204:	4b33      	ldr	r3, [pc, #204]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	695b      	ldr	r3, [r3, #20]
 8008210:	4930      	ldr	r1, [pc, #192]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008212:	4313      	orrs	r3, r2
 8008214:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0310 	and.w	r3, r3, #16
 800821e:	2b00      	cmp	r3, #0
 8008220:	d008      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008222:	4b2c      	ldr	r3, [pc, #176]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008226:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	4929      	ldr	r1, [pc, #164]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008230:	4313      	orrs	r3, r2
 8008232:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800823c:	2b00      	cmp	r3, #0
 800823e:	d008      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008240:	4b24      	ldr	r3, [pc, #144]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	4921      	ldr	r1, [pc, #132]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800824e:	4313      	orrs	r3, r2
 8008250:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825a:	2b00      	cmp	r3, #0
 800825c:	d008      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800825e:	4b1d      	ldr	r3, [pc, #116]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	491a      	ldr	r1, [pc, #104]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800826c:	4313      	orrs	r3, r2
 800826e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008278:	2b00      	cmp	r3, #0
 800827a:	d008      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800827c:	4b15      	ldr	r3, [pc, #84]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008288:	4912      	ldr	r1, [pc, #72]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800828a:	4313      	orrs	r3, r2
 800828c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d008      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800829a:	4b0e      	ldr	r3, [pc, #56]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800829c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a6:	490b      	ldr	r1, [pc, #44]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80082a8:	4313      	orrs	r3, r2
 80082aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d008      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80082b8:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80082ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c4:	4903      	ldr	r1, [pc, #12]	; (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3748      	adds	r7, #72	; 0x48
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	40021000 	.word	0x40021000

080082d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e09d      	b.n	8008426 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d108      	bne.n	8008304 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082fa:	d009      	beq.n	8008310 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	61da      	str	r2, [r3, #28]
 8008302:	e005      	b.n	8008310 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d106      	bne.n	8008330 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7f9 f866 	bl	80013fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008346:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008350:	d902      	bls.n	8008358 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]
 8008356:	e002      	b.n	800835e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800835c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008366:	d007      	beq.n	8008378 <HAL_SPI_Init+0xa0>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008370:	d002      	beq.n	8008378 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008388:	431a      	orrs	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	431a      	orrs	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	431a      	orrs	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083a6:	431a      	orrs	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083b0:	431a      	orrs	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ba:	ea42 0103 	orr.w	r1, r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	0c1b      	lsrs	r3, r3, #16
 80083d4:	f003 0204 	and.w	r2, r3, #4
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	f003 0310 	and.w	r3, r3, #16
 80083e0:	431a      	orrs	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e6:	f003 0308 	and.w	r3, r3, #8
 80083ea:	431a      	orrs	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80083f4:	ea42 0103 	orr.w	r1, r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69da      	ldr	r2, [r3, #28]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008414:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e049      	b.n	80084d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d106      	bne.n	800845a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7f9 f813 	bl	8001480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2202      	movs	r2, #2
 800845e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	3304      	adds	r3, #4
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f000 fc2f 	bl	8008cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d001      	beq.n	80084f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e04a      	b.n	800858a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2202      	movs	r2, #2
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68da      	ldr	r2, [r3, #12]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f042 0201 	orr.w	r2, r2, #1
 800850a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a21      	ldr	r2, [pc, #132]	; (8008598 <HAL_TIM_Base_Start_IT+0xbc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d018      	beq.n	8008548 <HAL_TIM_Base_Start_IT+0x6c>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800851e:	d013      	beq.n	8008548 <HAL_TIM_Base_Start_IT+0x6c>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a1d      	ldr	r2, [pc, #116]	; (800859c <HAL_TIM_Base_Start_IT+0xc0>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d00e      	beq.n	8008548 <HAL_TIM_Base_Start_IT+0x6c>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a1c      	ldr	r2, [pc, #112]	; (80085a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d009      	beq.n	8008548 <HAL_TIM_Base_Start_IT+0x6c>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a1a      	ldr	r2, [pc, #104]	; (80085a4 <HAL_TIM_Base_Start_IT+0xc8>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d004      	beq.n	8008548 <HAL_TIM_Base_Start_IT+0x6c>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a19      	ldr	r2, [pc, #100]	; (80085a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d115      	bne.n	8008574 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689a      	ldr	r2, [r3, #8]
 800854e:	4b17      	ldr	r3, [pc, #92]	; (80085ac <HAL_TIM_Base_Start_IT+0xd0>)
 8008550:	4013      	ands	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b06      	cmp	r3, #6
 8008558:	d015      	beq.n	8008586 <HAL_TIM_Base_Start_IT+0xaa>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008560:	d011      	beq.n	8008586 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f042 0201 	orr.w	r2, r2, #1
 8008570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008572:	e008      	b.n	8008586 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f042 0201 	orr.w	r2, r2, #1
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	e000      	b.n	8008588 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008586:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	40012c00 	.word	0x40012c00
 800859c:	40000400 	.word	0x40000400
 80085a0:	40000800 	.word	0x40000800
 80085a4:	40013400 	.word	0x40013400
 80085a8:	40014000 	.word	0x40014000
 80085ac:	00010007 	.word	0x00010007

080085b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e049      	b.n	8008656 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d106      	bne.n	80085dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f841 	bl	800865e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3304      	adds	r3, #4
 80085ec:	4619      	mov	r1, r3
 80085ee:	4610      	mov	r0, r2
 80085f0:	f000 fb6e 	bl	8008cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800865e:	b480      	push	{r7}
 8008660:	b083      	sub	sp, #12
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	f003 0302 	and.w	r3, r3, #2
 8008684:	2b02      	cmp	r3, #2
 8008686:	d122      	bne.n	80086ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b02      	cmp	r3, #2
 8008694:	d11b      	bne.n	80086ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f06f 0202 	mvn.w	r2, #2
 800869e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	f003 0303 	and.w	r3, r3, #3
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d003      	beq.n	80086bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 faec 	bl	8008c92 <HAL_TIM_IC_CaptureCallback>
 80086ba:	e005      	b.n	80086c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fade 	bl	8008c7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 faef 	bl	8008ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b04      	cmp	r3, #4
 80086da:	d122      	bne.n	8008722 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	f003 0304 	and.w	r3, r3, #4
 80086e6:	2b04      	cmp	r3, #4
 80086e8:	d11b      	bne.n	8008722 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f06f 0204 	mvn.w	r2, #4
 80086f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008704:	2b00      	cmp	r3, #0
 8008706:	d003      	beq.n	8008710 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fac2 	bl	8008c92 <HAL_TIM_IC_CaptureCallback>
 800870e:	e005      	b.n	800871c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fab4 	bl	8008c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fac5 	bl	8008ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	f003 0308 	and.w	r3, r3, #8
 800872c:	2b08      	cmp	r3, #8
 800872e:	d122      	bne.n	8008776 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f003 0308 	and.w	r3, r3, #8
 800873a:	2b08      	cmp	r3, #8
 800873c:	d11b      	bne.n	8008776 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f06f 0208 	mvn.w	r2, #8
 8008746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2204      	movs	r2, #4
 800874c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	69db      	ldr	r3, [r3, #28]
 8008754:	f003 0303 	and.w	r3, r3, #3
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fa98 	bl	8008c92 <HAL_TIM_IC_CaptureCallback>
 8008762:	e005      	b.n	8008770 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fa8a 	bl	8008c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fa9b 	bl	8008ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	f003 0310 	and.w	r3, r3, #16
 8008780:	2b10      	cmp	r3, #16
 8008782:	d122      	bne.n	80087ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f003 0310 	and.w	r3, r3, #16
 800878e:	2b10      	cmp	r3, #16
 8008790:	d11b      	bne.n	80087ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f06f 0210 	mvn.w	r2, #16
 800879a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2208      	movs	r2, #8
 80087a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	69db      	ldr	r3, [r3, #28]
 80087a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d003      	beq.n	80087b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fa6e 	bl	8008c92 <HAL_TIM_IC_CaptureCallback>
 80087b6:	e005      	b.n	80087c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fa60 	bl	8008c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fa71 	bl	8008ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d10e      	bne.n	80087f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d107      	bne.n	80087f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f06f 0201 	mvn.w	r2, #1
 80087ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fa3a 	bl	8008c6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008800:	2b80      	cmp	r3, #128	; 0x80
 8008802:	d10e      	bne.n	8008822 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800880e:	2b80      	cmp	r3, #128	; 0x80
 8008810:	d107      	bne.n	8008822 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800881a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fee1 	bl	80095e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008830:	d10e      	bne.n	8008850 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883c:	2b80      	cmp	r3, #128	; 0x80
 800883e:	d107      	bne.n	8008850 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fed4 	bl	80095f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885a:	2b40      	cmp	r3, #64	; 0x40
 800885c:	d10e      	bne.n	800887c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008868:	2b40      	cmp	r3, #64	; 0x40
 800886a:	d107      	bne.n	800887c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fa1f 	bl	8008cba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f003 0320 	and.w	r3, r3, #32
 8008886:	2b20      	cmp	r3, #32
 8008888:	d10e      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b20      	cmp	r3, #32
 8008896:	d107      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f06f 0220 	mvn.w	r2, #32
 80088a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fe94 	bl	80095d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088a8:	bf00      	nop
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d101      	bne.n	80088ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088ca:	2302      	movs	r3, #2
 80088cc:	e0ff      	b.n	8008ace <HAL_TIM_PWM_ConfigChannel+0x21e>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b14      	cmp	r3, #20
 80088da:	f200 80f0 	bhi.w	8008abe <HAL_TIM_PWM_ConfigChannel+0x20e>
 80088de:	a201      	add	r2, pc, #4	; (adr r2, 80088e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e4:	08008939 	.word	0x08008939
 80088e8:	08008abf 	.word	0x08008abf
 80088ec:	08008abf 	.word	0x08008abf
 80088f0:	08008abf 	.word	0x08008abf
 80088f4:	08008979 	.word	0x08008979
 80088f8:	08008abf 	.word	0x08008abf
 80088fc:	08008abf 	.word	0x08008abf
 8008900:	08008abf 	.word	0x08008abf
 8008904:	080089bb 	.word	0x080089bb
 8008908:	08008abf 	.word	0x08008abf
 800890c:	08008abf 	.word	0x08008abf
 8008910:	08008abf 	.word	0x08008abf
 8008914:	080089fb 	.word	0x080089fb
 8008918:	08008abf 	.word	0x08008abf
 800891c:	08008abf 	.word	0x08008abf
 8008920:	08008abf 	.word	0x08008abf
 8008924:	08008a3d 	.word	0x08008a3d
 8008928:	08008abf 	.word	0x08008abf
 800892c:	08008abf 	.word	0x08008abf
 8008930:	08008abf 	.word	0x08008abf
 8008934:	08008a7d 	.word	0x08008a7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68b9      	ldr	r1, [r7, #8]
 800893e:	4618      	mov	r0, r3
 8008940:	f000 fa56 	bl	8008df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	699a      	ldr	r2, [r3, #24]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 0208 	orr.w	r2, r2, #8
 8008952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	699a      	ldr	r2, [r3, #24]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f022 0204 	bic.w	r2, r2, #4
 8008962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	6999      	ldr	r1, [r3, #24]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	691a      	ldr	r2, [r3, #16]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	619a      	str	r2, [r3, #24]
      break;
 8008976:	e0a5      	b.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fac6 	bl	8008f10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	699a      	ldr	r2, [r3, #24]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	699a      	ldr	r2, [r3, #24]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6999      	ldr	r1, [r3, #24]
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	021a      	lsls	r2, r3, #8
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	619a      	str	r2, [r3, #24]
      break;
 80089b8:	e084      	b.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68b9      	ldr	r1, [r7, #8]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 fb2f 	bl	8009024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	69da      	ldr	r2, [r3, #28]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f042 0208 	orr.w	r2, r2, #8
 80089d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	69da      	ldr	r2, [r3, #28]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0204 	bic.w	r2, r2, #4
 80089e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	69d9      	ldr	r1, [r3, #28]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	691a      	ldr	r2, [r3, #16]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	61da      	str	r2, [r3, #28]
      break;
 80089f8:	e064      	b.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68b9      	ldr	r1, [r7, #8]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 fb97 	bl	8009134 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	69da      	ldr	r2, [r3, #28]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69da      	ldr	r2, [r3, #28]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	69d9      	ldr	r1, [r3, #28]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	021a      	lsls	r2, r3, #8
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	61da      	str	r2, [r3, #28]
      break;
 8008a3a:	e043      	b.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68b9      	ldr	r1, [r7, #8]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 fbe0 	bl	8009208 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f042 0208 	orr.w	r2, r2, #8
 8008a56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0204 	bic.w	r2, r2, #4
 8008a66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	691a      	ldr	r2, [r3, #16]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a7a:	e023      	b.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68b9      	ldr	r1, [r7, #8]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fc24 	bl	80092d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	021a      	lsls	r2, r3, #8
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008abc:	e002      	b.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ac2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop

08008ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_TIM_ConfigClockSource+0x1c>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e0b6      	b.n	8008c62 <HAL_TIM_ConfigClockSource+0x18a>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b30:	d03e      	beq.n	8008bb0 <HAL_TIM_ConfigClockSource+0xd8>
 8008b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b36:	f200 8087 	bhi.w	8008c48 <HAL_TIM_ConfigClockSource+0x170>
 8008b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b3e:	f000 8086 	beq.w	8008c4e <HAL_TIM_ConfigClockSource+0x176>
 8008b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b46:	d87f      	bhi.n	8008c48 <HAL_TIM_ConfigClockSource+0x170>
 8008b48:	2b70      	cmp	r3, #112	; 0x70
 8008b4a:	d01a      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0xaa>
 8008b4c:	2b70      	cmp	r3, #112	; 0x70
 8008b4e:	d87b      	bhi.n	8008c48 <HAL_TIM_ConfigClockSource+0x170>
 8008b50:	2b60      	cmp	r3, #96	; 0x60
 8008b52:	d050      	beq.n	8008bf6 <HAL_TIM_ConfigClockSource+0x11e>
 8008b54:	2b60      	cmp	r3, #96	; 0x60
 8008b56:	d877      	bhi.n	8008c48 <HAL_TIM_ConfigClockSource+0x170>
 8008b58:	2b50      	cmp	r3, #80	; 0x50
 8008b5a:	d03c      	beq.n	8008bd6 <HAL_TIM_ConfigClockSource+0xfe>
 8008b5c:	2b50      	cmp	r3, #80	; 0x50
 8008b5e:	d873      	bhi.n	8008c48 <HAL_TIM_ConfigClockSource+0x170>
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	d058      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x13e>
 8008b64:	2b40      	cmp	r3, #64	; 0x40
 8008b66:	d86f      	bhi.n	8008c48 <HAL_TIM_ConfigClockSource+0x170>
 8008b68:	2b30      	cmp	r3, #48	; 0x30
 8008b6a:	d064      	beq.n	8008c36 <HAL_TIM_ConfigClockSource+0x15e>
 8008b6c:	2b30      	cmp	r3, #48	; 0x30
 8008b6e:	d86b      	bhi.n	8008c48 <HAL_TIM_ConfigClockSource+0x170>
 8008b70:	2b20      	cmp	r3, #32
 8008b72:	d060      	beq.n	8008c36 <HAL_TIM_ConfigClockSource+0x15e>
 8008b74:	2b20      	cmp	r3, #32
 8008b76:	d867      	bhi.n	8008c48 <HAL_TIM_ConfigClockSource+0x170>
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d05c      	beq.n	8008c36 <HAL_TIM_ConfigClockSource+0x15e>
 8008b7c:	2b10      	cmp	r3, #16
 8008b7e:	d05a      	beq.n	8008c36 <HAL_TIM_ConfigClockSource+0x15e>
 8008b80:	e062      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6818      	ldr	r0, [r3, #0]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	6899      	ldr	r1, [r3, #8]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f000 fc7d 	bl	8009490 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ba4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	609a      	str	r2, [r3, #8]
      break;
 8008bae:	e04f      	b.n	8008c50 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6818      	ldr	r0, [r3, #0]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	6899      	ldr	r1, [r3, #8]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f000 fc66 	bl	8009490 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689a      	ldr	r2, [r3, #8]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bd2:	609a      	str	r2, [r3, #8]
      break;
 8008bd4:	e03c      	b.n	8008c50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	6859      	ldr	r1, [r3, #4]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f000 fbda 	bl	800939c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2150      	movs	r1, #80	; 0x50
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 fc33 	bl	800945a <TIM_ITRx_SetConfig>
      break;
 8008bf4:	e02c      	b.n	8008c50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6818      	ldr	r0, [r3, #0]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	6859      	ldr	r1, [r3, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	461a      	mov	r2, r3
 8008c04:	f000 fbf9 	bl	80093fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2160      	movs	r1, #96	; 0x60
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 fc23 	bl	800945a <TIM_ITRx_SetConfig>
      break;
 8008c14:	e01c      	b.n	8008c50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	6859      	ldr	r1, [r3, #4]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	461a      	mov	r2, r3
 8008c24:	f000 fbba 	bl	800939c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2140      	movs	r1, #64	; 0x40
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fc13 	bl	800945a <TIM_ITRx_SetConfig>
      break;
 8008c34:	e00c      	b.n	8008c50 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	4610      	mov	r0, r2
 8008c42:	f000 fc0a 	bl	800945a <TIM_ITRx_SetConfig>
      break;
 8008c46:	e003      	b.n	8008c50 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c4c:	e000      	b.n	8008c50 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008c4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b083      	sub	sp, #12
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008c72:	bf00      	nop
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c9a:	bf00      	nop
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cae:	bf00      	nop
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b083      	sub	sp, #12
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cc2:	bf00      	nop
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
	...

08008cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a3c      	ldr	r2, [pc, #240]	; (8008dd4 <TIM_Base_SetConfig+0x104>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00f      	beq.n	8008d08 <TIM_Base_SetConfig+0x38>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cee:	d00b      	beq.n	8008d08 <TIM_Base_SetConfig+0x38>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a39      	ldr	r2, [pc, #228]	; (8008dd8 <TIM_Base_SetConfig+0x108>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d007      	beq.n	8008d08 <TIM_Base_SetConfig+0x38>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a38      	ldr	r2, [pc, #224]	; (8008ddc <TIM_Base_SetConfig+0x10c>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d003      	beq.n	8008d08 <TIM_Base_SetConfig+0x38>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a37      	ldr	r2, [pc, #220]	; (8008de0 <TIM_Base_SetConfig+0x110>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d108      	bne.n	8008d1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a2d      	ldr	r2, [pc, #180]	; (8008dd4 <TIM_Base_SetConfig+0x104>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d01b      	beq.n	8008d5a <TIM_Base_SetConfig+0x8a>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d28:	d017      	beq.n	8008d5a <TIM_Base_SetConfig+0x8a>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a2a      	ldr	r2, [pc, #168]	; (8008dd8 <TIM_Base_SetConfig+0x108>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d013      	beq.n	8008d5a <TIM_Base_SetConfig+0x8a>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a29      	ldr	r2, [pc, #164]	; (8008ddc <TIM_Base_SetConfig+0x10c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d00f      	beq.n	8008d5a <TIM_Base_SetConfig+0x8a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a28      	ldr	r2, [pc, #160]	; (8008de0 <TIM_Base_SetConfig+0x110>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d00b      	beq.n	8008d5a <TIM_Base_SetConfig+0x8a>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a27      	ldr	r2, [pc, #156]	; (8008de4 <TIM_Base_SetConfig+0x114>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d007      	beq.n	8008d5a <TIM_Base_SetConfig+0x8a>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a26      	ldr	r2, [pc, #152]	; (8008de8 <TIM_Base_SetConfig+0x118>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d003      	beq.n	8008d5a <TIM_Base_SetConfig+0x8a>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a25      	ldr	r2, [pc, #148]	; (8008dec <TIM_Base_SetConfig+0x11c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d108      	bne.n	8008d6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a10      	ldr	r2, [pc, #64]	; (8008dd4 <TIM_Base_SetConfig+0x104>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d00f      	beq.n	8008db8 <TIM_Base_SetConfig+0xe8>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a11      	ldr	r2, [pc, #68]	; (8008de0 <TIM_Base_SetConfig+0x110>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00b      	beq.n	8008db8 <TIM_Base_SetConfig+0xe8>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a10      	ldr	r2, [pc, #64]	; (8008de4 <TIM_Base_SetConfig+0x114>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d007      	beq.n	8008db8 <TIM_Base_SetConfig+0xe8>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a0f      	ldr	r2, [pc, #60]	; (8008de8 <TIM_Base_SetConfig+0x118>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d003      	beq.n	8008db8 <TIM_Base_SetConfig+0xe8>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a0e      	ldr	r2, [pc, #56]	; (8008dec <TIM_Base_SetConfig+0x11c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d103      	bne.n	8008dc0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	691a      	ldr	r2, [r3, #16]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	615a      	str	r2, [r3, #20]
}
 8008dc6:	bf00      	nop
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	40012c00 	.word	0x40012c00
 8008dd8:	40000400 	.word	0x40000400
 8008ddc:	40000800 	.word	0x40000800
 8008de0:	40013400 	.word	0x40013400
 8008de4:	40014000 	.word	0x40014000
 8008de8:	40014400 	.word	0x40014400
 8008dec:	40014800 	.word	0x40014800

08008df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	f023 0201 	bic.w	r2, r3, #1
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f023 0303 	bic.w	r3, r3, #3
 8008e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f023 0302 	bic.w	r3, r3, #2
 8008e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a2c      	ldr	r2, [pc, #176]	; (8008efc <TIM_OC1_SetConfig+0x10c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d00f      	beq.n	8008e70 <TIM_OC1_SetConfig+0x80>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a2b      	ldr	r2, [pc, #172]	; (8008f00 <TIM_OC1_SetConfig+0x110>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d00b      	beq.n	8008e70 <TIM_OC1_SetConfig+0x80>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a2a      	ldr	r2, [pc, #168]	; (8008f04 <TIM_OC1_SetConfig+0x114>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d007      	beq.n	8008e70 <TIM_OC1_SetConfig+0x80>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a29      	ldr	r2, [pc, #164]	; (8008f08 <TIM_OC1_SetConfig+0x118>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d003      	beq.n	8008e70 <TIM_OC1_SetConfig+0x80>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a28      	ldr	r2, [pc, #160]	; (8008f0c <TIM_OC1_SetConfig+0x11c>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d10c      	bne.n	8008e8a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	f023 0308 	bic.w	r3, r3, #8
 8008e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f023 0304 	bic.w	r3, r3, #4
 8008e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a1b      	ldr	r2, [pc, #108]	; (8008efc <TIM_OC1_SetConfig+0x10c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d00f      	beq.n	8008eb2 <TIM_OC1_SetConfig+0xc2>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a1a      	ldr	r2, [pc, #104]	; (8008f00 <TIM_OC1_SetConfig+0x110>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d00b      	beq.n	8008eb2 <TIM_OC1_SetConfig+0xc2>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a19      	ldr	r2, [pc, #100]	; (8008f04 <TIM_OC1_SetConfig+0x114>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d007      	beq.n	8008eb2 <TIM_OC1_SetConfig+0xc2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a18      	ldr	r2, [pc, #96]	; (8008f08 <TIM_OC1_SetConfig+0x118>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d003      	beq.n	8008eb2 <TIM_OC1_SetConfig+0xc2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a17      	ldr	r2, [pc, #92]	; (8008f0c <TIM_OC1_SetConfig+0x11c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d111      	bne.n	8008ed6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	621a      	str	r2, [r3, #32]
}
 8008ef0:	bf00      	nop
 8008ef2:	371c      	adds	r7, #28
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	40012c00 	.word	0x40012c00
 8008f00:	40013400 	.word	0x40013400
 8008f04:	40014000 	.word	0x40014000
 8008f08:	40014400 	.word	0x40014400
 8008f0c:	40014800 	.word	0x40014800

08008f10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	f023 0210 	bic.w	r2, r3, #16
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	021b      	lsls	r3, r3, #8
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	f023 0320 	bic.w	r3, r3, #32
 8008f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	011b      	lsls	r3, r3, #4
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a28      	ldr	r2, [pc, #160]	; (8009010 <TIM_OC2_SetConfig+0x100>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d003      	beq.n	8008f7c <TIM_OC2_SetConfig+0x6c>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a27      	ldr	r2, [pc, #156]	; (8009014 <TIM_OC2_SetConfig+0x104>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d10d      	bne.n	8008f98 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	011b      	lsls	r3, r3, #4
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a1d      	ldr	r2, [pc, #116]	; (8009010 <TIM_OC2_SetConfig+0x100>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d00f      	beq.n	8008fc0 <TIM_OC2_SetConfig+0xb0>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a1c      	ldr	r2, [pc, #112]	; (8009014 <TIM_OC2_SetConfig+0x104>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d00b      	beq.n	8008fc0 <TIM_OC2_SetConfig+0xb0>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a1b      	ldr	r2, [pc, #108]	; (8009018 <TIM_OC2_SetConfig+0x108>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d007      	beq.n	8008fc0 <TIM_OC2_SetConfig+0xb0>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a1a      	ldr	r2, [pc, #104]	; (800901c <TIM_OC2_SetConfig+0x10c>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d003      	beq.n	8008fc0 <TIM_OC2_SetConfig+0xb0>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a19      	ldr	r2, [pc, #100]	; (8009020 <TIM_OC2_SetConfig+0x110>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d113      	bne.n	8008fe8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fc6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fce:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	621a      	str	r2, [r3, #32]
}
 8009002:	bf00      	nop
 8009004:	371c      	adds	r7, #28
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	40012c00 	.word	0x40012c00
 8009014:	40013400 	.word	0x40013400
 8009018:	40014000 	.word	0x40014000
 800901c:	40014400 	.word	0x40014400
 8009020:	40014800 	.word	0x40014800

08009024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0303 	bic.w	r3, r3, #3
 800905e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	021b      	lsls	r3, r3, #8
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	4313      	orrs	r3, r2
 800907c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a27      	ldr	r2, [pc, #156]	; (8009120 <TIM_OC3_SetConfig+0xfc>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d003      	beq.n	800908e <TIM_OC3_SetConfig+0x6a>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a26      	ldr	r2, [pc, #152]	; (8009124 <TIM_OC3_SetConfig+0x100>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d10d      	bne.n	80090aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	021b      	lsls	r3, r3, #8
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4313      	orrs	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090a8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a1c      	ldr	r2, [pc, #112]	; (8009120 <TIM_OC3_SetConfig+0xfc>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d00f      	beq.n	80090d2 <TIM_OC3_SetConfig+0xae>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a1b      	ldr	r2, [pc, #108]	; (8009124 <TIM_OC3_SetConfig+0x100>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d00b      	beq.n	80090d2 <TIM_OC3_SetConfig+0xae>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a1a      	ldr	r2, [pc, #104]	; (8009128 <TIM_OC3_SetConfig+0x104>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d007      	beq.n	80090d2 <TIM_OC3_SetConfig+0xae>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a19      	ldr	r2, [pc, #100]	; (800912c <TIM_OC3_SetConfig+0x108>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d003      	beq.n	80090d2 <TIM_OC3_SetConfig+0xae>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a18      	ldr	r2, [pc, #96]	; (8009130 <TIM_OC3_SetConfig+0x10c>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d113      	bne.n	80090fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	011b      	lsls	r3, r3, #4
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	011b      	lsls	r3, r3, #4
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	685a      	ldr	r2, [r3, #4]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	621a      	str	r2, [r3, #32]
}
 8009114:	bf00      	nop
 8009116:	371c      	adds	r7, #28
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	40012c00 	.word	0x40012c00
 8009124:	40013400 	.word	0x40013400
 8009128:	40014000 	.word	0x40014000
 800912c:	40014400 	.word	0x40014400
 8009130:	40014800 	.word	0x40014800

08009134 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009134:	b480      	push	{r7}
 8009136:	b087      	sub	sp, #28
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800916e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	021b      	lsls	r3, r3, #8
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	4313      	orrs	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	031b      	lsls	r3, r3, #12
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	4313      	orrs	r3, r2
 800918e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a18      	ldr	r2, [pc, #96]	; (80091f4 <TIM_OC4_SetConfig+0xc0>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d00f      	beq.n	80091b8 <TIM_OC4_SetConfig+0x84>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a17      	ldr	r2, [pc, #92]	; (80091f8 <TIM_OC4_SetConfig+0xc4>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d00b      	beq.n	80091b8 <TIM_OC4_SetConfig+0x84>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a16      	ldr	r2, [pc, #88]	; (80091fc <TIM_OC4_SetConfig+0xc8>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d007      	beq.n	80091b8 <TIM_OC4_SetConfig+0x84>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a15      	ldr	r2, [pc, #84]	; (8009200 <TIM_OC4_SetConfig+0xcc>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d003      	beq.n	80091b8 <TIM_OC4_SetConfig+0x84>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a14      	ldr	r2, [pc, #80]	; (8009204 <TIM_OC4_SetConfig+0xd0>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d109      	bne.n	80091cc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	019b      	lsls	r3, r3, #6
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	621a      	str	r2, [r3, #32]
}
 80091e6:	bf00      	nop
 80091e8:	371c      	adds	r7, #28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	40012c00 	.word	0x40012c00
 80091f8:	40013400 	.word	0x40013400
 80091fc:	40014000 	.word	0x40014000
 8009200:	40014400 	.word	0x40014400
 8009204:	40014800 	.word	0x40014800

08009208 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009208:	b480      	push	{r7}
 800920a:	b087      	sub	sp, #28
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800922e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	4313      	orrs	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800924c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	041b      	lsls	r3, r3, #16
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	4313      	orrs	r3, r2
 8009258:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a17      	ldr	r2, [pc, #92]	; (80092bc <TIM_OC5_SetConfig+0xb4>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d00f      	beq.n	8009282 <TIM_OC5_SetConfig+0x7a>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a16      	ldr	r2, [pc, #88]	; (80092c0 <TIM_OC5_SetConfig+0xb8>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d00b      	beq.n	8009282 <TIM_OC5_SetConfig+0x7a>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a15      	ldr	r2, [pc, #84]	; (80092c4 <TIM_OC5_SetConfig+0xbc>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d007      	beq.n	8009282 <TIM_OC5_SetConfig+0x7a>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a14      	ldr	r2, [pc, #80]	; (80092c8 <TIM_OC5_SetConfig+0xc0>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d003      	beq.n	8009282 <TIM_OC5_SetConfig+0x7a>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a13      	ldr	r2, [pc, #76]	; (80092cc <TIM_OC5_SetConfig+0xc4>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d109      	bne.n	8009296 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009288:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	021b      	lsls	r3, r3, #8
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	4313      	orrs	r3, r2
 8009294:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	621a      	str	r2, [r3, #32]
}
 80092b0:	bf00      	nop
 80092b2:	371c      	adds	r7, #28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	40012c00 	.word	0x40012c00
 80092c0:	40013400 	.word	0x40013400
 80092c4:	40014000 	.word	0x40014000
 80092c8:	40014400 	.word	0x40014400
 80092cc:	40014800 	.word	0x40014800

080092d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	021b      	lsls	r3, r3, #8
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	4313      	orrs	r3, r2
 800930e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	051b      	lsls	r3, r3, #20
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	4313      	orrs	r3, r2
 8009322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a18      	ldr	r2, [pc, #96]	; (8009388 <TIM_OC6_SetConfig+0xb8>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d00f      	beq.n	800934c <TIM_OC6_SetConfig+0x7c>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a17      	ldr	r2, [pc, #92]	; (800938c <TIM_OC6_SetConfig+0xbc>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d00b      	beq.n	800934c <TIM_OC6_SetConfig+0x7c>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a16      	ldr	r2, [pc, #88]	; (8009390 <TIM_OC6_SetConfig+0xc0>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d007      	beq.n	800934c <TIM_OC6_SetConfig+0x7c>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a15      	ldr	r2, [pc, #84]	; (8009394 <TIM_OC6_SetConfig+0xc4>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_OC6_SetConfig+0x7c>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a14      	ldr	r2, [pc, #80]	; (8009398 <TIM_OC6_SetConfig+0xc8>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d109      	bne.n	8009360 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009352:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	029b      	lsls	r3, r3, #10
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	4313      	orrs	r3, r2
 800935e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	621a      	str	r2, [r3, #32]
}
 800937a:	bf00      	nop
 800937c:	371c      	adds	r7, #28
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	40012c00 	.word	0x40012c00
 800938c:	40013400 	.word	0x40013400
 8009390:	40014000 	.word	0x40014000
 8009394:	40014400 	.word	0x40014400
 8009398:	40014800 	.word	0x40014800

0800939c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a1b      	ldr	r3, [r3, #32]
 80093ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	f023 0201 	bic.w	r2, r3, #1
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	011b      	lsls	r3, r3, #4
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f023 030a 	bic.w	r3, r3, #10
 80093d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4313      	orrs	r3, r2
 80093e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	697a      	ldr	r2, [r7, #20]
 80093ec:	621a      	str	r2, [r3, #32]
}
 80093ee:	bf00      	nop
 80093f0:	371c      	adds	r7, #28
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b087      	sub	sp, #28
 80093fe:	af00      	add	r7, sp, #0
 8009400:	60f8      	str	r0, [r7, #12]
 8009402:	60b9      	str	r1, [r7, #8]
 8009404:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	f023 0210 	bic.w	r2, r3, #16
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6a1b      	ldr	r3, [r3, #32]
 800941c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009424:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	031b      	lsls	r3, r3, #12
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	4313      	orrs	r3, r2
 800942e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009436:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	011b      	lsls	r3, r3, #4
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	4313      	orrs	r3, r2
 8009440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	621a      	str	r2, [r3, #32]
}
 800944e:	bf00      	nop
 8009450:	371c      	adds	r7, #28
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800945a:	b480      	push	{r7}
 800945c:	b085      	sub	sp, #20
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009470:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4313      	orrs	r3, r2
 8009478:	f043 0307 	orr.w	r3, r3, #7
 800947c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	609a      	str	r2, [r3, #8]
}
 8009484:	bf00      	nop
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009490:	b480      	push	{r7}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	021a      	lsls	r2, r3, #8
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	431a      	orrs	r2, r3
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	609a      	str	r2, [r3, #8]
}
 80094c4:	bf00      	nop
 80094c6:	371c      	adds	r7, #28
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d101      	bne.n	80094e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094e4:	2302      	movs	r3, #2
 80094e6:	e063      	b.n	80095b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2202      	movs	r2, #2
 80094f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a2b      	ldr	r2, [pc, #172]	; (80095bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d004      	beq.n	800951c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a2a      	ldr	r2, [pc, #168]	; (80095c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d108      	bne.n	800952e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009522:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4313      	orrs	r3, r2
 800952c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009534:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	4313      	orrs	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a1b      	ldr	r2, [pc, #108]	; (80095bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d018      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800955a:	d013      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a18      	ldr	r2, [pc, #96]	; (80095c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d00e      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a17      	ldr	r2, [pc, #92]	; (80095c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d009      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a12      	ldr	r2, [pc, #72]	; (80095c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d004      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a13      	ldr	r2, [pc, #76]	; (80095cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d10c      	bne.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800958a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	4313      	orrs	r3, r2
 8009594:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	40012c00 	.word	0x40012c00
 80095c0:	40013400 	.word	0x40013400
 80095c4:	40000400 	.word	0x40000400
 80095c8:	40000800 	.word	0x40000800
 80095cc:	40014000 	.word	0x40014000

080095d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e040      	b.n	80096a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009622:	2b00      	cmp	r3, #0
 8009624:	d106      	bne.n	8009634 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7f7 ff94 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2224      	movs	r2, #36	; 0x24
 8009638:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f022 0201 	bic.w	r2, r2, #1
 8009648:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fb2a 	bl	8009ca4 <UART_SetConfig>
 8009650:	4603      	mov	r3, r0
 8009652:	2b01      	cmp	r3, #1
 8009654:	d101      	bne.n	800965a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e022      	b.n	80096a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965e:	2b00      	cmp	r3, #0
 8009660:	d002      	beq.n	8009668 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fcf4 	bl	800a050 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009676:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689a      	ldr	r2, [r3, #8]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009686:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f042 0201 	orr.w	r2, r2, #1
 8009696:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fd7b 	bl	800a194 <UART_CheckIdleState>
 800969e:	4603      	mov	r3, r0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b0ba      	sub	sp, #232	; 0xe8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80096d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80096d6:	4013      	ands	r3, r2
 80096d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80096dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d115      	bne.n	8009710 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80096e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096e8:	f003 0320 	and.w	r3, r3, #32
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00f      	beq.n	8009710 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80096f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096f4:	f003 0320 	and.w	r3, r3, #32
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d009      	beq.n	8009710 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 82a3 	beq.w	8009c4c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	4798      	blx	r3
      }
      return;
 800970e:	e29d      	b.n	8009c4c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 8117 	beq.w	8009948 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800971a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b00      	cmp	r3, #0
 8009724:	d106      	bne.n	8009734 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009726:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800972a:	4b85      	ldr	r3, [pc, #532]	; (8009940 <HAL_UART_IRQHandler+0x298>)
 800972c:	4013      	ands	r3, r2
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 810a 	beq.w	8009948 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009738:	f003 0301 	and.w	r3, r3, #1
 800973c:	2b00      	cmp	r3, #0
 800973e:	d011      	beq.n	8009764 <HAL_UART_IRQHandler+0xbc>
 8009740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00b      	beq.n	8009764 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2201      	movs	r2, #1
 8009752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800975a:	f043 0201 	orr.w	r2, r3, #1
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009768:	f003 0302 	and.w	r3, r3, #2
 800976c:	2b00      	cmp	r3, #0
 800976e:	d011      	beq.n	8009794 <HAL_UART_IRQHandler+0xec>
 8009770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009774:	f003 0301 	and.w	r3, r3, #1
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00b      	beq.n	8009794 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2202      	movs	r2, #2
 8009782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800978a:	f043 0204 	orr.w	r2, r3, #4
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009798:	f003 0304 	and.w	r3, r3, #4
 800979c:	2b00      	cmp	r3, #0
 800979e:	d011      	beq.n	80097c4 <HAL_UART_IRQHandler+0x11c>
 80097a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00b      	beq.n	80097c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2204      	movs	r2, #4
 80097b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097ba:	f043 0202 	orr.w	r2, r3, #2
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80097c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c8:	f003 0308 	and.w	r3, r3, #8
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d017      	beq.n	8009800 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80097d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097d4:	f003 0320 	and.w	r3, r3, #32
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d105      	bne.n	80097e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80097dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00b      	beq.n	8009800 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2208      	movs	r2, #8
 80097ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097f6:	f043 0208 	orr.w	r2, r3, #8
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009808:	2b00      	cmp	r3, #0
 800980a:	d012      	beq.n	8009832 <HAL_UART_IRQHandler+0x18a>
 800980c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009810:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00c      	beq.n	8009832 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009820:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009828:	f043 0220 	orr.w	r2, r3, #32
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 8209 	beq.w	8009c50 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800983e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009842:	f003 0320 	and.w	r3, r3, #32
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00d      	beq.n	8009866 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800984a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800984e:	f003 0320 	and.w	r3, r3, #32
 8009852:	2b00      	cmp	r3, #0
 8009854:	d007      	beq.n	8009866 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800986c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800987a:	2b40      	cmp	r3, #64	; 0x40
 800987c:	d005      	beq.n	800988a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800987e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009882:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009886:	2b00      	cmp	r3, #0
 8009888:	d04f      	beq.n	800992a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fd8f 	bl	800a3ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989a:	2b40      	cmp	r3, #64	; 0x40
 800989c:	d141      	bne.n	8009922 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3308      	adds	r3, #8
 80098a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098ac:	e853 3f00 	ldrex	r3, [r3]
 80098b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80098b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3308      	adds	r3, #8
 80098c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80098ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80098ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80098d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80098da:	e841 2300 	strex	r3, r2, [r1]
 80098de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80098e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1d9      	bne.n	800989e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d013      	beq.n	800991a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f6:	4a13      	ldr	r2, [pc, #76]	; (8009944 <HAL_UART_IRQHandler+0x29c>)
 80098f8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fc fc9c 	bl	800623c <HAL_DMA_Abort_IT>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d017      	beq.n	800993a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800990e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009914:	4610      	mov	r0, r2
 8009916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009918:	e00f      	b.n	800993a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f9ac 	bl	8009c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009920:	e00b      	b.n	800993a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f9a8 	bl	8009c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009928:	e007      	b.n	800993a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f9a4 	bl	8009c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009938:	e18a      	b.n	8009c50 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800993a:	bf00      	nop
    return;
 800993c:	e188      	b.n	8009c50 <HAL_UART_IRQHandler+0x5a8>
 800993e:	bf00      	nop
 8009940:	04000120 	.word	0x04000120
 8009944:	0800a475 	.word	0x0800a475

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800994c:	2b01      	cmp	r3, #1
 800994e:	f040 8143 	bne.w	8009bd8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009956:	f003 0310 	and.w	r3, r3, #16
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 813c 	beq.w	8009bd8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009964:	f003 0310 	and.w	r3, r3, #16
 8009968:	2b00      	cmp	r3, #0
 800996a:	f000 8135 	beq.w	8009bd8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2210      	movs	r2, #16
 8009974:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009980:	2b40      	cmp	r3, #64	; 0x40
 8009982:	f040 80b1 	bne.w	8009ae8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009992:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 815c 	beq.w	8009c54 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80099a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099a6:	429a      	cmp	r2, r3
 80099a8:	f080 8154 	bcs.w	8009c54 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	2b20      	cmp	r3, #32
 80099be:	f000 8085 	beq.w	8009acc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099ce:	e853 3f00 	ldrex	r3, [r3]
 80099d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80099d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80099ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80099f0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80099f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80099fc:	e841 2300 	strex	r3, r2, [r1]
 8009a00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1da      	bne.n	80099c2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3308      	adds	r3, #8
 8009a12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a16:	e853 3f00 	ldrex	r3, [r3]
 8009a1a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a1e:	f023 0301 	bic.w	r3, r3, #1
 8009a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3308      	adds	r3, #8
 8009a2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a34:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a3c:	e841 2300 	strex	r3, r2, [r1]
 8009a40:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1e1      	bne.n	8009a0c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a52:	e853 3f00 	ldrex	r3, [r3]
 8009a56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3308      	adds	r3, #8
 8009a68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009a6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009a6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a74:	e841 2300 	strex	r3, r2, [r1]
 8009a78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1e3      	bne.n	8009a48 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2220      	movs	r2, #32
 8009a84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a94:	e853 3f00 	ldrex	r3, [r3]
 8009a98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a9c:	f023 0310 	bic.w	r3, r3, #16
 8009aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009aae:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ab0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ab4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ab6:	e841 2300 	strex	r3, r2, [r1]
 8009aba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1e4      	bne.n	8009a8c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fc fb7f 	bl	80061ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f8d3 	bl	8009c8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ae6:	e0b5      	b.n	8009c54 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 80a7 	beq.w	8009c58 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8009b0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 80a2 	beq.w	8009c58 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1c:	e853 3f00 	ldrex	r3, [r3]
 8009b20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	461a      	mov	r2, r3
 8009b32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b36:	647b      	str	r3, [r7, #68]	; 0x44
 8009b38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b3e:	e841 2300 	strex	r3, r2, [r1]
 8009b42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1e4      	bne.n	8009b14 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3308      	adds	r3, #8
 8009b50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	623b      	str	r3, [r7, #32]
   return(result);
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	f023 0301 	bic.w	r3, r3, #1
 8009b60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3308      	adds	r3, #8
 8009b6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009b6e:	633a      	str	r2, [r7, #48]	; 0x30
 8009b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1e3      	bne.n	8009b4a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2220      	movs	r2, #32
 8009b86:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	e853 3f00 	ldrex	r3, [r3]
 8009ba0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f023 0310 	bic.w	r3, r3, #16
 8009ba8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009bb6:	61fb      	str	r3, [r7, #28]
 8009bb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bba:	69b9      	ldr	r1, [r7, #24]
 8009bbc:	69fa      	ldr	r2, [r7, #28]
 8009bbe:	e841 2300 	strex	r3, r2, [r1]
 8009bc2:	617b      	str	r3, [r7, #20]
   return(result);
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1e4      	bne.n	8009b94 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f85b 	bl	8009c8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bd6:	e03f      	b.n	8009c58 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00e      	beq.n	8009c02 <HAL_UART_IRQHandler+0x55a>
 8009be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d008      	beq.n	8009c02 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fc7a 	bl	800a4f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c00:	e02d      	b.n	8009c5e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00e      	beq.n	8009c2c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d008      	beq.n	8009c2c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d01c      	beq.n	8009c5c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	4798      	blx	r3
    }
    return;
 8009c2a:	e017      	b.n	8009c5c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d012      	beq.n	8009c5e <HAL_UART_IRQHandler+0x5b6>
 8009c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00c      	beq.n	8009c5e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fc2b 	bl	800a4a0 <UART_EndTransmit_IT>
    return;
 8009c4a:	e008      	b.n	8009c5e <HAL_UART_IRQHandler+0x5b6>
      return;
 8009c4c:	bf00      	nop
 8009c4e:	e006      	b.n	8009c5e <HAL_UART_IRQHandler+0x5b6>
    return;
 8009c50:	bf00      	nop
 8009c52:	e004      	b.n	8009c5e <HAL_UART_IRQHandler+0x5b6>
      return;
 8009c54:	bf00      	nop
 8009c56:	e002      	b.n	8009c5e <HAL_UART_IRQHandler+0x5b6>
      return;
 8009c58:	bf00      	nop
 8009c5a:	e000      	b.n	8009c5e <HAL_UART_IRQHandler+0x5b6>
    return;
 8009c5c:	bf00      	nop
  }

}
 8009c5e:	37e8      	adds	r7, #232	; 0xe8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b088      	sub	sp, #32
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	431a      	orrs	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009cd2:	f023 030c 	bic.w	r3, r3, #12
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	6812      	ldr	r2, [r2, #0]
 8009cda:	6979      	ldr	r1, [r7, #20]
 8009cdc:	430b      	orrs	r3, r1
 8009cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	68da      	ldr	r2, [r3, #12]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a1b      	ldr	r3, [r3, #32]
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	697a      	ldr	r2, [r7, #20]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4aa8      	ldr	r2, [pc, #672]	; (8009fc0 <UART_SetConfig+0x31c>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d120      	bne.n	8009d66 <UART_SetConfig+0xc2>
 8009d24:	4ba7      	ldr	r3, [pc, #668]	; (8009fc4 <UART_SetConfig+0x320>)
 8009d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d28:	f003 0303 	and.w	r3, r3, #3
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d817      	bhi.n	8009d60 <UART_SetConfig+0xbc>
 8009d30:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <UART_SetConfig+0x94>)
 8009d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d36:	bf00      	nop
 8009d38:	08009d49 	.word	0x08009d49
 8009d3c:	08009d55 	.word	0x08009d55
 8009d40:	08009d5b 	.word	0x08009d5b
 8009d44:	08009d4f 	.word	0x08009d4f
 8009d48:	2301      	movs	r3, #1
 8009d4a:	77fb      	strb	r3, [r7, #31]
 8009d4c:	e0b5      	b.n	8009eba <UART_SetConfig+0x216>
 8009d4e:	2302      	movs	r3, #2
 8009d50:	77fb      	strb	r3, [r7, #31]
 8009d52:	e0b2      	b.n	8009eba <UART_SetConfig+0x216>
 8009d54:	2304      	movs	r3, #4
 8009d56:	77fb      	strb	r3, [r7, #31]
 8009d58:	e0af      	b.n	8009eba <UART_SetConfig+0x216>
 8009d5a:	2308      	movs	r3, #8
 8009d5c:	77fb      	strb	r3, [r7, #31]
 8009d5e:	e0ac      	b.n	8009eba <UART_SetConfig+0x216>
 8009d60:	2310      	movs	r3, #16
 8009d62:	77fb      	strb	r3, [r7, #31]
 8009d64:	e0a9      	b.n	8009eba <UART_SetConfig+0x216>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a97      	ldr	r2, [pc, #604]	; (8009fc8 <UART_SetConfig+0x324>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d124      	bne.n	8009dba <UART_SetConfig+0x116>
 8009d70:	4b94      	ldr	r3, [pc, #592]	; (8009fc4 <UART_SetConfig+0x320>)
 8009d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d7c:	d011      	beq.n	8009da2 <UART_SetConfig+0xfe>
 8009d7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d82:	d817      	bhi.n	8009db4 <UART_SetConfig+0x110>
 8009d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d88:	d011      	beq.n	8009dae <UART_SetConfig+0x10a>
 8009d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d8e:	d811      	bhi.n	8009db4 <UART_SetConfig+0x110>
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d003      	beq.n	8009d9c <UART_SetConfig+0xf8>
 8009d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d98:	d006      	beq.n	8009da8 <UART_SetConfig+0x104>
 8009d9a:	e00b      	b.n	8009db4 <UART_SetConfig+0x110>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	77fb      	strb	r3, [r7, #31]
 8009da0:	e08b      	b.n	8009eba <UART_SetConfig+0x216>
 8009da2:	2302      	movs	r3, #2
 8009da4:	77fb      	strb	r3, [r7, #31]
 8009da6:	e088      	b.n	8009eba <UART_SetConfig+0x216>
 8009da8:	2304      	movs	r3, #4
 8009daa:	77fb      	strb	r3, [r7, #31]
 8009dac:	e085      	b.n	8009eba <UART_SetConfig+0x216>
 8009dae:	2308      	movs	r3, #8
 8009db0:	77fb      	strb	r3, [r7, #31]
 8009db2:	e082      	b.n	8009eba <UART_SetConfig+0x216>
 8009db4:	2310      	movs	r3, #16
 8009db6:	77fb      	strb	r3, [r7, #31]
 8009db8:	e07f      	b.n	8009eba <UART_SetConfig+0x216>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a83      	ldr	r2, [pc, #524]	; (8009fcc <UART_SetConfig+0x328>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d124      	bne.n	8009e0e <UART_SetConfig+0x16a>
 8009dc4:	4b7f      	ldr	r3, [pc, #508]	; (8009fc4 <UART_SetConfig+0x320>)
 8009dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009dcc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009dd0:	d011      	beq.n	8009df6 <UART_SetConfig+0x152>
 8009dd2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009dd6:	d817      	bhi.n	8009e08 <UART_SetConfig+0x164>
 8009dd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ddc:	d011      	beq.n	8009e02 <UART_SetConfig+0x15e>
 8009dde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009de2:	d811      	bhi.n	8009e08 <UART_SetConfig+0x164>
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d003      	beq.n	8009df0 <UART_SetConfig+0x14c>
 8009de8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009dec:	d006      	beq.n	8009dfc <UART_SetConfig+0x158>
 8009dee:	e00b      	b.n	8009e08 <UART_SetConfig+0x164>
 8009df0:	2300      	movs	r3, #0
 8009df2:	77fb      	strb	r3, [r7, #31]
 8009df4:	e061      	b.n	8009eba <UART_SetConfig+0x216>
 8009df6:	2302      	movs	r3, #2
 8009df8:	77fb      	strb	r3, [r7, #31]
 8009dfa:	e05e      	b.n	8009eba <UART_SetConfig+0x216>
 8009dfc:	2304      	movs	r3, #4
 8009dfe:	77fb      	strb	r3, [r7, #31]
 8009e00:	e05b      	b.n	8009eba <UART_SetConfig+0x216>
 8009e02:	2308      	movs	r3, #8
 8009e04:	77fb      	strb	r3, [r7, #31]
 8009e06:	e058      	b.n	8009eba <UART_SetConfig+0x216>
 8009e08:	2310      	movs	r3, #16
 8009e0a:	77fb      	strb	r3, [r7, #31]
 8009e0c:	e055      	b.n	8009eba <UART_SetConfig+0x216>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a6f      	ldr	r2, [pc, #444]	; (8009fd0 <UART_SetConfig+0x32c>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d124      	bne.n	8009e62 <UART_SetConfig+0x1be>
 8009e18:	4b6a      	ldr	r3, [pc, #424]	; (8009fc4 <UART_SetConfig+0x320>)
 8009e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009e20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e24:	d011      	beq.n	8009e4a <UART_SetConfig+0x1a6>
 8009e26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e2a:	d817      	bhi.n	8009e5c <UART_SetConfig+0x1b8>
 8009e2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e30:	d011      	beq.n	8009e56 <UART_SetConfig+0x1b2>
 8009e32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e36:	d811      	bhi.n	8009e5c <UART_SetConfig+0x1b8>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <UART_SetConfig+0x1a0>
 8009e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e40:	d006      	beq.n	8009e50 <UART_SetConfig+0x1ac>
 8009e42:	e00b      	b.n	8009e5c <UART_SetConfig+0x1b8>
 8009e44:	2300      	movs	r3, #0
 8009e46:	77fb      	strb	r3, [r7, #31]
 8009e48:	e037      	b.n	8009eba <UART_SetConfig+0x216>
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	77fb      	strb	r3, [r7, #31]
 8009e4e:	e034      	b.n	8009eba <UART_SetConfig+0x216>
 8009e50:	2304      	movs	r3, #4
 8009e52:	77fb      	strb	r3, [r7, #31]
 8009e54:	e031      	b.n	8009eba <UART_SetConfig+0x216>
 8009e56:	2308      	movs	r3, #8
 8009e58:	77fb      	strb	r3, [r7, #31]
 8009e5a:	e02e      	b.n	8009eba <UART_SetConfig+0x216>
 8009e5c:	2310      	movs	r3, #16
 8009e5e:	77fb      	strb	r3, [r7, #31]
 8009e60:	e02b      	b.n	8009eba <UART_SetConfig+0x216>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a5b      	ldr	r2, [pc, #364]	; (8009fd4 <UART_SetConfig+0x330>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d124      	bne.n	8009eb6 <UART_SetConfig+0x212>
 8009e6c:	4b55      	ldr	r3, [pc, #340]	; (8009fc4 <UART_SetConfig+0x320>)
 8009e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e70:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009e74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009e78:	d011      	beq.n	8009e9e <UART_SetConfig+0x1fa>
 8009e7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009e7e:	d817      	bhi.n	8009eb0 <UART_SetConfig+0x20c>
 8009e80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e84:	d011      	beq.n	8009eaa <UART_SetConfig+0x206>
 8009e86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e8a:	d811      	bhi.n	8009eb0 <UART_SetConfig+0x20c>
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d003      	beq.n	8009e98 <UART_SetConfig+0x1f4>
 8009e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e94:	d006      	beq.n	8009ea4 <UART_SetConfig+0x200>
 8009e96:	e00b      	b.n	8009eb0 <UART_SetConfig+0x20c>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	77fb      	strb	r3, [r7, #31]
 8009e9c:	e00d      	b.n	8009eba <UART_SetConfig+0x216>
 8009e9e:	2302      	movs	r3, #2
 8009ea0:	77fb      	strb	r3, [r7, #31]
 8009ea2:	e00a      	b.n	8009eba <UART_SetConfig+0x216>
 8009ea4:	2304      	movs	r3, #4
 8009ea6:	77fb      	strb	r3, [r7, #31]
 8009ea8:	e007      	b.n	8009eba <UART_SetConfig+0x216>
 8009eaa:	2308      	movs	r3, #8
 8009eac:	77fb      	strb	r3, [r7, #31]
 8009eae:	e004      	b.n	8009eba <UART_SetConfig+0x216>
 8009eb0:	2310      	movs	r3, #16
 8009eb2:	77fb      	strb	r3, [r7, #31]
 8009eb4:	e001      	b.n	8009eba <UART_SetConfig+0x216>
 8009eb6:	2310      	movs	r3, #16
 8009eb8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	69db      	ldr	r3, [r3, #28]
 8009ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ec2:	d15c      	bne.n	8009f7e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8009ec4:	7ffb      	ldrb	r3, [r7, #31]
 8009ec6:	2b08      	cmp	r3, #8
 8009ec8:	d827      	bhi.n	8009f1a <UART_SetConfig+0x276>
 8009eca:	a201      	add	r2, pc, #4	; (adr r2, 8009ed0 <UART_SetConfig+0x22c>)
 8009ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed0:	08009ef5 	.word	0x08009ef5
 8009ed4:	08009efd 	.word	0x08009efd
 8009ed8:	08009f05 	.word	0x08009f05
 8009edc:	08009f1b 	.word	0x08009f1b
 8009ee0:	08009f0b 	.word	0x08009f0b
 8009ee4:	08009f1b 	.word	0x08009f1b
 8009ee8:	08009f1b 	.word	0x08009f1b
 8009eec:	08009f1b 	.word	0x08009f1b
 8009ef0:	08009f13 	.word	0x08009f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ef4:	f7fd fffc 	bl	8007ef0 <HAL_RCC_GetPCLK1Freq>
 8009ef8:	61b8      	str	r0, [r7, #24]
        break;
 8009efa:	e013      	b.n	8009f24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009efc:	f7fe f81a 	bl	8007f34 <HAL_RCC_GetPCLK2Freq>
 8009f00:	61b8      	str	r0, [r7, #24]
        break;
 8009f02:	e00f      	b.n	8009f24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f04:	4b34      	ldr	r3, [pc, #208]	; (8009fd8 <UART_SetConfig+0x334>)
 8009f06:	61bb      	str	r3, [r7, #24]
        break;
 8009f08:	e00c      	b.n	8009f24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f0a:	f7fd ff7b 	bl	8007e04 <HAL_RCC_GetSysClockFreq>
 8009f0e:	61b8      	str	r0, [r7, #24]
        break;
 8009f10:	e008      	b.n	8009f24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f16:	61bb      	str	r3, [r7, #24]
        break;
 8009f18:	e004      	b.n	8009f24 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	77bb      	strb	r3, [r7, #30]
        break;
 8009f22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 8084 	beq.w	800a034 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	005a      	lsls	r2, r3, #1
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	085b      	lsrs	r3, r3, #1
 8009f36:	441a      	add	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	2b0f      	cmp	r3, #15
 8009f48:	d916      	bls.n	8009f78 <UART_SetConfig+0x2d4>
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f50:	d212      	bcs.n	8009f78 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	f023 030f 	bic.w	r3, r3, #15
 8009f5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	085b      	lsrs	r3, r3, #1
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	f003 0307 	and.w	r3, r3, #7
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	89fb      	ldrh	r3, [r7, #14]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	89fa      	ldrh	r2, [r7, #14]
 8009f74:	60da      	str	r2, [r3, #12]
 8009f76:	e05d      	b.n	800a034 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	77bb      	strb	r3, [r7, #30]
 8009f7c:	e05a      	b.n	800a034 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f7e:	7ffb      	ldrb	r3, [r7, #31]
 8009f80:	2b08      	cmp	r3, #8
 8009f82:	d836      	bhi.n	8009ff2 <UART_SetConfig+0x34e>
 8009f84:	a201      	add	r2, pc, #4	; (adr r2, 8009f8c <UART_SetConfig+0x2e8>)
 8009f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8a:	bf00      	nop
 8009f8c:	08009fb1 	.word	0x08009fb1
 8009f90:	08009fb9 	.word	0x08009fb9
 8009f94:	08009fdd 	.word	0x08009fdd
 8009f98:	08009ff3 	.word	0x08009ff3
 8009f9c:	08009fe3 	.word	0x08009fe3
 8009fa0:	08009ff3 	.word	0x08009ff3
 8009fa4:	08009ff3 	.word	0x08009ff3
 8009fa8:	08009ff3 	.word	0x08009ff3
 8009fac:	08009feb 	.word	0x08009feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fb0:	f7fd ff9e 	bl	8007ef0 <HAL_RCC_GetPCLK1Freq>
 8009fb4:	61b8      	str	r0, [r7, #24]
        break;
 8009fb6:	e021      	b.n	8009ffc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fb8:	f7fd ffbc 	bl	8007f34 <HAL_RCC_GetPCLK2Freq>
 8009fbc:	61b8      	str	r0, [r7, #24]
        break;
 8009fbe:	e01d      	b.n	8009ffc <UART_SetConfig+0x358>
 8009fc0:	40013800 	.word	0x40013800
 8009fc4:	40021000 	.word	0x40021000
 8009fc8:	40004400 	.word	0x40004400
 8009fcc:	40004800 	.word	0x40004800
 8009fd0:	40004c00 	.word	0x40004c00
 8009fd4:	40005000 	.word	0x40005000
 8009fd8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fdc:	4b1b      	ldr	r3, [pc, #108]	; (800a04c <UART_SetConfig+0x3a8>)
 8009fde:	61bb      	str	r3, [r7, #24]
        break;
 8009fe0:	e00c      	b.n	8009ffc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fe2:	f7fd ff0f 	bl	8007e04 <HAL_RCC_GetSysClockFreq>
 8009fe6:	61b8      	str	r0, [r7, #24]
        break;
 8009fe8:	e008      	b.n	8009ffc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fee:	61bb      	str	r3, [r7, #24]
        break;
 8009ff0:	e004      	b.n	8009ffc <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	77bb      	strb	r3, [r7, #30]
        break;
 8009ffa:	bf00      	nop
    }

    if (pclk != 0U)
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d018      	beq.n	800a034 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	085a      	lsrs	r2, r3, #1
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	441a      	add	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	fbb2 f3f3 	udiv	r3, r2, r3
 800a014:	b29b      	uxth	r3, r3
 800a016:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	2b0f      	cmp	r3, #15
 800a01c:	d908      	bls.n	800a030 <UART_SetConfig+0x38c>
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a024:	d204      	bcs.n	800a030 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	60da      	str	r2, [r3, #12]
 800a02e:	e001      	b.n	800a034 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a040:	7fbb      	ldrb	r3, [r7, #30]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3720      	adds	r7, #32
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	007a1200 	.word	0x007a1200

0800a050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	f003 0301 	and.w	r3, r3, #1
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00a      	beq.n	800a07a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07e:	f003 0302 	and.w	r3, r3, #2
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00a      	beq.n	800a09c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	430a      	orrs	r2, r1
 800a09a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	f003 0304 	and.w	r3, r3, #4
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00a      	beq.n	800a0be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c2:	f003 0308 	and.w	r3, r3, #8
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00a      	beq.n	800a0e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	430a      	orrs	r2, r1
 800a0de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e4:	f003 0310 	and.w	r3, r3, #16
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00a      	beq.n	800a102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	430a      	orrs	r2, r1
 800a100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	f003 0320 	and.w	r3, r3, #32
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00a      	beq.n	800a124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	430a      	orrs	r2, r1
 800a122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d01a      	beq.n	800a166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	430a      	orrs	r2, r1
 800a144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a14e:	d10a      	bne.n	800a166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	430a      	orrs	r2, r1
 800a164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00a      	beq.n	800a188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	430a      	orrs	r2, r1
 800a186:	605a      	str	r2, [r3, #4]
  }
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af02      	add	r7, sp, #8
 800a19a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1a4:	f7fa fba4 	bl	80048f0 <HAL_GetTick>
 800a1a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0308 	and.w	r3, r3, #8
 800a1b4:	2b08      	cmp	r3, #8
 800a1b6:	d10e      	bne.n	800a1d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f82d 	bl	800a226 <UART_WaitOnFlagUntilTimeout>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d001      	beq.n	800a1d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e023      	b.n	800a21e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0304 	and.w	r3, r3, #4
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	d10e      	bne.n	800a202 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f817 	bl	800a226 <UART_WaitOnFlagUntilTimeout>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1fe:	2303      	movs	r3, #3
 800a200:	e00d      	b.n	800a21e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2220      	movs	r2, #32
 800a206:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2220      	movs	r2, #32
 800a20c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b09c      	sub	sp, #112	; 0x70
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	60f8      	str	r0, [r7, #12]
 800a22e:	60b9      	str	r1, [r7, #8]
 800a230:	603b      	str	r3, [r7, #0]
 800a232:	4613      	mov	r3, r2
 800a234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a236:	e0a5      	b.n	800a384 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23e:	f000 80a1 	beq.w	800a384 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a242:	f7fa fb55 	bl	80048f0 <HAL_GetTick>
 800a246:	4602      	mov	r2, r0
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a24e:	429a      	cmp	r2, r3
 800a250:	d302      	bcc.n	800a258 <UART_WaitOnFlagUntilTimeout+0x32>
 800a252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a254:	2b00      	cmp	r3, #0
 800a256:	d13e      	bne.n	800a2d6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a260:	e853 3f00 	ldrex	r3, [r3]
 800a264:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a268:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a26c:	667b      	str	r3, [r7, #100]	; 0x64
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a276:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a278:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a27c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a27e:	e841 2300 	strex	r3, r2, [r1]
 800a282:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1e6      	bne.n	800a258 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	3308      	adds	r3, #8
 800a290:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a294:	e853 3f00 	ldrex	r3, [r3]
 800a298:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29c:	f023 0301 	bic.w	r3, r3, #1
 800a2a0:	663b      	str	r3, [r7, #96]	; 0x60
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a2aa:	64ba      	str	r2, [r7, #72]	; 0x48
 800a2ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2b2:	e841 2300 	strex	r3, r2, [r1]
 800a2b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1e5      	bne.n	800a28a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2220      	movs	r2, #32
 800a2c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2220      	movs	r2, #32
 800a2c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e067      	b.n	800a3a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0304 	and.w	r3, r3, #4
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d04f      	beq.n	800a384 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2f2:	d147      	bne.n	800a384 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a306:	e853 3f00 	ldrex	r3, [r3]
 800a30a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a312:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	461a      	mov	r2, r3
 800a31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a31c:	637b      	str	r3, [r7, #52]	; 0x34
 800a31e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a324:	e841 2300 	strex	r3, r2, [r1]
 800a328:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e6      	bne.n	800a2fe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3308      	adds	r3, #8
 800a336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	e853 3f00 	ldrex	r3, [r3]
 800a33e:	613b      	str	r3, [r7, #16]
   return(result);
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	f023 0301 	bic.w	r3, r3, #1
 800a346:	66bb      	str	r3, [r7, #104]	; 0x68
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3308      	adds	r3, #8
 800a34e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a350:	623a      	str	r2, [r7, #32]
 800a352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a354:	69f9      	ldr	r1, [r7, #28]
 800a356:	6a3a      	ldr	r2, [r7, #32]
 800a358:	e841 2300 	strex	r3, r2, [r1]
 800a35c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1e5      	bne.n	800a330 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2220      	movs	r2, #32
 800a368:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2220      	movs	r2, #32
 800a36e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2220      	movs	r2, #32
 800a374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a380:	2303      	movs	r3, #3
 800a382:	e010      	b.n	800a3a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	69da      	ldr	r2, [r3, #28]
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	4013      	ands	r3, r2
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	429a      	cmp	r2, r3
 800a392:	bf0c      	ite	eq
 800a394:	2301      	moveq	r3, #1
 800a396:	2300      	movne	r3, #0
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	461a      	mov	r2, r3
 800a39c:	79fb      	ldrb	r3, [r7, #7]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	f43f af4a 	beq.w	800a238 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3770      	adds	r7, #112	; 0x70
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b095      	sub	sp, #84	; 0x54
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3be:	e853 3f00 	ldrex	r3, [r3]
 800a3c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3d4:	643b      	str	r3, [r7, #64]	; 0x40
 800a3d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3dc:	e841 2300 	strex	r3, r2, [r1]
 800a3e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1e6      	bne.n	800a3b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	3308      	adds	r3, #8
 800a3ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	e853 3f00 	ldrex	r3, [r3]
 800a3f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	f023 0301 	bic.w	r3, r3, #1
 800a3fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	3308      	adds	r3, #8
 800a406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a408:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a40a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a40e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a410:	e841 2300 	strex	r3, r2, [r1]
 800a414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d1e5      	bne.n	800a3e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a420:	2b01      	cmp	r3, #1
 800a422:	d118      	bne.n	800a456 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	e853 3f00 	ldrex	r3, [r3]
 800a430:	60bb      	str	r3, [r7, #8]
   return(result);
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f023 0310 	bic.w	r3, r3, #16
 800a438:	647b      	str	r3, [r7, #68]	; 0x44
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	461a      	mov	r2, r3
 800a440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a442:	61bb      	str	r3, [r7, #24]
 800a444:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a446:	6979      	ldr	r1, [r7, #20]
 800a448:	69ba      	ldr	r2, [r7, #24]
 800a44a:	e841 2300 	strex	r3, r2, [r1]
 800a44e:	613b      	str	r3, [r7, #16]
   return(result);
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1e6      	bne.n	800a424 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2220      	movs	r2, #32
 800a45a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a468:	bf00      	nop
 800a46a:	3754      	adds	r7, #84	; 0x54
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f7ff fbf0 	bl	8009c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a498:	bf00      	nop
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b088      	sub	sp, #32
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	e853 3f00 	ldrex	r3, [r3]
 800a4b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4bc:	61fb      	str	r3, [r7, #28]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	61bb      	str	r3, [r7, #24]
 800a4c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ca:	6979      	ldr	r1, [r7, #20]
 800a4cc:	69ba      	ldr	r2, [r7, #24]
 800a4ce:	e841 2300 	strex	r3, r2, [r1]
 800a4d2:	613b      	str	r3, [r7, #16]
   return(result);
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1e6      	bne.n	800a4a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2220      	movs	r2, #32
 800a4de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff fbbc 	bl	8009c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4ec:	bf00      	nop
 800a4ee:	3720      	adds	r7, #32
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a510:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a514:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	b29b      	uxth	r3, r3
 800a522:	43db      	mvns	r3, r3
 800a524:	b29b      	uxth	r3, r3
 800a526:	4013      	ands	r3, r2
 800a528:	b29a      	uxth	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a53e:	b084      	sub	sp, #16
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	f107 0014 	add.w	r0, r7, #20
 800a54c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	b004      	add	sp, #16
 800a57e:	4770      	bx	lr

0800a580 <__errno>:
 800a580:	4b01      	ldr	r3, [pc, #4]	; (800a588 <__errno+0x8>)
 800a582:	6818      	ldr	r0, [r3, #0]
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	20000138 	.word	0x20000138

0800a58c <__libc_init_array>:
 800a58c:	b570      	push	{r4, r5, r6, lr}
 800a58e:	4d0d      	ldr	r5, [pc, #52]	; (800a5c4 <__libc_init_array+0x38>)
 800a590:	4c0d      	ldr	r4, [pc, #52]	; (800a5c8 <__libc_init_array+0x3c>)
 800a592:	1b64      	subs	r4, r4, r5
 800a594:	10a4      	asrs	r4, r4, #2
 800a596:	2600      	movs	r6, #0
 800a598:	42a6      	cmp	r6, r4
 800a59a:	d109      	bne.n	800a5b0 <__libc_init_array+0x24>
 800a59c:	4d0b      	ldr	r5, [pc, #44]	; (800a5cc <__libc_init_array+0x40>)
 800a59e:	4c0c      	ldr	r4, [pc, #48]	; (800a5d0 <__libc_init_array+0x44>)
 800a5a0:	f000 fcae 	bl	800af00 <_init>
 800a5a4:	1b64      	subs	r4, r4, r5
 800a5a6:	10a4      	asrs	r4, r4, #2
 800a5a8:	2600      	movs	r6, #0
 800a5aa:	42a6      	cmp	r6, r4
 800a5ac:	d105      	bne.n	800a5ba <__libc_init_array+0x2e>
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}
 800a5b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5b4:	4798      	blx	r3
 800a5b6:	3601      	adds	r6, #1
 800a5b8:	e7ee      	b.n	800a598 <__libc_init_array+0xc>
 800a5ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5be:	4798      	blx	r3
 800a5c0:	3601      	adds	r6, #1
 800a5c2:	e7f2      	b.n	800a5aa <__libc_init_array+0x1e>
 800a5c4:	0800b708 	.word	0x0800b708
 800a5c8:	0800b708 	.word	0x0800b708
 800a5cc:	0800b708 	.word	0x0800b708
 800a5d0:	0800b70c 	.word	0x0800b70c

0800a5d4 <malloc>:
 800a5d4:	4b02      	ldr	r3, [pc, #8]	; (800a5e0 <malloc+0xc>)
 800a5d6:	4601      	mov	r1, r0
 800a5d8:	6818      	ldr	r0, [r3, #0]
 800a5da:	f000 b885 	b.w	800a6e8 <_malloc_r>
 800a5de:	bf00      	nop
 800a5e0:	20000138 	.word	0x20000138

0800a5e4 <memcpy>:
 800a5e4:	440a      	add	r2, r1
 800a5e6:	4291      	cmp	r1, r2
 800a5e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5ec:	d100      	bne.n	800a5f0 <memcpy+0xc>
 800a5ee:	4770      	bx	lr
 800a5f0:	b510      	push	{r4, lr}
 800a5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5fa:	4291      	cmp	r1, r2
 800a5fc:	d1f9      	bne.n	800a5f2 <memcpy+0xe>
 800a5fe:	bd10      	pop	{r4, pc}

0800a600 <memset>:
 800a600:	4402      	add	r2, r0
 800a602:	4603      	mov	r3, r0
 800a604:	4293      	cmp	r3, r2
 800a606:	d100      	bne.n	800a60a <memset+0xa>
 800a608:	4770      	bx	lr
 800a60a:	f803 1b01 	strb.w	r1, [r3], #1
 800a60e:	e7f9      	b.n	800a604 <memset+0x4>

0800a610 <_free_r>:
 800a610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a612:	2900      	cmp	r1, #0
 800a614:	d044      	beq.n	800a6a0 <_free_r+0x90>
 800a616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a61a:	9001      	str	r0, [sp, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f1a1 0404 	sub.w	r4, r1, #4
 800a622:	bfb8      	it	lt
 800a624:	18e4      	addlt	r4, r4, r3
 800a626:	f000 f91b 	bl	800a860 <__malloc_lock>
 800a62a:	4a1e      	ldr	r2, [pc, #120]	; (800a6a4 <_free_r+0x94>)
 800a62c:	9801      	ldr	r0, [sp, #4]
 800a62e:	6813      	ldr	r3, [r2, #0]
 800a630:	b933      	cbnz	r3, 800a640 <_free_r+0x30>
 800a632:	6063      	str	r3, [r4, #4]
 800a634:	6014      	str	r4, [r2, #0]
 800a636:	b003      	add	sp, #12
 800a638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a63c:	f000 b916 	b.w	800a86c <__malloc_unlock>
 800a640:	42a3      	cmp	r3, r4
 800a642:	d908      	bls.n	800a656 <_free_r+0x46>
 800a644:	6825      	ldr	r5, [r4, #0]
 800a646:	1961      	adds	r1, r4, r5
 800a648:	428b      	cmp	r3, r1
 800a64a:	bf01      	itttt	eq
 800a64c:	6819      	ldreq	r1, [r3, #0]
 800a64e:	685b      	ldreq	r3, [r3, #4]
 800a650:	1949      	addeq	r1, r1, r5
 800a652:	6021      	streq	r1, [r4, #0]
 800a654:	e7ed      	b.n	800a632 <_free_r+0x22>
 800a656:	461a      	mov	r2, r3
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	b10b      	cbz	r3, 800a660 <_free_r+0x50>
 800a65c:	42a3      	cmp	r3, r4
 800a65e:	d9fa      	bls.n	800a656 <_free_r+0x46>
 800a660:	6811      	ldr	r1, [r2, #0]
 800a662:	1855      	adds	r5, r2, r1
 800a664:	42a5      	cmp	r5, r4
 800a666:	d10b      	bne.n	800a680 <_free_r+0x70>
 800a668:	6824      	ldr	r4, [r4, #0]
 800a66a:	4421      	add	r1, r4
 800a66c:	1854      	adds	r4, r2, r1
 800a66e:	42a3      	cmp	r3, r4
 800a670:	6011      	str	r1, [r2, #0]
 800a672:	d1e0      	bne.n	800a636 <_free_r+0x26>
 800a674:	681c      	ldr	r4, [r3, #0]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	6053      	str	r3, [r2, #4]
 800a67a:	4421      	add	r1, r4
 800a67c:	6011      	str	r1, [r2, #0]
 800a67e:	e7da      	b.n	800a636 <_free_r+0x26>
 800a680:	d902      	bls.n	800a688 <_free_r+0x78>
 800a682:	230c      	movs	r3, #12
 800a684:	6003      	str	r3, [r0, #0]
 800a686:	e7d6      	b.n	800a636 <_free_r+0x26>
 800a688:	6825      	ldr	r5, [r4, #0]
 800a68a:	1961      	adds	r1, r4, r5
 800a68c:	428b      	cmp	r3, r1
 800a68e:	bf04      	itt	eq
 800a690:	6819      	ldreq	r1, [r3, #0]
 800a692:	685b      	ldreq	r3, [r3, #4]
 800a694:	6063      	str	r3, [r4, #4]
 800a696:	bf04      	itt	eq
 800a698:	1949      	addeq	r1, r1, r5
 800a69a:	6021      	streq	r1, [r4, #0]
 800a69c:	6054      	str	r4, [r2, #4]
 800a69e:	e7ca      	b.n	800a636 <_free_r+0x26>
 800a6a0:	b003      	add	sp, #12
 800a6a2:	bd30      	pop	{r4, r5, pc}
 800a6a4:	20000890 	.word	0x20000890

0800a6a8 <sbrk_aligned>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	4e0e      	ldr	r6, [pc, #56]	; (800a6e4 <sbrk_aligned+0x3c>)
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	6831      	ldr	r1, [r6, #0]
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	b911      	cbnz	r1, 800a6ba <sbrk_aligned+0x12>
 800a6b4:	f000 f88c 	bl	800a7d0 <_sbrk_r>
 800a6b8:	6030      	str	r0, [r6, #0]
 800a6ba:	4621      	mov	r1, r4
 800a6bc:	4628      	mov	r0, r5
 800a6be:	f000 f887 	bl	800a7d0 <_sbrk_r>
 800a6c2:	1c43      	adds	r3, r0, #1
 800a6c4:	d00a      	beq.n	800a6dc <sbrk_aligned+0x34>
 800a6c6:	1cc4      	adds	r4, r0, #3
 800a6c8:	f024 0403 	bic.w	r4, r4, #3
 800a6cc:	42a0      	cmp	r0, r4
 800a6ce:	d007      	beq.n	800a6e0 <sbrk_aligned+0x38>
 800a6d0:	1a21      	subs	r1, r4, r0
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f000 f87c 	bl	800a7d0 <_sbrk_r>
 800a6d8:	3001      	adds	r0, #1
 800a6da:	d101      	bne.n	800a6e0 <sbrk_aligned+0x38>
 800a6dc:	f04f 34ff 	mov.w	r4, #4294967295
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	bd70      	pop	{r4, r5, r6, pc}
 800a6e4:	20000894 	.word	0x20000894

0800a6e8 <_malloc_r>:
 800a6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ec:	1ccd      	adds	r5, r1, #3
 800a6ee:	f025 0503 	bic.w	r5, r5, #3
 800a6f2:	3508      	adds	r5, #8
 800a6f4:	2d0c      	cmp	r5, #12
 800a6f6:	bf38      	it	cc
 800a6f8:	250c      	movcc	r5, #12
 800a6fa:	2d00      	cmp	r5, #0
 800a6fc:	4607      	mov	r7, r0
 800a6fe:	db01      	blt.n	800a704 <_malloc_r+0x1c>
 800a700:	42a9      	cmp	r1, r5
 800a702:	d905      	bls.n	800a710 <_malloc_r+0x28>
 800a704:	230c      	movs	r3, #12
 800a706:	603b      	str	r3, [r7, #0]
 800a708:	2600      	movs	r6, #0
 800a70a:	4630      	mov	r0, r6
 800a70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a710:	4e2e      	ldr	r6, [pc, #184]	; (800a7cc <_malloc_r+0xe4>)
 800a712:	f000 f8a5 	bl	800a860 <__malloc_lock>
 800a716:	6833      	ldr	r3, [r6, #0]
 800a718:	461c      	mov	r4, r3
 800a71a:	bb34      	cbnz	r4, 800a76a <_malloc_r+0x82>
 800a71c:	4629      	mov	r1, r5
 800a71e:	4638      	mov	r0, r7
 800a720:	f7ff ffc2 	bl	800a6a8 <sbrk_aligned>
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	4604      	mov	r4, r0
 800a728:	d14d      	bne.n	800a7c6 <_malloc_r+0xde>
 800a72a:	6834      	ldr	r4, [r6, #0]
 800a72c:	4626      	mov	r6, r4
 800a72e:	2e00      	cmp	r6, #0
 800a730:	d140      	bne.n	800a7b4 <_malloc_r+0xcc>
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	4631      	mov	r1, r6
 800a736:	4638      	mov	r0, r7
 800a738:	eb04 0803 	add.w	r8, r4, r3
 800a73c:	f000 f848 	bl	800a7d0 <_sbrk_r>
 800a740:	4580      	cmp	r8, r0
 800a742:	d13a      	bne.n	800a7ba <_malloc_r+0xd2>
 800a744:	6821      	ldr	r1, [r4, #0]
 800a746:	3503      	adds	r5, #3
 800a748:	1a6d      	subs	r5, r5, r1
 800a74a:	f025 0503 	bic.w	r5, r5, #3
 800a74e:	3508      	adds	r5, #8
 800a750:	2d0c      	cmp	r5, #12
 800a752:	bf38      	it	cc
 800a754:	250c      	movcc	r5, #12
 800a756:	4629      	mov	r1, r5
 800a758:	4638      	mov	r0, r7
 800a75a:	f7ff ffa5 	bl	800a6a8 <sbrk_aligned>
 800a75e:	3001      	adds	r0, #1
 800a760:	d02b      	beq.n	800a7ba <_malloc_r+0xd2>
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	442b      	add	r3, r5
 800a766:	6023      	str	r3, [r4, #0]
 800a768:	e00e      	b.n	800a788 <_malloc_r+0xa0>
 800a76a:	6822      	ldr	r2, [r4, #0]
 800a76c:	1b52      	subs	r2, r2, r5
 800a76e:	d41e      	bmi.n	800a7ae <_malloc_r+0xc6>
 800a770:	2a0b      	cmp	r2, #11
 800a772:	d916      	bls.n	800a7a2 <_malloc_r+0xba>
 800a774:	1961      	adds	r1, r4, r5
 800a776:	42a3      	cmp	r3, r4
 800a778:	6025      	str	r5, [r4, #0]
 800a77a:	bf18      	it	ne
 800a77c:	6059      	strne	r1, [r3, #4]
 800a77e:	6863      	ldr	r3, [r4, #4]
 800a780:	bf08      	it	eq
 800a782:	6031      	streq	r1, [r6, #0]
 800a784:	5162      	str	r2, [r4, r5]
 800a786:	604b      	str	r3, [r1, #4]
 800a788:	4638      	mov	r0, r7
 800a78a:	f104 060b 	add.w	r6, r4, #11
 800a78e:	f000 f86d 	bl	800a86c <__malloc_unlock>
 800a792:	f026 0607 	bic.w	r6, r6, #7
 800a796:	1d23      	adds	r3, r4, #4
 800a798:	1af2      	subs	r2, r6, r3
 800a79a:	d0b6      	beq.n	800a70a <_malloc_r+0x22>
 800a79c:	1b9b      	subs	r3, r3, r6
 800a79e:	50a3      	str	r3, [r4, r2]
 800a7a0:	e7b3      	b.n	800a70a <_malloc_r+0x22>
 800a7a2:	6862      	ldr	r2, [r4, #4]
 800a7a4:	42a3      	cmp	r3, r4
 800a7a6:	bf0c      	ite	eq
 800a7a8:	6032      	streq	r2, [r6, #0]
 800a7aa:	605a      	strne	r2, [r3, #4]
 800a7ac:	e7ec      	b.n	800a788 <_malloc_r+0xa0>
 800a7ae:	4623      	mov	r3, r4
 800a7b0:	6864      	ldr	r4, [r4, #4]
 800a7b2:	e7b2      	b.n	800a71a <_malloc_r+0x32>
 800a7b4:	4634      	mov	r4, r6
 800a7b6:	6876      	ldr	r6, [r6, #4]
 800a7b8:	e7b9      	b.n	800a72e <_malloc_r+0x46>
 800a7ba:	230c      	movs	r3, #12
 800a7bc:	603b      	str	r3, [r7, #0]
 800a7be:	4638      	mov	r0, r7
 800a7c0:	f000 f854 	bl	800a86c <__malloc_unlock>
 800a7c4:	e7a1      	b.n	800a70a <_malloc_r+0x22>
 800a7c6:	6025      	str	r5, [r4, #0]
 800a7c8:	e7de      	b.n	800a788 <_malloc_r+0xa0>
 800a7ca:	bf00      	nop
 800a7cc:	20000890 	.word	0x20000890

0800a7d0 <_sbrk_r>:
 800a7d0:	b538      	push	{r3, r4, r5, lr}
 800a7d2:	4d06      	ldr	r5, [pc, #24]	; (800a7ec <_sbrk_r+0x1c>)
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	4608      	mov	r0, r1
 800a7da:	602b      	str	r3, [r5, #0]
 800a7dc:	f7f9 ffbc 	bl	8004758 <_sbrk>
 800a7e0:	1c43      	adds	r3, r0, #1
 800a7e2:	d102      	bne.n	800a7ea <_sbrk_r+0x1a>
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	b103      	cbz	r3, 800a7ea <_sbrk_r+0x1a>
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	20000898 	.word	0x20000898

0800a7f0 <siprintf>:
 800a7f0:	b40e      	push	{r1, r2, r3}
 800a7f2:	b500      	push	{lr}
 800a7f4:	b09c      	sub	sp, #112	; 0x70
 800a7f6:	ab1d      	add	r3, sp, #116	; 0x74
 800a7f8:	9002      	str	r0, [sp, #8]
 800a7fa:	9006      	str	r0, [sp, #24]
 800a7fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a800:	4809      	ldr	r0, [pc, #36]	; (800a828 <siprintf+0x38>)
 800a802:	9107      	str	r1, [sp, #28]
 800a804:	9104      	str	r1, [sp, #16]
 800a806:	4909      	ldr	r1, [pc, #36]	; (800a82c <siprintf+0x3c>)
 800a808:	f853 2b04 	ldr.w	r2, [r3], #4
 800a80c:	9105      	str	r1, [sp, #20]
 800a80e:	6800      	ldr	r0, [r0, #0]
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	a902      	add	r1, sp, #8
 800a814:	f000 f88c 	bl	800a930 <_svfiprintf_r>
 800a818:	9b02      	ldr	r3, [sp, #8]
 800a81a:	2200      	movs	r2, #0
 800a81c:	701a      	strb	r2, [r3, #0]
 800a81e:	b01c      	add	sp, #112	; 0x70
 800a820:	f85d eb04 	ldr.w	lr, [sp], #4
 800a824:	b003      	add	sp, #12
 800a826:	4770      	bx	lr
 800a828:	20000138 	.word	0x20000138
 800a82c:	ffff0208 	.word	0xffff0208

0800a830 <strcat>:
 800a830:	b510      	push	{r4, lr}
 800a832:	4602      	mov	r2, r0
 800a834:	7814      	ldrb	r4, [r2, #0]
 800a836:	4613      	mov	r3, r2
 800a838:	3201      	adds	r2, #1
 800a83a:	2c00      	cmp	r4, #0
 800a83c:	d1fa      	bne.n	800a834 <strcat+0x4>
 800a83e:	3b01      	subs	r3, #1
 800a840:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a844:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a848:	2a00      	cmp	r2, #0
 800a84a:	d1f9      	bne.n	800a840 <strcat+0x10>
 800a84c:	bd10      	pop	{r4, pc}

0800a84e <strcpy>:
 800a84e:	4603      	mov	r3, r0
 800a850:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a854:	f803 2b01 	strb.w	r2, [r3], #1
 800a858:	2a00      	cmp	r2, #0
 800a85a:	d1f9      	bne.n	800a850 <strcpy+0x2>
 800a85c:	4770      	bx	lr
	...

0800a860 <__malloc_lock>:
 800a860:	4801      	ldr	r0, [pc, #4]	; (800a868 <__malloc_lock+0x8>)
 800a862:	f000 baf9 	b.w	800ae58 <__retarget_lock_acquire_recursive>
 800a866:	bf00      	nop
 800a868:	2000089c 	.word	0x2000089c

0800a86c <__malloc_unlock>:
 800a86c:	4801      	ldr	r0, [pc, #4]	; (800a874 <__malloc_unlock+0x8>)
 800a86e:	f000 baf4 	b.w	800ae5a <__retarget_lock_release_recursive>
 800a872:	bf00      	nop
 800a874:	2000089c 	.word	0x2000089c

0800a878 <__ssputs_r>:
 800a878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a87c:	688e      	ldr	r6, [r1, #8]
 800a87e:	429e      	cmp	r6, r3
 800a880:	4682      	mov	sl, r0
 800a882:	460c      	mov	r4, r1
 800a884:	4690      	mov	r8, r2
 800a886:	461f      	mov	r7, r3
 800a888:	d838      	bhi.n	800a8fc <__ssputs_r+0x84>
 800a88a:	898a      	ldrh	r2, [r1, #12]
 800a88c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a890:	d032      	beq.n	800a8f8 <__ssputs_r+0x80>
 800a892:	6825      	ldr	r5, [r4, #0]
 800a894:	6909      	ldr	r1, [r1, #16]
 800a896:	eba5 0901 	sub.w	r9, r5, r1
 800a89a:	6965      	ldr	r5, [r4, #20]
 800a89c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	444b      	add	r3, r9
 800a8a8:	106d      	asrs	r5, r5, #1
 800a8aa:	429d      	cmp	r5, r3
 800a8ac:	bf38      	it	cc
 800a8ae:	461d      	movcc	r5, r3
 800a8b0:	0553      	lsls	r3, r2, #21
 800a8b2:	d531      	bpl.n	800a918 <__ssputs_r+0xa0>
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	f7ff ff17 	bl	800a6e8 <_malloc_r>
 800a8ba:	4606      	mov	r6, r0
 800a8bc:	b950      	cbnz	r0, 800a8d4 <__ssputs_r+0x5c>
 800a8be:	230c      	movs	r3, #12
 800a8c0:	f8ca 3000 	str.w	r3, [sl]
 800a8c4:	89a3      	ldrh	r3, [r4, #12]
 800a8c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ca:	81a3      	strh	r3, [r4, #12]
 800a8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d4:	6921      	ldr	r1, [r4, #16]
 800a8d6:	464a      	mov	r2, r9
 800a8d8:	f7ff fe84 	bl	800a5e4 <memcpy>
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e6:	81a3      	strh	r3, [r4, #12]
 800a8e8:	6126      	str	r6, [r4, #16]
 800a8ea:	6165      	str	r5, [r4, #20]
 800a8ec:	444e      	add	r6, r9
 800a8ee:	eba5 0509 	sub.w	r5, r5, r9
 800a8f2:	6026      	str	r6, [r4, #0]
 800a8f4:	60a5      	str	r5, [r4, #8]
 800a8f6:	463e      	mov	r6, r7
 800a8f8:	42be      	cmp	r6, r7
 800a8fa:	d900      	bls.n	800a8fe <__ssputs_r+0x86>
 800a8fc:	463e      	mov	r6, r7
 800a8fe:	6820      	ldr	r0, [r4, #0]
 800a900:	4632      	mov	r2, r6
 800a902:	4641      	mov	r1, r8
 800a904:	f000 faaa 	bl	800ae5c <memmove>
 800a908:	68a3      	ldr	r3, [r4, #8]
 800a90a:	1b9b      	subs	r3, r3, r6
 800a90c:	60a3      	str	r3, [r4, #8]
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	4433      	add	r3, r6
 800a912:	6023      	str	r3, [r4, #0]
 800a914:	2000      	movs	r0, #0
 800a916:	e7db      	b.n	800a8d0 <__ssputs_r+0x58>
 800a918:	462a      	mov	r2, r5
 800a91a:	f000 fab9 	bl	800ae90 <_realloc_r>
 800a91e:	4606      	mov	r6, r0
 800a920:	2800      	cmp	r0, #0
 800a922:	d1e1      	bne.n	800a8e8 <__ssputs_r+0x70>
 800a924:	6921      	ldr	r1, [r4, #16]
 800a926:	4650      	mov	r0, sl
 800a928:	f7ff fe72 	bl	800a610 <_free_r>
 800a92c:	e7c7      	b.n	800a8be <__ssputs_r+0x46>
	...

0800a930 <_svfiprintf_r>:
 800a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	4698      	mov	r8, r3
 800a936:	898b      	ldrh	r3, [r1, #12]
 800a938:	061b      	lsls	r3, r3, #24
 800a93a:	b09d      	sub	sp, #116	; 0x74
 800a93c:	4607      	mov	r7, r0
 800a93e:	460d      	mov	r5, r1
 800a940:	4614      	mov	r4, r2
 800a942:	d50e      	bpl.n	800a962 <_svfiprintf_r+0x32>
 800a944:	690b      	ldr	r3, [r1, #16]
 800a946:	b963      	cbnz	r3, 800a962 <_svfiprintf_r+0x32>
 800a948:	2140      	movs	r1, #64	; 0x40
 800a94a:	f7ff fecd 	bl	800a6e8 <_malloc_r>
 800a94e:	6028      	str	r0, [r5, #0]
 800a950:	6128      	str	r0, [r5, #16]
 800a952:	b920      	cbnz	r0, 800a95e <_svfiprintf_r+0x2e>
 800a954:	230c      	movs	r3, #12
 800a956:	603b      	str	r3, [r7, #0]
 800a958:	f04f 30ff 	mov.w	r0, #4294967295
 800a95c:	e0d1      	b.n	800ab02 <_svfiprintf_r+0x1d2>
 800a95e:	2340      	movs	r3, #64	; 0x40
 800a960:	616b      	str	r3, [r5, #20]
 800a962:	2300      	movs	r3, #0
 800a964:	9309      	str	r3, [sp, #36]	; 0x24
 800a966:	2320      	movs	r3, #32
 800a968:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a96c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a970:	2330      	movs	r3, #48	; 0x30
 800a972:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab1c <_svfiprintf_r+0x1ec>
 800a976:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a97a:	f04f 0901 	mov.w	r9, #1
 800a97e:	4623      	mov	r3, r4
 800a980:	469a      	mov	sl, r3
 800a982:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a986:	b10a      	cbz	r2, 800a98c <_svfiprintf_r+0x5c>
 800a988:	2a25      	cmp	r2, #37	; 0x25
 800a98a:	d1f9      	bne.n	800a980 <_svfiprintf_r+0x50>
 800a98c:	ebba 0b04 	subs.w	fp, sl, r4
 800a990:	d00b      	beq.n	800a9aa <_svfiprintf_r+0x7a>
 800a992:	465b      	mov	r3, fp
 800a994:	4622      	mov	r2, r4
 800a996:	4629      	mov	r1, r5
 800a998:	4638      	mov	r0, r7
 800a99a:	f7ff ff6d 	bl	800a878 <__ssputs_r>
 800a99e:	3001      	adds	r0, #1
 800a9a0:	f000 80aa 	beq.w	800aaf8 <_svfiprintf_r+0x1c8>
 800a9a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9a6:	445a      	add	r2, fp
 800a9a8:	9209      	str	r2, [sp, #36]	; 0x24
 800a9aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f000 80a2 	beq.w	800aaf8 <_svfiprintf_r+0x1c8>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9be:	f10a 0a01 	add.w	sl, sl, #1
 800a9c2:	9304      	str	r3, [sp, #16]
 800a9c4:	9307      	str	r3, [sp, #28]
 800a9c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9ca:	931a      	str	r3, [sp, #104]	; 0x68
 800a9cc:	4654      	mov	r4, sl
 800a9ce:	2205      	movs	r2, #5
 800a9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9d4:	4851      	ldr	r0, [pc, #324]	; (800ab1c <_svfiprintf_r+0x1ec>)
 800a9d6:	f7f5 fc13 	bl	8000200 <memchr>
 800a9da:	9a04      	ldr	r2, [sp, #16]
 800a9dc:	b9d8      	cbnz	r0, 800aa16 <_svfiprintf_r+0xe6>
 800a9de:	06d0      	lsls	r0, r2, #27
 800a9e0:	bf44      	itt	mi
 800a9e2:	2320      	movmi	r3, #32
 800a9e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9e8:	0711      	lsls	r1, r2, #28
 800a9ea:	bf44      	itt	mi
 800a9ec:	232b      	movmi	r3, #43	; 0x2b
 800a9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9f8:	d015      	beq.n	800aa26 <_svfiprintf_r+0xf6>
 800a9fa:	9a07      	ldr	r2, [sp, #28]
 800a9fc:	4654      	mov	r4, sl
 800a9fe:	2000      	movs	r0, #0
 800aa00:	f04f 0c0a 	mov.w	ip, #10
 800aa04:	4621      	mov	r1, r4
 800aa06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa0a:	3b30      	subs	r3, #48	; 0x30
 800aa0c:	2b09      	cmp	r3, #9
 800aa0e:	d94e      	bls.n	800aaae <_svfiprintf_r+0x17e>
 800aa10:	b1b0      	cbz	r0, 800aa40 <_svfiprintf_r+0x110>
 800aa12:	9207      	str	r2, [sp, #28]
 800aa14:	e014      	b.n	800aa40 <_svfiprintf_r+0x110>
 800aa16:	eba0 0308 	sub.w	r3, r0, r8
 800aa1a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	9304      	str	r3, [sp, #16]
 800aa22:	46a2      	mov	sl, r4
 800aa24:	e7d2      	b.n	800a9cc <_svfiprintf_r+0x9c>
 800aa26:	9b03      	ldr	r3, [sp, #12]
 800aa28:	1d19      	adds	r1, r3, #4
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	9103      	str	r1, [sp, #12]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	bfbb      	ittet	lt
 800aa32:	425b      	neglt	r3, r3
 800aa34:	f042 0202 	orrlt.w	r2, r2, #2
 800aa38:	9307      	strge	r3, [sp, #28]
 800aa3a:	9307      	strlt	r3, [sp, #28]
 800aa3c:	bfb8      	it	lt
 800aa3e:	9204      	strlt	r2, [sp, #16]
 800aa40:	7823      	ldrb	r3, [r4, #0]
 800aa42:	2b2e      	cmp	r3, #46	; 0x2e
 800aa44:	d10c      	bne.n	800aa60 <_svfiprintf_r+0x130>
 800aa46:	7863      	ldrb	r3, [r4, #1]
 800aa48:	2b2a      	cmp	r3, #42	; 0x2a
 800aa4a:	d135      	bne.n	800aab8 <_svfiprintf_r+0x188>
 800aa4c:	9b03      	ldr	r3, [sp, #12]
 800aa4e:	1d1a      	adds	r2, r3, #4
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	9203      	str	r2, [sp, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	bfb8      	it	lt
 800aa58:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa5c:	3402      	adds	r4, #2
 800aa5e:	9305      	str	r3, [sp, #20]
 800aa60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab2c <_svfiprintf_r+0x1fc>
 800aa64:	7821      	ldrb	r1, [r4, #0]
 800aa66:	2203      	movs	r2, #3
 800aa68:	4650      	mov	r0, sl
 800aa6a:	f7f5 fbc9 	bl	8000200 <memchr>
 800aa6e:	b140      	cbz	r0, 800aa82 <_svfiprintf_r+0x152>
 800aa70:	2340      	movs	r3, #64	; 0x40
 800aa72:	eba0 000a 	sub.w	r0, r0, sl
 800aa76:	fa03 f000 	lsl.w	r0, r3, r0
 800aa7a:	9b04      	ldr	r3, [sp, #16]
 800aa7c:	4303      	orrs	r3, r0
 800aa7e:	3401      	adds	r4, #1
 800aa80:	9304      	str	r3, [sp, #16]
 800aa82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa86:	4826      	ldr	r0, [pc, #152]	; (800ab20 <_svfiprintf_r+0x1f0>)
 800aa88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa8c:	2206      	movs	r2, #6
 800aa8e:	f7f5 fbb7 	bl	8000200 <memchr>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d038      	beq.n	800ab08 <_svfiprintf_r+0x1d8>
 800aa96:	4b23      	ldr	r3, [pc, #140]	; (800ab24 <_svfiprintf_r+0x1f4>)
 800aa98:	bb1b      	cbnz	r3, 800aae2 <_svfiprintf_r+0x1b2>
 800aa9a:	9b03      	ldr	r3, [sp, #12]
 800aa9c:	3307      	adds	r3, #7
 800aa9e:	f023 0307 	bic.w	r3, r3, #7
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	9303      	str	r3, [sp, #12]
 800aaa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa8:	4433      	add	r3, r6
 800aaaa:	9309      	str	r3, [sp, #36]	; 0x24
 800aaac:	e767      	b.n	800a97e <_svfiprintf_r+0x4e>
 800aaae:	fb0c 3202 	mla	r2, ip, r2, r3
 800aab2:	460c      	mov	r4, r1
 800aab4:	2001      	movs	r0, #1
 800aab6:	e7a5      	b.n	800aa04 <_svfiprintf_r+0xd4>
 800aab8:	2300      	movs	r3, #0
 800aaba:	3401      	adds	r4, #1
 800aabc:	9305      	str	r3, [sp, #20]
 800aabe:	4619      	mov	r1, r3
 800aac0:	f04f 0c0a 	mov.w	ip, #10
 800aac4:	4620      	mov	r0, r4
 800aac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaca:	3a30      	subs	r2, #48	; 0x30
 800aacc:	2a09      	cmp	r2, #9
 800aace:	d903      	bls.n	800aad8 <_svfiprintf_r+0x1a8>
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d0c5      	beq.n	800aa60 <_svfiprintf_r+0x130>
 800aad4:	9105      	str	r1, [sp, #20]
 800aad6:	e7c3      	b.n	800aa60 <_svfiprintf_r+0x130>
 800aad8:	fb0c 2101 	mla	r1, ip, r1, r2
 800aadc:	4604      	mov	r4, r0
 800aade:	2301      	movs	r3, #1
 800aae0:	e7f0      	b.n	800aac4 <_svfiprintf_r+0x194>
 800aae2:	ab03      	add	r3, sp, #12
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	462a      	mov	r2, r5
 800aae8:	4b0f      	ldr	r3, [pc, #60]	; (800ab28 <_svfiprintf_r+0x1f8>)
 800aaea:	a904      	add	r1, sp, #16
 800aaec:	4638      	mov	r0, r7
 800aaee:	f3af 8000 	nop.w
 800aaf2:	1c42      	adds	r2, r0, #1
 800aaf4:	4606      	mov	r6, r0
 800aaf6:	d1d6      	bne.n	800aaa6 <_svfiprintf_r+0x176>
 800aaf8:	89ab      	ldrh	r3, [r5, #12]
 800aafa:	065b      	lsls	r3, r3, #25
 800aafc:	f53f af2c 	bmi.w	800a958 <_svfiprintf_r+0x28>
 800ab00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab02:	b01d      	add	sp, #116	; 0x74
 800ab04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab08:	ab03      	add	r3, sp, #12
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	462a      	mov	r2, r5
 800ab0e:	4b06      	ldr	r3, [pc, #24]	; (800ab28 <_svfiprintf_r+0x1f8>)
 800ab10:	a904      	add	r1, sp, #16
 800ab12:	4638      	mov	r0, r7
 800ab14:	f000 f87a 	bl	800ac0c <_printf_i>
 800ab18:	e7eb      	b.n	800aaf2 <_svfiprintf_r+0x1c2>
 800ab1a:	bf00      	nop
 800ab1c:	0800b6d4 	.word	0x0800b6d4
 800ab20:	0800b6de 	.word	0x0800b6de
 800ab24:	00000000 	.word	0x00000000
 800ab28:	0800a879 	.word	0x0800a879
 800ab2c:	0800b6da 	.word	0x0800b6da

0800ab30 <_printf_common>:
 800ab30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab34:	4616      	mov	r6, r2
 800ab36:	4699      	mov	r9, r3
 800ab38:	688a      	ldr	r2, [r1, #8]
 800ab3a:	690b      	ldr	r3, [r1, #16]
 800ab3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab40:	4293      	cmp	r3, r2
 800ab42:	bfb8      	it	lt
 800ab44:	4613      	movlt	r3, r2
 800ab46:	6033      	str	r3, [r6, #0]
 800ab48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab4c:	4607      	mov	r7, r0
 800ab4e:	460c      	mov	r4, r1
 800ab50:	b10a      	cbz	r2, 800ab56 <_printf_common+0x26>
 800ab52:	3301      	adds	r3, #1
 800ab54:	6033      	str	r3, [r6, #0]
 800ab56:	6823      	ldr	r3, [r4, #0]
 800ab58:	0699      	lsls	r1, r3, #26
 800ab5a:	bf42      	ittt	mi
 800ab5c:	6833      	ldrmi	r3, [r6, #0]
 800ab5e:	3302      	addmi	r3, #2
 800ab60:	6033      	strmi	r3, [r6, #0]
 800ab62:	6825      	ldr	r5, [r4, #0]
 800ab64:	f015 0506 	ands.w	r5, r5, #6
 800ab68:	d106      	bne.n	800ab78 <_printf_common+0x48>
 800ab6a:	f104 0a19 	add.w	sl, r4, #25
 800ab6e:	68e3      	ldr	r3, [r4, #12]
 800ab70:	6832      	ldr	r2, [r6, #0]
 800ab72:	1a9b      	subs	r3, r3, r2
 800ab74:	42ab      	cmp	r3, r5
 800ab76:	dc26      	bgt.n	800abc6 <_printf_common+0x96>
 800ab78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab7c:	1e13      	subs	r3, r2, #0
 800ab7e:	6822      	ldr	r2, [r4, #0]
 800ab80:	bf18      	it	ne
 800ab82:	2301      	movne	r3, #1
 800ab84:	0692      	lsls	r2, r2, #26
 800ab86:	d42b      	bmi.n	800abe0 <_printf_common+0xb0>
 800ab88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	4638      	mov	r0, r7
 800ab90:	47c0      	blx	r8
 800ab92:	3001      	adds	r0, #1
 800ab94:	d01e      	beq.n	800abd4 <_printf_common+0xa4>
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	68e5      	ldr	r5, [r4, #12]
 800ab9a:	6832      	ldr	r2, [r6, #0]
 800ab9c:	f003 0306 	and.w	r3, r3, #6
 800aba0:	2b04      	cmp	r3, #4
 800aba2:	bf08      	it	eq
 800aba4:	1aad      	subeq	r5, r5, r2
 800aba6:	68a3      	ldr	r3, [r4, #8]
 800aba8:	6922      	ldr	r2, [r4, #16]
 800abaa:	bf0c      	ite	eq
 800abac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abb0:	2500      	movne	r5, #0
 800abb2:	4293      	cmp	r3, r2
 800abb4:	bfc4      	itt	gt
 800abb6:	1a9b      	subgt	r3, r3, r2
 800abb8:	18ed      	addgt	r5, r5, r3
 800abba:	2600      	movs	r6, #0
 800abbc:	341a      	adds	r4, #26
 800abbe:	42b5      	cmp	r5, r6
 800abc0:	d11a      	bne.n	800abf8 <_printf_common+0xc8>
 800abc2:	2000      	movs	r0, #0
 800abc4:	e008      	b.n	800abd8 <_printf_common+0xa8>
 800abc6:	2301      	movs	r3, #1
 800abc8:	4652      	mov	r2, sl
 800abca:	4649      	mov	r1, r9
 800abcc:	4638      	mov	r0, r7
 800abce:	47c0      	blx	r8
 800abd0:	3001      	adds	r0, #1
 800abd2:	d103      	bne.n	800abdc <_printf_common+0xac>
 800abd4:	f04f 30ff 	mov.w	r0, #4294967295
 800abd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abdc:	3501      	adds	r5, #1
 800abde:	e7c6      	b.n	800ab6e <_printf_common+0x3e>
 800abe0:	18e1      	adds	r1, r4, r3
 800abe2:	1c5a      	adds	r2, r3, #1
 800abe4:	2030      	movs	r0, #48	; 0x30
 800abe6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abea:	4422      	add	r2, r4
 800abec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abf4:	3302      	adds	r3, #2
 800abf6:	e7c7      	b.n	800ab88 <_printf_common+0x58>
 800abf8:	2301      	movs	r3, #1
 800abfa:	4622      	mov	r2, r4
 800abfc:	4649      	mov	r1, r9
 800abfe:	4638      	mov	r0, r7
 800ac00:	47c0      	blx	r8
 800ac02:	3001      	adds	r0, #1
 800ac04:	d0e6      	beq.n	800abd4 <_printf_common+0xa4>
 800ac06:	3601      	adds	r6, #1
 800ac08:	e7d9      	b.n	800abbe <_printf_common+0x8e>
	...

0800ac0c <_printf_i>:
 800ac0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac10:	7e0f      	ldrb	r7, [r1, #24]
 800ac12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac14:	2f78      	cmp	r7, #120	; 0x78
 800ac16:	4691      	mov	r9, r2
 800ac18:	4680      	mov	r8, r0
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	469a      	mov	sl, r3
 800ac1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac22:	d807      	bhi.n	800ac34 <_printf_i+0x28>
 800ac24:	2f62      	cmp	r7, #98	; 0x62
 800ac26:	d80a      	bhi.n	800ac3e <_printf_i+0x32>
 800ac28:	2f00      	cmp	r7, #0
 800ac2a:	f000 80d8 	beq.w	800adde <_printf_i+0x1d2>
 800ac2e:	2f58      	cmp	r7, #88	; 0x58
 800ac30:	f000 80a3 	beq.w	800ad7a <_printf_i+0x16e>
 800ac34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac3c:	e03a      	b.n	800acb4 <_printf_i+0xa8>
 800ac3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac42:	2b15      	cmp	r3, #21
 800ac44:	d8f6      	bhi.n	800ac34 <_printf_i+0x28>
 800ac46:	a101      	add	r1, pc, #4	; (adr r1, 800ac4c <_printf_i+0x40>)
 800ac48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac4c:	0800aca5 	.word	0x0800aca5
 800ac50:	0800acb9 	.word	0x0800acb9
 800ac54:	0800ac35 	.word	0x0800ac35
 800ac58:	0800ac35 	.word	0x0800ac35
 800ac5c:	0800ac35 	.word	0x0800ac35
 800ac60:	0800ac35 	.word	0x0800ac35
 800ac64:	0800acb9 	.word	0x0800acb9
 800ac68:	0800ac35 	.word	0x0800ac35
 800ac6c:	0800ac35 	.word	0x0800ac35
 800ac70:	0800ac35 	.word	0x0800ac35
 800ac74:	0800ac35 	.word	0x0800ac35
 800ac78:	0800adc5 	.word	0x0800adc5
 800ac7c:	0800ace9 	.word	0x0800ace9
 800ac80:	0800ada7 	.word	0x0800ada7
 800ac84:	0800ac35 	.word	0x0800ac35
 800ac88:	0800ac35 	.word	0x0800ac35
 800ac8c:	0800ade7 	.word	0x0800ade7
 800ac90:	0800ac35 	.word	0x0800ac35
 800ac94:	0800ace9 	.word	0x0800ace9
 800ac98:	0800ac35 	.word	0x0800ac35
 800ac9c:	0800ac35 	.word	0x0800ac35
 800aca0:	0800adaf 	.word	0x0800adaf
 800aca4:	682b      	ldr	r3, [r5, #0]
 800aca6:	1d1a      	adds	r2, r3, #4
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	602a      	str	r2, [r5, #0]
 800acac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acb4:	2301      	movs	r3, #1
 800acb6:	e0a3      	b.n	800ae00 <_printf_i+0x1f4>
 800acb8:	6820      	ldr	r0, [r4, #0]
 800acba:	6829      	ldr	r1, [r5, #0]
 800acbc:	0606      	lsls	r6, r0, #24
 800acbe:	f101 0304 	add.w	r3, r1, #4
 800acc2:	d50a      	bpl.n	800acda <_printf_i+0xce>
 800acc4:	680e      	ldr	r6, [r1, #0]
 800acc6:	602b      	str	r3, [r5, #0]
 800acc8:	2e00      	cmp	r6, #0
 800acca:	da03      	bge.n	800acd4 <_printf_i+0xc8>
 800accc:	232d      	movs	r3, #45	; 0x2d
 800acce:	4276      	negs	r6, r6
 800acd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acd4:	485e      	ldr	r0, [pc, #376]	; (800ae50 <_printf_i+0x244>)
 800acd6:	230a      	movs	r3, #10
 800acd8:	e019      	b.n	800ad0e <_printf_i+0x102>
 800acda:	680e      	ldr	r6, [r1, #0]
 800acdc:	602b      	str	r3, [r5, #0]
 800acde:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ace2:	bf18      	it	ne
 800ace4:	b236      	sxthne	r6, r6
 800ace6:	e7ef      	b.n	800acc8 <_printf_i+0xbc>
 800ace8:	682b      	ldr	r3, [r5, #0]
 800acea:	6820      	ldr	r0, [r4, #0]
 800acec:	1d19      	adds	r1, r3, #4
 800acee:	6029      	str	r1, [r5, #0]
 800acf0:	0601      	lsls	r1, r0, #24
 800acf2:	d501      	bpl.n	800acf8 <_printf_i+0xec>
 800acf4:	681e      	ldr	r6, [r3, #0]
 800acf6:	e002      	b.n	800acfe <_printf_i+0xf2>
 800acf8:	0646      	lsls	r6, r0, #25
 800acfa:	d5fb      	bpl.n	800acf4 <_printf_i+0xe8>
 800acfc:	881e      	ldrh	r6, [r3, #0]
 800acfe:	4854      	ldr	r0, [pc, #336]	; (800ae50 <_printf_i+0x244>)
 800ad00:	2f6f      	cmp	r7, #111	; 0x6f
 800ad02:	bf0c      	ite	eq
 800ad04:	2308      	moveq	r3, #8
 800ad06:	230a      	movne	r3, #10
 800ad08:	2100      	movs	r1, #0
 800ad0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad0e:	6865      	ldr	r5, [r4, #4]
 800ad10:	60a5      	str	r5, [r4, #8]
 800ad12:	2d00      	cmp	r5, #0
 800ad14:	bfa2      	ittt	ge
 800ad16:	6821      	ldrge	r1, [r4, #0]
 800ad18:	f021 0104 	bicge.w	r1, r1, #4
 800ad1c:	6021      	strge	r1, [r4, #0]
 800ad1e:	b90e      	cbnz	r6, 800ad24 <_printf_i+0x118>
 800ad20:	2d00      	cmp	r5, #0
 800ad22:	d04d      	beq.n	800adc0 <_printf_i+0x1b4>
 800ad24:	4615      	mov	r5, r2
 800ad26:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad2a:	fb03 6711 	mls	r7, r3, r1, r6
 800ad2e:	5dc7      	ldrb	r7, [r0, r7]
 800ad30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad34:	4637      	mov	r7, r6
 800ad36:	42bb      	cmp	r3, r7
 800ad38:	460e      	mov	r6, r1
 800ad3a:	d9f4      	bls.n	800ad26 <_printf_i+0x11a>
 800ad3c:	2b08      	cmp	r3, #8
 800ad3e:	d10b      	bne.n	800ad58 <_printf_i+0x14c>
 800ad40:	6823      	ldr	r3, [r4, #0]
 800ad42:	07de      	lsls	r6, r3, #31
 800ad44:	d508      	bpl.n	800ad58 <_printf_i+0x14c>
 800ad46:	6923      	ldr	r3, [r4, #16]
 800ad48:	6861      	ldr	r1, [r4, #4]
 800ad4a:	4299      	cmp	r1, r3
 800ad4c:	bfde      	ittt	le
 800ad4e:	2330      	movle	r3, #48	; 0x30
 800ad50:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad54:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad58:	1b52      	subs	r2, r2, r5
 800ad5a:	6122      	str	r2, [r4, #16]
 800ad5c:	f8cd a000 	str.w	sl, [sp]
 800ad60:	464b      	mov	r3, r9
 800ad62:	aa03      	add	r2, sp, #12
 800ad64:	4621      	mov	r1, r4
 800ad66:	4640      	mov	r0, r8
 800ad68:	f7ff fee2 	bl	800ab30 <_printf_common>
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	d14c      	bne.n	800ae0a <_printf_i+0x1fe>
 800ad70:	f04f 30ff 	mov.w	r0, #4294967295
 800ad74:	b004      	add	sp, #16
 800ad76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad7a:	4835      	ldr	r0, [pc, #212]	; (800ae50 <_printf_i+0x244>)
 800ad7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad80:	6829      	ldr	r1, [r5, #0]
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad88:	6029      	str	r1, [r5, #0]
 800ad8a:	061d      	lsls	r5, r3, #24
 800ad8c:	d514      	bpl.n	800adb8 <_printf_i+0x1ac>
 800ad8e:	07df      	lsls	r7, r3, #31
 800ad90:	bf44      	itt	mi
 800ad92:	f043 0320 	orrmi.w	r3, r3, #32
 800ad96:	6023      	strmi	r3, [r4, #0]
 800ad98:	b91e      	cbnz	r6, 800ada2 <_printf_i+0x196>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	f023 0320 	bic.w	r3, r3, #32
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	2310      	movs	r3, #16
 800ada4:	e7b0      	b.n	800ad08 <_printf_i+0xfc>
 800ada6:	6823      	ldr	r3, [r4, #0]
 800ada8:	f043 0320 	orr.w	r3, r3, #32
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	2378      	movs	r3, #120	; 0x78
 800adb0:	4828      	ldr	r0, [pc, #160]	; (800ae54 <_printf_i+0x248>)
 800adb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800adb6:	e7e3      	b.n	800ad80 <_printf_i+0x174>
 800adb8:	0659      	lsls	r1, r3, #25
 800adba:	bf48      	it	mi
 800adbc:	b2b6      	uxthmi	r6, r6
 800adbe:	e7e6      	b.n	800ad8e <_printf_i+0x182>
 800adc0:	4615      	mov	r5, r2
 800adc2:	e7bb      	b.n	800ad3c <_printf_i+0x130>
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	6826      	ldr	r6, [r4, #0]
 800adc8:	6961      	ldr	r1, [r4, #20]
 800adca:	1d18      	adds	r0, r3, #4
 800adcc:	6028      	str	r0, [r5, #0]
 800adce:	0635      	lsls	r5, r6, #24
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	d501      	bpl.n	800add8 <_printf_i+0x1cc>
 800add4:	6019      	str	r1, [r3, #0]
 800add6:	e002      	b.n	800adde <_printf_i+0x1d2>
 800add8:	0670      	lsls	r0, r6, #25
 800adda:	d5fb      	bpl.n	800add4 <_printf_i+0x1c8>
 800addc:	8019      	strh	r1, [r3, #0]
 800adde:	2300      	movs	r3, #0
 800ade0:	6123      	str	r3, [r4, #16]
 800ade2:	4615      	mov	r5, r2
 800ade4:	e7ba      	b.n	800ad5c <_printf_i+0x150>
 800ade6:	682b      	ldr	r3, [r5, #0]
 800ade8:	1d1a      	adds	r2, r3, #4
 800adea:	602a      	str	r2, [r5, #0]
 800adec:	681d      	ldr	r5, [r3, #0]
 800adee:	6862      	ldr	r2, [r4, #4]
 800adf0:	2100      	movs	r1, #0
 800adf2:	4628      	mov	r0, r5
 800adf4:	f7f5 fa04 	bl	8000200 <memchr>
 800adf8:	b108      	cbz	r0, 800adfe <_printf_i+0x1f2>
 800adfa:	1b40      	subs	r0, r0, r5
 800adfc:	6060      	str	r0, [r4, #4]
 800adfe:	6863      	ldr	r3, [r4, #4]
 800ae00:	6123      	str	r3, [r4, #16]
 800ae02:	2300      	movs	r3, #0
 800ae04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae08:	e7a8      	b.n	800ad5c <_printf_i+0x150>
 800ae0a:	6923      	ldr	r3, [r4, #16]
 800ae0c:	462a      	mov	r2, r5
 800ae0e:	4649      	mov	r1, r9
 800ae10:	4640      	mov	r0, r8
 800ae12:	47d0      	blx	sl
 800ae14:	3001      	adds	r0, #1
 800ae16:	d0ab      	beq.n	800ad70 <_printf_i+0x164>
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	079b      	lsls	r3, r3, #30
 800ae1c:	d413      	bmi.n	800ae46 <_printf_i+0x23a>
 800ae1e:	68e0      	ldr	r0, [r4, #12]
 800ae20:	9b03      	ldr	r3, [sp, #12]
 800ae22:	4298      	cmp	r0, r3
 800ae24:	bfb8      	it	lt
 800ae26:	4618      	movlt	r0, r3
 800ae28:	e7a4      	b.n	800ad74 <_printf_i+0x168>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	4632      	mov	r2, r6
 800ae2e:	4649      	mov	r1, r9
 800ae30:	4640      	mov	r0, r8
 800ae32:	47d0      	blx	sl
 800ae34:	3001      	adds	r0, #1
 800ae36:	d09b      	beq.n	800ad70 <_printf_i+0x164>
 800ae38:	3501      	adds	r5, #1
 800ae3a:	68e3      	ldr	r3, [r4, #12]
 800ae3c:	9903      	ldr	r1, [sp, #12]
 800ae3e:	1a5b      	subs	r3, r3, r1
 800ae40:	42ab      	cmp	r3, r5
 800ae42:	dcf2      	bgt.n	800ae2a <_printf_i+0x21e>
 800ae44:	e7eb      	b.n	800ae1e <_printf_i+0x212>
 800ae46:	2500      	movs	r5, #0
 800ae48:	f104 0619 	add.w	r6, r4, #25
 800ae4c:	e7f5      	b.n	800ae3a <_printf_i+0x22e>
 800ae4e:	bf00      	nop
 800ae50:	0800b6e5 	.word	0x0800b6e5
 800ae54:	0800b6f6 	.word	0x0800b6f6

0800ae58 <__retarget_lock_acquire_recursive>:
 800ae58:	4770      	bx	lr

0800ae5a <__retarget_lock_release_recursive>:
 800ae5a:	4770      	bx	lr

0800ae5c <memmove>:
 800ae5c:	4288      	cmp	r0, r1
 800ae5e:	b510      	push	{r4, lr}
 800ae60:	eb01 0402 	add.w	r4, r1, r2
 800ae64:	d902      	bls.n	800ae6c <memmove+0x10>
 800ae66:	4284      	cmp	r4, r0
 800ae68:	4623      	mov	r3, r4
 800ae6a:	d807      	bhi.n	800ae7c <memmove+0x20>
 800ae6c:	1e43      	subs	r3, r0, #1
 800ae6e:	42a1      	cmp	r1, r4
 800ae70:	d008      	beq.n	800ae84 <memmove+0x28>
 800ae72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae7a:	e7f8      	b.n	800ae6e <memmove+0x12>
 800ae7c:	4402      	add	r2, r0
 800ae7e:	4601      	mov	r1, r0
 800ae80:	428a      	cmp	r2, r1
 800ae82:	d100      	bne.n	800ae86 <memmove+0x2a>
 800ae84:	bd10      	pop	{r4, pc}
 800ae86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae8e:	e7f7      	b.n	800ae80 <memmove+0x24>

0800ae90 <_realloc_r>:
 800ae90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae94:	4680      	mov	r8, r0
 800ae96:	4614      	mov	r4, r2
 800ae98:	460e      	mov	r6, r1
 800ae9a:	b921      	cbnz	r1, 800aea6 <_realloc_r+0x16>
 800ae9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aea0:	4611      	mov	r1, r2
 800aea2:	f7ff bc21 	b.w	800a6e8 <_malloc_r>
 800aea6:	b92a      	cbnz	r2, 800aeb4 <_realloc_r+0x24>
 800aea8:	f7ff fbb2 	bl	800a610 <_free_r>
 800aeac:	4625      	mov	r5, r4
 800aeae:	4628      	mov	r0, r5
 800aeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb4:	f000 f81b 	bl	800aeee <_malloc_usable_size_r>
 800aeb8:	4284      	cmp	r4, r0
 800aeba:	4607      	mov	r7, r0
 800aebc:	d802      	bhi.n	800aec4 <_realloc_r+0x34>
 800aebe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aec2:	d812      	bhi.n	800aeea <_realloc_r+0x5a>
 800aec4:	4621      	mov	r1, r4
 800aec6:	4640      	mov	r0, r8
 800aec8:	f7ff fc0e 	bl	800a6e8 <_malloc_r>
 800aecc:	4605      	mov	r5, r0
 800aece:	2800      	cmp	r0, #0
 800aed0:	d0ed      	beq.n	800aeae <_realloc_r+0x1e>
 800aed2:	42bc      	cmp	r4, r7
 800aed4:	4622      	mov	r2, r4
 800aed6:	4631      	mov	r1, r6
 800aed8:	bf28      	it	cs
 800aeda:	463a      	movcs	r2, r7
 800aedc:	f7ff fb82 	bl	800a5e4 <memcpy>
 800aee0:	4631      	mov	r1, r6
 800aee2:	4640      	mov	r0, r8
 800aee4:	f7ff fb94 	bl	800a610 <_free_r>
 800aee8:	e7e1      	b.n	800aeae <_realloc_r+0x1e>
 800aeea:	4635      	mov	r5, r6
 800aeec:	e7df      	b.n	800aeae <_realloc_r+0x1e>

0800aeee <_malloc_usable_size_r>:
 800aeee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aef2:	1f18      	subs	r0, r3, #4
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	bfbc      	itt	lt
 800aef8:	580b      	ldrlt	r3, [r1, r0]
 800aefa:	18c0      	addlt	r0, r0, r3
 800aefc:	4770      	bx	lr
	...

0800af00 <_init>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	bf00      	nop
 800af04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af06:	bc08      	pop	{r3}
 800af08:	469e      	mov	lr, r3
 800af0a:	4770      	bx	lr

0800af0c <_fini>:
 800af0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0e:	bf00      	nop
 800af10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af12:	bc08      	pop	{r3}
 800af14:	469e      	mov	lr, r3
 800af16:	4770      	bx	lr
