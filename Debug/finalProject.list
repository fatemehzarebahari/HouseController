
finalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b038  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  0800b1c8  0800b1c8  0001b1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9f8  0800b9f8  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  0800b9f8  0800b9f8  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b9f8  0800b9f8  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9f8  0800b9f8  0001b9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9fc  0800b9fc  0001b9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800ba00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020198  2**0
                  CONTENTS
 10 .bss          0000075c  20000198  20000198  00020198  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200008f4  200008f4  00020198  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d3de  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003498  00000000  00000000  0003d5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  00040a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001700  00000000  00000000  00042248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020bbd  00000000  00000000  00043948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f33f  00000000  00000000  00064505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7629  00000000  00000000  00083844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ae6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c44  00000000  00000000  0014aec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000198 	.word	0x20000198
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b1b0 	.word	0x0800b1b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000019c 	.word	0x2000019c
 80001cc:	0800b1b0 	.word	0x0800b1b0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08e      	sub	sp, #56	; 0x38
 80002a4:	af0a      	add	r7, sp, #40	; 0x28
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	4608      	mov	r0, r1
 80002aa:	4611      	mov	r1, r2
 80002ac:	461a      	mov	r2, r3
 80002ae:	4603      	mov	r3, r0
 80002b0:	817b      	strh	r3, [r7, #10]
 80002b2:	460b      	mov	r3, r1
 80002b4:	813b      	strh	r3, [r7, #8]
 80002b6:	4613      	mov	r3, r2
 80002b8:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80002ba:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <LiquidCrystal+0x90>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d019      	beq.n	80002f6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002c2:	8939      	ldrh	r1, [r7, #8]
 80002c4:	897a      	ldrh	r2, [r7, #10]
 80002c6:	2300      	movs	r3, #0
 80002c8:	9308      	str	r3, [sp, #32]
 80002ca:	2300      	movs	r3, #0
 80002cc:	9307      	str	r3, [sp, #28]
 80002ce:	2300      	movs	r3, #0
 80002d0:	9306      	str	r3, [sp, #24]
 80002d2:	2300      	movs	r3, #0
 80002d4:	9305      	str	r3, [sp, #20]
 80002d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002d8:	9304      	str	r3, [sp, #16]
 80002da:	8c3b      	ldrh	r3, [r7, #32]
 80002dc:	9303      	str	r3, [sp, #12]
 80002de:	8bbb      	ldrh	r3, [r7, #28]
 80002e0:	9302      	str	r3, [sp, #8]
 80002e2:	8b3b      	ldrh	r3, [r7, #24]
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	88fb      	ldrh	r3, [r7, #6]
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	460b      	mov	r3, r1
 80002ec:	68f9      	ldr	r1, [r7, #12]
 80002ee:	2001      	movs	r0, #1
 80002f0:	f000 f820 	bl	8000334 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002f4:	e018      	b.n	8000328 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002f6:	8939      	ldrh	r1, [r7, #8]
 80002f8:	897a      	ldrh	r2, [r7, #10]
 80002fa:	2300      	movs	r3, #0
 80002fc:	9308      	str	r3, [sp, #32]
 80002fe:	2300      	movs	r3, #0
 8000300:	9307      	str	r3, [sp, #28]
 8000302:	2300      	movs	r3, #0
 8000304:	9306      	str	r3, [sp, #24]
 8000306:	2300      	movs	r3, #0
 8000308:	9305      	str	r3, [sp, #20]
 800030a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800030c:	9304      	str	r3, [sp, #16]
 800030e:	8c3b      	ldrh	r3, [r7, #32]
 8000310:	9303      	str	r3, [sp, #12]
 8000312:	8bbb      	ldrh	r3, [r7, #28]
 8000314:	9302      	str	r3, [sp, #8]
 8000316:	8b3b      	ldrh	r3, [r7, #24]
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	460b      	mov	r3, r1
 8000320:	68f9      	ldr	r1, [r7, #12]
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f806 	bl	8000334 <init>
}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000000 	.word	0x20000000

08000334 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	60b9      	str	r1, [r7, #8]
 800033c:	4611      	mov	r1, r2
 800033e:	461a      	mov	r2, r3
 8000340:	4603      	mov	r3, r0
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	460b      	mov	r3, r1
 8000346:	81bb      	strh	r3, [r7, #12]
 8000348:	4613      	mov	r3, r2
 800034a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800034c:	4a1a      	ldr	r2, [pc, #104]	; (80003b8 <init+0x84>)
 800034e:	89bb      	ldrh	r3, [r7, #12]
 8000350:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000352:	4a1a      	ldr	r2, [pc, #104]	; (80003bc <init+0x88>)
 8000354:	88fb      	ldrh	r3, [r7, #6]
 8000356:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000358:	4a19      	ldr	r2, [pc, #100]	; (80003c0 <init+0x8c>)
 800035a:	8b3b      	ldrh	r3, [r7, #24]
 800035c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800035e:	4a19      	ldr	r2, [pc, #100]	; (80003c4 <init+0x90>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000364:	4a18      	ldr	r2, [pc, #96]	; (80003c8 <init+0x94>)
 8000366:	8bbb      	ldrh	r3, [r7, #28]
 8000368:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800036a:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <init+0x94>)
 800036c:	8c3b      	ldrh	r3, [r7, #32]
 800036e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000370:	4a15      	ldr	r2, [pc, #84]	; (80003c8 <init+0x94>)
 8000372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000374:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000376:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <init+0x94>)
 8000378:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800037a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800037c:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <init+0x94>)
 800037e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000380:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000382:	4a11      	ldr	r2, [pc, #68]	; (80003c8 <init+0x94>)
 8000384:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000386:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <init+0x94>)
 800038a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800038c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <init+0x94>)
 8000390:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000392:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d003      	beq.n	80003a2 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <init+0x98>)
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
 80003a0:	e002      	b.n	80003a8 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <init+0x98>)
 80003a4:	2210      	movs	r2, #16
 80003a6:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 80003a8:	2102      	movs	r1, #2
 80003aa:	2010      	movs	r0, #16
 80003ac:	f000 f810 	bl	80003d0 <begin>
}
 80003b0:	bf00      	nop
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	200001b6 	.word	0x200001b6
 80003bc:	200001b8 	.word	0x200001b8
 80003c0:	200001ba 	.word	0x200001ba
 80003c4:	200001cc 	.word	0x200001cc
 80003c8:	200001bc 	.word	0x200001bc
 80003cc:	200001d0 	.word	0x200001d0

080003d0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	460a      	mov	r2, r1
 80003da:	71fb      	strb	r3, [r7, #7]
 80003dc:	4613      	mov	r3, r2
 80003de:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003e0:	79bb      	ldrb	r3, [r7, #6]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d906      	bls.n	80003f4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003e6:	4b77      	ldr	r3, [pc, #476]	; (80005c4 <begin+0x1f4>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	4b74      	ldr	r3, [pc, #464]	; (80005c4 <begin+0x1f4>)
 80003f2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003f4:	4a74      	ldr	r2, [pc, #464]	; (80005c8 <begin+0x1f8>)
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003fa:	79fa      	ldrb	r2, [r7, #7]
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	3340      	adds	r3, #64	; 0x40
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	2000      	movs	r0, #0
 8000404:	f000 f988 	bl	8000718 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000408:	4b70      	ldr	r3, [pc, #448]	; (80005cc <begin+0x1fc>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d009      	beq.n	8000424 <begin+0x54>
 8000410:	79bb      	ldrb	r3, [r7, #6]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d106      	bne.n	8000424 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000416:	4b6b      	ldr	r3, [pc, #428]	; (80005c4 <begin+0x1f4>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b68      	ldr	r3, [pc, #416]	; (80005c4 <begin+0x1f4>)
 8000422:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000424:	f000 f8e4 	bl	80005f0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000428:	2303      	movs	r3, #3
 800042a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	2301      	movs	r3, #1
 800042e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000430:	4b67      	ldr	r3, [pc, #412]	; (80005d0 <begin+0x200>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d01b      	beq.n	8000470 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000438:	4b66      	ldr	r3, [pc, #408]	; (80005d4 <begin+0x204>)
 800043a:	881a      	ldrh	r2, [r3, #0]
 800043c:	4b66      	ldr	r3, [pc, #408]	; (80005d8 <begin+0x208>)
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b65      	ldr	r3, [pc, #404]	; (80005dc <begin+0x20c>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29a      	uxth	r2, r3
 800044c:	4b64      	ldr	r3, [pc, #400]	; (80005e0 <begin+0x210>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	4313      	orrs	r3, r2
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b62      	ldr	r3, [pc, #392]	; (80005e0 <begin+0x210>)
 8000456:	885b      	ldrh	r3, [r3, #2]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b60      	ldr	r3, [pc, #384]	; (80005e0 <begin+0x210>)
 800045e:	889b      	ldrh	r3, [r3, #4]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
 8000464:	4b5e      	ldr	r3, [pc, #376]	; (80005e0 <begin+0x210>)
 8000466:	88db      	ldrh	r3, [r3, #6]
 8000468:	4313      	orrs	r3, r2
 800046a:	b29b      	uxth	r3, r3
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	e02a      	b.n	80004c6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4b58      	ldr	r3, [pc, #352]	; (80005d4 <begin+0x204>)
 8000472:	881a      	ldrh	r2, [r3, #0]
 8000474:	4b58      	ldr	r3, [pc, #352]	; (80005d8 <begin+0x208>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
 800047c:	4b57      	ldr	r3, [pc, #348]	; (80005dc <begin+0x20c>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000484:	4b56      	ldr	r3, [pc, #344]	; (80005e0 <begin+0x210>)
 8000486:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800048c:	4b54      	ldr	r3, [pc, #336]	; (80005e0 <begin+0x210>)
 800048e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000494:	4b52      	ldr	r3, [pc, #328]	; (80005e0 <begin+0x210>)
 8000496:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800049c:	4b50      	ldr	r3, [pc, #320]	; (80005e0 <begin+0x210>)
 800049e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	4b4e      	ldr	r3, [pc, #312]	; (80005e0 <begin+0x210>)
 80004a6:	891b      	ldrh	r3, [r3, #8]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	4b4c      	ldr	r3, [pc, #304]	; (80005e0 <begin+0x210>)
 80004ae:	895b      	ldrh	r3, [r3, #10]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	4b4a      	ldr	r3, [pc, #296]	; (80005e0 <begin+0x210>)
 80004b6:	899b      	ldrh	r3, [r3, #12]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b48      	ldr	r3, [pc, #288]	; (80005e0 <begin+0x210>)
 80004be:	89db      	ldrh	r3, [r3, #14]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004c4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004c6:	4b47      	ldr	r3, [pc, #284]	; (80005e4 <begin+0x214>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f107 020c 	add.w	r2, r7, #12
 80004ce:	4611      	mov	r1, r2
 80004d0:	4618      	mov	r0, r3
 80004d2:	f006 f863 	bl	800659c <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004d6:	2032      	movs	r0, #50	; 0x32
 80004d8:	f004 fb88 	bl	8004bec <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004dc:	4b41      	ldr	r3, [pc, #260]	; (80005e4 <begin+0x214>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a3c      	ldr	r2, [pc, #240]	; (80005d4 <begin+0x204>)
 80004e2:	8811      	ldrh	r1, [r2, #0]
 80004e4:	2200      	movs	r2, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f006 f9ea 	bl	80068c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004ec:	4b3d      	ldr	r3, [pc, #244]	; (80005e4 <begin+0x214>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a3a      	ldr	r2, [pc, #232]	; (80005dc <begin+0x20c>)
 80004f2:	8811      	ldrh	r1, [r2, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f006 f9e2 	bl	80068c0 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004fc:	4b36      	ldr	r3, [pc, #216]	; (80005d8 <begin+0x208>)
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	2bff      	cmp	r3, #255	; 0xff
 8000502:	d007      	beq.n	8000514 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000504:	4b37      	ldr	r3, [pc, #220]	; (80005e4 <begin+0x214>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a33      	ldr	r2, [pc, #204]	; (80005d8 <begin+0x208>)
 800050a:	8811      	ldrh	r1, [r2, #0]
 800050c:	2200      	movs	r2, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f006 f9d6 	bl	80068c0 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000514:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <begin+0x1f4>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	f003 0310 	and.w	r3, r3, #16
 800051c:	2b00      	cmp	r3, #0
 800051e:	d115      	bne.n	800054c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000520:	2003      	movs	r0, #3
 8000522:	f000 fa31 	bl	8000988 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000526:	2005      	movs	r0, #5
 8000528:	f004 fb60 	bl	8004bec <HAL_Delay>

    // second try
    write4bits(0x03);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 fa2b 	bl	8000988 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000532:	2005      	movs	r0, #5
 8000534:	f004 fb5a 	bl	8004bec <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000538:	2003      	movs	r0, #3
 800053a:	f000 fa25 	bl	8000988 <write4bits>
    HAL_Delay(1);
 800053e:	2001      	movs	r0, #1
 8000540:	f004 fb54 	bl	8004bec <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000544:	2002      	movs	r0, #2
 8000546:	f000 fa1f 	bl	8000988 <write4bits>
 800054a:	e01d      	b.n	8000588 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <begin+0x1f4>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	f043 0320 	orr.w	r3, r3, #32
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f000 f991 	bl	800087e <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800055c:	2005      	movs	r0, #5
 800055e:	f004 fb45 	bl	8004bec <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <begin+0x1f4>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f986 	bl	800087e <command>
    HAL_Delay(1);
 8000572:	2001      	movs	r0, #1
 8000574:	f004 fb3a 	bl	8004bec <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <begin+0x1f4>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f043 0320 	orr.w	r3, r3, #32
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f97b 	bl	800087e <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <begin+0x1f4>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	f043 0320 	orr.w	r3, r3, #32
 8000590:	b2db      	uxtb	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f973 	bl	800087e <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <begin+0x218>)
 800059a:	2204      	movs	r2, #4
 800059c:	701a      	strb	r2, [r3, #0]
  display();
 800059e:	f000 f92d 	bl	80007fc <display>

  // clear it off
  clear();
 80005a2:	f000 f8d9 	bl	8000758 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <begin+0x21c>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <begin+0x21c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f961 	bl	800087e <command>

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200001d0 	.word	0x200001d0
 80005c8:	200001d3 	.word	0x200001d3
 80005cc:	200001b4 	.word	0x200001b4
 80005d0:	20000000 	.word	0x20000000
 80005d4:	200001b6 	.word	0x200001b6
 80005d8:	200001b8 	.word	0x200001b8
 80005dc:	200001ba 	.word	0x200001ba
 80005e0:	200001bc 	.word	0x200001bc
 80005e4:	200001cc 	.word	0x200001cc
 80005e8:	200001d1 	.word	0x200001d1
 80005ec:	200001d2 	.word	0x200001d2

080005f0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005f0:	b480      	push	{r7}
 80005f2:	b089      	sub	sp, #36	; 0x24
 80005f4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005f6:	4b41      	ldr	r3, [pc, #260]	; (80006fc <enableClock+0x10c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005fe:	d10c      	bne.n	800061a <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b3f      	ldr	r3, [pc, #252]	; (8000700 <enableClock+0x110>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a3e      	ldr	r2, [pc, #248]	; (8000700 <enableClock+0x110>)
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060a:	6153      	str	r3, [r2, #20]
 800060c:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <enableClock+0x110>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000614:	61fb      	str	r3, [r7, #28]
 8000616:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000618:	e06a      	b.n	80006f0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061a:	4b38      	ldr	r3, [pc, #224]	; (80006fc <enableClock+0x10c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a39      	ldr	r2, [pc, #228]	; (8000704 <enableClock+0x114>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d10c      	bne.n	800063e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <enableClock+0x110>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a35      	ldr	r2, [pc, #212]	; (8000700 <enableClock+0x110>)
 800062a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800062e:	6153      	str	r3, [r2, #20]
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <enableClock+0x110>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000638:	61bb      	str	r3, [r7, #24]
 800063a:	69bb      	ldr	r3, [r7, #24]
}
 800063c:	e058      	b.n	80006f0 <enableClock+0x100>
  else if(_port == GPIOB)
 800063e:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <enableClock+0x10c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a30      	ldr	r2, [pc, #192]	; (8000704 <enableClock+0x114>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d10c      	bne.n	8000662 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <enableClock+0x110>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	4a2c      	ldr	r2, [pc, #176]	; (8000700 <enableClock+0x110>)
 800064e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000652:	6153      	str	r3, [r2, #20]
 8000654:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <enableClock+0x110>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	697b      	ldr	r3, [r7, #20]
}
 8000660:	e046      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <enableClock+0x10c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a28      	ldr	r2, [pc, #160]	; (8000708 <enableClock+0x118>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d10c      	bne.n	8000686 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <enableClock+0x110>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a23      	ldr	r2, [pc, #140]	; (8000700 <enableClock+0x110>)
 8000672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000676:	6153      	str	r3, [r2, #20]
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <enableClock+0x110>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]
}
 8000684:	e034      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <enableClock+0x10c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a20      	ldr	r2, [pc, #128]	; (800070c <enableClock+0x11c>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d10c      	bne.n	80006aa <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <enableClock+0x110>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <enableClock+0x110>)
 8000696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069a:	6153      	str	r3, [r2, #20]
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <enableClock+0x110>)
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	e022      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOE)
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <enableClock+0x10c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <enableClock+0x120>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d10c      	bne.n	80006ce <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <enableClock+0x110>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a11      	ldr	r2, [pc, #68]	; (8000700 <enableClock+0x110>)
 80006ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006be:	6153      	str	r3, [r2, #20]
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <enableClock+0x110>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
}
 80006cc:	e010      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <enableClock+0x10c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a10      	ldr	r2, [pc, #64]	; (8000714 <enableClock+0x124>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d10b      	bne.n	80006f0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <enableClock+0x110>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <enableClock+0x110>)
 80006de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006e2:	6153      	str	r3, [r2, #20]
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <enableClock+0x110>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
}
 80006f0:	bf00      	nop
 80006f2:	3724      	adds	r7, #36	; 0x24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	200001cc 	.word	0x200001cc
 8000700:	40021000 	.word	0x40021000
 8000704:	48000400 	.word	0x48000400
 8000708:	48000800 	.word	0x48000800
 800070c:	48000c00 	.word	0x48000c00
 8000710:	48001000 	.word	0x48001000
 8000714:	48001400 	.word	0x48001400

08000718 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <setRowOffsets+0x3c>)
 800072c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <setRowOffsets+0x3c>)
 8000734:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <setRowOffsets+0x3c>)
 800073c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <setRowOffsets+0x3c>)
 8000744:	70da      	strb	r2, [r3, #3]
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	200001d4 	.word	0x200001d4

08000758 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800075c:	2001      	movs	r0, #1
 800075e:	f000 f88e 	bl	800087e <command>
  HAL_Delay(2);  // this command takes a long time!
 8000762:	2002      	movs	r0, #2
 8000764:	f004 fa42 	bl	8004bec <HAL_Delay>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800077c:	2304      	movs	r3, #4
 800077e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	429a      	cmp	r2, r3
 8000786:	d803      	bhi.n	8000790 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	3b01      	subs	r3, #1
 800078e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <setCursor+0x5c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	429a      	cmp	r2, r3
 8000798:	d303      	bcc.n	80007a2 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <setCursor+0x5c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	3b01      	subs	r3, #1
 80007a0:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <setCursor+0x60>)
 80007a6:	5cd2      	ldrb	r2, [r2, r3]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4413      	add	r3, r2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f860 	bl	800087e <command>
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200001d3 	.word	0x200001d3
 80007cc:	200001d4 	.word	0x200001d4

080007d0 <noDisplay>:

// Turn the display on/off (quickly)
void noDisplay(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  _displaycontrol &= ~LCD_DISPLAYON;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <noDisplay+0x28>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	f023 0304 	bic.w	r3, r3, #4
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <noDisplay+0x28>)
 80007e0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <noDisplay+0x28>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	f043 0308 	orr.w	r3, r3, #8
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f846 	bl	800087e <command>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200001d1 	.word	0x200001d1

080007fc <display>:
void display(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <display+0x28>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <display+0x28>)
 800080c:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <display+0x28>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	f043 0308 	orr.w	r3, r3, #8
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f830 	bl	800087e <command>
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200001d1 	.word	0x200001d1

08000828 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d101      	bne.n	800083a <print+0x12>
 8000836:	2300      	movs	r3, #0
 8000838:	e01d      	b.n	8000876 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff fcd0 	bl	80001e4 <strlen>
 8000844:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]

  while (size--) {
 800084a:	e00c      	b.n	8000866 <print+0x3e>
    if (write(*buffer++)) n++;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	617a      	str	r2, [r7, #20]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f820 	bl	800089a <write>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d008      	beq.n	8000872 <print+0x4a>
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	3301      	adds	r3, #1
 8000864:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	1e5a      	subs	r2, r3, #1
 800086a:	613a      	str	r2, [r7, #16]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1ed      	bne.n	800084c <print+0x24>
 8000870:	e000      	b.n	8000874 <print+0x4c>
    else break;
 8000872:	bf00      	nop
  }
  return n;
 8000874:	68fb      	ldr	r3, [r7, #12]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f000 f813 	bl	80008b8 <send>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <write>:

inline size_t write(uint8_t value) {
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f805 	bl	80008b8 <send>
  return 1; // assume sucess
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	460a      	mov	r2, r1
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	4613      	mov	r3, r2
 80008c6:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <send+0x6c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a16      	ldr	r2, [pc, #88]	; (8000928 <send+0x70>)
 80008ce:	8811      	ldrh	r1, [r2, #0]
 80008d0:	79ba      	ldrb	r2, [r7, #6]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f005 fff4 	bl	80068c0 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <send+0x74>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	2bff      	cmp	r3, #255	; 0xff
 80008de:	d007      	beq.n	80008f0 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <send+0x6c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a11      	ldr	r2, [pc, #68]	; (800092c <send+0x74>)
 80008e6:	8811      	ldrh	r1, [r2, #0]
 80008e8:	2200      	movs	r2, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f005 ffe8 	bl	80068c0 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <send+0x78>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d004      	beq.n	8000906 <send+0x4e>
    write8bits(value); 
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f86c 	bl	80009dc <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8000904:	e009      	b.n	800091a <send+0x62>
    write4bits(value>>4);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	091b      	lsrs	r3, r3, #4
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4618      	mov	r0, r3
 800090e:	f000 f83b 	bl	8000988 <write4bits>
    write4bits(value);
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f837 	bl	8000988 <write4bits>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200001cc 	.word	0x200001cc
 8000928:	200001b6 	.word	0x200001b6
 800092c:	200001b8 	.word	0x200001b8
 8000930:	200001d0 	.word	0x200001d0

08000934 <pulseEnable>:

void pulseEnable(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <pulseEnable+0x4c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a11      	ldr	r2, [pc, #68]	; (8000984 <pulseEnable+0x50>)
 800093e:	8811      	ldrh	r1, [r2, #0]
 8000940:	2200      	movs	r2, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f005 ffbc 	bl	80068c0 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000948:	2001      	movs	r0, #1
 800094a:	f004 f94f 	bl	8004bec <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <pulseEnable+0x4c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <pulseEnable+0x50>)
 8000954:	8811      	ldrh	r1, [r2, #0]
 8000956:	2201      	movs	r2, #1
 8000958:	4618      	mov	r0, r3
 800095a:	f005 ffb1 	bl	80068c0 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 800095e:	2001      	movs	r0, #1
 8000960:	f004 f944 	bl	8004bec <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <pulseEnable+0x4c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a06      	ldr	r2, [pc, #24]	; (8000984 <pulseEnable+0x50>)
 800096a:	8811      	ldrh	r1, [r2, #0]
 800096c:	2200      	movs	r2, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f005 ffa6 	bl	80068c0 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8000974:	2001      	movs	r0, #1
 8000976:	f004 f939 	bl	8004bec <HAL_Delay>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001cc 	.word	0x200001cc
 8000984:	200001ba 	.word	0x200001ba

08000988 <write4bits>:

void write4bits(uint8_t value) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	e013      	b.n	80009c0 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <write4bits+0x4c>)
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <write4bits+0x50>)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009a4:	79fa      	ldrb	r2, [r7, #7]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	fa42 f303 	asr.w	r3, r2, r3
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	f005 ff83 	bl	80068c0 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	3301      	adds	r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	dde8      	ble.n	8000998 <write4bits+0x10>
  }

  pulseEnable();
 80009c6:	f7ff ffb5 	bl	8000934 <pulseEnable>
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200001cc 	.word	0x200001cc
 80009d8:	200001bc 	.word	0x200001bc

080009dc <write8bits>:

void write8bits(uint8_t value) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	e013      	b.n	8000a14 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <write8bits+0x4c>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <write8bits+0x50>)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009f8:	79fa      	ldrb	r2, [r7, #7]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	fa42 f303 	asr.w	r3, r2, r3
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	f005 ff59 	bl	80068c0 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b07      	cmp	r3, #7
 8000a18:	dde8      	ble.n	80009ec <write8bits+0x10>
  }
  
  pulseEnable();
 8000a1a:	f7ff ff8b 	bl	8000934 <pulseEnable>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200001cc 	.word	0x200001cc
 8000a2c:	200001bc 	.word	0x200001bc

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a36:	f004 f873 	bl	8004b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3a:	f000 f84f 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3e:	f000 fb4b 	bl	80010d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a42:	f000 f97f 	bl	8000d44 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a46:	f000 f9bd 	bl	8000dc4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000a4a:	f000 f9f9 	bl	8000e40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a4e:	f000 fa6d 	bl	8000f2c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000a52:	f000 faef 	bl	8001034 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8000a56:	f000 fb1d 	bl	8001094 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000a5a:	f000 f8a5 	bl	8000ba8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000a5e:	f000 f913 	bl	8000c88 <MX_ADC2_Init>
  MX_TIM6_Init();
 8000a62:	f000 fab1 	bl	8000fc8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4819      	ldr	r0, [pc, #100]	; (8000ad0 <main+0xa0>)
 8000a6c:	f005 ff28 	bl	80068c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2102      	movs	r1, #2
 8000a74:	4816      	ldr	r0, [pc, #88]	; (8000ad0 <main+0xa0>)
 8000a76:	f005 ff23 	bl	80068c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	4814      	ldr	r0, [pc, #80]	; (8000ad0 <main+0xa0>)
 8000a80:	f005 ff1e 	bl	80068c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2108      	movs	r1, #8
 8000a88:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <main+0xa0>)
 8000a8a:	f005 ff19 	bl	80068c0 <HAL_GPIO_WritePin>
    LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 8000a8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a92:	9303      	str	r3, [sp, #12]
 8000a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab2:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <main+0xa0>)
 8000ab4:	f7ff fbf4 	bl	80002a0 <LiquidCrystal>
    begin(20,4);
 8000ab8:	2104      	movs	r1, #4
 8000aba:	2014      	movs	r0, #20
 8000abc:	f7ff fc88 	bl	80003d0 <begin>
	HAL_TIM_Base_Start_IT(&htim6);
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <main+0xa4>)
 8000ac2:	f007 fe63 	bl	800878c <HAL_TIM_Base_Start_IT>

    HAL_TIM_Base_Start_IT(&htim3);
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <main+0xa8>)
 8000ac8:	f007 fe60 	bl	800878c <HAL_TIM_Base_Start_IT>
//    print(">> ControlPanel");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <main+0x9c>
 8000ace:	bf00      	nop
 8000ad0:	48000c00 	.word	0x48000c00
 8000ad4:	200003c0 	.word	0x200003c0
 8000ad8:	20000374 	.word	0x20000374

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b09e      	sub	sp, #120	; 0x78
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ae6:	2228      	movs	r2, #40	; 0x28
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f009 fee0 	bl	800a8b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	463b      	mov	r3, r7
 8000b02:	223c      	movs	r2, #60	; 0x3c
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f009 fed2 	bl	800a8b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1e:	2310      	movs	r3, #16
 8000b20:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b22:	2302      	movs	r3, #2
 8000b24:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b30:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b36:	4618      	mov	r0, r3
 8000b38:	f006 f902 	bl	8006d40 <HAL_RCC_OscConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b42:	f000 fba9 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b46:	230f      	movs	r3, #15
 8000b48:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b60:	2101      	movs	r1, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f007 f92a 	bl	8007dbc <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b6e:	f000 fb93 	bl	8001298 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <SystemClock_Config+0xc8>)
 8000b74:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f007 fb4b 	bl	8008228 <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b98:	f000 fb7e 	bl	8001298 <Error_Handler>
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	3778      	adds	r7, #120	; 0x78
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	000200a2 	.word	0x000200a2

08000ba8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
 8000bc8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000bcc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c14:	2204      	movs	r2, #4
 8000c16:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c24:	4817      	ldr	r0, [pc, #92]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c26:	f004 f823 	bl	8004c70 <HAL_ADC_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000c30:	f000 fb32 	bl	8001298 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c40:	f005 f968 	bl	8005f14 <HAL_ADCEx_MultiModeConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c4a:	f000 fb25 	bl	8001298 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c6c:	f004 fe66 	bl	800593c <HAL_ADC_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000c76:	f000 fb0f 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001d8 	.word	0x200001d8

08000c88 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
 8000c9c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000ca0:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <MX_ADC2_Init+0xb8>)
 8000ca2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ca4:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000caa:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cb6:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cf6:	4811      	ldr	r0, [pc, #68]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cf8:	f003 ffba 	bl	8004c70 <HAL_ADC_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000d02:	f000 fac9 	bl	8001298 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000d12:	2307      	movs	r3, #7
 8000d14:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d1e:	463b      	mov	r3, r7
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000d24:	f004 fe0a 	bl	800593c <HAL_ADC_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d2e:	f000 fab3 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000228 	.word	0x20000228
 8000d40:	50000100 	.word	0x50000100

08000d44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	; (8000dbc <MX_I2C1_Init+0x78>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d50:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <MX_I2C1_Init+0x7c>)
 8000d52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d54:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d7e:	480e      	ldr	r0, [pc, #56]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d80:	f005 fdd9 	bl	8006936 <HAL_I2C_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d8a:	f000 fa85 	bl	8001298 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4809      	ldr	r0, [pc, #36]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d92:	f005 fe5f 	bl	8006a54 <HAL_I2CEx_ConfigAnalogFilter>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d9c:	f000 fa7c 	bl	8001298 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000da0:	2100      	movs	r1, #0
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000da4:	f005 fea1 	bl	8006aea <HAL_I2CEx_ConfigDigitalFilter>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dae:	f000 fa73 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000278 	.word	0x20000278
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	2000090e 	.word	0x2000090e

08000dc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000dca:	4a1c      	ldr	r2, [pc, #112]	; (8000e3c <MX_SPI1_Init+0x78>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000dd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000dde:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000de2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000e12:	2207      	movs	r2, #7
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000e1e:	2208      	movs	r2, #8
 8000e20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_SPI1_Init+0x74>)
 8000e24:	f007 fbb0 	bl	8008588 <HAL_SPI_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e2e:	f000 fa33 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200002c4 	.word	0x200002c4
 8000e3c:	40013000 	.word	0x40013000

08000e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e60:	463b      	mov	r3, r7
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <MX_TIM2_Init+0xe8>)
 8000e74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <MX_TIM2_Init+0xe8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <MX_TIM2_Init+0xe8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e86:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <MX_TIM2_Init+0xe8>)
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <MX_TIM2_Init+0xe8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <MX_TIM2_Init+0xe8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e9a:	4823      	ldr	r0, [pc, #140]	; (8000f28 <MX_TIM2_Init+0xe8>)
 8000e9c:	f007 fc1f 	bl	80086de <HAL_TIM_Base_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ea6:	f000 f9f7 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	481c      	ldr	r0, [pc, #112]	; (8000f28 <MX_TIM2_Init+0xe8>)
 8000eb8:	f007 ff66 	bl	8008d88 <HAL_TIM_ConfigClockSource>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ec2:	f000 f9e9 	bl	8001298 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ec6:	4818      	ldr	r0, [pc, #96]	; (8000f28 <MX_TIM2_Init+0xe8>)
 8000ec8:	f007 fcca 	bl	8008860 <HAL_TIM_PWM_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ed2:	f000 f9e1 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4810      	ldr	r0, [pc, #64]	; (8000f28 <MX_TIM2_Init+0xe8>)
 8000ee6:	f008 fc4b 	bl	8009780 <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ef0:	f000 f9d2 	bl	8001298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef4:	2360      	movs	r3, #96	; 0x60
 8000ef6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_TIM2_Init+0xe8>)
 8000f0c:	f007 fe28 	bl	8008b60 <HAL_TIM_PWM_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f16:	f000 f9bf 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_TIM2_Init+0xe8>)
 8000f1c:	f000 fb4e 	bl	80015bc <HAL_TIM_MspPostInit>

}
 8000f20:	bf00      	nop
 8000f22:	3738      	adds	r7, #56	; 0x38
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000328 	.word	0x20000328

08000f2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_TIM3_Init+0x94>)
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <MX_TIM3_Init+0x98>)
 8000f4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4799;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_TIM3_Init+0x94>)
 8000f52:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000f56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_TIM3_Init+0x94>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_TIM3_Init+0x94>)
 8000f60:	2264      	movs	r2, #100	; 0x64
 8000f62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_TIM3_Init+0x94>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_TIM3_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f70:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <MX_TIM3_Init+0x94>)
 8000f72:	f007 fbb4 	bl	80086de <HAL_TIM_Base_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f7c:	f000 f98c 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <MX_TIM3_Init+0x94>)
 8000f8e:	f007 fefb 	bl	8008d88 <HAL_TIM_ConfigClockSource>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f98:	f000 f97e 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_TIM3_Init+0x94>)
 8000faa:	f008 fbe9 	bl	8009780 <HAL_TIMEx_MasterConfigSynchronization>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000fb4:	f000 f970 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000374 	.word	0x20000374
 8000fc4:	40000400 	.word	0x40000400

08000fc8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_TIM6_Init+0x64>)
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <MX_TIM6_Init+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4799;
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_TIM6_Init+0x64>)
 8000fe0:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000fe4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_TIM6_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_TIM6_Init+0x64>)
 8000fee:	2264      	movs	r2, #100	; 0x64
 8000ff0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_TIM6_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <MX_TIM6_Init+0x64>)
 8000ffa:	f007 fb70 	bl	80086de <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001004:	f000 f948 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_TIM6_Init+0x64>)
 8001016:	f008 fbb3 	bl	8009780 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001020:	f000 f93a 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200003c0 	.word	0x200003c0
 8001030:	40001000 	.word	0x40001000

08001034 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_USART2_UART_Init+0x58>)
 800103a:	4a15      	ldr	r2, [pc, #84]	; (8001090 <MX_USART2_UART_Init+0x5c>)
 800103c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_USART2_UART_Init+0x58>)
 8001040:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001044:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_USART2_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_USART2_UART_Init+0x58>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_USART2_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_USART2_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_USART2_UART_Init+0x58>)
 8001078:	f008 fc20 	bl	80098bc <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001082:	f000 f909 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000040c 	.word	0x2000040c
 8001090:	40004400 	.word	0x40004400

08001094 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <MX_USB_PCD_Init+0x3c>)
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <MX_USB_PCD_Init+0x40>)
 800109c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_USB_PCD_Init+0x3c>)
 80010a0:	2208      	movs	r2, #8
 80010a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_USB_PCD_Init+0x3c>)
 80010a6:	2202      	movs	r2, #2
 80010a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_USB_PCD_Init+0x3c>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <MX_USB_PCD_Init+0x3c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_USB_PCD_Init+0x3c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_USB_PCD_Init+0x3c>)
 80010be:	f005 fd60 	bl	8006b82 <HAL_PCD_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80010c8:	f000 f8e6 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000490 	.word	0x20000490
 80010d4:	40005c00 	.word	0x40005c00

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ee:	4b66      	ldr	r3, [pc, #408]	; (8001288 <MX_GPIO_Init+0x1b0>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	4a65      	ldr	r2, [pc, #404]	; (8001288 <MX_GPIO_Init+0x1b0>)
 80010f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f8:	6153      	str	r3, [r2, #20]
 80010fa:	4b63      	ldr	r3, [pc, #396]	; (8001288 <MX_GPIO_Init+0x1b0>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	4b60      	ldr	r3, [pc, #384]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	4a5f      	ldr	r2, [pc, #380]	; (8001288 <MX_GPIO_Init+0x1b0>)
 800110c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001110:	6153      	str	r3, [r2, #20]
 8001112:	4b5d      	ldr	r3, [pc, #372]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800111e:	4b5a      	ldr	r3, [pc, #360]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4a59      	ldr	r2, [pc, #356]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001128:	6153      	str	r3, [r2, #20]
 800112a:	4b57      	ldr	r3, [pc, #348]	; (8001288 <MX_GPIO_Init+0x1b0>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b54      	ldr	r3, [pc, #336]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	4a53      	ldr	r2, [pc, #332]	; (8001288 <MX_GPIO_Init+0x1b0>)
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	6153      	str	r3, [r2, #20]
 8001142:	4b51      	ldr	r3, [pc, #324]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	4b4e      	ldr	r3, [pc, #312]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	4a4d      	ldr	r2, [pc, #308]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001154:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001158:	6153      	str	r3, [r2, #20]
 800115a:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <MX_GPIO_Init+0x1b0>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b48      	ldr	r3, [pc, #288]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	4a47      	ldr	r2, [pc, #284]	; (8001288 <MX_GPIO_Init+0x1b0>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001170:	6153      	str	r3, [r2, #20]
 8001172:	4b45      	ldr	r3, [pc, #276]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800117e:	2200      	movs	r2, #0
 8001180:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001184:	4841      	ldr	r0, [pc, #260]	; (800128c <MX_GPIO_Init+0x1b4>)
 8001186:	f005 fb9b 	bl	80068c0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_Pin|LCDD9_Pin|LCDD10_Pin|LCDD11_Pin
 800118a:	2200      	movs	r2, #0
 800118c:	f647 710f 	movw	r1, #32527	; 0x7f0f
 8001190:	483f      	ldr	r0, [pc, #252]	; (8001290 <MX_GPIO_Init+0x1b8>)
 8001192:	f005 fb95 	bl	80068c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001196:	f64f 7308 	movw	r3, #65288	; 0xff08
 800119a:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	4837      	ldr	r0, [pc, #220]	; (800128c <MX_GPIO_Init+0x1b4>)
 80011b0:	f005 f9f4 	bl	800659c <HAL_GPIO_Init>

  /*Configure GPIO pins : keyPad_Pin PC1 PC2 PC3
                           PC5 */
  GPIO_InitStruct.Pin = keyPad_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011b4:	232f      	movs	r3, #47	; 0x2f
 80011b6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011be:	2302      	movs	r3, #2
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4832      	ldr	r0, [pc, #200]	; (8001294 <MX_GPIO_Init+0x1bc>)
 80011ca:	f005 f9e7 	bl	800659c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ce:	2301      	movs	r3, #1
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e4:	f005 f9da 	bl	800659c <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 80011e8:	2310      	movs	r3, #16
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4825      	ldr	r0, [pc, #148]	; (8001294 <MX_GPIO_Init+0x1bc>)
 80011fe:	f005 f9cd 	bl	800659c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Pin LCDD9_Pin LCDD10_Pin LCDD11_Pin
                           LCDD12_Pin LCDD13_Pin LCDD14_Pin keyPadO_Pin
                           PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = LCD_Pin|LCDD9_Pin|LCDD10_Pin|LCDD11_Pin
 8001202:	f647 730f 	movw	r3, #32527	; 0x7f0f
 8001206:	61fb      	str	r3, [r7, #28]
                          |LCDD12_Pin|LCDD13_Pin|LCDD14_Pin|keyPadO_Pin
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	481d      	ldr	r0, [pc, #116]	; (8001290 <MX_GPIO_Init+0x1b8>)
 800121c:	f005 f9be 	bl	800659c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2101      	movs	r1, #1
 8001224:	2006      	movs	r0, #6
 8001226:	f005 f90c 	bl	8006442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800122a:	2006      	movs	r0, #6
 800122c:	f005 f925 	bl	800647a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2101      	movs	r1, #1
 8001234:	2007      	movs	r0, #7
 8001236:	f005 f904 	bl	8006442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800123a:	2007      	movs	r0, #7
 800123c:	f005 f91d 	bl	800647a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 1, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	2101      	movs	r1, #1
 8001244:	2008      	movs	r0, #8
 8001246:	f005 f8fc 	bl	8006442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800124a:	2008      	movs	r0, #8
 800124c:	f005 f915 	bl	800647a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2101      	movs	r1, #1
 8001254:	2009      	movs	r0, #9
 8001256:	f005 f8f4 	bl	8006442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800125a:	2009      	movs	r0, #9
 800125c:	f005 f90d 	bl	800647a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2101      	movs	r1, #1
 8001264:	200a      	movs	r0, #10
 8001266:	f005 f8ec 	bl	8006442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800126a:	200a      	movs	r0, #10
 800126c:	f005 f905 	bl	800647a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2101      	movs	r1, #1
 8001274:	2017      	movs	r0, #23
 8001276:	f005 f8e4 	bl	8006442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800127a:	2017      	movs	r0, #23
 800127c:	f005 f8fd 	bl	800647a <HAL_NVIC_EnableIRQ>

}
 8001280:	bf00      	nop
 8001282:	3730      	adds	r7, #48	; 0x30
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40021000 	.word	0x40021000
 800128c:	48001000 	.word	0x48001000
 8001290:	48000c00 	.word	0x48000c00
 8001294:	48000800 	.word	0x48000800

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <Error_Handler+0x8>
	...

080012a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_MspInit+0x44>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_MspInit+0x44>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6193      	str	r3, [r2, #24]
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_MspInit+0x44>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_MspInit+0x44>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_MspInit+0x44>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	61d3      	str	r3, [r2, #28]
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_MspInit+0x44>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80012da:	2006      	movs	r0, #6
 80012dc:	f005 f8a6 	bl	800642c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800130c:	d136      	bne.n	800137c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800130e:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <HAL_ADC_MspInit+0x110>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	4a39      	ldr	r2, [pc, #228]	; (80013fc <HAL_ADC_MspInit+0x110>)
 8001316:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001318:	4b38      	ldr	r3, [pc, #224]	; (80013fc <HAL_ADC_MspInit+0x110>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d10b      	bne.n	8001338 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001320:	4b37      	ldr	r3, [pc, #220]	; (8001400 <HAL_ADC_MspInit+0x114>)
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	4a36      	ldr	r2, [pc, #216]	; (8001400 <HAL_ADC_MspInit+0x114>)
 8001326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132a:	6153      	str	r3, [r2, #20]
 800132c:	4b34      	ldr	r3, [pc, #208]	; (8001400 <HAL_ADC_MspInit+0x114>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b31      	ldr	r3, [pc, #196]	; (8001400 <HAL_ADC_MspInit+0x114>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	4a30      	ldr	r2, [pc, #192]	; (8001400 <HAL_ADC_MspInit+0x114>)
 800133e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001342:	6153      	str	r3, [r2, #20]
 8001344:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <HAL_ADC_MspInit+0x114>)
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = LUM_Pin;
 8001350:	2302      	movs	r3, #2
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001354:	2303      	movs	r3, #3
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LUM_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001366:	f005 f919 	bl	800659c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	2012      	movs	r0, #18
 8001370:	f005 f867 	bl	8006442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001374:	2012      	movs	r0, #18
 8001376:	f005 f880 	bl	800647a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800137a:	e03a      	b.n	80013f2 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a20      	ldr	r2, [pc, #128]	; (8001404 <HAL_ADC_MspInit+0x118>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d135      	bne.n	80013f2 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_ADC_MspInit+0x110>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <HAL_ADC_MspInit+0x110>)
 800138e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_ADC_MspInit+0x110>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d10b      	bne.n	80013b0 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_ADC_MspInit+0x114>)
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	4a18      	ldr	r2, [pc, #96]	; (8001400 <HAL_ADC_MspInit+0x114>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a2:	6153      	str	r3, [r2, #20]
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_ADC_MspInit+0x114>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <HAL_ADC_MspInit+0x114>)
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	4a12      	ldr	r2, [pc, #72]	; (8001400 <HAL_ADC_MspInit+0x114>)
 80013b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ba:	6153      	str	r3, [r2, #20]
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_ADC_MspInit+0x114>)
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TEM_Pin;
 80013c8:	2310      	movs	r3, #16
 80013ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013cc:	2303      	movs	r3, #3
 80013ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TEM_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013de:	f005 f8dd 	bl	800659c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2012      	movs	r0, #18
 80013e8:	f005 f82b 	bl	8006442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013ec:	2012      	movs	r0, #18
 80013ee:	f005 f844 	bl	800647a <HAL_NVIC_EnableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3730      	adds	r7, #48	; 0x30
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000077c 	.word	0x2000077c
 8001400:	40021000 	.word	0x40021000
 8001404:	50000100 	.word	0x50000100

08001408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_I2C_MspInit+0x7c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d127      	bne.n	800147a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_I2C_MspInit+0x80>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	4a16      	ldr	r2, [pc, #88]	; (8001488 <HAL_I2C_MspInit+0x80>)
 8001430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001434:	6153      	str	r3, [r2, #20]
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <HAL_I2C_MspInit+0x80>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001442:	23c0      	movs	r3, #192	; 0xc0
 8001444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001446:	2312      	movs	r3, #18
 8001448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144a:	2301      	movs	r3, #1
 800144c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001452:	2304      	movs	r3, #4
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	480b      	ldr	r0, [pc, #44]	; (800148c <HAL_I2C_MspInit+0x84>)
 800145e:	f005 f89d 	bl	800659c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_I2C_MspInit+0x80>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_I2C_MspInit+0x80>)
 8001468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_I2C_MspInit+0x80>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40005400 	.word	0x40005400
 8001488:	40021000 	.word	0x40021000
 800148c:	48000400 	.word	0x48000400

08001490 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_SPI_MspInit+0x7c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d128      	bne.n	8001504 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	4a16      	ldr	r2, [pc, #88]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014bc:	6193      	str	r3, [r2, #24]
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d4:	6153      	str	r3, [r2, #20]
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80014e2:	23e0      	movs	r3, #224	; 0xe0
 80014e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014f2:	2305      	movs	r3, #5
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001500:	f005 f84c 	bl	800659c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40013000 	.word	0x40013000
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001524:	d10c      	bne.n	8001540 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <HAL_TIM_Base_MspInit+0x9c>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <HAL_TIM_Base_MspInit+0x9c>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	61d3      	str	r3, [r2, #28]
 8001532:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <HAL_TIM_Base_MspInit+0x9c>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800153e:	e032      	b.n	80015a6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <HAL_TIM_Base_MspInit+0xa0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d114      	bne.n	8001574 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_TIM_Base_MspInit+0x9c>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <HAL_TIM_Base_MspInit+0x9c>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	61d3      	str	r3, [r2, #28]
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_TIM_Base_MspInit+0x9c>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	201d      	movs	r0, #29
 8001568:	f004 ff6b 	bl	8006442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800156c:	201d      	movs	r0, #29
 800156e:	f004 ff84 	bl	800647a <HAL_NVIC_EnableIRQ>
}
 8001572:	e018      	b.n	80015a6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <HAL_TIM_Base_MspInit+0xa4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d113      	bne.n	80015a6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_TIM_Base_MspInit+0x9c>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_TIM_Base_MspInit+0x9c>)
 8001584:	f043 0310 	orr.w	r3, r3, #16
 8001588:	61d3      	str	r3, [r2, #28]
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_TIM_Base_MspInit+0x9c>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2101      	movs	r1, #1
 800159a:	2036      	movs	r0, #54	; 0x36
 800159c:	f004 ff51 	bl	8006442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015a0:	2036      	movs	r0, #54	; 0x36
 80015a2:	f004 ff6a 	bl	800647a <HAL_NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40000400 	.word	0x40000400
 80015b8:	40001000 	.word	0x40001000

080015bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015dc:	d11d      	bne.n	800161a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_TIM_MspPostInit+0x68>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <HAL_TIM_MspPostInit+0x68>)
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	6153      	str	r3, [r2, #20]
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_TIM_MspPostInit+0x68>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001608:	2301      	movs	r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4619      	mov	r1, r3
 8001612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001616:	f004 ffc1 	bl	800659c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <HAL_UART_MspInit+0x8c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d130      	bne.n	80016ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_UART_MspInit+0x90>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <HAL_UART_MspInit+0x90>)
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	61d3      	str	r3, [r2, #28]
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_UART_MspInit+0x90>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_UART_MspInit+0x90>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <HAL_UART_MspInit+0x90>)
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	6153      	str	r3, [r2, #20]
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_UART_MspInit+0x90>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800167a:	230c      	movs	r3, #12
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800168a:	2307      	movs	r3, #7
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001698:	f004 ff80 	bl	800659c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800169c:	2200      	movs	r2, #0
 800169e:	2100      	movs	r1, #0
 80016a0:	2026      	movs	r0, #38	; 0x26
 80016a2:	f004 fece 	bl	8006442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016a6:	2026      	movs	r0, #38	; 0x26
 80016a8:	f004 fee7 	bl	800647a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ac:	bf00      	nop
 80016ae:	3728      	adds	r7, #40	; 0x28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40004400 	.word	0x40004400
 80016b8:	40021000 	.word	0x40021000

080016bc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a18      	ldr	r2, [pc, #96]	; (800173c <HAL_PCD_MspInit+0x80>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d129      	bne.n	8001732 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <HAL_PCD_MspInit+0x84>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	4a17      	ldr	r2, [pc, #92]	; (8001740 <HAL_PCD_MspInit+0x84>)
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e8:	6153      	str	r3, [r2, #20]
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_PCD_MspInit+0x84>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80016f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001708:	230e      	movs	r3, #14
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001716:	f004 ff41 	bl	800659c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_PCD_MspInit+0x84>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_PCD_MspInit+0x84>)
 8001720:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_PCD_MspInit+0x84>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40005c00 	.word	0x40005c00
 8001740:	40021000 	.word	0x40021000

08001744 <createNode>:
    struct TreeNode* child8;
    struct TreeNode* parent;
    struct menuScreen screen;
};

struct TreeNode* createNode(struct menuScreen screen, struct TreeNode* parent) {
 8001744:	b084      	sub	sp, #16
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	f107 0c10 	add.w	ip, r7, #16
 8001750:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
 8001754:	f44f 709a 	mov.w	r0, #308	; 0x134
 8001758:	f009 f894 	bl	800a884 <malloc>
 800175c:	4603      	mov	r3, r0
 800175e:	607b      	str	r3, [r7, #4]
    newNode->child1 = NULL;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
    newNode->child2 = NULL;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
    newNode->child3 = NULL;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
    newNode->child4 = NULL;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
    newNode->child5 = NULL;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
    newNode->child6 = NULL;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
    newNode->child7 = NULL;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
    newNode->child8 = NULL;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	61da      	str	r2, [r3, #28]
    newNode->parent = parent;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001796:	621a      	str	r2, [r3, #32]
    newNode->screen = screen;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3324      	adds	r3, #36	; 0x24
 800179c:	f107 0110 	add.w	r1, r7, #16
 80017a0:	f44f 7288 	mov.w	r2, #272	; 0x110
 80017a4:	4618      	mov	r0, r3
 80017a6:	f009 f875 	bl	800a894 <memcpy>
    return newNode;
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017b6:	b004      	add	sp, #16
 80017b8:	4770      	bx	lr
	...

080017bc <GenerateMenu>:
struct TreeNode* node19;
struct TreeNode* node_1;

struct TreeNode* currentNode;

void GenerateMenu(){
 80017bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017be:	f5ad 5dba 	sub.w	sp, sp, #5952	; 0x1740
 80017c2:	b087      	sub	sp, #28
 80017c4:	af42      	add	r7, sp, #264	; 0x108
	struct menuScreen mainMenu = {0, 1, 1, {">> ControlPanel   "}, ""};
 80017c6:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80017ca:	f103 0310 	add.w	r3, r3, #16
 80017ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017d2:	4618      	mov	r0, r3
 80017d4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80017d8:	461a      	mov	r2, r3
 80017da:	2100      	movs	r1, #0
 80017dc:	f009 f868 	bl	800a8b0 <memset>
 80017e0:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80017e4:	f103 0310 	add.w	r3, r3, #16
 80017e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017ec:	2201      	movs	r2, #1
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80017f4:	f103 0310 	add.w	r3, r3, #16
 80017f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017fc:	2201      	movs	r2, #1
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001804:	f103 0310 	add.w	r3, r3, #16
 8001808:	f5a3 7688 	sub.w	r6, r3, #272	; 0x110
 800180c:	4bd8      	ldr	r3, [pc, #864]	; (8001b70 <GenerateMenu+0x3b4>)
 800180e:	f106 040c 	add.w	r4, r6, #12
 8001812:	461d      	mov	r5, r3
 8001814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001818:	682b      	ldr	r3, [r5, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	8022      	strh	r2, [r4, #0]
 800181e:	3402      	adds	r4, #2
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	7023      	strb	r3, [r4, #0]
 8001824:	2300      	movs	r3, #0
 8001826:	77f3      	strb	r3, [r6, #31]
    struct menuScreen controlPanel = {1, 7, 1, {">> Temperature   ", "> Security       ", "> Lights       ", "> Scenarios    ", "> StartSetting   ","> AddScenario   ","> ShutDown   "}, ""};
 8001828:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800182c:	f103 0310 	add.w	r3, r3, #16
 8001830:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001834:	4618      	mov	r0, r3
 8001836:	f44f 7388 	mov.w	r3, #272	; 0x110
 800183a:	461a      	mov	r2, r3
 800183c:	2100      	movs	r1, #0
 800183e:	f009 f837 	bl	800a8b0 <memset>
 8001842:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001846:	f103 0310 	add.w	r3, r3, #16
 800184a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001856:	f103 0310 	add.w	r3, r3, #16
 800185a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800185e:	2207      	movs	r2, #7
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001866:	f103 0310 	add.w	r3, r3, #16
 800186a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800186e:	2201      	movs	r2, #1
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001876:	f103 0310 	add.w	r3, r3, #16
 800187a:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 800187e:	4bbd      	ldr	r3, [pc, #756]	; (8001b74 <GenerateMenu+0x3b8>)
 8001880:	f106 040c 	add.w	r4, r6, #12
 8001884:	461d      	mov	r5, r3
 8001886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800188a:	682b      	ldr	r3, [r5, #0]
 800188c:	8023      	strh	r3, [r4, #0]
 800188e:	2300      	movs	r3, #0
 8001890:	83f3      	strh	r3, [r6, #30]
 8001892:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001896:	f103 0310 	add.w	r3, r3, #16
 800189a:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 800189e:	4bb6      	ldr	r3, [pc, #728]	; (8001b78 <GenerateMenu+0x3bc>)
 80018a0:	f106 0420 	add.w	r4, r6, #32
 80018a4:	461d      	mov	r5, r3
 80018a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018aa:	682b      	ldr	r3, [r5, #0]
 80018ac:	8023      	strh	r3, [r4, #0]
 80018ae:	2300      	movs	r3, #0
 80018b0:	8673      	strh	r3, [r6, #50]	; 0x32
 80018b2:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80018b6:	f103 0310 	add.w	r3, r3, #16
 80018ba:	f5a3 7408 	sub.w	r4, r3, #544	; 0x220
 80018be:	4baf      	ldr	r3, [pc, #700]	; (8001b7c <GenerateMenu+0x3c0>)
 80018c0:	f104 0534 	add.w	r5, r4, #52	; 0x34
 80018c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018ca:	2300      	movs	r3, #0
 80018cc:	6463      	str	r3, [r4, #68]	; 0x44
 80018ce:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80018d2:	f103 0310 	add.w	r3, r3, #16
 80018d6:	f5a3 7408 	sub.w	r4, r3, #544	; 0x220
 80018da:	4ba9      	ldr	r3, [pc, #676]	; (8001b80 <GenerateMenu+0x3c4>)
 80018dc:	f104 0548 	add.w	r5, r4, #72	; 0x48
 80018e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018e6:	2300      	movs	r3, #0
 80018e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80018ea:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80018ee:	f103 0310 	add.w	r3, r3, #16
 80018f2:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 80018f6:	4ba3      	ldr	r3, [pc, #652]	; (8001b84 <GenerateMenu+0x3c8>)
 80018f8:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 80018fc:	461d      	mov	r5, r3
 80018fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001902:	682b      	ldr	r3, [r5, #0]
 8001904:	8023      	strh	r3, [r4, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	f8a6 306e 	strh.w	r3, [r6, #110]	; 0x6e
 800190c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001910:	f103 0310 	add.w	r3, r3, #16
 8001914:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 8001918:	4b9b      	ldr	r3, [pc, #620]	; (8001b88 <GenerateMenu+0x3cc>)
 800191a:	f106 0470 	add.w	r4, r6, #112	; 0x70
 800191e:	461d      	mov	r5, r3
 8001920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001924:	682b      	ldr	r3, [r5, #0]
 8001926:	7023      	strb	r3, [r4, #0]
 8001928:	f106 0381 	add.w	r3, r6, #129	; 0x81
 800192c:	2200      	movs	r2, #0
 800192e:	801a      	strh	r2, [r3, #0]
 8001930:	709a      	strb	r2, [r3, #2]
 8001932:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001936:	f103 0310 	add.w	r3, r3, #16
 800193a:	f5a3 7508 	sub.w	r5, r3, #544	; 0x220
 800193e:	4b93      	ldr	r3, [pc, #588]	; (8001b8c <GenerateMenu+0x3d0>)
 8001940:	f105 0484 	add.w	r4, r5, #132	; 0x84
 8001944:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001946:	c407      	stmia	r4!, {r0, r1, r2}
 8001948:	8023      	strh	r3, [r4, #0]
 800194a:	f105 0392 	add.w	r3, r5, #146	; 0x92
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	809a      	strh	r2, [r3, #4]
    struct menuScreen temperature = {2, 2, 1, {">> Threshold    ", "> AlarmSound   "}, ""};
 8001954:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001958:	f103 0310 	add.w	r3, r3, #16
 800195c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001960:	4618      	mov	r0, r3
 8001962:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001966:	461a      	mov	r2, r3
 8001968:	2100      	movs	r1, #0
 800196a:	f008 ffa1 	bl	800a8b0 <memset>
 800196e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001972:	f103 0310 	add.w	r3, r3, #16
 8001976:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800197a:	2202      	movs	r2, #2
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001982:	f103 0310 	add.w	r3, r3, #16
 8001986:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800198a:	2202      	movs	r2, #2
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001992:	f103 0310 	add.w	r3, r3, #16
 8001996:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800199a:	2201      	movs	r2, #1
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80019a2:	f103 0310 	add.w	r3, r3, #16
 80019a6:	f5a3 764c 	sub.w	r6, r3, #816	; 0x330
 80019aa:	4b79      	ldr	r3, [pc, #484]	; (8001b90 <GenerateMenu+0x3d4>)
 80019ac:	f106 040c 	add.w	r4, r6, #12
 80019b0:	461d      	mov	r5, r3
 80019b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b6:	682b      	ldr	r3, [r5, #0]
 80019b8:	7023      	strb	r3, [r4, #0]
 80019ba:	f106 031d 	add.w	r3, r6, #29
 80019be:	2200      	movs	r2, #0
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	709a      	strb	r2, [r3, #2]
 80019c4:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80019c8:	f103 0310 	add.w	r3, r3, #16
 80019cc:	f5a3 744c 	sub.w	r4, r3, #816	; 0x330
 80019d0:	4b70      	ldr	r3, [pc, #448]	; (8001b94 <GenerateMenu+0x3d8>)
 80019d2:	f104 0520 	add.w	r5, r4, #32
 80019d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80019dc:	2300      	movs	r3, #0
 80019de:	6323      	str	r3, [r4, #48]	; 0x30
    struct menuScreen security = {3, 2, 1, {">> Activation   ", "> AlarmSound   "}, ""};
 80019e0:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80019e4:	f103 0310 	add.w	r3, r3, #16
 80019e8:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80019ec:	4618      	mov	r0, r3
 80019ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80019f2:	461a      	mov	r2, r3
 80019f4:	2100      	movs	r1, #0
 80019f6:	f008 ff5b 	bl	800a8b0 <memset>
 80019fa:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80019fe:	f103 0310 	add.w	r3, r3, #16
 8001a02:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8001a06:	2203      	movs	r2, #3
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001a0e:	f103 0310 	add.w	r3, r3, #16
 8001a12:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8001a16:	2202      	movs	r2, #2
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001a1e:	f103 0310 	add.w	r3, r3, #16
 8001a22:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8001a26:	2201      	movs	r2, #1
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001a2e:	f103 0310 	add.w	r3, r3, #16
 8001a32:	f5a3 6688 	sub.w	r6, r3, #1088	; 0x440
 8001a36:	4b58      	ldr	r3, [pc, #352]	; (8001b98 <GenerateMenu+0x3dc>)
 8001a38:	f106 040c 	add.w	r4, r6, #12
 8001a3c:	461d      	mov	r5, r3
 8001a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a42:	682b      	ldr	r3, [r5, #0]
 8001a44:	7023      	strb	r3, [r4, #0]
 8001a46:	f106 031d 	add.w	r3, r6, #29
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	801a      	strh	r2, [r3, #0]
 8001a4e:	709a      	strb	r2, [r3, #2]
 8001a50:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001a54:	f103 0310 	add.w	r3, r3, #16
 8001a58:	f5a3 6488 	sub.w	r4, r3, #1088	; 0x440
 8001a5c:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <GenerateMenu+0x3d8>)
 8001a5e:	f104 0520 	add.w	r5, r4, #32
 8001a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a68:	2300      	movs	r3, #0
 8001a6a:	6323      	str	r3, [r4, #48]	; 0x30
    struct menuScreen lightsControl = {4, 0, 0, {""}, "X  X  X  X"};
 8001a6c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001a70:	f103 0310 	add.w	r3, r3, #16
 8001a74:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2100      	movs	r1, #0
 8001a82:	f008 ff15 	bl	800a8b0 <memset>
 8001a86:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001a8a:	f103 0310 	add.w	r3, r3, #16
 8001a8e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8001a92:	2204      	movs	r2, #4
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001a9a:	f103 0310 	add.w	r3, r3, #16
 8001a9e:	f5a3 64aa 	sub.w	r4, r3, #1360	; 0x550
 8001aa2:	4a3e      	ldr	r2, [pc, #248]	; (8001b9c <GenerateMenu+0x3e0>)
 8001aa4:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001aa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aaa:	c303      	stmia	r3!, {r0, r1}
 8001aac:	801a      	strh	r2, [r3, #0]
 8001aae:	3302      	adds	r3, #2
 8001ab0:	0c12      	lsrs	r2, r2, #16
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	f104 03b7 	add.w	r3, r4, #183	; 0xb7
 8001ab8:	2259      	movs	r2, #89	; 0x59
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f008 fef7 	bl	800a8b0 <memset>
    struct menuScreen scenarios = {5, 2, 1, {">> Scenario 1   ", "> Scenario 2   "}, ""};
 8001ac2:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001ac6:	f103 0310 	add.w	r3, r3, #16
 8001aca:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	f008 feea 	bl	800a8b0 <memset>
 8001adc:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001ae0:	f103 0310 	add.w	r3, r3, #16
 8001ae4:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001ae8:	2205      	movs	r2, #5
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001af0:	f103 0310 	add.w	r3, r3, #16
 8001af4:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001af8:	2202      	movs	r2, #2
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001b00:	f103 0310 	add.w	r3, r3, #16
 8001b04:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8001b08:	2201      	movs	r2, #1
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001b10:	f103 0310 	add.w	r3, r3, #16
 8001b14:	f5a3 66cc 	sub.w	r6, r3, #1632	; 0x660
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <GenerateMenu+0x3e4>)
 8001b1a:	f106 040c 	add.w	r4, r6, #12
 8001b1e:	461d      	mov	r5, r3
 8001b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	7023      	strb	r3, [r4, #0]
 8001b28:	f106 031d 	add.w	r3, r6, #29
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	801a      	strh	r2, [r3, #0]
 8001b30:	709a      	strb	r2, [r3, #2]
 8001b32:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001b36:	f103 0310 	add.w	r3, r3, #16
 8001b3a:	f5a3 64cc 	sub.w	r4, r3, #1632	; 0x660
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <GenerateMenu+0x3e8>)
 8001b40:	f104 0520 	add.w	r5, r4, #32
 8001b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	6323      	str	r3, [r4, #48]	; 0x30
    struct menuScreen nameSet = {6, 1, 0, {"write your phrase"}," " };
 8001b4e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001b52:	f103 0310 	add.w	r3, r3, #16
 8001b56:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001b60:	461a      	mov	r2, r3
 8001b62:	2100      	movs	r1, #0
 8001b64:	f008 fea4 	bl	800a8b0 <memset>
 8001b68:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001b6c:	e01c      	b.n	8001ba8 <GenerateMenu+0x3ec>
 8001b6e:	bf00      	nop
 8001b70:	0800b1c8 	.word	0x0800b1c8
 8001b74:	0800b1dc 	.word	0x0800b1dc
 8001b78:	0800b1f0 	.word	0x0800b1f0
 8001b7c:	0800b204 	.word	0x0800b204
 8001b80:	0800b218 	.word	0x0800b218
 8001b84:	0800b22c 	.word	0x0800b22c
 8001b88:	0800b240 	.word	0x0800b240
 8001b8c:	0800b254 	.word	0x0800b254
 8001b90:	0800b268 	.word	0x0800b268
 8001b94:	0800b27c 	.word	0x0800b27c
 8001b98:	0800b290 	.word	0x0800b290
 8001b9c:	0800b2a4 	.word	0x0800b2a4
 8001ba0:	0800b308 	.word	0x0800b308
 8001ba4:	0800b31c 	.word	0x0800b31c
 8001ba8:	f103 0310 	add.w	r3, r3, #16
 8001bac:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 8001bb0:	2206      	movs	r2, #6
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001bb8:	f103 0310 	add.w	r3, r3, #16
 8001bbc:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001bc8:	f103 0310 	add.w	r3, r3, #16
 8001bcc:	f5a3 66ee 	sub.w	r6, r3, #1904	; 0x770
 8001bd0:	4bde      	ldr	r3, [pc, #888]	; (8001f4c <GenerateMenu+0x790>)
 8001bd2:	f106 040c 	add.w	r4, r6, #12
 8001bd6:	461d      	mov	r5, r3
 8001bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bdc:	682b      	ldr	r3, [r5, #0]
 8001bde:	8023      	strh	r3, [r4, #0]
 8001be0:	2300      	movs	r3, #0
 8001be2:	83f3      	strh	r3, [r6, #30]
 8001be4:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001be8:	f103 0310 	add.w	r3, r3, #16
 8001bec:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8001bf6:	33b0      	adds	r3, #176	; 0xb0
 8001bf8:	2260      	movs	r2, #96	; 0x60
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f008 fe57 	bl	800a8b0 <memset>
    struct menuScreen temThresh = {7, 0, 0, {""}, "<  10  >"};
 8001c02:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001c06:	f103 0310 	add.w	r3, r3, #16
 8001c0a:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001c14:	461a      	mov	r2, r3
 8001c16:	2100      	movs	r1, #0
 8001c18:	f008 fe4a 	bl	800a8b0 <memset>
 8001c1c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001c20:	f103 0310 	add.w	r3, r3, #16
 8001c24:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001c30:	f103 0310 	add.w	r3, r3, #16
 8001c34:	f5a3 6408 	sub.w	r4, r3, #2176	; 0x880
 8001c38:	4ac5      	ldr	r2, [pc, #788]	; (8001f50 <GenerateMenu+0x794>)
 8001c3a:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001c3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c40:	c303      	stmia	r3!, {r0, r1}
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001c48:	225b      	movs	r2, #91	; 0x5b
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f008 fe2f 	bl	800a8b0 <memset>
    struct menuScreen temAlarm = {8, 0, 0, {""}, "<  on  >"};
 8001c52:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001c56:	f103 0310 	add.w	r3, r3, #16
 8001c5a:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001c64:	461a      	mov	r2, r3
 8001c66:	2100      	movs	r1, #0
 8001c68:	f008 fe22 	bl	800a8b0 <memset>
 8001c6c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001c70:	f103 0310 	add.w	r3, r3, #16
 8001c74:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 8001c78:	2208      	movs	r2, #8
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001c80:	f103 0310 	add.w	r3, r3, #16
 8001c84:	f5a3 6419 	sub.w	r4, r3, #2448	; 0x990
 8001c88:	4ab2      	ldr	r2, [pc, #712]	; (8001f54 <GenerateMenu+0x798>)
 8001c8a:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001c8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c90:	c303      	stmia	r3!, {r0, r1}
 8001c92:	701a      	strb	r2, [r3, #0]
 8001c94:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001c98:	225b      	movs	r2, #91	; 0x5b
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f008 fe07 	bl	800a8b0 <memset>
    struct menuScreen securityActivation = {9, 0, 0, {""}, "<  on  >"};
 8001ca2:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001ca6:	f103 0310 	add.w	r3, r3, #16
 8001caa:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	f008 fdfa 	bl	800a8b0 <memset>
 8001cbc:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001cc0:	f103 0310 	add.w	r3, r3, #16
 8001cc4:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 8001cc8:	2209      	movs	r2, #9
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001cd0:	f103 0310 	add.w	r3, r3, #16
 8001cd4:	f5a3 642a 	sub.w	r4, r3, #2720	; 0xaa0
 8001cd8:	4a9e      	ldr	r2, [pc, #632]	; (8001f54 <GenerateMenu+0x798>)
 8001cda:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001cde:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ce0:	c303      	stmia	r3!, {r0, r1}
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001ce8:	225b      	movs	r2, #91	; 0x5b
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f008 fddf 	bl	800a8b0 <memset>
    struct menuScreen securityAlarm = {10, 0, 0, {""}, "<  on  >"};
 8001cf2:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001cf6:	f103 0310 	add.w	r3, r3, #16
 8001cfa:	f5a3 633b 	sub.w	r3, r3, #2992	; 0xbb0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001d04:	461a      	mov	r2, r3
 8001d06:	2100      	movs	r1, #0
 8001d08:	f008 fdd2 	bl	800a8b0 <memset>
 8001d0c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001d10:	f103 0310 	add.w	r3, r3, #16
 8001d14:	f5a3 633b 	sub.w	r3, r3, #2992	; 0xbb0
 8001d18:	220a      	movs	r2, #10
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001d20:	f103 0310 	add.w	r3, r3, #16
 8001d24:	f5a3 643b 	sub.w	r4, r3, #2992	; 0xbb0
 8001d28:	4a8a      	ldr	r2, [pc, #552]	; (8001f54 <GenerateMenu+0x798>)
 8001d2a:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001d2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d30:	c303      	stmia	r3!, {r0, r1}
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001d38:	225b      	movs	r2, #91	; 0x5b
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f008 fdb7 	bl	800a8b0 <memset>
    struct menuScreen scenario1 = {11, 8, 0, {"temTHreshold=22","temAlarm=on","securityAlarm=off","securityAlert=on","light1=on","light2=on","light3=off","light4=off"}, "<  off  >"};
 8001d42:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001d46:	f103 0310 	add.w	r3, r3, #16
 8001d4a:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 8001d4e:	4a82      	ldr	r2, [pc, #520]	; (8001f58 <GenerateMenu+0x79c>)
 8001d50:	4618      	mov	r0, r3
 8001d52:	4611      	mov	r1, r2
 8001d54:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f008 fd9b 	bl	800a894 <memcpy>
    struct menuScreen scenario2 = {12, 8, 0, {"temTHreshold=35","temAlarm=on","securityAlarm=on","securityAlert=on","light1=off","light2=off","light3=off","light4=off"}, "<  off  >"};
 8001d5e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001d62:	f103 0310 	add.w	r3, r3, #16
 8001d66:	f5a3 635d 	sub.w	r3, r3, #3536	; 0xdd0
 8001d6a:	4a7c      	ldr	r2, [pc, #496]	; (8001f5c <GenerateMenu+0x7a0>)
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	4611      	mov	r1, r2
 8001d70:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001d74:	461a      	mov	r2, r3
 8001d76:	f008 fd8d 	bl	800a894 <memcpy>

    struct menuScreen AddScenario= {13, 6, 1, {">> temTHreshold    ","> temAlarm    ","> securityAlarm   ","> securityAlert   ","> lights        ","> create         "}, ""};
 8001d7a:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001d7e:	f103 0310 	add.w	r3, r3, #16
 8001d82:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2100      	movs	r1, #0
 8001d90:	f008 fd8e 	bl	800a8b0 <memset>
 8001d94:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001d98:	f103 0310 	add.w	r3, r3, #16
 8001d9c:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8001da0:	220d      	movs	r2, #13
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001da8:	f103 0310 	add.w	r3, r3, #16
 8001dac:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8001db0:	2206      	movs	r2, #6
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001db8:	f103 0310 	add.w	r3, r3, #16
 8001dbc:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001dc8:	f103 0310 	add.w	r3, r3, #16
 8001dcc:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8001dd0:	4a63      	ldr	r2, [pc, #396]	; (8001f60 <GenerateMenu+0x7a4>)
 8001dd2:	f103 040c 	add.w	r4, r3, #12
 8001dd6:	4615      	mov	r5, r2
 8001dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ddc:	682b      	ldr	r3, [r5, #0]
 8001dde:	6023      	str	r3, [r4, #0]
 8001de0:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001de4:	f103 0310 	add.w	r3, r3, #16
 8001de8:	f5a3 656e 	sub.w	r5, r3, #3808	; 0xee0
 8001dec:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <GenerateMenu+0x7a8>)
 8001dee:	f105 0420 	add.w	r4, r5, #32
 8001df2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001df4:	c407      	stmia	r4!, {r0, r1, r2}
 8001df6:	8023      	strh	r3, [r4, #0]
 8001df8:	3402      	adds	r4, #2
 8001dfa:	0c1b      	lsrs	r3, r3, #16
 8001dfc:	7023      	strb	r3, [r4, #0]
 8001dfe:	f105 032f 	add.w	r3, r5, #47	; 0x2f
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	711a      	strb	r2, [r3, #4]
 8001e08:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001e0c:	f103 0310 	add.w	r3, r3, #16
 8001e10:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 8001e14:	4b54      	ldr	r3, [pc, #336]	; (8001f68 <GenerateMenu+0x7ac>)
 8001e16:	f106 0434 	add.w	r4, r6, #52	; 0x34
 8001e1a:	461d      	mov	r5, r3
 8001e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e20:	682b      	ldr	r3, [r5, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	8022      	strh	r2, [r4, #0]
 8001e26:	3402      	adds	r4, #2
 8001e28:	0c1b      	lsrs	r3, r3, #16
 8001e2a:	7023      	strb	r3, [r4, #0]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
 8001e32:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001e36:	f103 0310 	add.w	r3, r3, #16
 8001e3a:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 8001e3e:	4b4b      	ldr	r3, [pc, #300]	; (8001f6c <GenerateMenu+0x7b0>)
 8001e40:	f106 0448 	add.w	r4, r6, #72	; 0x48
 8001e44:	461d      	mov	r5, r3
 8001e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4a:	682b      	ldr	r3, [r5, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	8022      	strh	r2, [r4, #0]
 8001e50:	3402      	adds	r4, #2
 8001e52:	0c1b      	lsrs	r3, r3, #16
 8001e54:	7023      	strb	r3, [r4, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	f886 305b 	strb.w	r3, [r6, #91]	; 0x5b
 8001e5c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001e60:	f103 0310 	add.w	r3, r3, #16
 8001e64:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 8001e68:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <GenerateMenu+0x7b4>)
 8001e6a:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 8001e6e:	461d      	mov	r5, r3
 8001e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e74:	682b      	ldr	r3, [r5, #0]
 8001e76:	7023      	strb	r3, [r4, #0]
 8001e78:	f106 036d 	add.w	r3, r6, #109	; 0x6d
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	801a      	strh	r2, [r3, #0]
 8001e80:	709a      	strb	r2, [r3, #2]
 8001e82:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001e86:	f103 0310 	add.w	r3, r3, #16
 8001e8a:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <GenerateMenu+0x7b8>)
 8001e90:	f106 0470 	add.w	r4, r6, #112	; 0x70
 8001e94:	461d      	mov	r5, r3
 8001e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9a:	682b      	ldr	r3, [r5, #0]
 8001e9c:	8023      	strh	r3, [r4, #0]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
    struct menuScreen scenTemThreshold = {14,0,0, {""}, "<  10  >"};
 8001ea4:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001ea8:	f103 0310 	add.w	r3, r3, #16
 8001eac:	f5a3 637f 	sub.w	r3, r3, #4080	; 0xff0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2100      	movs	r1, #0
 8001eba:	f008 fcf9 	bl	800a8b0 <memset>
 8001ebe:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001ec2:	f103 0310 	add.w	r3, r3, #16
 8001ec6:	f5a3 637f 	sub.w	r3, r3, #4080	; 0xff0
 8001eca:	220e      	movs	r2, #14
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8001ed2:	f103 0310 	add.w	r3, r3, #16
 8001ed6:	f5a3 647f 	sub.w	r4, r3, #4080	; 0xff0
 8001eda:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <GenerateMenu+0x794>)
 8001edc:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001ee0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ee2:	c303      	stmia	r3!, {r0, r1}
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001eea:	225b      	movs	r2, #91	; 0x5b
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f008 fcde 	bl	800a8b0 <memset>
    struct menuScreen scenTemAlarm = {15, 0, 0, {""}, "<  on  >"};
 8001ef4:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001ef8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001efc:	4618      	mov	r0, r3
 8001efe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001f02:	461a      	mov	r2, r3
 8001f04:	2100      	movs	r1, #0
 8001f06:	f008 fcd3 	bl	800a8b0 <memset>
 8001f0a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001f0e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f12:	220f      	movs	r2, #15
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001f1a:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 8001f1e:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <GenerateMenu+0x798>)
 8001f20:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001f24:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f26:	c303      	stmia	r3!, {r0, r1}
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001f2e:	225b      	movs	r2, #91	; 0x5b
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f008 fcbc 	bl	800a8b0 <memset>
	struct menuScreen scenSecAlarm = {16, 0, 0, {""}, "<  on  >"};
 8001f38:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001f3c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001f40:	4618      	mov	r0, r3
 8001f42:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001f46:	461a      	mov	r2, r3
 8001f48:	2100      	movs	r1, #0
 8001f4a:	e015      	b.n	8001f78 <GenerateMenu+0x7bc>
 8001f4c:	0800b330 	.word	0x0800b330
 8001f50:	0800b344 	.word	0x0800b344
 8001f54:	0800b3a8 	.word	0x0800b3a8
 8001f58:	0800b40c 	.word	0x0800b40c
 8001f5c:	0800b51c 	.word	0x0800b51c
 8001f60:	0800b62c 	.word	0x0800b62c
 8001f64:	0800b640 	.word	0x0800b640
 8001f68:	0800b654 	.word	0x0800b654
 8001f6c:	0800b668 	.word	0x0800b668
 8001f70:	0800b67c 	.word	0x0800b67c
 8001f74:	0800b690 	.word	0x0800b690
 8001f78:	f008 fc9a 	bl	800a8b0 <memset>
 8001f7c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001f80:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001f84:	2210      	movs	r2, #16
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001f8c:	f5a3 7404 	sub.w	r4, r3, #528	; 0x210
 8001f90:	4ad6      	ldr	r2, [pc, #856]	; (80022ec <GenerateMenu+0xb30>)
 8001f92:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001f96:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f98:	c303      	stmia	r3!, {r0, r1}
 8001f9a:	701a      	strb	r2, [r3, #0]
 8001f9c:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001fa0:	225b      	movs	r2, #91	; 0x5b
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f008 fc83 	bl	800a8b0 <memset>
	struct menuScreen scenSecAlert = {17, 0, 0, {""}, "<  on  >"};
 8001faa:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001fae:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2100      	movs	r1, #0
 8001fbc:	f008 fc78 	bl	800a8b0 <memset>
 8001fc0:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001fc4:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8001fc8:	2211      	movs	r2, #17
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001fd0:	f5a3 7448 	sub.w	r4, r3, #800	; 0x320
 8001fd4:	4ac5      	ldr	r2, [pc, #788]	; (80022ec <GenerateMenu+0xb30>)
 8001fd6:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001fda:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fdc:	c303      	stmia	r3!, {r0, r1}
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8001fe4:	225b      	movs	r2, #91	; 0x5b
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f008 fc61 	bl	800a8b0 <memset>
	struct menuScreen scenLight = {18, 0, 0, {""}, "X  X  X  X"};
 8001fee:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001ff2:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2100      	movs	r1, #0
 8002000:	f008 fc56 	bl	800a8b0 <memset>
 8002004:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002008:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800200c:	2212      	movs	r2, #18
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002014:	f5a3 6486 	sub.w	r4, r3, #1072	; 0x430
 8002018:	4ab5      	ldr	r2, [pc, #724]	; (80022f0 <GenerateMenu+0xb34>)
 800201a:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 800201e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002020:	c303      	stmia	r3!, {r0, r1}
 8002022:	801a      	strh	r2, [r3, #0]
 8002024:	3302      	adds	r3, #2
 8002026:	0c12      	lsrs	r2, r2, #16
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	f104 03b7 	add.w	r3, r4, #183	; 0xb7
 800202e:	2259      	movs	r2, #89	; 0x59
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f008 fc3c 	bl	800a8b0 <memset>
	struct menuScreen create = {19, 0, 0, {""}, "new scenario created"};
 8002038:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800203c:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8002040:	4618      	mov	r0, r3
 8002042:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002046:	461a      	mov	r2, r3
 8002048:	2100      	movs	r1, #0
 800204a:	f008 fc31 	bl	800a8b0 <memset>
 800204e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002052:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8002056:	2213      	movs	r2, #19
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800205e:	f5a3 66a8 	sub.w	r6, r3, #1344	; 0x540
 8002062:	4ba4      	ldr	r3, [pc, #656]	; (80022f4 <GenerateMenu+0xb38>)
 8002064:	f106 04ac 	add.w	r4, r6, #172	; 0xac
 8002068:	461d      	mov	r5, r3
 800206a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800206c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800206e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002072:	6020      	str	r0, [r4, #0]
 8002074:	3404      	adds	r4, #4
 8002076:	7021      	strb	r1, [r4, #0]
 8002078:	f106 03c1 	add.w	r3, r6, #193	; 0xc1
 800207c:	224f      	movs	r2, #79	; 0x4f
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f008 fc15 	bl	800a8b0 <memset>

	struct menuScreen shutDown = {-1, 0, 0, {""}, "Turning Off... "};
 8002086:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800208a:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 800208e:	4618      	mov	r0, r3
 8002090:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002094:	461a      	mov	r2, r3
 8002096:	2100      	movs	r1, #0
 8002098:	f008 fc0a 	bl	800a8b0 <memset>
 800209c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80020a0:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80020ae:	f5a3 64ca 	sub.w	r4, r3, #1616	; 0x650
 80020b2:	4b91      	ldr	r3, [pc, #580]	; (80022f8 <GenerateMenu+0xb3c>)
 80020b4:	f104 05ac 	add.w	r5, r4, #172	; 0xac
 80020b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80020be:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 80020c2:	2254      	movs	r2, #84	; 0x54
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f008 fbf2 	bl	800a8b0 <memset>


    lastId = 19;
 80020cc:	4b8b      	ldr	r3, [pc, #556]	; (80022fc <GenerateMenu+0xb40>)
 80020ce:	2213      	movs	r2, #19
 80020d0:	601a      	str	r2, [r3, #0]
    lastPagesId = 19;
 80020d2:	4b8b      	ldr	r3, [pc, #556]	; (8002300 <GenerateMenu+0xb44>)
 80020d4:	2213      	movs	r2, #19
 80020d6:	601a      	str	r2, [r3, #0]

    root = createNode(mainMenu, NULL);
 80020d8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80020dc:	f103 0310 	add.w	r3, r3, #16
 80020e0:	f5a3 7488 	sub.w	r4, r3, #272	; 0x110
 80020e4:	2300      	movs	r3, #0
 80020e6:	9340      	str	r3, [sp, #256]	; 0x100
 80020e8:	4668      	mov	r0, sp
 80020ea:	f104 0310 	add.w	r3, r4, #16
 80020ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f2:	4619      	mov	r1, r3
 80020f4:	f008 fbce 	bl	800a894 <memcpy>
 80020f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020fc:	f7ff fb22 	bl	8001744 <createNode>
 8002100:	4603      	mov	r3, r0
 8002102:	4a80      	ldr	r2, [pc, #512]	; (8002304 <GenerateMenu+0xb48>)
 8002104:	6013      	str	r3, [r2, #0]
    node1 = createNode(controlPanel, root);
 8002106:	4b7f      	ldr	r3, [pc, #508]	; (8002304 <GenerateMenu+0xb48>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 800210e:	f102 0210 	add.w	r2, r2, #16
 8002112:	f5a2 7408 	sub.w	r4, r2, #544	; 0x220
 8002116:	9340      	str	r3, [sp, #256]	; 0x100
 8002118:	4668      	mov	r0, sp
 800211a:	f104 0310 	add.w	r3, r4, #16
 800211e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002122:	4619      	mov	r1, r3
 8002124:	f008 fbb6 	bl	800a894 <memcpy>
 8002128:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800212c:	f7ff fb0a 	bl	8001744 <createNode>
 8002130:	4603      	mov	r3, r0
 8002132:	4a75      	ldr	r2, [pc, #468]	; (8002308 <GenerateMenu+0xb4c>)
 8002134:	6013      	str	r3, [r2, #0]
    node2 = createNode(temperature, node1);
 8002136:	4b74      	ldr	r3, [pc, #464]	; (8002308 <GenerateMenu+0xb4c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 800213e:	f102 0210 	add.w	r2, r2, #16
 8002142:	f5a2 744c 	sub.w	r4, r2, #816	; 0x330
 8002146:	9340      	str	r3, [sp, #256]	; 0x100
 8002148:	4668      	mov	r0, sp
 800214a:	f104 0310 	add.w	r3, r4, #16
 800214e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002152:	4619      	mov	r1, r3
 8002154:	f008 fb9e 	bl	800a894 <memcpy>
 8002158:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800215c:	f7ff faf2 	bl	8001744 <createNode>
 8002160:	4603      	mov	r3, r0
 8002162:	4a6a      	ldr	r2, [pc, #424]	; (800230c <GenerateMenu+0xb50>)
 8002164:	6013      	str	r3, [r2, #0]
    node3 = createNode(security, node1);
 8002166:	4b68      	ldr	r3, [pc, #416]	; (8002308 <GenerateMenu+0xb4c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 800216e:	f102 0210 	add.w	r2, r2, #16
 8002172:	f5a2 6488 	sub.w	r4, r2, #1088	; 0x440
 8002176:	9340      	str	r3, [sp, #256]	; 0x100
 8002178:	4668      	mov	r0, sp
 800217a:	f104 0310 	add.w	r3, r4, #16
 800217e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002182:	4619      	mov	r1, r3
 8002184:	f008 fb86 	bl	800a894 <memcpy>
 8002188:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800218c:	f7ff fada 	bl	8001744 <createNode>
 8002190:	4603      	mov	r3, r0
 8002192:	4a5f      	ldr	r2, [pc, #380]	; (8002310 <GenerateMenu+0xb54>)
 8002194:	6013      	str	r3, [r2, #0]
    node4 = createNode(lightsControl, node1);
 8002196:	4b5c      	ldr	r3, [pc, #368]	; (8002308 <GenerateMenu+0xb4c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 800219e:	f102 0210 	add.w	r2, r2, #16
 80021a2:	f5a2 64aa 	sub.w	r4, r2, #1360	; 0x550
 80021a6:	9340      	str	r3, [sp, #256]	; 0x100
 80021a8:	4668      	mov	r0, sp
 80021aa:	f104 0310 	add.w	r3, r4, #16
 80021ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b2:	4619      	mov	r1, r3
 80021b4:	f008 fb6e 	bl	800a894 <memcpy>
 80021b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021bc:	f7ff fac2 	bl	8001744 <createNode>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4a54      	ldr	r2, [pc, #336]	; (8002314 <GenerateMenu+0xb58>)
 80021c4:	6013      	str	r3, [r2, #0]
    node5 = createNode(scenarios, node1);
 80021c6:	4b50      	ldr	r3, [pc, #320]	; (8002308 <GenerateMenu+0xb4c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80021ce:	f102 0210 	add.w	r2, r2, #16
 80021d2:	f5a2 64cc 	sub.w	r4, r2, #1632	; 0x660
 80021d6:	9340      	str	r3, [sp, #256]	; 0x100
 80021d8:	4668      	mov	r0, sp
 80021da:	f104 0310 	add.w	r3, r4, #16
 80021de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021e2:	4619      	mov	r1, r3
 80021e4:	f008 fb56 	bl	800a894 <memcpy>
 80021e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021ec:	f7ff faaa 	bl	8001744 <createNode>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a49      	ldr	r2, [pc, #292]	; (8002318 <GenerateMenu+0xb5c>)
 80021f4:	6013      	str	r3, [r2, #0]
    node6 = createNode(nameSet, node1);
 80021f6:	4b44      	ldr	r3, [pc, #272]	; (8002308 <GenerateMenu+0xb4c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80021fe:	f102 0210 	add.w	r2, r2, #16
 8002202:	f5a2 64ee 	sub.w	r4, r2, #1904	; 0x770
 8002206:	9340      	str	r3, [sp, #256]	; 0x100
 8002208:	4668      	mov	r0, sp
 800220a:	f104 0310 	add.w	r3, r4, #16
 800220e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002212:	4619      	mov	r1, r3
 8002214:	f008 fb3e 	bl	800a894 <memcpy>
 8002218:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800221c:	f7ff fa92 	bl	8001744 <createNode>
 8002220:	4603      	mov	r3, r0
 8002222:	4a3e      	ldr	r2, [pc, #248]	; (800231c <GenerateMenu+0xb60>)
 8002224:	6013      	str	r3, [r2, #0]
    node7 = createNode(temThresh, node2);
 8002226:	4b39      	ldr	r3, [pc, #228]	; (800230c <GenerateMenu+0xb50>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 800222e:	f102 0210 	add.w	r2, r2, #16
 8002232:	f5a2 6408 	sub.w	r4, r2, #2176	; 0x880
 8002236:	9340      	str	r3, [sp, #256]	; 0x100
 8002238:	4668      	mov	r0, sp
 800223a:	f104 0310 	add.w	r3, r4, #16
 800223e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002242:	4619      	mov	r1, r3
 8002244:	f008 fb26 	bl	800a894 <memcpy>
 8002248:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800224c:	f7ff fa7a 	bl	8001744 <createNode>
 8002250:	4603      	mov	r3, r0
 8002252:	4a33      	ldr	r2, [pc, #204]	; (8002320 <GenerateMenu+0xb64>)
 8002254:	6013      	str	r3, [r2, #0]
    node8 = createNode(temAlarm, node2);
 8002256:	4b2d      	ldr	r3, [pc, #180]	; (800230c <GenerateMenu+0xb50>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 800225e:	f102 0210 	add.w	r2, r2, #16
 8002262:	f5a2 6419 	sub.w	r4, r2, #2448	; 0x990
 8002266:	9340      	str	r3, [sp, #256]	; 0x100
 8002268:	4668      	mov	r0, sp
 800226a:	f104 0310 	add.w	r3, r4, #16
 800226e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002272:	4619      	mov	r1, r3
 8002274:	f008 fb0e 	bl	800a894 <memcpy>
 8002278:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800227c:	f7ff fa62 	bl	8001744 <createNode>
 8002280:	4603      	mov	r3, r0
 8002282:	4a28      	ldr	r2, [pc, #160]	; (8002324 <GenerateMenu+0xb68>)
 8002284:	6013      	str	r3, [r2, #0]
    node9 = createNode(securityActivation, node3);
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <GenerateMenu+0xb54>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 800228e:	f102 0210 	add.w	r2, r2, #16
 8002292:	f5a2 642a 	sub.w	r4, r2, #2720	; 0xaa0
 8002296:	9340      	str	r3, [sp, #256]	; 0x100
 8002298:	4668      	mov	r0, sp
 800229a:	f104 0310 	add.w	r3, r4, #16
 800229e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022a2:	4619      	mov	r1, r3
 80022a4:	f008 faf6 	bl	800a894 <memcpy>
 80022a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022ac:	f7ff fa4a 	bl	8001744 <createNode>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <GenerateMenu+0xb6c>)
 80022b4:	6013      	str	r3, [r2, #0]
    node10 = createNode(securityAlarm, node3);
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <GenerateMenu+0xb54>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80022be:	f102 0210 	add.w	r2, r2, #16
 80022c2:	f5a2 643b 	sub.w	r4, r2, #2992	; 0xbb0
 80022c6:	9340      	str	r3, [sp, #256]	; 0x100
 80022c8:	4668      	mov	r0, sp
 80022ca:	f104 0310 	add.w	r3, r4, #16
 80022ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022d2:	4619      	mov	r1, r3
 80022d4:	f008 fade 	bl	800a894 <memcpy>
 80022d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022dc:	f7ff fa32 	bl	8001744 <createNode>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <GenerateMenu+0xb70>)
 80022e4:	6013      	str	r3, [r2, #0]
    node11 = createNode(scenario1, node5);
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <GenerateMenu+0xb5c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	e021      	b.n	8002330 <GenerateMenu+0xb74>
 80022ec:	0800b3a8 	.word	0x0800b3a8
 80022f0:	0800b2a4 	.word	0x0800b2a4
 80022f4:	0800b6a4 	.word	0x0800b6a4
 80022f8:	0800b708 	.word	0x0800b708
 80022fc:	20000860 	.word	0x20000860
 8002300:	20000864 	.word	0x20000864
 8002304:	20000878 	.word	0x20000878
 8002308:	2000087c 	.word	0x2000087c
 800230c:	20000880 	.word	0x20000880
 8002310:	20000884 	.word	0x20000884
 8002314:	20000888 	.word	0x20000888
 8002318:	2000088c 	.word	0x2000088c
 800231c:	20000890 	.word	0x20000890
 8002320:	20000894 	.word	0x20000894
 8002324:	20000898 	.word	0x20000898
 8002328:	2000089c 	.word	0x2000089c
 800232c:	200008a0 	.word	0x200008a0
 8002330:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002334:	f102 0210 	add.w	r2, r2, #16
 8002338:	f5a2 644c 	sub.w	r4, r2, #3264	; 0xcc0
 800233c:	9340      	str	r3, [sp, #256]	; 0x100
 800233e:	4668      	mov	r0, sp
 8002340:	f104 0310 	add.w	r3, r4, #16
 8002344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002348:	4619      	mov	r1, r3
 800234a:	f008 faa3 	bl	800a894 <memcpy>
 800234e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002352:	f7ff f9f7 	bl	8001744 <createNode>
 8002356:	4603      	mov	r3, r0
 8002358:	4a9d      	ldr	r2, [pc, #628]	; (80025d0 <GenerateMenu+0xe14>)
 800235a:	6013      	str	r3, [r2, #0]
    node12 = createNode(scenario2, node5);
 800235c:	4b9d      	ldr	r3, [pc, #628]	; (80025d4 <GenerateMenu+0xe18>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002364:	f102 0210 	add.w	r2, r2, #16
 8002368:	f5a2 645d 	sub.w	r4, r2, #3536	; 0xdd0
 800236c:	9340      	str	r3, [sp, #256]	; 0x100
 800236e:	4668      	mov	r0, sp
 8002370:	f104 0310 	add.w	r3, r4, #16
 8002374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002378:	4619      	mov	r1, r3
 800237a:	f008 fa8b 	bl	800a894 <memcpy>
 800237e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002382:	f7ff f9df 	bl	8001744 <createNode>
 8002386:	4603      	mov	r3, r0
 8002388:	4a93      	ldr	r2, [pc, #588]	; (80025d8 <GenerateMenu+0xe1c>)
 800238a:	6013      	str	r3, [r2, #0]

    node13 = createNode(AddScenario, node1);
 800238c:	4b93      	ldr	r3, [pc, #588]	; (80025dc <GenerateMenu+0xe20>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002394:	f102 0210 	add.w	r2, r2, #16
 8002398:	f5a2 646e 	sub.w	r4, r2, #3808	; 0xee0
 800239c:	9340      	str	r3, [sp, #256]	; 0x100
 800239e:	4668      	mov	r0, sp
 80023a0:	f104 0310 	add.w	r3, r4, #16
 80023a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a8:	4619      	mov	r1, r3
 80023aa:	f008 fa73 	bl	800a894 <memcpy>
 80023ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023b2:	f7ff f9c7 	bl	8001744 <createNode>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4a89      	ldr	r2, [pc, #548]	; (80025e0 <GenerateMenu+0xe24>)
 80023ba:	6013      	str	r3, [r2, #0]
    node14 = createNode(scenTemThreshold, node13);
 80023bc:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <GenerateMenu+0xe24>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80023c4:	f102 0210 	add.w	r2, r2, #16
 80023c8:	f5a2 647f 	sub.w	r4, r2, #4080	; 0xff0
 80023cc:	9340      	str	r3, [sp, #256]	; 0x100
 80023ce:	4668      	mov	r0, sp
 80023d0:	f104 0310 	add.w	r3, r4, #16
 80023d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d8:	4619      	mov	r1, r3
 80023da:	f008 fa5b 	bl	800a894 <memcpy>
 80023de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023e2:	f7ff f9af 	bl	8001744 <createNode>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a7e      	ldr	r2, [pc, #504]	; (80025e4 <GenerateMenu+0xe28>)
 80023ea:	6013      	str	r3, [r2, #0]
    node15 = createNode(scenTemAlarm, node13);
 80023ec:	4b7c      	ldr	r3, [pc, #496]	; (80025e0 <GenerateMenu+0xe24>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 80023f4:	f5a2 7480 	sub.w	r4, r2, #256	; 0x100
 80023f8:	9340      	str	r3, [sp, #256]	; 0x100
 80023fa:	4668      	mov	r0, sp
 80023fc:	f104 0310 	add.w	r3, r4, #16
 8002400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002404:	4619      	mov	r1, r3
 8002406:	f008 fa45 	bl	800a894 <memcpy>
 800240a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800240e:	f7ff f999 	bl	8001744 <createNode>
 8002412:	4603      	mov	r3, r0
 8002414:	4a74      	ldr	r2, [pc, #464]	; (80025e8 <GenerateMenu+0xe2c>)
 8002416:	6013      	str	r3, [r2, #0]
    node16 = createNode(scenSecAlarm, node13);
 8002418:	4b71      	ldr	r3, [pc, #452]	; (80025e0 <GenerateMenu+0xe24>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002420:	f5a2 7404 	sub.w	r4, r2, #528	; 0x210
 8002424:	9340      	str	r3, [sp, #256]	; 0x100
 8002426:	4668      	mov	r0, sp
 8002428:	f104 0310 	add.w	r3, r4, #16
 800242c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002430:	4619      	mov	r1, r3
 8002432:	f008 fa2f 	bl	800a894 <memcpy>
 8002436:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800243a:	f7ff f983 	bl	8001744 <createNode>
 800243e:	4603      	mov	r3, r0
 8002440:	4a6a      	ldr	r2, [pc, #424]	; (80025ec <GenerateMenu+0xe30>)
 8002442:	6013      	str	r3, [r2, #0]
    node17 = createNode(scenSecAlert, node13);
 8002444:	4b66      	ldr	r3, [pc, #408]	; (80025e0 <GenerateMenu+0xe24>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 800244c:	f5a2 7448 	sub.w	r4, r2, #800	; 0x320
 8002450:	9340      	str	r3, [sp, #256]	; 0x100
 8002452:	4668      	mov	r0, sp
 8002454:	f104 0310 	add.w	r3, r4, #16
 8002458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800245c:	4619      	mov	r1, r3
 800245e:	f008 fa19 	bl	800a894 <memcpy>
 8002462:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002466:	f7ff f96d 	bl	8001744 <createNode>
 800246a:	4603      	mov	r3, r0
 800246c:	4a60      	ldr	r2, [pc, #384]	; (80025f0 <GenerateMenu+0xe34>)
 800246e:	6013      	str	r3, [r2, #0]
    node18 = createNode(scenLight, node13);
 8002470:	4b5b      	ldr	r3, [pc, #364]	; (80025e0 <GenerateMenu+0xe24>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002478:	f5a2 6486 	sub.w	r4, r2, #1072	; 0x430
 800247c:	9340      	str	r3, [sp, #256]	; 0x100
 800247e:	4668      	mov	r0, sp
 8002480:	f104 0310 	add.w	r3, r4, #16
 8002484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002488:	4619      	mov	r1, r3
 800248a:	f008 fa03 	bl	800a894 <memcpy>
 800248e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002492:	f7ff f957 	bl	8001744 <createNode>
 8002496:	4603      	mov	r3, r0
 8002498:	4a56      	ldr	r2, [pc, #344]	; (80025f4 <GenerateMenu+0xe38>)
 800249a:	6013      	str	r3, [r2, #0]
    node19 = createNode(create, node13);
 800249c:	4b50      	ldr	r3, [pc, #320]	; (80025e0 <GenerateMenu+0xe24>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 80024a4:	f5a2 64a8 	sub.w	r4, r2, #1344	; 0x540
 80024a8:	9340      	str	r3, [sp, #256]	; 0x100
 80024aa:	4668      	mov	r0, sp
 80024ac:	f104 0310 	add.w	r3, r4, #16
 80024b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024b4:	4619      	mov	r1, r3
 80024b6:	f008 f9ed 	bl	800a894 <memcpy>
 80024ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024be:	f7ff f941 	bl	8001744 <createNode>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4a4c      	ldr	r2, [pc, #304]	; (80025f8 <GenerateMenu+0xe3c>)
 80024c6:	6013      	str	r3, [r2, #0]

    node_1 = createNode(shutDown, node1);
 80024c8:	4b44      	ldr	r3, [pc, #272]	; (80025dc <GenerateMenu+0xe20>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 80024d0:	f5a2 64ca 	sub.w	r4, r2, #1616	; 0x650
 80024d4:	9340      	str	r3, [sp, #256]	; 0x100
 80024d6:	4668      	mov	r0, sp
 80024d8:	f104 0310 	add.w	r3, r4, #16
 80024dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024e0:	4619      	mov	r1, r3
 80024e2:	f008 f9d7 	bl	800a894 <memcpy>
 80024e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024ea:	f7ff f92b 	bl	8001744 <createNode>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4a42      	ldr	r2, [pc, #264]	; (80025fc <GenerateMenu+0xe40>)
 80024f2:	6013      	str	r3, [r2, #0]


    root->child1 = node1;
 80024f4:	4b42      	ldr	r3, [pc, #264]	; (8002600 <GenerateMenu+0xe44>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a38      	ldr	r2, [pc, #224]	; (80025dc <GenerateMenu+0xe20>)
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	601a      	str	r2, [r3, #0]
    node1->child1 = node2;
 80024fe:	4b37      	ldr	r3, [pc, #220]	; (80025dc <GenerateMenu+0xe20>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a40      	ldr	r2, [pc, #256]	; (8002604 <GenerateMenu+0xe48>)
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	601a      	str	r2, [r3, #0]
    node1->child2 = node3;
 8002508:	4b34      	ldr	r3, [pc, #208]	; (80025dc <GenerateMenu+0xe20>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a3e      	ldr	r2, [pc, #248]	; (8002608 <GenerateMenu+0xe4c>)
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	605a      	str	r2, [r3, #4]
    node1->child3 = node4;
 8002512:	4b32      	ldr	r3, [pc, #200]	; (80025dc <GenerateMenu+0xe20>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a3d      	ldr	r2, [pc, #244]	; (800260c <GenerateMenu+0xe50>)
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	609a      	str	r2, [r3, #8]
    node1->child4 = node5;
 800251c:	4b2f      	ldr	r3, [pc, #188]	; (80025dc <GenerateMenu+0xe20>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a2c      	ldr	r2, [pc, #176]	; (80025d4 <GenerateMenu+0xe18>)
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	60da      	str	r2, [r3, #12]
    node1->child5 = node6;
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <GenerateMenu+0xe20>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a39      	ldr	r2, [pc, #228]	; (8002610 <GenerateMenu+0xe54>)
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	611a      	str	r2, [r3, #16]
    node1->child6 = node13;
 8002530:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <GenerateMenu+0xe20>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2a      	ldr	r2, [pc, #168]	; (80025e0 <GenerateMenu+0xe24>)
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	615a      	str	r2, [r3, #20]
    node1->child7 = node_1;
 800253a:	4b28      	ldr	r3, [pc, #160]	; (80025dc <GenerateMenu+0xe20>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a2f      	ldr	r2, [pc, #188]	; (80025fc <GenerateMenu+0xe40>)
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	619a      	str	r2, [r3, #24]


    node2->child1 = node7;
 8002544:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <GenerateMenu+0xe48>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a32      	ldr	r2, [pc, #200]	; (8002614 <GenerateMenu+0xe58>)
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	601a      	str	r2, [r3, #0]
    node2->child2 = node8;
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <GenerateMenu+0xe48>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a31      	ldr	r2, [pc, #196]	; (8002618 <GenerateMenu+0xe5c>)
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	605a      	str	r2, [r3, #4]

    node3->child1 = node9;
 8002558:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <GenerateMenu+0xe4c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a2f      	ldr	r2, [pc, #188]	; (800261c <GenerateMenu+0xe60>)
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	601a      	str	r2, [r3, #0]
    node3->child2 = node10;
 8002562:	4b29      	ldr	r3, [pc, #164]	; (8002608 <GenerateMenu+0xe4c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2e      	ldr	r2, [pc, #184]	; (8002620 <GenerateMenu+0xe64>)
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	605a      	str	r2, [r3, #4]

    node5->child1 = node11;
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <GenerateMenu+0xe18>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a17      	ldr	r2, [pc, #92]	; (80025d0 <GenerateMenu+0xe14>)
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	601a      	str	r2, [r3, #0]
    node5->child2 = node12;
 8002576:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <GenerateMenu+0xe18>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <GenerateMenu+0xe1c>)
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	605a      	str	r2, [r3, #4]

    node13->child1 = node14;
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <GenerateMenu+0xe24>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a17      	ldr	r2, [pc, #92]	; (80025e4 <GenerateMenu+0xe28>)
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	601a      	str	r2, [r3, #0]
    node13->child2 = node15;
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <GenerateMenu+0xe24>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <GenerateMenu+0xe2c>)
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	605a      	str	r2, [r3, #4]
    node13->child3 = node16;
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <GenerateMenu+0xe24>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a14      	ldr	r2, [pc, #80]	; (80025ec <GenerateMenu+0xe30>)
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	609a      	str	r2, [r3, #8]
    node13->child4 = node17;
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <GenerateMenu+0xe24>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <GenerateMenu+0xe34>)
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	60da      	str	r2, [r3, #12]
    node13->child5 = node18;
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <GenerateMenu+0xe24>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <GenerateMenu+0xe38>)
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	611a      	str	r2, [r3, #16]
    node13->child6 = node19;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <GenerateMenu+0xe24>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <GenerateMenu+0xe3c>)
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	615a      	str	r2, [r3, #20]

    currentNode = root;
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <GenerateMenu+0xe44>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a18      	ldr	r2, [pc, #96]	; (8002624 <GenerateMenu+0xe68>)
 80025c2:	6013      	str	r3, [r2, #0]

}
 80025c4:	bf00      	nop
 80025c6:	f507 57b2 	add.w	r7, r7, #5696	; 0x1640
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d0:	200008a4 	.word	0x200008a4
 80025d4:	2000088c 	.word	0x2000088c
 80025d8:	200008a8 	.word	0x200008a8
 80025dc:	2000087c 	.word	0x2000087c
 80025e0:	200008ac 	.word	0x200008ac
 80025e4:	200008b0 	.word	0x200008b0
 80025e8:	200008b4 	.word	0x200008b4
 80025ec:	200008b8 	.word	0x200008b8
 80025f0:	200008bc 	.word	0x200008bc
 80025f4:	200008c0 	.word	0x200008c0
 80025f8:	200008c4 	.word	0x200008c4
 80025fc:	200008c8 	.word	0x200008c8
 8002600:	20000878 	.word	0x20000878
 8002604:	20000880 	.word	0x20000880
 8002608:	20000884 	.word	0x20000884
 800260c:	20000888 	.word	0x20000888
 8002610:	20000890 	.word	0x20000890
 8002614:	20000894 	.word	0x20000894
 8002618:	20000898 	.word	0x20000898
 800261c:	2000089c 	.word	0x2000089c
 8002620:	200008a0 	.word	0x200008a0
 8002624:	200008cc 	.word	0x200008cc

08002628 <createScenario>:
void createScenario() {
 8002628:	b5b0      	push	{r4, r5, r7, lr}
 800262a:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 800262e:	af42      	add	r7, sp, #264	; 0x108
    lastId++;
 8002630:	4bb0      	ldr	r3, [pc, #704]	; (80028f4 <createScenario+0x2cc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	4aaf      	ldr	r2, [pc, #700]	; (80028f4 <createScenario+0x2cc>)
 8002638:	6013      	str	r3, [r2, #0]

    char str1[20] ="";
 800263a:	2300      	movs	r3, #0
 800263c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8002640:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
	char str2[20]="";
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002654:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
	char str3[20]="";
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002668:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
	char str4[20]="";
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800267c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
    char str5[4][20]={"","","",""};
 800268a:	4a9b      	ldr	r2, [pc, #620]	; (80028f8 <createScenario+0x2d0>)
 800268c:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8002690:	4611      	mov	r1, r2
 8002692:	2250      	movs	r2, #80	; 0x50
 8002694:	4618      	mov	r0, r3
 8002696:	f008 f8fd 	bl	800a894 <memcpy>
    sprintf(str1, "temThreshold=%d", newSceneTemThreshold);
 800269a:	4b98      	ldr	r3, [pc, #608]	; (80028fc <createScenario+0x2d4>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80026a2:	4997      	ldr	r1, [pc, #604]	; (8002900 <createScenario+0x2d8>)
 80026a4:	4618      	mov	r0, r3
 80026a6:	f008 f9fb 	bl	800aaa0 <siprintf>

    if (newSceneTemAlarm == 1)
 80026aa:	4b96      	ldr	r3, [pc, #600]	; (8002904 <createScenario+0x2dc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d106      	bne.n	80026c0 <createScenario+0x98>
        strcpy(str2, "temAlarm=on");
 80026b2:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80026b6:	4a94      	ldr	r2, [pc, #592]	; (8002908 <createScenario+0x2e0>)
 80026b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80026ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026be:	e007      	b.n	80026d0 <createScenario+0xa8>
    else
        strcpy(str2, "temAlarm=off");
 80026c0:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80026c4:	4a91      	ldr	r2, [pc, #580]	; (800290c <createScenario+0x2e4>)
 80026c6:	461c      	mov	r4, r3
 80026c8:	4613      	mov	r3, r2
 80026ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026cc:	c407      	stmia	r4!, {r0, r1, r2}
 80026ce:	7023      	strb	r3, [r4, #0]

    if (newScenesecurityAlarm == 1)
 80026d0:	4b8f      	ldr	r3, [pc, #572]	; (8002910 <createScenario+0x2e8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d109      	bne.n	80026ec <createScenario+0xc4>
        strcpy(str3, "securityAlarm=on");
 80026d8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80026dc:	4a8d      	ldr	r2, [pc, #564]	; (8002914 <createScenario+0x2ec>)
 80026de:	461c      	mov	r4, r3
 80026e0:	4615      	mov	r5, r2
 80026e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026e6:	682b      	ldr	r3, [r5, #0]
 80026e8:	7023      	strb	r3, [r4, #0]
 80026ea:	e008      	b.n	80026fe <createScenario+0xd6>
    else
        strcpy(str3, "securityAlarm=off");
 80026ec:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80026f0:	4a89      	ldr	r2, [pc, #548]	; (8002918 <createScenario+0x2f0>)
 80026f2:	461c      	mov	r4, r3
 80026f4:	4615      	mov	r5, r2
 80026f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026fa:	682b      	ldr	r3, [r5, #0]
 80026fc:	8023      	strh	r3, [r4, #0]

    if (newSceneSecurityAlert == 1)
 80026fe:	4b87      	ldr	r3, [pc, #540]	; (800291c <createScenario+0x2f4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d109      	bne.n	800271a <createScenario+0xf2>
        strcpy(str4, "securityAlert=on");
 8002706:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800270a:	4a85      	ldr	r2, [pc, #532]	; (8002920 <createScenario+0x2f8>)
 800270c:	461c      	mov	r4, r3
 800270e:	4615      	mov	r5, r2
 8002710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	7023      	strb	r3, [r4, #0]
 8002718:	e008      	b.n	800272c <createScenario+0x104>
    else
        strcpy(str4, "securityAlert=off");
 800271a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800271e:	4a81      	ldr	r2, [pc, #516]	; (8002924 <createScenario+0x2fc>)
 8002720:	461c      	mov	r4, r3
 8002722:	4615      	mov	r5, r2
 8002724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	8023      	strh	r3, [r4, #0]

    for (int i = 0; i < 4; i++) {
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8002732:	e02a      	b.n	800278a <createScenario+0x162>
        if (newScenarioLights[i] == 1)
 8002734:	4a7c      	ldr	r2, [pc, #496]	; (8002928 <createScenario+0x300>)
 8002736:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800273a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d10f      	bne.n	8002762 <createScenario+0x13a>
            sprintf(str5[i], "Light%d=on", i);
 8002742:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8002746:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8002758:	4974      	ldr	r1, [pc, #464]	; (800292c <createScenario+0x304>)
 800275a:	4618      	mov	r0, r3
 800275c:	f008 f9a0 	bl	800aaa0 <siprintf>
 8002760:	e00e      	b.n	8002780 <createScenario+0x158>
        else
            sprintf(str5[i], "Light%d=off", i);
 8002762:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8002766:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8002778:	496d      	ldr	r1, [pc, #436]	; (8002930 <createScenario+0x308>)
 800277a:	4618      	mov	r0, r3
 800277c:	f008 f990 	bl	800aaa0 <siprintf>
    for (int i = 0; i < 4; i++) {
 8002780:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8002784:	3301      	adds	r3, #1
 8002786:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800278a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800278e:	2b03      	cmp	r3, #3
 8002790:	ddd0      	ble.n	8002734 <createScenario+0x10c>
    }

    addedScenarios[lastScenarioIndex][0] = newSceneTemThreshold;
 8002792:	4b68      	ldr	r3, [pc, #416]	; (8002934 <createScenario+0x30c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a59      	ldr	r2, [pc, #356]	; (80028fc <createScenario+0x2d4>)
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	4967      	ldr	r1, [pc, #412]	; (8002938 <createScenario+0x310>)
 800279c:	015b      	lsls	r3, r3, #5
 800279e:	440b      	add	r3, r1
 80027a0:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][1] = newSceneTemAlarm;
 80027a2:	4b64      	ldr	r3, [pc, #400]	; (8002934 <createScenario+0x30c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a57      	ldr	r2, [pc, #348]	; (8002904 <createScenario+0x2dc>)
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	4963      	ldr	r1, [pc, #396]	; (8002938 <createScenario+0x310>)
 80027ac:	015b      	lsls	r3, r3, #5
 80027ae:	440b      	add	r3, r1
 80027b0:	3304      	adds	r3, #4
 80027b2:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][2] = newScenesecurityAlarm;
 80027b4:	4b5f      	ldr	r3, [pc, #380]	; (8002934 <createScenario+0x30c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a55      	ldr	r2, [pc, #340]	; (8002910 <createScenario+0x2e8>)
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	495e      	ldr	r1, [pc, #376]	; (8002938 <createScenario+0x310>)
 80027be:	015b      	lsls	r3, r3, #5
 80027c0:	440b      	add	r3, r1
 80027c2:	3308      	adds	r3, #8
 80027c4:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][3] = newSceneSecurityAlert;
 80027c6:	4b5b      	ldr	r3, [pc, #364]	; (8002934 <createScenario+0x30c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a54      	ldr	r2, [pc, #336]	; (800291c <createScenario+0x2f4>)
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	495a      	ldr	r1, [pc, #360]	; (8002938 <createScenario+0x310>)
 80027d0:	015b      	lsls	r3, r3, #5
 80027d2:	440b      	add	r3, r1
 80027d4:	330c      	adds	r3, #12
 80027d6:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][4] = newScenarioLights[0];
 80027d8:	4b56      	ldr	r3, [pc, #344]	; (8002934 <createScenario+0x30c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a52      	ldr	r2, [pc, #328]	; (8002928 <createScenario+0x300>)
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	4955      	ldr	r1, [pc, #340]	; (8002938 <createScenario+0x310>)
 80027e2:	015b      	lsls	r3, r3, #5
 80027e4:	440b      	add	r3, r1
 80027e6:	3310      	adds	r3, #16
 80027e8:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][5] = newScenarioLights[1];
 80027ea:	4b52      	ldr	r3, [pc, #328]	; (8002934 <createScenario+0x30c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a4e      	ldr	r2, [pc, #312]	; (8002928 <createScenario+0x300>)
 80027f0:	6852      	ldr	r2, [r2, #4]
 80027f2:	4951      	ldr	r1, [pc, #324]	; (8002938 <createScenario+0x310>)
 80027f4:	015b      	lsls	r3, r3, #5
 80027f6:	440b      	add	r3, r1
 80027f8:	3314      	adds	r3, #20
 80027fa:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][6] = newScenarioLights[2];
 80027fc:	4b4d      	ldr	r3, [pc, #308]	; (8002934 <createScenario+0x30c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a49      	ldr	r2, [pc, #292]	; (8002928 <createScenario+0x300>)
 8002802:	6892      	ldr	r2, [r2, #8]
 8002804:	494c      	ldr	r1, [pc, #304]	; (8002938 <createScenario+0x310>)
 8002806:	015b      	lsls	r3, r3, #5
 8002808:	440b      	add	r3, r1
 800280a:	3318      	adds	r3, #24
 800280c:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][7] = newScenarioLights[3];
 800280e:	4b49      	ldr	r3, [pc, #292]	; (8002934 <createScenario+0x30c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a45      	ldr	r2, [pc, #276]	; (8002928 <createScenario+0x300>)
 8002814:	68d2      	ldr	r2, [r2, #12]
 8002816:	4948      	ldr	r1, [pc, #288]	; (8002938 <createScenario+0x310>)
 8002818:	015b      	lsls	r3, r3, #5
 800281a:	440b      	add	r3, r1
 800281c:	331c      	adds	r3, #28
 800281e:	601a      	str	r2, [r3, #0]

    char strArray[8][20]; // Array to hold str1 to str4

    strcpy(strArray[0], str1);
 8002820:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002824:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f008 f967 	bl	800aafe <strcpy>
    strcpy(strArray[1], str2);
 8002830:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8002834:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002838:	3314      	adds	r3, #20
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f008 f95e 	bl	800aafe <strcpy>
    strcpy(strArray[2], str3);
 8002842:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8002846:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800284a:	3328      	adds	r3, #40	; 0x28
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f008 f955 	bl	800aafe <strcpy>
    strcpy(strArray[3], str4);
 8002854:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8002858:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800285c:	333c      	adds	r3, #60	; 0x3c
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f008 f94c 	bl	800aafe <strcpy>
    strcpy(strArray[4], str5[0]);
 8002866:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 800286a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800286e:	3350      	adds	r3, #80	; 0x50
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f008 f943 	bl	800aafe <strcpy>
    strcpy(strArray[5], str5[1]);
 8002878:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800287c:	f103 0214 	add.w	r2, r3, #20
 8002880:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002884:	3364      	adds	r3, #100	; 0x64
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f008 f938 	bl	800aafe <strcpy>
    strcpy(strArray[6], str5[2]);
 800288e:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8002892:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002896:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800289a:	3378      	adds	r3, #120	; 0x78
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f008 f92d 	bl	800aafe <strcpy>
    strcpy(strArray[7], str5[3]);
 80028a4:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80028a8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80028ac:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80028b0:	338c      	adds	r3, #140	; 0x8c
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f008 f922 	bl	800aafe <strcpy>

    struct menuScreen newScenario = {lastId, 8, 0};
 80028ba:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80028be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80028c2:	4618      	mov	r0, r3
 80028c4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80028c8:	461a      	mov	r2, r3
 80028ca:	2100      	movs	r1, #0
 80028cc:	f007 fff0 	bl	800a8b0 <memset>
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <createScenario+0x2cc>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80028d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80028e2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80028e6:	2208      	movs	r2, #8
 80028e8:	605a      	str	r2, [r3, #4]

    for (int i = 0; i < 8; i++) {
 80028ea:	2300      	movs	r3, #0
 80028ec:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80028f0:	e040      	b.n	8002974 <createScenario+0x34c>
 80028f2:	bf00      	nop
 80028f4:	20000860 	.word	0x20000860
 80028f8:	0800b81c 	.word	0x0800b81c
 80028fc:	20000018 	.word	0x20000018
 8002900:	0800b76c 	.word	0x0800b76c
 8002904:	2000001c 	.word	0x2000001c
 8002908:	0800b77c 	.word	0x0800b77c
 800290c:	0800b788 	.word	0x0800b788
 8002910:	20000020 	.word	0x20000020
 8002914:	0800b798 	.word	0x0800b798
 8002918:	0800b7ac 	.word	0x0800b7ac
 800291c:	20000024 	.word	0x20000024
 8002920:	0800b7c0 	.word	0x0800b7c0
 8002924:	0800b7d4 	.word	0x0800b7d4
 8002928:	20000830 	.word	0x20000830
 800292c:	0800b7e8 	.word	0x0800b7e8
 8002930:	0800b7f4 	.word	0x0800b7f4
 8002934:	20000818 	.word	0x20000818
 8002938:	20000798 	.word	0x20000798
        strcpy(newScenario.menuItems[i], strArray[i]);
 800293c:	f107 0114 	add.w	r1, r7, #20
 8002940:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	3308      	adds	r3, #8
 800294e:	440b      	add	r3, r1
 8002950:	1d18      	adds	r0, r3, #4
 8002952:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8002956:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	4619      	mov	r1, r3
 8002966:	f008 f8ca 	bl	800aafe <strcpy>
    for (int i = 0; i < 8; i++) {
 800296a:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800296e:	3301      	adds	r3, #1
 8002970:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8002974:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8002978:	2b07      	cmp	r3, #7
 800297a:	dddf      	ble.n	800293c <createScenario+0x314>
    }

    strcpy(newScenario.content, "<  off  >");
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	33ac      	adds	r3, #172	; 0xac
 8002982:	4a34      	ldr	r2, [pc, #208]	; (8002a54 <createScenario+0x42c>)
 8002984:	ca07      	ldmia	r2, {r0, r1, r2}
 8002986:	c303      	stmia	r3!, {r0, r1}
 8002988:	801a      	strh	r2, [r3, #0]

//    struct menuScreen newScenario = {lastId, 8, 0, strArray, "<  off  >"};

    struct TreeNode* newNode = createNode(newScenario, node5);
 800298a:	4b33      	ldr	r3, [pc, #204]	; (8002a58 <createScenario+0x430>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8002992:	f5a2 7417 	sub.w	r4, r2, #604	; 0x25c
 8002996:	9340      	str	r3, [sp, #256]	; 0x100
 8002998:	4668      	mov	r0, sp
 800299a:	f104 0310 	add.w	r3, r4, #16
 800299e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a2:	4619      	mov	r1, r3
 80029a4:	f007 ff76 	bl	800a894 <memcpy>
 80029a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029ac:	f7fe feca 	bl	8001744 <createNode>
 80029b0:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264

    switch (lastScenarioIndex) {
 80029b4:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <createScenario+0x434>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d823      	bhi.n	8002a04 <createScenario+0x3dc>
 80029bc:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <createScenario+0x39c>)
 80029be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c2:	bf00      	nop
 80029c4:	080029d5 	.word	0x080029d5
 80029c8:	080029e1 	.word	0x080029e1
 80029cc:	080029ed 	.word	0x080029ed
 80029d0:	080029f9 	.word	0x080029f9
        case 0:
            node5->child3 = newNode;
 80029d4:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <createScenario+0x430>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80029dc:	609a      	str	r2, [r3, #8]
            break;
 80029de:	e011      	b.n	8002a04 <createScenario+0x3dc>
        case 1:
            node5->child4 = newNode;
 80029e0:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <createScenario+0x430>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80029e8:	60da      	str	r2, [r3, #12]
            break;
 80029ea:	e00b      	b.n	8002a04 <createScenario+0x3dc>
        case 2:
            node5->child5 = newNode;
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <createScenario+0x430>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80029f4:	611a      	str	r2, [r3, #16]
            break;
 80029f6:	e005      	b.n	8002a04 <createScenario+0x3dc>
        case 3:
            node5->child6 = newNode;
 80029f8:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <createScenario+0x430>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8002a00:	615a      	str	r2, [r3, #20]
            break;
 8002a02:	bf00      	nop
    }
    char newStr[20];
    sprintf(newStr,"> scenario %d",lastScenarioIndex+3);
 8002a04:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <createScenario+0x434>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	1cda      	adds	r2, r3, #3
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	4914      	ldr	r1, [pc, #80]	; (8002a60 <createScenario+0x438>)
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f008 f846 	bl	800aaa0 <siprintf>
    strcpy(node5->screen.menuItems[node5->screen.optionCount],newStr);
 8002a14:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <createScenario+0x430>)
 8002a16:	6819      	ldr	r1, [r3, #0]
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <createScenario+0x430>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	3328      	adds	r3, #40	; 0x28
 8002a28:	440b      	add	r3, r1
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	463a      	mov	r2, r7
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f008 f864 	bl	800aafe <strcpy>
    node5->screen.optionCount++;
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <createScenario+0x430>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a3c:	3201      	adds	r2, #1
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
    lastScenarioIndex++;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <createScenario+0x434>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3301      	adds	r3, #1
 8002a46:	4a05      	ldr	r2, [pc, #20]	; (8002a5c <createScenario+0x434>)
 8002a48:	6013      	str	r3, [r2, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bdb0      	pop	{r4, r5, r7, pc}
 8002a54:	0800b800 	.word	0x0800b800
 8002a58:	2000088c 	.word	0x2000088c
 8002a5c:	20000818 	.word	0x20000818
 8002a60:	0800b80c 	.word	0x0800b80c

08002a64 <ShowMenu>:

void ShowMenu(){
 8002a64:	b5b0      	push	{r4, r5, r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
	int p = page * 4;
 8002a6a:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <ShowMenu+0xe0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	617b      	str	r3, [r7, #20]
//    clear();
	char temp[20] = "                   ";
 8002a72:	4b35      	ldr	r3, [pc, #212]	; (8002b48 <ShowMenu+0xe4>)
 8002a74:	463c      	mov	r4, r7
 8002a76:	461d      	mov	r5, r3
 8002a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a7c:	682b      	ldr	r3, [r5, #0]
 8002a7e:	6023      	str	r3, [r4, #0]
    setCursor(0,0);
 8002a80:	2100      	movs	r1, #0
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7fd fe72 	bl	800076c <setCursor>
    print(currentMenu[p]);
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4a2e      	ldr	r2, [pc, #184]	; (8002b4c <ShowMenu+0xe8>)
 8002a94:	4413      	add	r3, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fec6 	bl	8000828 <print>
    setCursor(0,1);
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fd fe64 	bl	800076c <setCursor>
    if(p+1 >= MenuoptionCounts)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <ShowMenu+0xec>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	db04      	blt.n	8002aba <ShowMenu+0x56>
        print(temp);
 8002ab0:	463b      	mov	r3, r7
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd feb8 	bl	8000828 <print>
 8002ab8:	e00a      	b.n	8002ad0 <ShowMenu+0x6c>
    else
    	print(currentMenu[p+1]);
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4a21      	ldr	r2, [pc, #132]	; (8002b4c <ShowMenu+0xe8>)
 8002ac8:	4413      	add	r3, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd feac 	bl	8000828 <print>
    setCursor(0,2);
 8002ad0:	2102      	movs	r1, #2
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7fd fe4a 	bl	800076c <setCursor>
    if(p+2 >= MenuoptionCounts)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	1c9a      	adds	r2, r3, #2
 8002adc:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <ShowMenu+0xec>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	db04      	blt.n	8002aee <ShowMenu+0x8a>
        print(temp);
 8002ae4:	463b      	mov	r3, r7
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fe9e 	bl	8000828 <print>
 8002aec:	e00a      	b.n	8002b04 <ShowMenu+0xa0>
    else
    	print(currentMenu[p+2]);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	1c9a      	adds	r2, r3, #2
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <ShowMenu+0xe8>)
 8002afc:	4413      	add	r3, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fd fe92 	bl	8000828 <print>
    setCursor(0,3);
 8002b04:	2103      	movs	r1, #3
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7fd fe30 	bl	800076c <setCursor>
    if(p+3 >= MenuoptionCounts)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	1cda      	adds	r2, r3, #3
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <ShowMenu+0xec>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	db04      	blt.n	8002b22 <ShowMenu+0xbe>
        print(temp);
 8002b18:	463b      	mov	r3, r7
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fd fe84 	bl	8000828 <print>
 8002b20:	e00a      	b.n	8002b38 <ShowMenu+0xd4>
    else
    	print(currentMenu[p+3]);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	1cda      	adds	r2, r3, #3
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4a07      	ldr	r2, [pc, #28]	; (8002b4c <ShowMenu+0xe8>)
 8002b30:	4413      	add	r3, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fe78 	bl	8000828 <print>
    display();
 8002b38:	f7fd fe60 	bl	80007fc <display>
}
 8002b3c:	bf00      	nop
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bdb0      	pop	{r4, r5, r7, pc}
 8002b44:	20000850 	.word	0x20000850
 8002b48:	0800b86c 	.word	0x0800b86c
 8002b4c:	20000030 	.word	0x20000030
 8002b50:	2000084c 	.word	0x2000084c

08002b54 <ShowInfo>:
void ShowInfo(struct menuScreen info){
 8002b54:	b084      	sub	sp, #16
 8002b56:	b5b0      	push	{r4, r5, r7, lr}
 8002b58:	b086      	sub	sp, #24
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int p = page * 3;
 8002b64:	4b34      	ldr	r3, [pc, #208]	; (8002c38 <ShowInfo+0xe4>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
    clear();
 8002b70:	f7fd fdf2 	bl	8000758 <clear>
	char temp[20] = "                   ";
 8002b74:	4b31      	ldr	r3, [pc, #196]	; (8002c3c <ShowInfo+0xe8>)
 8002b76:	463c      	mov	r4, r7
 8002b78:	461d      	mov	r5, r3
 8002b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b7e:	682b      	ldr	r3, [r5, #0]
 8002b80:	6023      	str	r3, [r4, #0]
    setCursor(0,0);
 8002b82:	2100      	movs	r1, #0
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fd fdf1 	bl	800076c <setCursor>
    print(info.content);
 8002b8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd fe4a 	bl	8000828 <print>
    setCursor(0,1);
 8002b94:	2101      	movs	r1, #1
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7fd fde8 	bl	800076c <setCursor>
    print(info.menuItems[p]);
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	3328      	adds	r3, #40	; 0x28
 8002baa:	443b      	add	r3, r7
 8002bac:	3304      	adds	r3, #4
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fe3a 	bl	8000828 <print>
    setCursor(0,2);
 8002bb4:	2102      	movs	r1, #2
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7fd fdd8 	bl	800076c <setCursor>
    if(p+1 >= MenuoptionCounts)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <ShowInfo+0xec>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	db04      	blt.n	8002bd2 <ShowInfo+0x7e>
        print(temp);
 8002bc8:	463b      	mov	r3, r7
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fe2c 	bl	8000828 <print>
 8002bd0:	e00c      	b.n	8002bec <ShowInfo+0x98>
	else
		print(info.menuItems[p+1]);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	3308      	adds	r3, #8
 8002be0:	3328      	adds	r3, #40	; 0x28
 8002be2:	443b      	add	r3, r7
 8002be4:	3304      	adds	r3, #4
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fe1e 	bl	8000828 <print>
    setCursor(0,3);
 8002bec:	2103      	movs	r1, #3
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7fd fdbc 	bl	800076c <setCursor>
    if(p+2 >= MenuoptionCounts)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	1c9a      	adds	r2, r3, #2
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <ShowInfo+0xec>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	db04      	blt.n	8002c0a <ShowInfo+0xb6>
        print(temp);
 8002c00:	463b      	mov	r3, r7
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fe10 	bl	8000828 <print>
 8002c08:	e00c      	b.n	8002c24 <ShowInfo+0xd0>
	else
		print(info.menuItems[p+2]);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	1c9a      	adds	r2, r3, #2
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	3308      	adds	r3, #8
 8002c18:	3328      	adds	r3, #40	; 0x28
 8002c1a:	443b      	add	r3, r7
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fe02 	bl	8000828 <print>
    display();
 8002c24:	f7fd fdea 	bl	80007fc <display>
}
 8002c28:	bf00      	nop
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002c32:	b004      	add	sp, #16
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000850 	.word	0x20000850
 8002c3c:	0800b86c 	.word	0x0800b86c
 8002c40:	2000084c 	.word	0x2000084c

08002c44 <changeOption>:
void changeOption(int down){
 8002c44:	b590      	push	{r4, r7, lr}
 8002c46:	b08d      	sub	sp, #52	; 0x34
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	char newStr[20] = ">";
 8002c4c:	233e      	movs	r3, #62	; 0x3e
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
	strcat(newStr,currentMenu[CurrentMenuOption]);
 8002c5e:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <changeOption+0x17c>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4a56      	ldr	r2, [pc, #344]	; (8002dc4 <changeOption+0x180>)
 8002c6c:	441a      	add	r2, r3
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f007 ff33 	bl	800aae0 <strcat>
	strcpy(currentMenu[CurrentMenuOption],newStr);
 8002c7a:	4b51      	ldr	r3, [pc, #324]	; (8002dc0 <changeOption+0x17c>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4a4f      	ldr	r2, [pc, #316]	; (8002dc4 <changeOption+0x180>)
 8002c88:	4413      	add	r3, r2
 8002c8a:	f107 020c 	add.w	r2, r7, #12
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f007 ff34 	bl	800aafe <strcpy>
	if(down == 1){
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d145      	bne.n	8002d28 <changeOption+0xe4>
		if(CurrentMenuOption > 0){
 8002c9c:	4b48      	ldr	r3, [pc, #288]	; (8002dc0 <changeOption+0x17c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f340 8087 	ble.w	8002db4 <changeOption+0x170>
			int length  = strlen(currentMenu[CurrentMenuOption - 1]) - 1;
 8002ca6:	4b46      	ldr	r3, [pc, #280]	; (8002dc0 <changeOption+0x17c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	1e5a      	subs	r2, r3, #1
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4a43      	ldr	r2, [pc, #268]	; (8002dc4 <changeOption+0x180>)
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fa93 	bl	80001e4 <strlen>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	623b      	str	r3, [r7, #32]
			for (int i = 0; i< length ;i++)
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc8:	e01c      	b.n	8002d04 <changeOption+0xc0>
			{
				currentMenu[CurrentMenuOption - 1][i] = currentMenu[CurrentMenuOption - 1][i+1];
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <changeOption+0x17c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	1e59      	subs	r1, r3, #1
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	1c58      	adds	r0, r3, #1
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	; (8002dc0 <changeOption+0x17c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	1e5a      	subs	r2, r3, #1
 8002cda:	4c3a      	ldr	r4, [pc, #232]	; (8002dc4 <changeOption+0x180>)
 8002cdc:	460b      	mov	r3, r1
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4423      	add	r3, r4
 8002ce6:	4403      	add	r3, r0
 8002ce8:	7818      	ldrb	r0, [r3, #0]
 8002cea:	4936      	ldr	r1, [pc, #216]	; (8002dc4 <changeOption+0x180>)
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	18ca      	adds	r2, r1, r3
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i< length ;i++)
 8002cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d00:	3301      	adds	r3, #1
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	dbde      	blt.n	8002cca <changeOption+0x86>
			}
			currentMenu[CurrentMenuOption - 1][length] = '\0';
 8002d0c:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <changeOption+0x17c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	1e5a      	subs	r2, r3, #1
 8002d12:	492c      	ldr	r1, [pc, #176]	; (8002dc4 <changeOption+0x180>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	18ca      	adds	r2, r1, r3
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	4413      	add	r3, r2
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
 8002d26:	e045      	b.n	8002db4 <changeOption+0x170>
		}
	}
	else{
		if(CurrentMenuOption < MenuoptionCounts){
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <changeOption+0x17c>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <changeOption+0x184>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	da3f      	bge.n	8002db4 <changeOption+0x170>
			int length  = strlen(currentMenu[CurrentMenuOption + 1]) - 1;
 8002d34:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <changeOption+0x17c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4a20      	ldr	r2, [pc, #128]	; (8002dc4 <changeOption+0x180>)
 8002d44:	4413      	add	r3, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fa4c 	bl	80001e4 <strlen>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
			for (int i = 0; i< length ;i++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d56:	e01c      	b.n	8002d92 <changeOption+0x14e>
			{
				currentMenu[CurrentMenuOption + 1][i] = currentMenu[CurrentMenuOption + 1][i+1];
 8002d58:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <changeOption+0x17c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	1c59      	adds	r1, r3, #1
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	1c58      	adds	r0, r3, #1
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <changeOption+0x17c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	4c16      	ldr	r4, [pc, #88]	; (8002dc4 <changeOption+0x180>)
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4423      	add	r3, r4
 8002d74:	4403      	add	r3, r0
 8002d76:	7818      	ldrb	r0, [r3, #0]
 8002d78:	4912      	ldr	r1, [pc, #72]	; (8002dc4 <changeOption+0x180>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	18ca      	adds	r2, r1, r3
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	4413      	add	r3, r2
 8002d88:	4602      	mov	r2, r0
 8002d8a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i< length ;i++)
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	3301      	adds	r3, #1
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	429a      	cmp	r2, r3
 8002d98:	dbde      	blt.n	8002d58 <changeOption+0x114>
			}
			currentMenu[CurrentMenuOption + 1][length] = '\0';
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <changeOption+0x17c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	4908      	ldr	r1, [pc, #32]	; (8002dc4 <changeOption+0x180>)
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	18ca      	adds	r2, r1, r3
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	4413      	add	r3, r2
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
		}
	}
	ShowMenu();
 8002db4:	f7ff fe56 	bl	8002a64 <ShowMenu>
}
 8002db8:	bf00      	nop
 8002dba:	3734      	adds	r7, #52	; 0x34
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd90      	pop	{r4, r7, pc}
 8002dc0:	20000848 	.word	0x20000848
 8002dc4:	20000030 	.word	0x20000030
 8002dc8:	2000084c 	.word	0x2000084c

08002dcc <SetMenu>:
void SetMenu(char MenuItems[][20]){
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 12 ; i++){
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e00b      	b.n	8002df2 <SetMenu+0x26>
	    strcpy(currentMenu[i],"");
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <SetMenu+0x70>)
 8002de6:	4413      	add	r3, r2
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 12 ; i++){
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3301      	adds	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b0b      	cmp	r3, #11
 8002df6:	ddf0      	ble.n	8002dda <SetMenu+0xe>
	}
	for(int i = 0; i < MenuoptionCounts; i++){
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	e014      	b.n	8002e28 <SetMenu+0x5c>
	    strcpy(currentMenu[i],MenuItems[i]);
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4a0c      	ldr	r2, [pc, #48]	; (8002e3c <SetMenu+0x70>)
 8002e0a:	1898      	adds	r0, r3, r2
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	461a      	mov	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f007 fe6e 	bl	800aafe <strcpy>
	for(int i = 0; i < MenuoptionCounts; i++){
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	3301      	adds	r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <SetMenu+0x74>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	dbe5      	blt.n	8002dfe <SetMenu+0x32>
	}
}
 8002e32:	bf00      	nop
 8002e34:	bf00      	nop
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20000030 	.word	0x20000030
 8002e40:	2000084c 	.word	0x2000084c

08002e44 <messageSetter>:
void messageSetter(struct TreeNode* node, char* newChar){
 8002e44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
	if(strcmp(newChar,"null") != 0 && strcmp(newChar,"dell") != 0){
 8002e50:	4933      	ldr	r1, [pc, #204]	; (8002f20 <messageSetter+0xdc>)
 8002e52:	6838      	ldr	r0, [r7, #0]
 8002e54:	f7fd f9bc 	bl	80001d0 <strcmp>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d03d      	beq.n	8002eda <messageSetter+0x96>
 8002e5e:	4931      	ldr	r1, [pc, #196]	; (8002f24 <messageSetter+0xe0>)
 8002e60:	6838      	ldr	r0, [r7, #0]
 8002e62:	f7fd f9b5 	bl	80001d0 <strcmp>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d036      	beq.n	8002eda <messageSetter+0x96>
		int len = strlen(node->screen.content);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	33d0      	adds	r3, #208	; 0xd0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd f9b7 	bl	80001e4 <strlen>
 8002e76:	4603      	mov	r3, r0
 8002e78:	60fb      	str	r3, [r7, #12]
		if(HAL_GetTick()- lastPress < 800  && sameKeyPressed){
 8002e7a:	f001 feab 	bl	8004bd4 <HAL_GetTick>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2200      	movs	r2, #0
 8002e82:	4698      	mov	r8, r3
 8002e84:	4691      	mov	r9, r2
 8002e86:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <messageSetter+0xe4>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	ebb8 0402 	subs.w	r4, r8, r2
 8002e90:	eb69 0503 	sbc.w	r5, r9, r3
 8002e94:	f5b4 7f48 	cmp.w	r4, #800	; 0x320
 8002e98:	f175 0300 	sbcs.w	r3, r5, #0
 8002e9c:	d20d      	bcs.n	8002eba <messageSetter+0x76>
 8002e9e:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <messageSetter+0xe8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <messageSetter+0x76>
			node->screen.content[len - 1] = newChar[0];
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	7811      	ldrb	r1, [r2, #0]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	460a      	mov	r2, r1
 8002eb4:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	if(strcmp(newChar,"null") != 0 && strcmp(newChar,"dell") != 0){
 8002eb8:	e027      	b.n	8002f0a <messageSetter+0xc6>
		}
		else{
			node->screen.content[len] = newChar[0];
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	7819      	ldrb	r1, [r3, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	33d0      	adds	r3, #208	; 0xd0
 8002ec6:	460a      	mov	r2, r1
 8002ec8:	701a      	strb	r2, [r3, #0]
			node->screen.content[len+1] = '\0';
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	if(strcmp(newChar,"null") != 0 && strcmp(newChar,"dell") != 0){
 8002ed8:	e017      	b.n	8002f0a <messageSetter+0xc6>
		}
	}
	else if(strcmp(newChar,"dell") == 0){
 8002eda:	4912      	ldr	r1, [pc, #72]	; (8002f24 <messageSetter+0xe0>)
 8002edc:	6838      	ldr	r0, [r7, #0]
 8002ede:	f7fd f977 	bl	80001d0 <strcmp>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d110      	bne.n	8002f0a <messageSetter+0xc6>
		int len = strlen(node->screen.content);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	33d0      	adds	r3, #208	; 0xd0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fd f979 	bl	80001e4 <strlen>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	60bb      	str	r3, [r7, #8]
		if(len >0){
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	dd06      	ble.n	8002f0a <messageSetter+0xc6>
			node->screen.content[len - 1] = '\0';
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
		}
	}
	strcpy(startMassage,node->screen.content);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	33d0      	adds	r3, #208	; 0xd0
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4807      	ldr	r0, [pc, #28]	; (8002f30 <messageSetter+0xec>)
 8002f12:	f007 fdf4 	bl	800aafe <strcpy>
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f20:	0800b880 	.word	0x0800b880
 8002f24:	0800b888 	.word	0x0800b888
 8002f28:	20000840 	.word	0x20000840
 8002f2c:	2000085c 	.word	0x2000085c
 8002f30:	2000081c 	.word	0x2000081c

08002f34 <setOn>:
void setOn(struct menuScreen* screen){
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f36:	b08b      	sub	sp, #44	; 0x2c
 8002f38:	af04      	add	r7, sp, #16
 8002f3a:	60f8      	str	r0, [r7, #12]
	if(strcmp(screen->content,"<  on  >") != 0 ){
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	33ac      	adds	r3, #172	; 0xac
 8002f40:	4979      	ldr	r1, [pc, #484]	; (8003128 <setOn+0x1f4>)
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd f944 	bl	80001d0 <strcmp>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 80a8 	beq.w	80030a0 <setOn+0x16c>
		strcpy(screen->content,"<  on  >");
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	33ac      	adds	r3, #172	; 0xac
 8002f54:	4974      	ldr	r1, [pc, #464]	; (8003128 <setOn+0x1f4>)
 8002f56:	461a      	mov	r2, r3
 8002f58:	460b      	mov	r3, r1
 8002f5a:	cb03      	ldmia	r3!, {r0, r1}
 8002f5c:	6010      	str	r0, [r2, #0]
 8002f5e:	6051      	str	r1, [r2, #4]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	7213      	strb	r3, [r2, #8]
		if(screen->id > lastPagesId){
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b70      	ldr	r3, [pc, #448]	; (800312c <setOn+0x1f8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	dd43      	ble.n	8002ff8 <setOn+0xc4>
			int index = screen->id - lastPagesId - 1;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b6d      	ldr	r3, [pc, #436]	; (800312c <setOn+0x1f8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
			setScenario(addedScenarios[index][0], addedScenarios[index][1], addedScenarios[index][2], addedScenarios[index][3], addedScenarios[index][4], addedScenarios[index][5], addedScenarios[index][6], addedScenarios[index][7]);
 8002f7e:	4a6c      	ldr	r2, [pc, #432]	; (8003130 <setOn+0x1fc>)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	015b      	lsls	r3, r3, #5
 8002f84:	4413      	add	r3, r2
 8002f86:	681c      	ldr	r4, [r3, #0]
 8002f88:	4a69      	ldr	r2, [pc, #420]	; (8003130 <setOn+0x1fc>)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	015b      	lsls	r3, r3, #5
 8002f8e:	4413      	add	r3, r2
 8002f90:	3304      	adds	r3, #4
 8002f92:	681d      	ldr	r5, [r3, #0]
 8002f94:	4a66      	ldr	r2, [pc, #408]	; (8003130 <setOn+0x1fc>)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	015b      	lsls	r3, r3, #5
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	681e      	ldr	r6, [r3, #0]
 8002fa0:	4a63      	ldr	r2, [pc, #396]	; (8003130 <setOn+0x1fc>)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	015b      	lsls	r3, r3, #5
 8002fa6:	4413      	add	r3, r2
 8002fa8:	330c      	adds	r3, #12
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	4a60      	ldr	r2, [pc, #384]	; (8003130 <setOn+0x1fc>)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	015b      	lsls	r3, r3, #5
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3310      	adds	r3, #16
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	495d      	ldr	r1, [pc, #372]	; (8003130 <setOn+0x1fc>)
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	0152      	lsls	r2, r2, #5
 8002fc0:	440a      	add	r2, r1
 8002fc2:	3214      	adds	r2, #20
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	4859      	ldr	r0, [pc, #356]	; (8003130 <setOn+0x1fc>)
 8002fca:	6979      	ldr	r1, [r7, #20]
 8002fcc:	0149      	lsls	r1, r1, #5
 8002fce:	4401      	add	r1, r0
 8002fd0:	3118      	adds	r1, #24
 8002fd2:	6809      	ldr	r1, [r1, #0]
 8002fd4:	4856      	ldr	r0, [pc, #344]	; (8003130 <setOn+0x1fc>)
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	6978      	ldr	r0, [r7, #20]
 8002fda:	0140      	lsls	r0, r0, #5
 8002fdc:	4410      	add	r0, r2
 8002fde:	301c      	adds	r0, #28
 8002fe0:	6800      	ldr	r0, [r0, #0]
 8002fe2:	9003      	str	r0, [sp, #12]
 8002fe4:	9102      	str	r1, [sp, #8]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	9201      	str	r2, [sp, #4]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4632      	mov	r2, r6
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f000 fa08 	bl	8003408 <setScenario>
		}
		switch(screen->id){
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3b08      	subs	r3, #8
 8002ffe:	2b09      	cmp	r3, #9
 8003000:	f200 808d 	bhi.w	800311e <setOn+0x1ea>
 8003004:	a201      	add	r2, pc, #4	; (adr r2, 800300c <setOn+0xd8>)
 8003006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300a:	bf00      	nop
 800300c:	08003035 	.word	0x08003035
 8003010:	0800303d 	.word	0x0800303d
 8003014:	08003045 	.word	0x08003045
 8003018:	0800304d 	.word	0x0800304d
 800301c:	0800306b 	.word	0x0800306b
 8003020:	0800311f 	.word	0x0800311f
 8003024:	0800311f 	.word	0x0800311f
 8003028:	08003089 	.word	0x08003089
 800302c:	08003091 	.word	0x08003091
 8003030:	08003099 	.word	0x08003099
			case 8:
				temAlarm = 1;
 8003034:	4b3f      	ldr	r3, [pc, #252]	; (8003134 <setOn+0x200>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]
				break;
 800303a:	e070      	b.n	800311e <setOn+0x1ea>
			case 9:
				securityAlert = 1;
 800303c:	4b3e      	ldr	r3, [pc, #248]	; (8003138 <setOn+0x204>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]
				break;
 8003042:	e06c      	b.n	800311e <setOn+0x1ea>
			case 10:
				securityAlarm = 1;
 8003044:	4b3d      	ldr	r3, [pc, #244]	; (800313c <setOn+0x208>)
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]
				break;
 800304a:	e068      	b.n	800311e <setOn+0x1ea>
			case 11: // scenario 1: entering the house
				setScenario(22, 1, 0, 1, 1, 1, 0, 0);
 800304c:	2300      	movs	r3, #0
 800304e:	9303      	str	r3, [sp, #12]
 8003050:	2300      	movs	r3, #0
 8003052:	9302      	str	r3, [sp, #8]
 8003054:	2301      	movs	r3, #1
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	2301      	movs	r3, #1
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2301      	movs	r3, #1
 800305e:	2200      	movs	r2, #0
 8003060:	2101      	movs	r1, #1
 8003062:	2016      	movs	r0, #22
 8003064:	f000 f9d0 	bl	8003408 <setScenario>
				break;
 8003068:	e059      	b.n	800311e <setOn+0x1ea>
			case 12:// scenario 2: leaving the house
				setScenario(35, 1, 1, 1, 0, 0, 0, 0);
 800306a:	2300      	movs	r3, #0
 800306c:	9303      	str	r3, [sp, #12]
 800306e:	2300      	movs	r3, #0
 8003070:	9302      	str	r3, [sp, #8]
 8003072:	2300      	movs	r3, #0
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	2300      	movs	r3, #0
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	2301      	movs	r3, #1
 800307c:	2201      	movs	r2, #1
 800307e:	2101      	movs	r1, #1
 8003080:	2023      	movs	r0, #35	; 0x23
 8003082:	f000 f9c1 	bl	8003408 <setScenario>
				break;
 8003086:	e04a      	b.n	800311e <setOn+0x1ea>
			case 15:
				newSceneTemAlarm = 1;
 8003088:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <setOn+0x20c>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]
				break;
 800308e:	e046      	b.n	800311e <setOn+0x1ea>
			case 16:
				newScenesecurityAlarm = 1;
 8003090:	4b2c      	ldr	r3, [pc, #176]	; (8003144 <setOn+0x210>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]
				break;
 8003096:	e042      	b.n	800311e <setOn+0x1ea>
			case 17:
				newSceneSecurityAlert = 1;
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <setOn+0x214>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]
				break;
 800309e:	e03e      	b.n	800311e <setOn+0x1ea>
		}

	}
	else{
		strcpy(screen->content,"<  off  >");
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	33ac      	adds	r3, #172	; 0xac
 80030a4:	4929      	ldr	r1, [pc, #164]	; (800314c <setOn+0x218>)
 80030a6:	461a      	mov	r2, r3
 80030a8:	460b      	mov	r3, r1
 80030aa:	cb03      	ldmia	r3!, {r0, r1}
 80030ac:	6010      	str	r0, [r2, #0]
 80030ae:	6051      	str	r1, [r2, #4]
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	8113      	strh	r3, [r2, #8]
		switch(screen->id){
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3b08      	subs	r3, #8
 80030ba:	2b09      	cmp	r3, #9
 80030bc:	d82f      	bhi.n	800311e <setOn+0x1ea>
 80030be:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <setOn+0x190>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	080030ed 	.word	0x080030ed
 80030c8:	080030f5 	.word	0x080030f5
 80030cc:	080030fd 	.word	0x080030fd
 80030d0:	0800311d 	.word	0x0800311d
 80030d4:	0800311d 	.word	0x0800311d
 80030d8:	0800311f 	.word	0x0800311f
 80030dc:	0800311f 	.word	0x0800311f
 80030e0:	08003105 	.word	0x08003105
 80030e4:	0800310d 	.word	0x0800310d
 80030e8:	08003115 	.word	0x08003115
			case 8:
				temAlarm = 0;
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <setOn+0x200>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
				break;
 80030f2:	e014      	b.n	800311e <setOn+0x1ea>
			case 9:
				securityAlert = 0;
 80030f4:	4b10      	ldr	r3, [pc, #64]	; (8003138 <setOn+0x204>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
				break;
 80030fa:	e010      	b.n	800311e <setOn+0x1ea>
			case 10:
				securityAlarm = 0;
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <setOn+0x208>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
				break;
 8003102:	e00c      	b.n	800311e <setOn+0x1ea>
			case 11:
				break;
			case 12:
				break;
			case 15:
				newSceneTemAlarm = 0;
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <setOn+0x20c>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
				break;
 800310a:	e008      	b.n	800311e <setOn+0x1ea>
			case 16:
				newScenesecurityAlarm = 0;
 800310c:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <setOn+0x210>)
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
				break;
 8003112:	e004      	b.n	800311e <setOn+0x1ea>
			case 17:
				newSceneSecurityAlert = 0;
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <setOn+0x214>)
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
				break;
 800311a:	e000      	b.n	800311e <setOn+0x1ea>
				break;
 800311c:	bf00      	nop
		}
	}
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003126:	bf00      	nop
 8003128:	0800b890 	.word	0x0800b890
 800312c:	20000864 	.word	0x20000864
 8003130:	20000798 	.word	0x20000798
 8003134:	2000000c 	.word	0x2000000c
 8003138:	20000014 	.word	0x20000014
 800313c:	20000010 	.word	0x20000010
 8003140:	2000001c 	.word	0x2000001c
 8003144:	20000020 	.word	0x20000020
 8003148:	20000024 	.word	0x20000024
 800314c:	0800b800 	.word	0x0800b800

08003150 <setExactOn>:
void setExactOn(struct menuScreen* screen,int value){
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
	if(value == 1){
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d13d      	bne.n	80031dc <setExactOn+0x8c>
			strcpy(screen->content,"<  on  >");
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	33ac      	adds	r3, #172	; 0xac
 8003164:	493f      	ldr	r1, [pc, #252]	; (8003264 <setExactOn+0x114>)
 8003166:	461a      	mov	r2, r3
 8003168:	460b      	mov	r3, r1
 800316a:	cb03      	ldmia	r3!, {r0, r1}
 800316c:	6010      	str	r0, [r2, #0]
 800316e:	6051      	str	r1, [r2, #4]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	7213      	strb	r3, [r2, #8]
			switch(screen->id){
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3b08      	subs	r3, #8
 800317a:	2b09      	cmp	r3, #9
 800317c:	d86c      	bhi.n	8003258 <setExactOn+0x108>
 800317e:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <setExactOn+0x34>)
 8003180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003184:	080031ad 	.word	0x080031ad
 8003188:	080031b5 	.word	0x080031b5
 800318c:	080031bd 	.word	0x080031bd
 8003190:	08003259 	.word	0x08003259
 8003194:	08003259 	.word	0x08003259
 8003198:	08003259 	.word	0x08003259
 800319c:	08003259 	.word	0x08003259
 80031a0:	080031c5 	.word	0x080031c5
 80031a4:	080031cd 	.word	0x080031cd
 80031a8:	080031d5 	.word	0x080031d5
				case 8:
					temAlarm = 1;
 80031ac:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <setExactOn+0x118>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
					break;
 80031b2:	e051      	b.n	8003258 <setExactOn+0x108>
				case 9:
					securityAlert = 1;
 80031b4:	4b2d      	ldr	r3, [pc, #180]	; (800326c <setExactOn+0x11c>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
					break;
 80031ba:	e04d      	b.n	8003258 <setExactOn+0x108>
				case 10:
					securityAlarm = 1;
 80031bc:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <setExactOn+0x120>)
 80031be:	2201      	movs	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
					break;
 80031c2:	e049      	b.n	8003258 <setExactOn+0x108>
				case 15:
					newSceneTemAlarm = 1;
 80031c4:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <setExactOn+0x124>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
					break;
 80031ca:	e045      	b.n	8003258 <setExactOn+0x108>
				case 16:
					newScenesecurityAlarm = 1;
 80031cc:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <setExactOn+0x128>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
					break;
 80031d2:	e041      	b.n	8003258 <setExactOn+0x108>
				case 17:
					newSceneSecurityAlert = 1;
 80031d4:	4b29      	ldr	r3, [pc, #164]	; (800327c <setExactOn+0x12c>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	601a      	str	r2, [r3, #0]
					break;
 80031da:	e03d      	b.n	8003258 <setExactOn+0x108>
			}
		}
		else{
			strcpy(screen->content,"<  off  >");
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	33ac      	adds	r3, #172	; 0xac
 80031e0:	4927      	ldr	r1, [pc, #156]	; (8003280 <setExactOn+0x130>)
 80031e2:	461a      	mov	r2, r3
 80031e4:	460b      	mov	r3, r1
 80031e6:	cb03      	ldmia	r3!, {r0, r1}
 80031e8:	6010      	str	r0, [r2, #0]
 80031ea:	6051      	str	r1, [r2, #4]
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	8113      	strh	r3, [r2, #8]
			switch(screen->id){
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3b08      	subs	r3, #8
 80031f6:	2b09      	cmp	r3, #9
 80031f8:	d82e      	bhi.n	8003258 <setExactOn+0x108>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <setExactOn+0xb0>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003229 	.word	0x08003229
 8003204:	08003231 	.word	0x08003231
 8003208:	08003239 	.word	0x08003239
 800320c:	08003259 	.word	0x08003259
 8003210:	08003259 	.word	0x08003259
 8003214:	08003259 	.word	0x08003259
 8003218:	08003259 	.word	0x08003259
 800321c:	08003241 	.word	0x08003241
 8003220:	08003249 	.word	0x08003249
 8003224:	08003251 	.word	0x08003251
				case 8:
					temAlarm = 0;
 8003228:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <setExactOn+0x118>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
					break;
 800322e:	e013      	b.n	8003258 <setExactOn+0x108>
				case 9:
					securityAlert = 0;
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <setExactOn+0x11c>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
					break;
 8003236:	e00f      	b.n	8003258 <setExactOn+0x108>
				case 10:
					securityAlarm = 0;
 8003238:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <setExactOn+0x120>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
					break;
 800323e:	e00b      	b.n	8003258 <setExactOn+0x108>
				case 15:
					newSceneTemAlarm = 0;
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <setExactOn+0x124>)
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
					break;
 8003246:	e007      	b.n	8003258 <setExactOn+0x108>
				case 16:
					newScenesecurityAlarm = 0;
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <setExactOn+0x128>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
					break;
 800324e:	e003      	b.n	8003258 <setExactOn+0x108>
				case 17:
					newSceneSecurityAlert = 0;
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <setExactOn+0x12c>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
					break;
 8003256:	bf00      	nop
			}
		}
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	0800b890 	.word	0x0800b890
 8003268:	2000000c 	.word	0x2000000c
 800326c:	20000014 	.word	0x20000014
 8003270:	20000010 	.word	0x20000010
 8003274:	2000001c 	.word	0x2000001c
 8003278:	20000020 	.word	0x20000020
 800327c:	20000024 	.word	0x20000024
 8003280:	0800b800 	.word	0x0800b800

08003284 <setThreshold>:
void setThreshold(struct menuScreen* screen, int increase, int temperId){
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
	if(temperId == 0){
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d11a      	bne.n	80032cc <setThreshold+0x48>
		if(increase && temThreshold > 0)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <setThreshold+0x2c>
 800329c:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <setThreshold+0x8c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	dd05      	ble.n	80032b0 <setThreshold+0x2c>
			temThreshold++;
 80032a4:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <setThreshold+0x8c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	4a19      	ldr	r2, [pc, #100]	; (8003310 <setThreshold+0x8c>)
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e004      	b.n	80032ba <setThreshold+0x36>
		else
			temThreshold--;
 80032b0:	4b17      	ldr	r3, [pc, #92]	; (8003310 <setThreshold+0x8c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	4a16      	ldr	r2, [pc, #88]	; (8003310 <setThreshold+0x8c>)
 80032b8:	6013      	str	r3, [r2, #0]

	    sprintf(screen->content,"<  %d  >", temThreshold);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	33ac      	adds	r3, #172	; 0xac
 80032be:	4a14      	ldr	r2, [pc, #80]	; (8003310 <setThreshold+0x8c>)
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	4914      	ldr	r1, [pc, #80]	; (8003314 <setThreshold+0x90>)
 80032c4:	4618      	mov	r0, r3
 80032c6:	f007 fbeb 	bl	800aaa0 <siprintf>
			newSceneTemThreshold--;
	    sprintf(screen->content,"<  %d  >", newSceneTemThreshold);

	}

}
 80032ca:	e01c      	b.n	8003306 <setThreshold+0x82>
	else if(temperId == 1){
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d119      	bne.n	8003306 <setThreshold+0x82>
		if(increase && newSceneTemThreshold > 0)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d009      	beq.n	80032ec <setThreshold+0x68>
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <setThreshold+0x94>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	dd05      	ble.n	80032ec <setThreshold+0x68>
			newSceneTemThreshold++;
 80032e0:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <setThreshold+0x94>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <setThreshold+0x94>)
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	e004      	b.n	80032f6 <setThreshold+0x72>
			newSceneTemThreshold--;
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <setThreshold+0x94>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	4a09      	ldr	r2, [pc, #36]	; (8003318 <setThreshold+0x94>)
 80032f4:	6013      	str	r3, [r2, #0]
	    sprintf(screen->content,"<  %d  >", newSceneTemThreshold);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	33ac      	adds	r3, #172	; 0xac
 80032fa:	4a07      	ldr	r2, [pc, #28]	; (8003318 <setThreshold+0x94>)
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	4905      	ldr	r1, [pc, #20]	; (8003314 <setThreshold+0x90>)
 8003300:	4618      	mov	r0, r3
 8003302:	f007 fbcd 	bl	800aaa0 <siprintf>
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000008 	.word	0x20000008
 8003314:	0800b89c 	.word	0x0800b89c
 8003318:	20000018 	.word	0x20000018

0800331c <setExcactThreshold>:
void setExcactThreshold(struct menuScreen* screen, int threshold){
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
	temThreshold = threshold;
 8003326:	4a07      	ldr	r2, [pc, #28]	; (8003344 <setExcactThreshold+0x28>)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6013      	str	r3, [r2, #0]
    sprintf(screen->content,"<  %d  >", temThreshold);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	33ac      	adds	r3, #172	; 0xac
 8003330:	4a04      	ldr	r2, [pc, #16]	; (8003344 <setExcactThreshold+0x28>)
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	4904      	ldr	r1, [pc, #16]	; (8003348 <setExcactThreshold+0x2c>)
 8003336:	4618      	mov	r0, r3
 8003338:	f007 fbb2 	bl	800aaa0 <siprintf>
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20000008 	.word	0x20000008
 8003348:	0800b89c 	.word	0x0800b89c

0800334c <setLigthToggle>:
void setLigthToggle(struct menuScreen* screen, int index,int* lights){
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
	lights[index] = 1 - lights[index];
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	440b      	add	r3, r1
 800336a:	f1c2 0201 	rsb	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]
	if(lights[index] == 1)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	4413      	add	r3, r2
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d109      	bne.n	8003392 <setLigthToggle+0x46>
		screen->content[index * 3] = 'O';
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4413      	add	r3, r2
 800338a:	224f      	movs	r2, #79	; 0x4f
 800338c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	else
		screen->content[index * 3] = 'X';

}
 8003390:	e008      	b.n	80033a4 <setLigthToggle+0x58>
		screen->content[index * 3] = 'X';
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	2258      	movs	r2, #88	; 0x58
 80033a0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <setExactLight>:
void setExactLight(struct menuScreen* screen, int index,int value){
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
	Lights[index] = value;
 80033bc:	4911      	ldr	r1, [pc, #68]	; (8003404 <setExactLight+0x54>)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(Lights[index] == 1)
 80033c6:	4a0f      	ldr	r2, [pc, #60]	; (8003404 <setExactLight+0x54>)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d109      	bne.n	80033e6 <setExactLight+0x36>
			screen->content[index * 3] = 'O';
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4413      	add	r3, r2
 80033de:	224f      	movs	r2, #79	; 0x4f
 80033e0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		else
			screen->content[index * 3] = 'X';
}
 80033e4:	e008      	b.n	80033f8 <setExactLight+0x48>
			screen->content[index * 3] = 'X';
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4413      	add	r3, r2
 80033f2:	2258      	movs	r2, #88	; 0x58
 80033f4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	20000788 	.word	0x20000788

08003408 <setScenario>:
void setScenario(int temperatureThreshold, int temperatureAlarm,int secAlarm, int secAlert, int l1,int l2, int l3, int l4){
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
	// calling previous functions
	setExcactThreshold(&(node7->screen),temperatureThreshold);
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <setScenario+0x90>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3324      	adds	r3, #36	; 0x24
 800341c:	68f9      	ldr	r1, [r7, #12]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff ff7c 	bl	800331c <setExcactThreshold>
	setExactLight(&(node4->screen),0,l1);
 8003424:	4b1d      	ldr	r3, [pc, #116]	; (800349c <setScenario+0x94>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3324      	adds	r3, #36	; 0x24
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ffbe 	bl	80033b0 <setExactLight>
	setExactLight(&(node4->screen),1,l2);
 8003434:	4b19      	ldr	r3, [pc, #100]	; (800349c <setScenario+0x94>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3324      	adds	r3, #36	; 0x24
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	2101      	movs	r1, #1
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff ffb6 	bl	80033b0 <setExactLight>
	setExactLight(&(node4->screen),2,l3);
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <setScenario+0x94>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3324      	adds	r3, #36	; 0x24
 800344a:	6a3a      	ldr	r2, [r7, #32]
 800344c:	2102      	movs	r1, #2
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ffae 	bl	80033b0 <setExactLight>
	setExactLight(&(node4->screen),3,l4);
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <setScenario+0x94>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3324      	adds	r3, #36	; 0x24
 800345a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345c:	2103      	movs	r1, #3
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ffa6 	bl	80033b0 <setExactLight>
	setExactOn(&(node8->screen),temperatureAlarm);
 8003464:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <setScenario+0x98>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3324      	adds	r3, #36	; 0x24
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fe6f 	bl	8003150 <setExactOn>
	setExactOn(&(node10->screen),secAlarm);
 8003472:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <setScenario+0x9c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3324      	adds	r3, #36	; 0x24
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fe68 	bl	8003150 <setExactOn>
	setExactOn(&(node9->screen),secAlert);
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <setScenario+0xa0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3324      	adds	r3, #36	; 0x24
 8003486:	6839      	ldr	r1, [r7, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fe61 	bl	8003150 <setExactOn>
}
 800348e:	bf00      	nop
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000894 	.word	0x20000894
 800349c:	20000888 	.word	0x20000888
 80034a0:	20000898 	.word	0x20000898
 80034a4:	200008a0 	.word	0x200008a0
 80034a8:	2000089c 	.word	0x2000089c

080034ac <charSelector>:
char* charSelector(int key, int count) {
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
    switch (key) {
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	2b0d      	cmp	r3, #13
 80034bc:	f200 810f 	bhi.w	80036de <charSelector+0x232>
 80034c0:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <charSelector+0x1c>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	08003501 	.word	0x08003501
 80034cc:	08003529 	.word	0x08003529
 80034d0:	08003559 	.word	0x08003559
 80034d4:	080036df 	.word	0x080036df
 80034d8:	08003589 	.word	0x08003589
 80034dc:	080035b9 	.word	0x080035b9
 80034e0:	080035e9 	.word	0x080035e9
 80034e4:	080036df 	.word	0x080036df
 80034e8:	08003619 	.word	0x08003619
 80034ec:	08003651 	.word	0x08003651
 80034f0:	08003681 	.word	0x08003681
 80034f4:	080036df 	.word	0x080036df
 80034f8:	080036df 	.word	0x080036df
 80034fc:	080036b9 	.word	0x080036b9
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b03      	cmp	r3, #3
 8003504:	d00e      	beq.n	8003524 <charSelector+0x78>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b03      	cmp	r3, #3
 800350a:	f300 80d7 	bgt.w	80036bc <charSelector+0x210>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d003      	beq.n	800351c <charSelector+0x70>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d002      	beq.n	8003520 <charSelector+0x74>
                case 2:
                    return "1";
                case 3:
                    return " ";
            }
            break;
 800351a:	e0cf      	b.n	80036bc <charSelector+0x210>
                    return "0";
 800351c:	4b73      	ldr	r3, [pc, #460]	; (80036ec <charSelector+0x240>)
 800351e:	e0df      	b.n	80036e0 <charSelector+0x234>
                    return "1";
 8003520:	4b73      	ldr	r3, [pc, #460]	; (80036f0 <charSelector+0x244>)
 8003522:	e0dd      	b.n	80036e0 <charSelector+0x234>
                    return " ";
 8003524:	4b73      	ldr	r3, [pc, #460]	; (80036f4 <charSelector+0x248>)
 8003526:	e0db      	b.n	80036e0 <charSelector+0x234>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	3b01      	subs	r3, #1
 800352c:	2b03      	cmp	r3, #3
 800352e:	f200 80c7 	bhi.w	80036c0 <charSelector+0x214>
 8003532:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <charSelector+0x8c>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	08003549 	.word	0x08003549
 800353c:	0800354d 	.word	0x0800354d
 8003540:	08003551 	.word	0x08003551
 8003544:	08003555 	.word	0x08003555
        case 2:
            switch (count) {
                case 1:
                    return "2";
 8003548:	4b6b      	ldr	r3, [pc, #428]	; (80036f8 <charSelector+0x24c>)
 800354a:	e0c9      	b.n	80036e0 <charSelector+0x234>
                case 2:
                    return "a";
 800354c:	4b6b      	ldr	r3, [pc, #428]	; (80036fc <charSelector+0x250>)
 800354e:	e0c7      	b.n	80036e0 <charSelector+0x234>
                case 3:
                    return "b";
 8003550:	4b6b      	ldr	r3, [pc, #428]	; (8003700 <charSelector+0x254>)
 8003552:	e0c5      	b.n	80036e0 <charSelector+0x234>
                case 4:
                    return "c";
 8003554:	4b6b      	ldr	r3, [pc, #428]	; (8003704 <charSelector+0x258>)
 8003556:	e0c3      	b.n	80036e0 <charSelector+0x234>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	3b01      	subs	r3, #1
 800355c:	2b03      	cmp	r3, #3
 800355e:	f200 80b1 	bhi.w	80036c4 <charSelector+0x218>
 8003562:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <charSelector+0xbc>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	08003579 	.word	0x08003579
 800356c:	0800357d 	.word	0x0800357d
 8003570:	08003581 	.word	0x08003581
 8003574:	08003585 	.word	0x08003585
            }
            break;
        case 3:
            switch (count) {
                case 1:
                    return "3";
 8003578:	4b63      	ldr	r3, [pc, #396]	; (8003708 <charSelector+0x25c>)
 800357a:	e0b1      	b.n	80036e0 <charSelector+0x234>
                case 2:
                    return "d";
 800357c:	4b63      	ldr	r3, [pc, #396]	; (800370c <charSelector+0x260>)
 800357e:	e0af      	b.n	80036e0 <charSelector+0x234>
                case 3:
                    return "e";
 8003580:	4b63      	ldr	r3, [pc, #396]	; (8003710 <charSelector+0x264>)
 8003582:	e0ad      	b.n	80036e0 <charSelector+0x234>
                case 4:
                    return "f";
 8003584:	4b63      	ldr	r3, [pc, #396]	; (8003714 <charSelector+0x268>)
 8003586:	e0ab      	b.n	80036e0 <charSelector+0x234>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	3b01      	subs	r3, #1
 800358c:	2b03      	cmp	r3, #3
 800358e:	f200 809b 	bhi.w	80036c8 <charSelector+0x21c>
 8003592:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <charSelector+0xec>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035a9 	.word	0x080035a9
 800359c:	080035ad 	.word	0x080035ad
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035b5 	.word	0x080035b5
            }
            break;
        case 5:
            switch (count) {
                case 1:
                    return "4";
 80035a8:	4b5b      	ldr	r3, [pc, #364]	; (8003718 <charSelector+0x26c>)
 80035aa:	e099      	b.n	80036e0 <charSelector+0x234>
                case 2:
                    return "g";
 80035ac:	4b5b      	ldr	r3, [pc, #364]	; (800371c <charSelector+0x270>)
 80035ae:	e097      	b.n	80036e0 <charSelector+0x234>
                case 3:
                    return "h";
 80035b0:	4b5b      	ldr	r3, [pc, #364]	; (8003720 <charSelector+0x274>)
 80035b2:	e095      	b.n	80036e0 <charSelector+0x234>
                case 4:
                    return "i";
 80035b4:	4b5b      	ldr	r3, [pc, #364]	; (8003724 <charSelector+0x278>)
 80035b6:	e093      	b.n	80036e0 <charSelector+0x234>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	2b03      	cmp	r3, #3
 80035be:	f200 8085 	bhi.w	80036cc <charSelector+0x220>
 80035c2:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <charSelector+0x11c>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	080035d9 	.word	0x080035d9
 80035cc:	080035dd 	.word	0x080035dd
 80035d0:	080035e1 	.word	0x080035e1
 80035d4:	080035e5 	.word	0x080035e5
            }
            break;
        case 6:
            switch (count) {
                case 1:
                    return "5";
 80035d8:	4b53      	ldr	r3, [pc, #332]	; (8003728 <charSelector+0x27c>)
 80035da:	e081      	b.n	80036e0 <charSelector+0x234>
                case 2:
                    return "j";
 80035dc:	4b53      	ldr	r3, [pc, #332]	; (800372c <charSelector+0x280>)
 80035de:	e07f      	b.n	80036e0 <charSelector+0x234>
                case 3:
                    return "k";
 80035e0:	4b53      	ldr	r3, [pc, #332]	; (8003730 <charSelector+0x284>)
 80035e2:	e07d      	b.n	80036e0 <charSelector+0x234>
                case 4:
                    return "l";
 80035e4:	4b53      	ldr	r3, [pc, #332]	; (8003734 <charSelector+0x288>)
 80035e6:	e07b      	b.n	80036e0 <charSelector+0x234>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d86f      	bhi.n	80036d0 <charSelector+0x224>
 80035f0:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <charSelector+0x14c>)
 80035f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f6:	bf00      	nop
 80035f8:	08003609 	.word	0x08003609
 80035fc:	0800360d 	.word	0x0800360d
 8003600:	08003611 	.word	0x08003611
 8003604:	08003615 	.word	0x08003615
            }
            break;
        case 7:
            switch (count) {
                case 1:
                    return "6";
 8003608:	4b4b      	ldr	r3, [pc, #300]	; (8003738 <charSelector+0x28c>)
 800360a:	e069      	b.n	80036e0 <charSelector+0x234>
                case 2:
                    return "m";
 800360c:	4b4b      	ldr	r3, [pc, #300]	; (800373c <charSelector+0x290>)
 800360e:	e067      	b.n	80036e0 <charSelector+0x234>
                case 3:
                    return "n";
 8003610:	4b4b      	ldr	r3, [pc, #300]	; (8003740 <charSelector+0x294>)
 8003612:	e065      	b.n	80036e0 <charSelector+0x234>
                case 4:
                    return "o";
 8003614:	4b4b      	ldr	r3, [pc, #300]	; (8003744 <charSelector+0x298>)
 8003616:	e063      	b.n	80036e0 <charSelector+0x234>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	3b01      	subs	r3, #1
 800361c:	2b04      	cmp	r3, #4
 800361e:	d859      	bhi.n	80036d4 <charSelector+0x228>
 8003620:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <charSelector+0x17c>)
 8003622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003626:	bf00      	nop
 8003628:	0800363d 	.word	0x0800363d
 800362c:	08003641 	.word	0x08003641
 8003630:	08003645 	.word	0x08003645
 8003634:	08003649 	.word	0x08003649
 8003638:	0800364d 	.word	0x0800364d
            }
            break;
        case 9:
            switch (count) {
                case 1:
                    return "7";
 800363c:	4b42      	ldr	r3, [pc, #264]	; (8003748 <charSelector+0x29c>)
 800363e:	e04f      	b.n	80036e0 <charSelector+0x234>
                case 2:
                    return "p";
 8003640:	4b42      	ldr	r3, [pc, #264]	; (800374c <charSelector+0x2a0>)
 8003642:	e04d      	b.n	80036e0 <charSelector+0x234>
                case 3:
                    return "q";
 8003644:	4b42      	ldr	r3, [pc, #264]	; (8003750 <charSelector+0x2a4>)
 8003646:	e04b      	b.n	80036e0 <charSelector+0x234>
                case 4:
                    return "r";
 8003648:	4b42      	ldr	r3, [pc, #264]	; (8003754 <charSelector+0x2a8>)
 800364a:	e049      	b.n	80036e0 <charSelector+0x234>
                case 5:
                    return "s";
 800364c:	4b42      	ldr	r3, [pc, #264]	; (8003758 <charSelector+0x2ac>)
 800364e:	e047      	b.n	80036e0 <charSelector+0x234>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	3b01      	subs	r3, #1
 8003654:	2b03      	cmp	r3, #3
 8003656:	d83f      	bhi.n	80036d8 <charSelector+0x22c>
 8003658:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <charSelector+0x1b4>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003671 	.word	0x08003671
 8003664:	08003675 	.word	0x08003675
 8003668:	08003679 	.word	0x08003679
 800366c:	0800367d 	.word	0x0800367d
            }
            break;
        case 10:
            switch (count) {
                case 1:
                    return "8";
 8003670:	4b3a      	ldr	r3, [pc, #232]	; (800375c <charSelector+0x2b0>)
 8003672:	e035      	b.n	80036e0 <charSelector+0x234>
                case 2:
                    return "t";
 8003674:	4b3a      	ldr	r3, [pc, #232]	; (8003760 <charSelector+0x2b4>)
 8003676:	e033      	b.n	80036e0 <charSelector+0x234>
                case 3:
                    return "u";
 8003678:	4b3a      	ldr	r3, [pc, #232]	; (8003764 <charSelector+0x2b8>)
 800367a:	e031      	b.n	80036e0 <charSelector+0x234>
                case 4:
                    return "v";
 800367c:	4b3a      	ldr	r3, [pc, #232]	; (8003768 <charSelector+0x2bc>)
 800367e:	e02f      	b.n	80036e0 <charSelector+0x234>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	3b01      	subs	r3, #1
 8003684:	2b04      	cmp	r3, #4
 8003686:	d829      	bhi.n	80036dc <charSelector+0x230>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <charSelector+0x1e4>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036a5 	.word	0x080036a5
 8003694:	080036a9 	.word	0x080036a9
 8003698:	080036ad 	.word	0x080036ad
 800369c:	080036b1 	.word	0x080036b1
 80036a0:	080036b5 	.word	0x080036b5
            }
            break;
        case 11:
            switch (count) {
                case 1:
                    return "9";
 80036a4:	4b31      	ldr	r3, [pc, #196]	; (800376c <charSelector+0x2c0>)
 80036a6:	e01b      	b.n	80036e0 <charSelector+0x234>
                case 2:
                    return "w";
 80036a8:	4b31      	ldr	r3, [pc, #196]	; (8003770 <charSelector+0x2c4>)
 80036aa:	e019      	b.n	80036e0 <charSelector+0x234>
                case 3:
                    return "x";
 80036ac:	4b31      	ldr	r3, [pc, #196]	; (8003774 <charSelector+0x2c8>)
 80036ae:	e017      	b.n	80036e0 <charSelector+0x234>
                case 4:
                    return "y";
 80036b0:	4b31      	ldr	r3, [pc, #196]	; (8003778 <charSelector+0x2cc>)
 80036b2:	e015      	b.n	80036e0 <charSelector+0x234>
                case 5:
                    return "z";
 80036b4:	4b31      	ldr	r3, [pc, #196]	; (800377c <charSelector+0x2d0>)
 80036b6:	e013      	b.n	80036e0 <charSelector+0x234>
            }
            break;
        case 14:
            return "dell";
 80036b8:	4b31      	ldr	r3, [pc, #196]	; (8003780 <charSelector+0x2d4>)
 80036ba:	e011      	b.n	80036e0 <charSelector+0x234>
            break;
 80036bc:	bf00      	nop
 80036be:	e00e      	b.n	80036de <charSelector+0x232>
            break;
 80036c0:	bf00      	nop
 80036c2:	e00c      	b.n	80036de <charSelector+0x232>
            break;
 80036c4:	bf00      	nop
 80036c6:	e00a      	b.n	80036de <charSelector+0x232>
            break;
 80036c8:	bf00      	nop
 80036ca:	e008      	b.n	80036de <charSelector+0x232>
            break;
 80036cc:	bf00      	nop
 80036ce:	e006      	b.n	80036de <charSelector+0x232>
            break;
 80036d0:	bf00      	nop
 80036d2:	e004      	b.n	80036de <charSelector+0x232>
            break;
 80036d4:	bf00      	nop
 80036d6:	e002      	b.n	80036de <charSelector+0x232>
            break;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <charSelector+0x232>
            break;
 80036dc:	bf00      	nop
    }

    return "null";
 80036de:	4b29      	ldr	r3, [pc, #164]	; (8003784 <charSelector+0x2d8>)
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	0800b8a8 	.word	0x0800b8a8
 80036f0:	0800b8ac 	.word	0x0800b8ac
 80036f4:	0800b8b0 	.word	0x0800b8b0
 80036f8:	0800b8b4 	.word	0x0800b8b4
 80036fc:	0800b8b8 	.word	0x0800b8b8
 8003700:	0800b8bc 	.word	0x0800b8bc
 8003704:	0800b8c0 	.word	0x0800b8c0
 8003708:	0800b8c4 	.word	0x0800b8c4
 800370c:	0800b8c8 	.word	0x0800b8c8
 8003710:	0800b8cc 	.word	0x0800b8cc
 8003714:	0800b8d0 	.word	0x0800b8d0
 8003718:	0800b8d4 	.word	0x0800b8d4
 800371c:	0800b8d8 	.word	0x0800b8d8
 8003720:	0800b8dc 	.word	0x0800b8dc
 8003724:	0800b8e0 	.word	0x0800b8e0
 8003728:	0800b8e4 	.word	0x0800b8e4
 800372c:	0800b8e8 	.word	0x0800b8e8
 8003730:	0800b8ec 	.word	0x0800b8ec
 8003734:	0800b8f0 	.word	0x0800b8f0
 8003738:	0800b8f4 	.word	0x0800b8f4
 800373c:	0800b8f8 	.word	0x0800b8f8
 8003740:	0800b8fc 	.word	0x0800b8fc
 8003744:	0800b900 	.word	0x0800b900
 8003748:	0800b904 	.word	0x0800b904
 800374c:	0800b908 	.word	0x0800b908
 8003750:	0800b90c 	.word	0x0800b90c
 8003754:	0800b910 	.word	0x0800b910
 8003758:	0800b914 	.word	0x0800b914
 800375c:	0800b918 	.word	0x0800b918
 8003760:	0800b91c 	.word	0x0800b91c
 8003764:	0800b920 	.word	0x0800b920
 8003768:	0800b924 	.word	0x0800b924
 800376c:	0800b928 	.word	0x0800b928
 8003770:	0800b92c 	.word	0x0800b92c
 8003774:	0800b930 	.word	0x0800b930
 8003778:	0800b934 	.word	0x0800b934
 800377c:	0800b938 	.word	0x0800b938
 8003780:	0800b888 	.word	0x0800b888
 8003784:	0800b880 	.word	0x0800b880

08003788 <stateCountsForEachKey>:
int stateCountsForEachKey(int key){
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
		switch(key){
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	2b0a      	cmp	r3, #10
 8003796:	d82b      	bhi.n	80037f0 <stateCountsForEachKey+0x68>
 8003798:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <stateCountsForEachKey+0x18>)
 800379a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379e:	bf00      	nop
 80037a0:	080037cd 	.word	0x080037cd
 80037a4:	080037d1 	.word	0x080037d1
 80037a8:	080037d5 	.word	0x080037d5
 80037ac:	080037f1 	.word	0x080037f1
 80037b0:	080037d9 	.word	0x080037d9
 80037b4:	080037dd 	.word	0x080037dd
 80037b8:	080037e1 	.word	0x080037e1
 80037bc:	080037f1 	.word	0x080037f1
 80037c0:	080037e5 	.word	0x080037e5
 80037c4:	080037e9 	.word	0x080037e9
 80037c8:	080037ed 	.word	0x080037ed
		case 1:
			return 3;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e010      	b.n	80037f2 <stateCountsForEachKey+0x6a>
		case 2:
			return 4;
 80037d0:	2304      	movs	r3, #4
 80037d2:	e00e      	b.n	80037f2 <stateCountsForEachKey+0x6a>
		case 3:
			return 4;
 80037d4:	2304      	movs	r3, #4
 80037d6:	e00c      	b.n	80037f2 <stateCountsForEachKey+0x6a>
		case 5:
			return 4;
 80037d8:	2304      	movs	r3, #4
 80037da:	e00a      	b.n	80037f2 <stateCountsForEachKey+0x6a>
		case 6:
			return 4;
 80037dc:	2304      	movs	r3, #4
 80037de:	e008      	b.n	80037f2 <stateCountsForEachKey+0x6a>
		case 7:
			return 4;
 80037e0:	2304      	movs	r3, #4
 80037e2:	e006      	b.n	80037f2 <stateCountsForEachKey+0x6a>
		case 9:
			return 5;
 80037e4:	2305      	movs	r3, #5
 80037e6:	e004      	b.n	80037f2 <stateCountsForEachKey+0x6a>
		case 10:
			return 4;
 80037e8:	2304      	movs	r3, #4
 80037ea:	e002      	b.n	80037f2 <stateCountsForEachKey+0x6a>
		case 11:
			return 5;
 80037ec:	2305      	movs	r3, #5
 80037ee:	e000      	b.n	80037f2 <stateCountsForEachKey+0x6a>

	}
		return 0;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop

08003800 <nextCurrentNode>:
void nextCurrentNode(){
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
	switch(CurrentMenuOption){
 8003804:	4b26      	ldr	r3, [pc, #152]	; (80038a0 <nextCurrentNode+0xa0>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b07      	cmp	r3, #7
 800380a:	d843      	bhi.n	8003894 <nextCurrentNode+0x94>
 800380c:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <nextCurrentNode+0x14>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003835 	.word	0x08003835
 8003818:	08003841 	.word	0x08003841
 800381c:	0800384d 	.word	0x0800384d
 8003820:	08003859 	.word	0x08003859
 8003824:	08003865 	.word	0x08003865
 8003828:	08003871 	.word	0x08003871
 800382c:	0800387d 	.word	0x0800387d
 8003830:	08003889 	.word	0x08003889
		case 0:
			currentNode = currentNode->child1;
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <nextCurrentNode+0xa4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <nextCurrentNode+0xa4>)
 800383c:	6013      	str	r3, [r2, #0]
			break;
 800383e:	e029      	b.n	8003894 <nextCurrentNode+0x94>
		case 1:
			currentNode = currentNode->child2;
 8003840:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <nextCurrentNode+0xa4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <nextCurrentNode+0xa4>)
 8003848:	6013      	str	r3, [r2, #0]
			break;
 800384a:	e023      	b.n	8003894 <nextCurrentNode+0x94>
		case 2:
			currentNode = currentNode->child3;
 800384c:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <nextCurrentNode+0xa4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	4a14      	ldr	r2, [pc, #80]	; (80038a4 <nextCurrentNode+0xa4>)
 8003854:	6013      	str	r3, [r2, #0]
			break;
 8003856:	e01d      	b.n	8003894 <nextCurrentNode+0x94>
		case 3:
			currentNode = currentNode->child4;
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <nextCurrentNode+0xa4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4a11      	ldr	r2, [pc, #68]	; (80038a4 <nextCurrentNode+0xa4>)
 8003860:	6013      	str	r3, [r2, #0]
			break;
 8003862:	e017      	b.n	8003894 <nextCurrentNode+0x94>
		case 4:
			currentNode = currentNode->child5;
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <nextCurrentNode+0xa4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	4a0e      	ldr	r2, [pc, #56]	; (80038a4 <nextCurrentNode+0xa4>)
 800386c:	6013      	str	r3, [r2, #0]
			break;
 800386e:	e011      	b.n	8003894 <nextCurrentNode+0x94>
		case 5:
			currentNode = currentNode->child6;
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <nextCurrentNode+0xa4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	4a0b      	ldr	r2, [pc, #44]	; (80038a4 <nextCurrentNode+0xa4>)
 8003878:	6013      	str	r3, [r2, #0]
			break;
 800387a:	e00b      	b.n	8003894 <nextCurrentNode+0x94>
		case 6:
			currentNode = currentNode->child7;
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <nextCurrentNode+0xa4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	4a08      	ldr	r2, [pc, #32]	; (80038a4 <nextCurrentNode+0xa4>)
 8003884:	6013      	str	r3, [r2, #0]
			break;
 8003886:	e005      	b.n	8003894 <nextCurrentNode+0x94>
		case 7:
			currentNode = currentNode->child8;
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <nextCurrentNode+0xa4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <nextCurrentNode+0xa4>)
 8003890:	6013      	str	r3, [r2, #0]
			break;
 8003892:	bf00      	nop
	}
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000848 	.word	0x20000848
 80038a4:	200008cc 	.word	0x200008cc

080038a8 <keyHandler>:
	print("                   ");
	display();
}


void keyHandler(){
 80038a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038ac:	b0c2      	sub	sp, #264	; 0x108
 80038ae:	af40      	add	r7, sp, #256	; 0x100
	int key = row * 4 + col +1;
 80038b0:	4b8a      	ldr	r3, [pc, #552]	; (8003adc <keyHandler+0x234>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	009a      	lsls	r2, r3, #2
 80038b6:	4b8a      	ldr	r3, [pc, #552]	; (8003ae0 <keyHandler+0x238>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4413      	add	r3, r2
 80038bc:	3301      	adds	r3, #1
 80038be:	607b      	str	r3, [r7, #4]
	if(startState == 2){
 80038c0:	4b88      	ldr	r3, [pc, #544]	; (8003ae4 <keyHandler+0x23c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	f040 83c7 	bne.w	8004058 <keyHandler+0x7b0>
		if(HAL_GetTick()- lastPress<300 ) return;
 80038ca:	f001 f983 	bl	8004bd4 <HAL_GetTick>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2200      	movs	r2, #0
 80038d2:	4698      	mov	r8, r3
 80038d4:	4691      	mov	r9, r2
 80038d6:	4b84      	ldr	r3, [pc, #528]	; (8003ae8 <keyHandler+0x240>)
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	ebb8 0402 	subs.w	r4, r8, r2
 80038e0:	eb69 0503 	sbc.w	r5, r9, r3
 80038e4:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 80038e8:	f175 0300 	sbcs.w	r3, r5, #0
 80038ec:	f0c0 83d6 	bcc.w	800409c <keyHandler+0x7f4>
		if(!generateMenu){
 80038f0:	4b7e      	ldr	r3, [pc, #504]	; (8003aec <keyHandler+0x244>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <keyHandler+0x5a>
			GenerateMenu();
 80038f8:	f7fd ff60 	bl	80017bc <GenerateMenu>
			generateMenu = 1;
 80038fc:	4b7b      	ldr	r3, [pc, #492]	; (8003aec <keyHandler+0x244>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]
		}

		if(currentNode->screen.id == 19){
 8003902:	4b7b      	ldr	r3, [pc, #492]	; (8003af0 <keyHandler+0x248>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b13      	cmp	r3, #19
 800390a:	d102      	bne.n	8003912 <keyHandler+0x6a>
			createScenario();
 800390c:	f7fe fe8c 	bl	8002628 <createScenario>
 8003910:	e045      	b.n	800399e <keyHandler+0xf6>
		}
		else if(currentNode->screen.id == 6){
 8003912:	4b77      	ldr	r3, [pc, #476]	; (8003af0 <keyHandler+0x248>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2b06      	cmp	r3, #6
 800391a:	d140      	bne.n	800399e <keyHandler+0xf6>
			if(key != lastKeyPressed){
 800391c:	4b75      	ldr	r3, [pc, #468]	; (8003af4 <keyHandler+0x24c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	429a      	cmp	r2, r3
 8003924:	d009      	beq.n	800393a <keyHandler+0x92>
				lastKeyPressed = key;
 8003926:	4a73      	ldr	r2, [pc, #460]	; (8003af4 <keyHandler+0x24c>)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6013      	str	r3, [r2, #0]
				typingCount = 1;
 800392c:	4b72      	ldr	r3, [pc, #456]	; (8003af8 <keyHandler+0x250>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]
				sameKeyPressed = 0;
 8003932:	4b72      	ldr	r3, [pc, #456]	; (8003afc <keyHandler+0x254>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e015      	b.n	8003966 <keyHandler+0xbe>
			}
			else{
				sameKeyPressed = 1;
 800393a:	4b70      	ldr	r3, [pc, #448]	; (8003afc <keyHandler+0x254>)
 800393c:	2201      	movs	r2, #1
 800393e:	601a      	str	r2, [r3, #0]
				typingCount++;
 8003940:	4b6d      	ldr	r3, [pc, #436]	; (8003af8 <keyHandler+0x250>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	4a6c      	ldr	r2, [pc, #432]	; (8003af8 <keyHandler+0x250>)
 8003948:	6013      	str	r3, [r2, #0]
				typingCount = typingCount % (stateCountsForEachKey(key)+1);
 800394a:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <keyHandler+0x250>)
 800394c:	681c      	ldr	r4, [r3, #0]
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff1a 	bl	8003788 <stateCountsForEachKey>
 8003954:	4603      	mov	r3, r0
 8003956:	3301      	adds	r3, #1
 8003958:	fb94 f2f3 	sdiv	r2, r4, r3
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	1ae3      	subs	r3, r4, r3
 8003962:	4a65      	ldr	r2, [pc, #404]	; (8003af8 <keyHandler+0x250>)
 8003964:	6013      	str	r3, [r2, #0]
			}
			messageSetter(currentNode, charSelector(key, typingCount));
 8003966:	4b62      	ldr	r3, [pc, #392]	; (8003af0 <keyHandler+0x248>)
 8003968:	681c      	ldr	r4, [r3, #0]
 800396a:	4b63      	ldr	r3, [pc, #396]	; (8003af8 <keyHandler+0x250>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4619      	mov	r1, r3
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff fd9b 	bl	80034ac <charSelector>
 8003976:	4603      	mov	r3, r0
 8003978:	4619      	mov	r1, r3
 800397a:	4620      	mov	r0, r4
 800397c:	f7ff fa62 	bl	8002e44 <messageSetter>
			ShowInfo(currentNode->screen);
 8003980:	4b5b      	ldr	r3, [pc, #364]	; (8003af0 <keyHandler+0x248>)
 8003982:	681c      	ldr	r4, [r3, #0]
 8003984:	4668      	mov	r0, sp
 8003986:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800398a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800398e:	4619      	mov	r1, r3
 8003990:	f006 ff80 	bl	800a894 <memcpy>
 8003994:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003998:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800399a:	f7ff f8db 	bl	8002b54 <ShowInfo>
		}
		switch (key) {
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3b02      	subs	r3, #2
 80039a2:	2b0e      	cmp	r3, #14
 80039a4:	f200 838f 	bhi.w	80040c6 <keyHandler+0x81e>
 80039a8:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <keyHandler+0x108>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039ed 	.word	0x080039ed
 80039b4:	080040c7 	.word	0x080040c7
 80039b8:	08003a65 	.word	0x08003a65
 80039bc:	08003b15 	.word	0x08003b15
 80039c0:	08003c15 	.word	0x08003c15
 80039c4:	08003ca1 	.word	0x08003ca1
 80039c8:	08003dbd 	.word	0x08003dbd
 80039cc:	080040c7 	.word	0x080040c7
 80039d0:	080040c7 	.word	0x080040c7
 80039d4:	080040c7 	.word	0x080040c7
 80039d8:	08003e33 	.word	0x08003e33
 80039dc:	08003ea9 	.word	0x08003ea9
 80039e0:	080040c7 	.word	0x080040c7
 80039e4:	08003f2d 	.word	0x08003f2d
 80039e8:	08003fbd 	.word	0x08003fbd
			case 2: // up key
				if(inMenu && CurrentMenuOption > 0){
 80039ec:	4b44      	ldr	r3, [pc, #272]	; (8003b00 <keyHandler+0x258>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d018      	beq.n	8003a26 <keyHandler+0x17e>
 80039f4:	4b43      	ldr	r3, [pc, #268]	; (8003b04 <keyHandler+0x25c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	dd14      	ble.n	8003a26 <keyHandler+0x17e>
					if(inMenu && CurrentMenuOption == 4)
 80039fc:	4b40      	ldr	r3, [pc, #256]	; (8003b00 <keyHandler+0x258>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <keyHandler+0x16e>
 8003a04:	4b3f      	ldr	r3, [pc, #252]	; (8003b04 <keyHandler+0x25c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d104      	bne.n	8003a16 <keyHandler+0x16e>
						page--;
 8003a0c:	4b3e      	ldr	r3, [pc, #248]	; (8003b08 <keyHandler+0x260>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	4a3d      	ldr	r2, [pc, #244]	; (8003b08 <keyHandler+0x260>)
 8003a14:	6013      	str	r3, [r2, #0]
					CurrentMenuOption--;
 8003a16:	4b3b      	ldr	r3, [pc, #236]	; (8003b04 <keyHandler+0x25c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	4a39      	ldr	r2, [pc, #228]	; (8003b04 <keyHandler+0x25c>)
 8003a1e:	6013      	str	r3, [r2, #0]
					changeOption(0);
 8003a20:	2000      	movs	r0, #0
 8003a22:	f7ff f90f 	bl	8002c44 <changeOption>
				}
				if(!inMenu && page>0){
 8003a26:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <keyHandler+0x258>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f040 8338 	bne.w	80040a0 <keyHandler+0x7f8>
 8003a30:	4b35      	ldr	r3, [pc, #212]	; (8003b08 <keyHandler+0x260>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f340 8333 	ble.w	80040a0 <keyHandler+0x7f8>
					page--;
 8003a3a:	4b33      	ldr	r3, [pc, #204]	; (8003b08 <keyHandler+0x260>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	4a31      	ldr	r2, [pc, #196]	; (8003b08 <keyHandler+0x260>)
 8003a42:	6013      	str	r3, [r2, #0]
					ShowInfo(currentNode->screen);
 8003a44:	4b2a      	ldr	r3, [pc, #168]	; (8003af0 <keyHandler+0x248>)
 8003a46:	681c      	ldr	r4, [r3, #0]
 8003a48:	4668      	mov	r0, sp
 8003a4a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a52:	4619      	mov	r1, r3
 8003a54:	f006 ff1e 	bl	800a894 <memcpy>
 8003a58:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003a5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a5e:	f7ff f879 	bl	8002b54 <ShowInfo>
				}
				break;
 8003a62:	e31d      	b.n	80040a0 <keyHandler+0x7f8>

			case 4:
				if(currentNode->screen.id == 4 ){
 8003a64:	4b22      	ldr	r3, [pc, #136]	; (8003af0 <keyHandler+0x248>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d117      	bne.n	8003a9e <keyHandler+0x1f6>
					setLigthToggle(&(currentNode->screen),0,Lights);
 8003a6e:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <keyHandler+0x248>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3324      	adds	r3, #36	; 0x24
 8003a74:	4a25      	ldr	r2, [pc, #148]	; (8003b0c <keyHandler+0x264>)
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff fc67 	bl	800334c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8003a7e:	4b1c      	ldr	r3, [pc, #112]	; (8003af0 <keyHandler+0x248>)
 8003a80:	681c      	ldr	r4, [r3, #0]
 8003a82:	4668      	mov	r0, sp
 8003a84:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f006 ff01 	bl	800a894 <memcpy>
 8003a92:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a98:	f7ff f85c 	bl	8002b54 <ShowInfo>
				}
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),0,newScenarioLights);
					ShowInfo(currentNode->screen);
				}
				break;
 8003a9c:	e302      	b.n	80040a4 <keyHandler+0x7fc>
				else if(currentNode->screen.id == 18){
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <keyHandler+0x248>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	2b12      	cmp	r3, #18
 8003aa6:	f040 82fd 	bne.w	80040a4 <keyHandler+0x7fc>
					setLigthToggle(&(currentNode->screen),0,newScenarioLights);
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <keyHandler+0x248>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3324      	adds	r3, #36	; 0x24
 8003ab0:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <keyHandler+0x268>)
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fc49 	bl	800334c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8003aba:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <keyHandler+0x248>)
 8003abc:	681c      	ldr	r4, [r3, #0]
 8003abe:	4668      	mov	r0, sp
 8003ac0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003ac4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f006 fee3 	bl	800a894 <memcpy>
 8003ace:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003ad2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ad4:	f7ff f83e 	bl	8002b54 <ShowInfo>
				break;
 8003ad8:	e2e4      	b.n	80040a4 <keyHandler+0x7fc>
 8003ada:	bf00      	nop
 8003adc:	2000002c 	.word	0x2000002c
 8003ae0:	20000028 	.word	0x20000028
 8003ae4:	20000868 	.word	0x20000868
 8003ae8:	20000840 	.word	0x20000840
 8003aec:	20000854 	.word	0x20000854
 8003af0:	200008cc 	.word	0x200008cc
 8003af4:	20000858 	.word	0x20000858
 8003af8:	20000124 	.word	0x20000124
 8003afc:	2000085c 	.word	0x2000085c
 8003b00:	20000120 	.word	0x20000120
 8003b04:	20000848 	.word	0x20000848
 8003b08:	20000850 	.word	0x20000850
 8003b0c:	20000788 	.word	0x20000788
 8003b10:	20000830 	.word	0x20000830

			case 5: // left key
				if(currentNode->screen.id == 8 ||currentNode->screen.id == 9 || currentNode->screen.id == 10 || currentNode->screen.id == 11 || currentNode->screen.id == 12 || currentNode->screen.id == 15 || currentNode->screen.id == 16 || currentNode->screen.id == 17 ||currentNode->screen.id >lastPagesId){
 8003b14:	4b93      	ldr	r3, [pc, #588]	; (8003d64 <keyHandler+0x4bc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d029      	beq.n	8003b72 <keyHandler+0x2ca>
 8003b1e:	4b91      	ldr	r3, [pc, #580]	; (8003d64 <keyHandler+0x4bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	2b09      	cmp	r3, #9
 8003b26:	d024      	beq.n	8003b72 <keyHandler+0x2ca>
 8003b28:	4b8e      	ldr	r3, [pc, #568]	; (8003d64 <keyHandler+0x4bc>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	2b0a      	cmp	r3, #10
 8003b30:	d01f      	beq.n	8003b72 <keyHandler+0x2ca>
 8003b32:	4b8c      	ldr	r3, [pc, #560]	; (8003d64 <keyHandler+0x4bc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	2b0b      	cmp	r3, #11
 8003b3a:	d01a      	beq.n	8003b72 <keyHandler+0x2ca>
 8003b3c:	4b89      	ldr	r3, [pc, #548]	; (8003d64 <keyHandler+0x4bc>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2b0c      	cmp	r3, #12
 8003b44:	d015      	beq.n	8003b72 <keyHandler+0x2ca>
 8003b46:	4b87      	ldr	r3, [pc, #540]	; (8003d64 <keyHandler+0x4bc>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	2b0f      	cmp	r3, #15
 8003b4e:	d010      	beq.n	8003b72 <keyHandler+0x2ca>
 8003b50:	4b84      	ldr	r3, [pc, #528]	; (8003d64 <keyHandler+0x4bc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d00b      	beq.n	8003b72 <keyHandler+0x2ca>
 8003b5a:	4b82      	ldr	r3, [pc, #520]	; (8003d64 <keyHandler+0x4bc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	2b11      	cmp	r3, #17
 8003b62:	d006      	beq.n	8003b72 <keyHandler+0x2ca>
 8003b64:	4b7f      	ldr	r3, [pc, #508]	; (8003d64 <keyHandler+0x4bc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b6a:	4b7f      	ldr	r3, [pc, #508]	; (8003d68 <keyHandler+0x4c0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	dd15      	ble.n	8003b9e <keyHandler+0x2f6>
					setOn(&(currentNode->screen));
 8003b72:	4b7c      	ldr	r3, [pc, #496]	; (8003d64 <keyHandler+0x4bc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3324      	adds	r3, #36	; 0x24
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff f9db 	bl	8002f34 <setOn>
					ShowInfo(currentNode->screen);
 8003b7e:	4b79      	ldr	r3, [pc, #484]	; (8003d64 <keyHandler+0x4bc>)
 8003b80:	681c      	ldr	r4, [r3, #0]
 8003b82:	4668      	mov	r0, sp
 8003b84:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f006 fe81 	bl	800a894 <memcpy>
 8003b92:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b98:	f7fe ffdc 	bl	8002b54 <ShowInfo>
				}
				else if(currentNode->screen.id == 14){
					setThreshold(&(currentNode->screen), 0,1);
					ShowInfo(currentNode->screen);
				}
				break;
 8003b9c:	e284      	b.n	80040a8 <keyHandler+0x800>
				else if(currentNode->screen.id == 7 ){
 8003b9e:	4b71      	ldr	r3, [pc, #452]	; (8003d64 <keyHandler+0x4bc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2b07      	cmp	r3, #7
 8003ba6:	d117      	bne.n	8003bd8 <keyHandler+0x330>
					setThreshold(&(currentNode->screen), 0,0);
 8003ba8:	4b6e      	ldr	r3, [pc, #440]	; (8003d64 <keyHandler+0x4bc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3324      	adds	r3, #36	; 0x24
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff fb66 	bl	8003284 <setThreshold>
					ShowInfo(currentNode->screen);
 8003bb8:	4b6a      	ldr	r3, [pc, #424]	; (8003d64 <keyHandler+0x4bc>)
 8003bba:	681c      	ldr	r4, [r3, #0]
 8003bbc:	4668      	mov	r0, sp
 8003bbe:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	f006 fe64 	bl	800a894 <memcpy>
 8003bcc:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003bd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bd2:	f7fe ffbf 	bl	8002b54 <ShowInfo>
				break;
 8003bd6:	e267      	b.n	80040a8 <keyHandler+0x800>
				else if(currentNode->screen.id == 14){
 8003bd8:	4b62      	ldr	r3, [pc, #392]	; (8003d64 <keyHandler+0x4bc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	2b0e      	cmp	r3, #14
 8003be0:	f040 8262 	bne.w	80040a8 <keyHandler+0x800>
					setThreshold(&(currentNode->screen), 0,1);
 8003be4:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <keyHandler+0x4bc>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3324      	adds	r3, #36	; 0x24
 8003bea:	2201      	movs	r2, #1
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff fb48 	bl	8003284 <setThreshold>
					ShowInfo(currentNode->screen);
 8003bf4:	4b5b      	ldr	r3, [pc, #364]	; (8003d64 <keyHandler+0x4bc>)
 8003bf6:	681c      	ldr	r4, [r3, #0]
 8003bf8:	4668      	mov	r0, sp
 8003bfa:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c02:	4619      	mov	r1, r3
 8003c04:	f006 fe46 	bl	800a894 <memcpy>
 8003c08:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003c0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c0e:	f7fe ffa1 	bl	8002b54 <ShowInfo>
				break;
 8003c12:	e249      	b.n	80040a8 <keyHandler+0x800>
			case 6: // down key
				if(inMenu && CurrentMenuOption < MenuoptionCounts - 1) {
 8003c14:	4b55      	ldr	r3, [pc, #340]	; (8003d6c <keyHandler+0x4c4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d019      	beq.n	8003c50 <keyHandler+0x3a8>
 8003c1c:	4b54      	ldr	r3, [pc, #336]	; (8003d70 <keyHandler+0x4c8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	1e5a      	subs	r2, r3, #1
 8003c22:	4b54      	ldr	r3, [pc, #336]	; (8003d74 <keyHandler+0x4cc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	dd12      	ble.n	8003c50 <keyHandler+0x3a8>
					if(inMenu && CurrentMenuOption == 3)
 8003c2a:	4b50      	ldr	r3, [pc, #320]	; (8003d6c <keyHandler+0x4c4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d006      	beq.n	8003c40 <keyHandler+0x398>
 8003c32:	4b50      	ldr	r3, [pc, #320]	; (8003d74 <keyHandler+0x4cc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d102      	bne.n	8003c40 <keyHandler+0x398>
						page = 1;
 8003c3a:	4b4f      	ldr	r3, [pc, #316]	; (8003d78 <keyHandler+0x4d0>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
					CurrentMenuOption++;
 8003c40:	4b4c      	ldr	r3, [pc, #304]	; (8003d74 <keyHandler+0x4cc>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	4a4b      	ldr	r2, [pc, #300]	; (8003d74 <keyHandler+0x4cc>)
 8003c48:	6013      	str	r3, [r2, #0]
					changeOption(1);
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f7fe fffa 	bl	8002c44 <changeOption>
				}
				if(!inMenu && page < (currentNode->screen.optionCount-1) / 3){
 8003c50:	4b46      	ldr	r3, [pc, #280]	; (8003d6c <keyHandler+0x4c4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 8229 	bne.w	80040ac <keyHandler+0x804>
 8003c5a:	4b42      	ldr	r3, [pc, #264]	; (8003d64 <keyHandler+0x4bc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	3b01      	subs	r3, #1
 8003c62:	4a46      	ldr	r2, [pc, #280]	; (8003d7c <keyHandler+0x4d4>)
 8003c64:	fb82 1203 	smull	r1, r2, r2, r3
 8003c68:	17db      	asrs	r3, r3, #31
 8003c6a:	1ad2      	subs	r2, r2, r3
 8003c6c:	4b42      	ldr	r3, [pc, #264]	; (8003d78 <keyHandler+0x4d0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	f340 821b 	ble.w	80040ac <keyHandler+0x804>
					page++;
 8003c76:	4b40      	ldr	r3, [pc, #256]	; (8003d78 <keyHandler+0x4d0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	4a3e      	ldr	r2, [pc, #248]	; (8003d78 <keyHandler+0x4d0>)
 8003c7e:	6013      	str	r3, [r2, #0]
					ShowInfo(currentNode->screen);
 8003c80:	4b38      	ldr	r3, [pc, #224]	; (8003d64 <keyHandler+0x4bc>)
 8003c82:	681c      	ldr	r4, [r3, #0]
 8003c84:	4668      	mov	r0, sp
 8003c86:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f006 fe00 	bl	800a894 <memcpy>
 8003c94:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003c98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c9a:	f7fe ff5b 	bl	8002b54 <ShowInfo>

				}

				break;
 8003c9e:	e205      	b.n	80040ac <keyHandler+0x804>
			case 7: // right key

				if(currentNode->screen.id == 8 ||currentNode->screen.id == 9 || currentNode->screen.id == 10 || currentNode->screen.id == 11 || currentNode->screen.id == 12 || currentNode->screen.id == 15 || currentNode->screen.id == 16 || currentNode->screen.id == 17 ||currentNode->screen.id >lastPagesId){
 8003ca0:	4b30      	ldr	r3, [pc, #192]	; (8003d64 <keyHandler+0x4bc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d029      	beq.n	8003cfe <keyHandler+0x456>
 8003caa:	4b2e      	ldr	r3, [pc, #184]	; (8003d64 <keyHandler+0x4bc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	2b09      	cmp	r3, #9
 8003cb2:	d024      	beq.n	8003cfe <keyHandler+0x456>
 8003cb4:	4b2b      	ldr	r3, [pc, #172]	; (8003d64 <keyHandler+0x4bc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b0a      	cmp	r3, #10
 8003cbc:	d01f      	beq.n	8003cfe <keyHandler+0x456>
 8003cbe:	4b29      	ldr	r3, [pc, #164]	; (8003d64 <keyHandler+0x4bc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2b0b      	cmp	r3, #11
 8003cc6:	d01a      	beq.n	8003cfe <keyHandler+0x456>
 8003cc8:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <keyHandler+0x4bc>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d015      	beq.n	8003cfe <keyHandler+0x456>
 8003cd2:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <keyHandler+0x4bc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	2b0f      	cmp	r3, #15
 8003cda:	d010      	beq.n	8003cfe <keyHandler+0x456>
 8003cdc:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <keyHandler+0x4bc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	2b10      	cmp	r3, #16
 8003ce4:	d00b      	beq.n	8003cfe <keyHandler+0x456>
 8003ce6:	4b1f      	ldr	r3, [pc, #124]	; (8003d64 <keyHandler+0x4bc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2b11      	cmp	r3, #17
 8003cee:	d006      	beq.n	8003cfe <keyHandler+0x456>
 8003cf0:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <keyHandler+0x4bc>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf6:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <keyHandler+0x4c0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	dd15      	ble.n	8003d2a <keyHandler+0x482>
					setOn(&(currentNode->screen));
 8003cfe:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <keyHandler+0x4bc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3324      	adds	r3, #36	; 0x24
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff f915 	bl	8002f34 <setOn>
					ShowInfo(currentNode->screen);
 8003d0a:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <keyHandler+0x4bc>)
 8003d0c:	681c      	ldr	r4, [r3, #0]
 8003d0e:	4668      	mov	r0, sp
 8003d10:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f006 fdbb 	bl	800a894 <memcpy>
 8003d1e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003d22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d24:	f7fe ff16 	bl	8002b54 <ShowInfo>
				}
				else if(currentNode->screen.id == 14){
					setThreshold(&(currentNode->screen), 1,1);
					ShowInfo(currentNode->screen);
				}
				break;
 8003d28:	e1c2      	b.n	80040b0 <keyHandler+0x808>
				else if(currentNode->screen.id == 7){
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <keyHandler+0x4bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	2b07      	cmp	r3, #7
 8003d32:	d125      	bne.n	8003d80 <keyHandler+0x4d8>
					setThreshold(&(currentNode->screen), 1,0);
 8003d34:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <keyHandler+0x4bc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3324      	adds	r3, #36	; 0x24
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff faa0 	bl	8003284 <setThreshold>
					ShowInfo(currentNode->screen);
 8003d44:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <keyHandler+0x4bc>)
 8003d46:	681c      	ldr	r4, [r3, #0]
 8003d48:	4668      	mov	r0, sp
 8003d4a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d52:	4619      	mov	r1, r3
 8003d54:	f006 fd9e 	bl	800a894 <memcpy>
 8003d58:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003d5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d5e:	f7fe fef9 	bl	8002b54 <ShowInfo>
				break;
 8003d62:	e1a5      	b.n	80040b0 <keyHandler+0x808>
 8003d64:	200008cc 	.word	0x200008cc
 8003d68:	20000864 	.word	0x20000864
 8003d6c:	20000120 	.word	0x20000120
 8003d70:	2000084c 	.word	0x2000084c
 8003d74:	20000848 	.word	0x20000848
 8003d78:	20000850 	.word	0x20000850
 8003d7c:	55555556 	.word	0x55555556
				else if(currentNode->screen.id == 14){
 8003d80:	4bab      	ldr	r3, [pc, #684]	; (8004030 <keyHandler+0x788>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	2b0e      	cmp	r3, #14
 8003d88:	f040 8192 	bne.w	80040b0 <keyHandler+0x808>
					setThreshold(&(currentNode->screen), 1,1);
 8003d8c:	4ba8      	ldr	r3, [pc, #672]	; (8004030 <keyHandler+0x788>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3324      	adds	r3, #36	; 0x24
 8003d92:	2201      	movs	r2, #1
 8003d94:	2101      	movs	r1, #1
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fa74 	bl	8003284 <setThreshold>
					ShowInfo(currentNode->screen);
 8003d9c:	4ba4      	ldr	r3, [pc, #656]	; (8004030 <keyHandler+0x788>)
 8003d9e:	681c      	ldr	r4, [r3, #0]
 8003da0:	4668      	mov	r0, sp
 8003da2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003daa:	4619      	mov	r1, r3
 8003dac:	f006 fd72 	bl	800a894 <memcpy>
 8003db0:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003db4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003db6:	f7fe fecd 	bl	8002b54 <ShowInfo>
				break;
 8003dba:	e179      	b.n	80040b0 <keyHandler+0x808>
			case 8:
				if(currentNode->screen.id == 4){
 8003dbc:	4b9c      	ldr	r3, [pc, #624]	; (8004030 <keyHandler+0x788>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d117      	bne.n	8003df6 <keyHandler+0x54e>
					setLigthToggle(&(currentNode->screen),1,Lights);
 8003dc6:	4b9a      	ldr	r3, [pc, #616]	; (8004030 <keyHandler+0x788>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3324      	adds	r3, #36	; 0x24
 8003dcc:	4a99      	ldr	r2, [pc, #612]	; (8004034 <keyHandler+0x78c>)
 8003dce:	2101      	movs	r1, #1
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fabb 	bl	800334c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8003dd6:	4b96      	ldr	r3, [pc, #600]	; (8004030 <keyHandler+0x788>)
 8003dd8:	681c      	ldr	r4, [r3, #0]
 8003dda:	4668      	mov	r0, sp
 8003ddc:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003de4:	4619      	mov	r1, r3
 8003de6:	f006 fd55 	bl	800a894 <memcpy>
 8003dea:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003df0:	f7fe feb0 	bl	8002b54 <ShowInfo>
				}
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),1,newScenarioLights);
					ShowInfo(currentNode->screen);
				}
				break;
 8003df4:	e15e      	b.n	80040b4 <keyHandler+0x80c>
				else if(currentNode->screen.id == 18){
 8003df6:	4b8e      	ldr	r3, [pc, #568]	; (8004030 <keyHandler+0x788>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	2b12      	cmp	r3, #18
 8003dfe:	f040 8159 	bne.w	80040b4 <keyHandler+0x80c>
					setLigthToggle(&(currentNode->screen),1,newScenarioLights);
 8003e02:	4b8b      	ldr	r3, [pc, #556]	; (8004030 <keyHandler+0x788>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3324      	adds	r3, #36	; 0x24
 8003e08:	4a8b      	ldr	r2, [pc, #556]	; (8004038 <keyHandler+0x790>)
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fa9d 	bl	800334c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8003e12:	4b87      	ldr	r3, [pc, #540]	; (8004030 <keyHandler+0x788>)
 8003e14:	681c      	ldr	r4, [r3, #0]
 8003e16:	4668      	mov	r0, sp
 8003e18:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e20:	4619      	mov	r1, r3
 8003e22:	f006 fd37 	bl	800a894 <memcpy>
 8003e26:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e2c:	f7fe fe92 	bl	8002b54 <ShowInfo>
				break;
 8003e30:	e140      	b.n	80040b4 <keyHandler+0x80c>
			case 12:
				if(currentNode->screen.id == 4){
 8003e32:	4b7f      	ldr	r3, [pc, #508]	; (8004030 <keyHandler+0x788>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d117      	bne.n	8003e6c <keyHandler+0x5c4>
					setLigthToggle(&(currentNode->screen),2,Lights);
 8003e3c:	4b7c      	ldr	r3, [pc, #496]	; (8004030 <keyHandler+0x788>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3324      	adds	r3, #36	; 0x24
 8003e42:	4a7c      	ldr	r2, [pc, #496]	; (8004034 <keyHandler+0x78c>)
 8003e44:	2102      	movs	r1, #2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fa80 	bl	800334c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8003e4c:	4b78      	ldr	r3, [pc, #480]	; (8004030 <keyHandler+0x788>)
 8003e4e:	681c      	ldr	r4, [r3, #0]
 8003e50:	4668      	mov	r0, sp
 8003e52:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f006 fd1a 	bl	800a894 <memcpy>
 8003e60:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003e64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e66:	f7fe fe75 	bl	8002b54 <ShowInfo>
				}
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),2,newScenarioLights);
					ShowInfo(currentNode->screen);
				}
				break;
 8003e6a:	e125      	b.n	80040b8 <keyHandler+0x810>
				else if(currentNode->screen.id == 18){
 8003e6c:	4b70      	ldr	r3, [pc, #448]	; (8004030 <keyHandler+0x788>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	2b12      	cmp	r3, #18
 8003e74:	f040 8120 	bne.w	80040b8 <keyHandler+0x810>
					setLigthToggle(&(currentNode->screen),2,newScenarioLights);
 8003e78:	4b6d      	ldr	r3, [pc, #436]	; (8004030 <keyHandler+0x788>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3324      	adds	r3, #36	; 0x24
 8003e7e:	4a6e      	ldr	r2, [pc, #440]	; (8004038 <keyHandler+0x790>)
 8003e80:	2102      	movs	r1, #2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fa62 	bl	800334c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8003e88:	4b69      	ldr	r3, [pc, #420]	; (8004030 <keyHandler+0x788>)
 8003e8a:	681c      	ldr	r4, [r3, #0]
 8003e8c:	4668      	mov	r0, sp
 8003e8e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e96:	4619      	mov	r1, r3
 8003e98:	f006 fcfc 	bl	800a894 <memcpy>
 8003e9c:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003ea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ea2:	f7fe fe57 	bl	8002b54 <ShowInfo>
				break;
 8003ea6:	e107      	b.n	80040b8 <keyHandler+0x810>
			case 13: // back key
				if(currentNode != root){
 8003ea8:	4b61      	ldr	r3, [pc, #388]	; (8004030 <keyHandler+0x788>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b63      	ldr	r3, [pc, #396]	; (800403c <keyHandler+0x794>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	f000 8103 	beq.w	80040bc <keyHandler+0x814>
					clear();
 8003eb6:	f7fc fc4f 	bl	8000758 <clear>
					page = 0;
 8003eba:	4b61      	ldr	r3, [pc, #388]	; (8004040 <keyHandler+0x798>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
					MenuoptionCounts = currentNode->screen.optionCount;
 8003ec0:	4b5b      	ldr	r3, [pc, #364]	; (8004030 <keyHandler+0x788>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	4a5f      	ldr	r2, [pc, #380]	; (8004044 <keyHandler+0x79c>)
 8003ec8:	6013      	str	r3, [r2, #0]
					currentNode = currentNode->parent;
 8003eca:	4b59      	ldr	r3, [pc, #356]	; (8004030 <keyHandler+0x788>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	4a57      	ldr	r2, [pc, #348]	; (8004030 <keyHandler+0x788>)
 8003ed2:	6013      	str	r3, [r2, #0]
					if(currentNode->screen.isMenu){
 8003ed4:	4b56      	ldr	r3, [pc, #344]	; (8004030 <keyHandler+0x788>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d013      	beq.n	8003f06 <keyHandler+0x65e>
						CurrentMenuOption = 0;
 8003ede:	4b5a      	ldr	r3, [pc, #360]	; (8004048 <keyHandler+0x7a0>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
						MenuoptionCounts = currentNode->screen.optionCount;
 8003ee4:	4b52      	ldr	r3, [pc, #328]	; (8004030 <keyHandler+0x788>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	4a56      	ldr	r2, [pc, #344]	; (8004044 <keyHandler+0x79c>)
 8003eec:	6013      	str	r3, [r2, #0]
						SetMenu(currentNode->screen.menuItems);
 8003eee:	4b50      	ldr	r3, [pc, #320]	; (8004030 <keyHandler+0x788>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3330      	adds	r3, #48	; 0x30
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fe ff69 	bl	8002dcc <SetMenu>
						ShowMenu();
 8003efa:	f7fe fdb3 	bl	8002a64 <ShowMenu>
						inMenu = 1;
 8003efe:	4b53      	ldr	r3, [pc, #332]	; (800404c <keyHandler+0x7a4>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
						ShowInfo(currentNode->screen);
						inMenu = 0;
					}
				}

				break;
 8003f04:	e0da      	b.n	80040bc <keyHandler+0x814>
						ShowInfo(currentNode->screen);
 8003f06:	4b4a      	ldr	r3, [pc, #296]	; (8004030 <keyHandler+0x788>)
 8003f08:	681c      	ldr	r4, [r3, #0]
 8003f0a:	4668      	mov	r0, sp
 8003f0c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f14:	4619      	mov	r1, r3
 8003f16:	f006 fcbd 	bl	800a894 <memcpy>
 8003f1a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f20:	f7fe fe18 	bl	8002b54 <ShowInfo>
						inMenu = 0;
 8003f24:	4b49      	ldr	r3, [pc, #292]	; (800404c <keyHandler+0x7a4>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
				break;
 8003f2a:	e0c7      	b.n	80040bc <keyHandler+0x814>
			case 15: // okay key
				if(inMenu){
 8003f2c:	4b47      	ldr	r3, [pc, #284]	; (800404c <keyHandler+0x7a4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80c5 	beq.w	80040c0 <keyHandler+0x818>
					page = 0;
 8003f36:	4b42      	ldr	r3, [pc, #264]	; (8004040 <keyHandler+0x798>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
					nextCurrentNode();
 8003f3c:	f7ff fc60 	bl	8003800 <nextCurrentNode>
					MenuoptionCounts = currentNode->screen.optionCount;
 8003f40:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <keyHandler+0x788>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	4a3f      	ldr	r2, [pc, #252]	; (8004044 <keyHandler+0x79c>)
 8003f48:	6013      	str	r3, [r2, #0]
					if(currentNode->screen.isMenu){
 8003f4a:	4b39      	ldr	r3, [pc, #228]	; (8004030 <keyHandler+0x788>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00e      	beq.n	8003f72 <keyHandler+0x6ca>
						CurrentMenuOption = 0;
 8003f54:	4b3c      	ldr	r3, [pc, #240]	; (8004048 <keyHandler+0x7a0>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
						SetMenu(currentNode->screen.menuItems);
 8003f5a:	4b35      	ldr	r3, [pc, #212]	; (8004030 <keyHandler+0x788>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3330      	adds	r3, #48	; 0x30
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe ff33 	bl	8002dcc <SetMenu>
						ShowMenu();
 8003f66:	f7fe fd7d 	bl	8002a64 <ShowMenu>
						inMenu = 1;
 8003f6a:	4b38      	ldr	r3, [pc, #224]	; (800404c <keyHandler+0x7a4>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
							startStateLastTime = HAL_GetTick();
						}
					}

				}
				break;
 8003f70:	e0a6      	b.n	80040c0 <keyHandler+0x818>
						clear();
 8003f72:	f7fc fbf1 	bl	8000758 <clear>
						ShowInfo(currentNode->screen);
 8003f76:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <keyHandler+0x788>)
 8003f78:	681c      	ldr	r4, [r3, #0]
 8003f7a:	4668      	mov	r0, sp
 8003f7c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f84:	4619      	mov	r1, r3
 8003f86:	f006 fc85 	bl	800a894 <memcpy>
 8003f8a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003f8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f90:	f7fe fde0 	bl	8002b54 <ShowInfo>
						inMenu = 0;
 8003f94:	4b2d      	ldr	r3, [pc, #180]	; (800404c <keyHandler+0x7a4>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
						if(currentNode->screen.id == -1){
 8003f9a:	4b25      	ldr	r3, [pc, #148]	; (8004030 <keyHandler+0x788>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	f040 808c 	bne.w	80040c0 <keyHandler+0x818>
							startState = 3;
 8003fa8:	4b29      	ldr	r3, [pc, #164]	; (8004050 <keyHandler+0x7a8>)
 8003faa:	2203      	movs	r2, #3
 8003fac:	601a      	str	r2, [r3, #0]
							startStateLastTime = HAL_GetTick();
 8003fae:	f000 fe11 	bl	8004bd4 <HAL_GetTick>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4b27      	ldr	r3, [pc, #156]	; (8004054 <keyHandler+0x7ac>)
 8003fb8:	601a      	str	r2, [r3, #0]
				break;
 8003fba:	e081      	b.n	80040c0 <keyHandler+0x818>
			case 16:
				if(currentNode->screen.id == 4){
 8003fbc:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <keyHandler+0x788>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d117      	bne.n	8003ff6 <keyHandler+0x74e>
					setLigthToggle(&(currentNode->screen),3,Lights);
 8003fc6:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <keyHandler+0x788>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3324      	adds	r3, #36	; 0x24
 8003fcc:	4a19      	ldr	r2, [pc, #100]	; (8004034 <keyHandler+0x78c>)
 8003fce:	2103      	movs	r1, #3
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff f9bb 	bl	800334c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8003fd6:	4b16      	ldr	r3, [pc, #88]	; (8004030 <keyHandler+0x788>)
 8003fd8:	681c      	ldr	r4, [r3, #0]
 8003fda:	4668      	mov	r0, sp
 8003fdc:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f006 fc55 	bl	800a894 <memcpy>
 8003fea:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003fee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ff0:	f7fe fdb0 	bl	8002b54 <ShowInfo>
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),3,newScenarioLights);
					ShowInfo(currentNode->screen);
				}

			break;
 8003ff4:	e066      	b.n	80040c4 <keyHandler+0x81c>
				else if(currentNode->screen.id == 18){
 8003ff6:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <keyHandler+0x788>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	2b12      	cmp	r3, #18
 8003ffe:	d161      	bne.n	80040c4 <keyHandler+0x81c>
					setLigthToggle(&(currentNode->screen),3,newScenarioLights);
 8004000:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <keyHandler+0x788>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3324      	adds	r3, #36	; 0x24
 8004006:	4a0c      	ldr	r2, [pc, #48]	; (8004038 <keyHandler+0x790>)
 8004008:	2103      	movs	r1, #3
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff f99e 	bl	800334c <setLigthToggle>
					ShowInfo(currentNode->screen);
 8004010:	4b07      	ldr	r3, [pc, #28]	; (8004030 <keyHandler+0x788>)
 8004012:	681c      	ldr	r4, [r3, #0]
 8004014:	4668      	mov	r0, sp
 8004016:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800401a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800401e:	4619      	mov	r1, r3
 8004020:	f006 fc38 	bl	800a894 <memcpy>
 8004024:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800402a:	f7fe fd93 	bl	8002b54 <ShowInfo>
			break;
 800402e:	e049      	b.n	80040c4 <keyHandler+0x81c>
 8004030:	200008cc 	.word	0x200008cc
 8004034:	20000788 	.word	0x20000788
 8004038:	20000830 	.word	0x20000830
 800403c:	20000878 	.word	0x20000878
 8004040:	20000850 	.word	0x20000850
 8004044:	2000084c 	.word	0x2000084c
 8004048:	20000848 	.word	0x20000848
 800404c:	20000120 	.word	0x20000120
 8004050:	20000868 	.word	0x20000868
 8004054:	2000086c 	.word	0x2000086c

		}
	}else if(startState == 0 && key == 16){ // blue push button action
 8004058:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <keyHandler+0x828>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d132      	bne.n	80040c6 <keyHandler+0x81e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b10      	cmp	r3, #16
 8004064:	d12f      	bne.n	80040c6 <keyHandler+0x81e>
		setCursor(0,0);
 8004066:	2100      	movs	r1, #0
 8004068:	2000      	movs	r0, #0
 800406a:	f7fc fb7f 	bl	800076c <setCursor>
		if(strlen(startMassage) > 0)
 800406e:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <keyHandler+0x82c>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <keyHandler+0x7d6>
			print(startMassage);
 8004076:	4817      	ldr	r0, [pc, #92]	; (80040d4 <keyHandler+0x82c>)
 8004078:	f7fc fbd6 	bl	8000828 <print>
 800407c:	e002      	b.n	8004084 <keyHandler+0x7dc>
		else
			print("WELLCOME       ");
 800407e:	4816      	ldr	r0, [pc, #88]	; (80040d8 <keyHandler+0x830>)
 8004080:	f7fc fbd2 	bl	8000828 <print>
		display();
 8004084:	f7fc fbba 	bl	80007fc <display>
		startState = 1;
 8004088:	4b11      	ldr	r3, [pc, #68]	; (80040d0 <keyHandler+0x828>)
 800408a:	2201      	movs	r2, #1
 800408c:	601a      	str	r2, [r3, #0]
		startStateLastTime = HAL_GetTick();
 800408e:	f000 fda1 	bl	8004bd4 <HAL_GetTick>
 8004092:	4603      	mov	r3, r0
 8004094:	461a      	mov	r2, r3
 8004096:	4b11      	ldr	r3, [pc, #68]	; (80040dc <keyHandler+0x834>)
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e014      	b.n	80040c6 <keyHandler+0x81e>
		if(HAL_GetTick()- lastPress<300 ) return;
 800409c:	bf00      	nop
 800409e:	e012      	b.n	80040c6 <keyHandler+0x81e>
				break;
 80040a0:	bf00      	nop
 80040a2:	e010      	b.n	80040c6 <keyHandler+0x81e>
				break;
 80040a4:	bf00      	nop
 80040a6:	e00e      	b.n	80040c6 <keyHandler+0x81e>
				break;
 80040a8:	bf00      	nop
 80040aa:	e00c      	b.n	80040c6 <keyHandler+0x81e>
				break;
 80040ac:	bf00      	nop
 80040ae:	e00a      	b.n	80040c6 <keyHandler+0x81e>
				break;
 80040b0:	bf00      	nop
 80040b2:	e008      	b.n	80040c6 <keyHandler+0x81e>
				break;
 80040b4:	bf00      	nop
 80040b6:	e006      	b.n	80040c6 <keyHandler+0x81e>
				break;
 80040b8:	bf00      	nop
 80040ba:	e004      	b.n	80040c6 <keyHandler+0x81e>
				break;
 80040bc:	bf00      	nop
 80040be:	e002      	b.n	80040c6 <keyHandler+0x81e>
				break;
 80040c0:	bf00      	nop
 80040c2:	e000      	b.n	80040c6 <keyHandler+0x81e>
			break;
 80040c4:	bf00      	nop
	}

}
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040ce:	bf00      	nop
 80040d0:	20000868 	.word	0x20000868
 80040d4:	2000081c 	.word	0x2000081c
 80040d8:	0800b93c 	.word	0x0800b93c
 80040dc:	2000086c 	.word	0x2000086c

080040e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040e4:	e7fe      	b.n	80040e4 <NMI_Handler+0x4>

080040e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ea:	e7fe      	b.n	80040ea <HardFault_Handler+0x4>

080040ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040f0:	e7fe      	b.n	80040f0 <MemManage_Handler+0x4>

080040f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040f2:	b480      	push	{r7}
 80040f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040f6:	e7fe      	b.n	80040f6 <BusFault_Handler+0x4>

080040f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040fc:	e7fe      	b.n	80040fc <UsageFault_Handler+0x4>

080040fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040fe:	b480      	push	{r7}
 8004100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004102:	bf00      	nop
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800411a:	b480      	push	{r7}
 800411c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800411e:	bf00      	nop
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800412c:	f000 fd3e 	bl	8004bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004130:	bf00      	nop
 8004132:	bd80      	pop	{r7, pc}

08004134 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if(HAL_GetTick() - lastPress >200){
 800413c:	f000 fd4a 	bl	8004bd4 <HAL_GetTick>
 8004140:	4603      	mov	r3, r0
 8004142:	2200      	movs	r2, #0
 8004144:	4698      	mov	r8, r3
 8004146:	4691      	mov	r9, r2
 8004148:	4b44      	ldr	r3, [pc, #272]	; (800425c <EXTI0_IRQHandler+0x128>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	ebb8 0402 	subs.w	r4, r8, r2
 8004152:	eb69 0503 	sbc.w	r5, r9, r3
 8004156:	2cc9      	cmp	r4, #201	; 0xc9
 8004158:	f175 0300 	sbcs.w	r3, r5, #0
 800415c:	d375      	bcc.n	800424a <EXTI0_IRQHandler+0x116>

				col =0;
 800415e:	4b40      	ldr	r3, [pc, #256]	; (8004260 <EXTI0_IRQHandler+0x12c>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
				for (int i = 0 ; i < 4 ; i++ ){
 8004164:	2300      	movs	r3, #0
 8004166:	607b      	str	r3, [r7, #4]
 8004168:	e05c      	b.n	8004224 <EXTI0_IRQHandler+0xf0>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,GPIO_PIN_RESET);
 800416a:	2200      	movs	r2, #0
 800416c:	210f      	movs	r1, #15
 800416e:	483d      	ldr	r0, [pc, #244]	; (8004264 <EXTI0_IRQHandler+0x130>)
 8004170:	f002 fba6 	bl	80068c0 <HAL_GPIO_WritePin>
					switch (i) {
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b03      	cmp	r3, #3
 8004178:	d851      	bhi.n	800421e <EXTI0_IRQHandler+0xea>
 800417a:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <EXTI0_IRQHandler+0x4c>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	08004191 	.word	0x08004191
 8004184:	080041b1 	.word	0x080041b1
 8004188:	080041d1 	.word	0x080041d1
 800418c:	080041f1 	.word	0x080041f1
						case 0:
							   HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,GPIO_PIN_SET);
 8004190:	2201      	movs	r2, #1
 8004192:	2101      	movs	r1, #1
 8004194:	4833      	ldr	r0, [pc, #204]	; (8004264 <EXTI0_IRQHandler+0x130>)
 8004196:	f002 fb93 	bl	80068c0 <HAL_GPIO_WritePin>
							if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 0 ;
 800419a:	2101      	movs	r1, #1
 800419c:	4832      	ldr	r0, [pc, #200]	; (8004268 <EXTI0_IRQHandler+0x134>)
 800419e:	f002 fb77 	bl	8006890 <HAL_GPIO_ReadPin>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d033      	beq.n	8004210 <EXTI0_IRQHandler+0xdc>
 80041a8:	4b30      	ldr	r3, [pc, #192]	; (800426c <EXTI0_IRQHandler+0x138>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
							break;
 80041ae:	e02f      	b.n	8004210 <EXTI0_IRQHandler+0xdc>
						case 1:
							HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,GPIO_PIN_SET);
 80041b0:	2201      	movs	r2, #1
 80041b2:	2102      	movs	r1, #2
 80041b4:	482b      	ldr	r0, [pc, #172]	; (8004264 <EXTI0_IRQHandler+0x130>)
 80041b6:	f002 fb83 	bl	80068c0 <HAL_GPIO_WritePin>
							if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 1 ;
 80041ba:	2101      	movs	r1, #1
 80041bc:	482a      	ldr	r0, [pc, #168]	; (8004268 <EXTI0_IRQHandler+0x134>)
 80041be:	f002 fb67 	bl	8006890 <HAL_GPIO_ReadPin>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d025      	beq.n	8004214 <EXTI0_IRQHandler+0xe0>
 80041c8:	4b28      	ldr	r3, [pc, #160]	; (800426c <EXTI0_IRQHandler+0x138>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
							break;
 80041ce:	e021      	b.n	8004214 <EXTI0_IRQHandler+0xe0>
						case 2:
							HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_SET);
 80041d0:	2201      	movs	r2, #1
 80041d2:	2104      	movs	r1, #4
 80041d4:	4823      	ldr	r0, [pc, #140]	; (8004264 <EXTI0_IRQHandler+0x130>)
 80041d6:	f002 fb73 	bl	80068c0 <HAL_GPIO_WritePin>
							if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 2 ;
 80041da:	2101      	movs	r1, #1
 80041dc:	4822      	ldr	r0, [pc, #136]	; (8004268 <EXTI0_IRQHandler+0x134>)
 80041de:	f002 fb57 	bl	8006890 <HAL_GPIO_ReadPin>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d017      	beq.n	8004218 <EXTI0_IRQHandler+0xe4>
 80041e8:	4b20      	ldr	r3, [pc, #128]	; (800426c <EXTI0_IRQHandler+0x138>)
 80041ea:	2202      	movs	r2, #2
 80041ec:	601a      	str	r2, [r3, #0]
							break;
 80041ee:	e013      	b.n	8004218 <EXTI0_IRQHandler+0xe4>
						case 3:
							HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,GPIO_PIN_SET);
 80041f0:	2201      	movs	r2, #1
 80041f2:	2108      	movs	r1, #8
 80041f4:	481b      	ldr	r0, [pc, #108]	; (8004264 <EXTI0_IRQHandler+0x130>)
 80041f6:	f002 fb63 	bl	80068c0 <HAL_GPIO_WritePin>
							if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 3 ;
 80041fa:	2101      	movs	r1, #1
 80041fc:	481a      	ldr	r0, [pc, #104]	; (8004268 <EXTI0_IRQHandler+0x134>)
 80041fe:	f002 fb47 	bl	8006890 <HAL_GPIO_ReadPin>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <EXTI0_IRQHandler+0xe8>
 8004208:	4b18      	ldr	r3, [pc, #96]	; (800426c <EXTI0_IRQHandler+0x138>)
 800420a:	2203      	movs	r2, #3
 800420c:	601a      	str	r2, [r3, #0]
							break;
 800420e:	e005      	b.n	800421c <EXTI0_IRQHandler+0xe8>
							break;
 8004210:	bf00      	nop
 8004212:	e004      	b.n	800421e <EXTI0_IRQHandler+0xea>
							break;
 8004214:	bf00      	nop
 8004216:	e002      	b.n	800421e <EXTI0_IRQHandler+0xea>
							break;
 8004218:	bf00      	nop
 800421a:	e000      	b.n	800421e <EXTI0_IRQHandler+0xea>
							break;
 800421c:	bf00      	nop
				for (int i = 0 ; i < 4 ; i++ ){
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3301      	adds	r3, #1
 8004222:	607b      	str	r3, [r7, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b03      	cmp	r3, #3
 8004228:	dd9f      	ble.n	800416a <EXTI0_IRQHandler+0x36>

					}
				}

				keyHandler();
 800422a:	f7ff fb3d 	bl	80038a8 <keyHandler>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,GPIO_PIN_SET);
 800422e:	2201      	movs	r2, #1
 8004230:	210f      	movs	r1, #15
 8004232:	480c      	ldr	r0, [pc, #48]	; (8004264 <EXTI0_IRQHandler+0x130>)
 8004234:	f002 fb44 	bl	80068c0 <HAL_GPIO_WritePin>

				lastPress = HAL_GetTick();
 8004238:	f000 fccc 	bl	8004bd4 <HAL_GetTick>
 800423c:	4603      	mov	r3, r0
 800423e:	2200      	movs	r2, #0
 8004240:	469a      	mov	sl, r3
 8004242:	4693      	mov	fp, r2
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <EXTI0_IRQHandler+0x128>)
 8004246:	e9c3 ab00 	strd	sl, fp, [r3]

			}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(keyPad_Pin);
 800424a:	2001      	movs	r0, #1
 800424c:	f002 fb50 	bl	80068f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004250:	bf00      	nop
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800425a:	bf00      	nop
 800425c:	20000840 	.word	0x20000840
 8004260:	20000028 	.word	0x20000028
 8004264:	48000c00 	.word	0x48000c00
 8004268:	48000800 	.word	0x48000800
 800426c:	2000002c 	.word	0x2000002c

08004270 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
    if (HAL_GetTick() - lastPress > 200) {
 8004278:	f000 fcac 	bl	8004bd4 <HAL_GetTick>
 800427c:	4603      	mov	r3, r0
 800427e:	2200      	movs	r2, #0
 8004280:	4698      	mov	r8, r3
 8004282:	4691      	mov	r9, r2
 8004284:	4b48      	ldr	r3, [pc, #288]	; (80043a8 <EXTI1_IRQHandler+0x138>)
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	ebb8 0402 	subs.w	r4, r8, r2
 800428e:	eb69 0503 	sbc.w	r5, r9, r3
 8004292:	2cc9      	cmp	r4, #201	; 0xc9
 8004294:	f175 0300 	sbcs.w	r3, r5, #0
 8004298:	d375      	bcc.n	8004386 <EXTI1_IRQHandler+0x116>

        col = 1;
 800429a:	4b44      	ldr	r3, [pc, #272]	; (80043ac <EXTI1_IRQHandler+0x13c>)
 800429c:	2201      	movs	r2, #1
 800429e:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < 4; i++) {
 80042a0:	2300      	movs	r3, #0
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	e05c      	b.n	8004360 <EXTI1_IRQHandler+0xf0>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 80042a6:	2200      	movs	r2, #0
 80042a8:	210f      	movs	r1, #15
 80042aa:	4841      	ldr	r0, [pc, #260]	; (80043b0 <EXTI1_IRQHandler+0x140>)
 80042ac:	f002 fb08 	bl	80068c0 <HAL_GPIO_WritePin>
            switch (i) {
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d851      	bhi.n	800435a <EXTI1_IRQHandler+0xea>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <EXTI1_IRQHandler+0x4c>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080042cd 	.word	0x080042cd
 80042c0:	080042ed 	.word	0x080042ed
 80042c4:	0800430d 	.word	0x0800430d
 80042c8:	0800432d 	.word	0x0800432d
                case 0:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 80042cc:	2201      	movs	r2, #1
 80042ce:	2101      	movs	r1, #1
 80042d0:	4837      	ldr	r0, [pc, #220]	; (80043b0 <EXTI1_IRQHandler+0x140>)
 80042d2:	f002 faf5 	bl	80068c0 <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 0;
 80042d6:	2102      	movs	r1, #2
 80042d8:	4836      	ldr	r0, [pc, #216]	; (80043b4 <EXTI1_IRQHandler+0x144>)
 80042da:	f002 fad9 	bl	8006890 <HAL_GPIO_ReadPin>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d033      	beq.n	800434c <EXTI1_IRQHandler+0xdc>
 80042e4:	4b34      	ldr	r3, [pc, #208]	; (80043b8 <EXTI1_IRQHandler+0x148>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
                    break;
 80042ea:	e02f      	b.n	800434c <EXTI1_IRQHandler+0xdc>
                case 1:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 80042ec:	2201      	movs	r2, #1
 80042ee:	2102      	movs	r1, #2
 80042f0:	482f      	ldr	r0, [pc, #188]	; (80043b0 <EXTI1_IRQHandler+0x140>)
 80042f2:	f002 fae5 	bl	80068c0 <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 1;
 80042f6:	2102      	movs	r1, #2
 80042f8:	482e      	ldr	r0, [pc, #184]	; (80043b4 <EXTI1_IRQHandler+0x144>)
 80042fa:	f002 fac9 	bl	8006890 <HAL_GPIO_ReadPin>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d025      	beq.n	8004350 <EXTI1_IRQHandler+0xe0>
 8004304:	4b2c      	ldr	r3, [pc, #176]	; (80043b8 <EXTI1_IRQHandler+0x148>)
 8004306:	2201      	movs	r2, #1
 8004308:	601a      	str	r2, [r3, #0]
                    break;
 800430a:	e021      	b.n	8004350 <EXTI1_IRQHandler+0xe0>
                case 2:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800430c:	2201      	movs	r2, #1
 800430e:	2104      	movs	r1, #4
 8004310:	4827      	ldr	r0, [pc, #156]	; (80043b0 <EXTI1_IRQHandler+0x140>)
 8004312:	f002 fad5 	bl	80068c0 <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 2;
 8004316:	2102      	movs	r1, #2
 8004318:	4826      	ldr	r0, [pc, #152]	; (80043b4 <EXTI1_IRQHandler+0x144>)
 800431a:	f002 fab9 	bl	8006890 <HAL_GPIO_ReadPin>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d017      	beq.n	8004354 <EXTI1_IRQHandler+0xe4>
 8004324:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <EXTI1_IRQHandler+0x148>)
 8004326:	2202      	movs	r2, #2
 8004328:	601a      	str	r2, [r3, #0]
                    break;
 800432a:	e013      	b.n	8004354 <EXTI1_IRQHandler+0xe4>
                case 3:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 800432c:	2201      	movs	r2, #1
 800432e:	2108      	movs	r1, #8
 8004330:	481f      	ldr	r0, [pc, #124]	; (80043b0 <EXTI1_IRQHandler+0x140>)
 8004332:	f002 fac5 	bl	80068c0 <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 3;
 8004336:	2102      	movs	r1, #2
 8004338:	481e      	ldr	r0, [pc, #120]	; (80043b4 <EXTI1_IRQHandler+0x144>)
 800433a:	f002 faa9 	bl	8006890 <HAL_GPIO_ReadPin>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <EXTI1_IRQHandler+0xe8>
 8004344:	4b1c      	ldr	r3, [pc, #112]	; (80043b8 <EXTI1_IRQHandler+0x148>)
 8004346:	2203      	movs	r2, #3
 8004348:	601a      	str	r2, [r3, #0]
                    break;
 800434a:	e005      	b.n	8004358 <EXTI1_IRQHandler+0xe8>
                    break;
 800434c:	bf00      	nop
 800434e:	e004      	b.n	800435a <EXTI1_IRQHandler+0xea>
                    break;
 8004350:	bf00      	nop
 8004352:	e002      	b.n	800435a <EXTI1_IRQHandler+0xea>
                    break;
 8004354:	bf00      	nop
 8004356:	e000      	b.n	800435a <EXTI1_IRQHandler+0xea>
                    break;
 8004358:	bf00      	nop
        for (int i = 0; i < 4; i++) {
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3301      	adds	r3, #1
 800435e:	607b      	str	r3, [r7, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b03      	cmp	r3, #3
 8004364:	dd9f      	ble.n	80042a6 <EXTI1_IRQHandler+0x36>

            }
        }

        keyHandler();
 8004366:	f7ff fa9f 	bl	80038a8 <keyHandler>
        lastPress = HAL_GetTick();
 800436a:	f000 fc33 	bl	8004bd4 <HAL_GetTick>
 800436e:	4603      	mov	r3, r0
 8004370:	2200      	movs	r2, #0
 8004372:	469a      	mov	sl, r3
 8004374:	4693      	mov	fp, r2
 8004376:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <EXTI1_IRQHandler+0x138>)
 8004378:	e9c3 ab00 	strd	sl, fp, [r3]
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 800437c:	2201      	movs	r2, #1
 800437e:	210f      	movs	r1, #15
 8004380:	480b      	ldr	r0, [pc, #44]	; (80043b0 <EXTI1_IRQHandler+0x140>)
 8004382:	f002 fa9d 	bl	80068c0 <HAL_GPIO_WritePin>
    }
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1));
 8004386:	bf00      	nop
 8004388:	2102      	movs	r1, #2
 800438a:	480a      	ldr	r0, [pc, #40]	; (80043b4 <EXTI1_IRQHandler+0x144>)
 800438c:	f002 fa80 	bl	8006890 <HAL_GPIO_ReadPin>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f8      	bne.n	8004388 <EXTI1_IRQHandler+0x118>

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004396:	2002      	movs	r0, #2
 8004398:	f002 faaa 	bl	80068f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800439c:	bf00      	nop
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a6:	bf00      	nop
 80043a8:	20000840 	.word	0x20000840
 80043ac:	20000028 	.word	0x20000028
 80043b0:	48000c00 	.word	0x48000c00
 80043b4:	48000800 	.word	0x48000800
 80043b8:	2000002c 	.word	0x2000002c

080043bc <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80043bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */
		if (HAL_GetTick() - lastPress > 200) {
 80043c4:	f000 fc06 	bl	8004bd4 <HAL_GetTick>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2200      	movs	r2, #0
 80043cc:	4698      	mov	r8, r3
 80043ce:	4691      	mov	r9, r2
 80043d0:	4b48      	ldr	r3, [pc, #288]	; (80044f4 <EXTI2_TSC_IRQHandler+0x138>)
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	ebb8 0402 	subs.w	r4, r8, r2
 80043da:	eb69 0503 	sbc.w	r5, r9, r3
 80043de:	2cc9      	cmp	r4, #201	; 0xc9
 80043e0:	f175 0300 	sbcs.w	r3, r5, #0
 80043e4:	d375      	bcc.n	80044d2 <EXTI2_TSC_IRQHandler+0x116>

			col = 2;
 80043e6:	4b44      	ldr	r3, [pc, #272]	; (80044f8 <EXTI2_TSC_IRQHandler+0x13c>)
 80043e8:	2202      	movs	r2, #2
 80043ea:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 80043ec:	2300      	movs	r3, #0
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	e05c      	b.n	80044ac <EXTI2_TSC_IRQHandler+0xf0>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 80043f2:	2200      	movs	r2, #0
 80043f4:	210f      	movs	r1, #15
 80043f6:	4841      	ldr	r0, [pc, #260]	; (80044fc <EXTI2_TSC_IRQHandler+0x140>)
 80043f8:	f002 fa62 	bl	80068c0 <HAL_GPIO_WritePin>
				switch (i) {
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d851      	bhi.n	80044a6 <EXTI2_TSC_IRQHandler+0xea>
 8004402:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <EXTI2_TSC_IRQHandler+0x4c>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	08004419 	.word	0x08004419
 800440c:	08004439 	.word	0x08004439
 8004410:	08004459 	.word	0x08004459
 8004414:	08004479 	.word	0x08004479
					case 0:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8004418:	2201      	movs	r2, #1
 800441a:	2101      	movs	r1, #1
 800441c:	4837      	ldr	r0, [pc, #220]	; (80044fc <EXTI2_TSC_IRQHandler+0x140>)
 800441e:	f002 fa4f 	bl	80068c0 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 0;
 8004422:	2104      	movs	r1, #4
 8004424:	4836      	ldr	r0, [pc, #216]	; (8004500 <EXTI2_TSC_IRQHandler+0x144>)
 8004426:	f002 fa33 	bl	8006890 <HAL_GPIO_ReadPin>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d033      	beq.n	8004498 <EXTI2_TSC_IRQHandler+0xdc>
 8004430:	4b34      	ldr	r3, [pc, #208]	; (8004504 <EXTI2_TSC_IRQHandler+0x148>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
						break;
 8004436:	e02f      	b.n	8004498 <EXTI2_TSC_IRQHandler+0xdc>
					case 1:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8004438:	2201      	movs	r2, #1
 800443a:	2102      	movs	r1, #2
 800443c:	482f      	ldr	r0, [pc, #188]	; (80044fc <EXTI2_TSC_IRQHandler+0x140>)
 800443e:	f002 fa3f 	bl	80068c0 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 1;
 8004442:	2104      	movs	r1, #4
 8004444:	482e      	ldr	r0, [pc, #184]	; (8004500 <EXTI2_TSC_IRQHandler+0x144>)
 8004446:	f002 fa23 	bl	8006890 <HAL_GPIO_ReadPin>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d025      	beq.n	800449c <EXTI2_TSC_IRQHandler+0xe0>
 8004450:	4b2c      	ldr	r3, [pc, #176]	; (8004504 <EXTI2_TSC_IRQHandler+0x148>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]
						break;
 8004456:	e021      	b.n	800449c <EXTI2_TSC_IRQHandler+0xe0>
					case 2:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8004458:	2201      	movs	r2, #1
 800445a:	2104      	movs	r1, #4
 800445c:	4827      	ldr	r0, [pc, #156]	; (80044fc <EXTI2_TSC_IRQHandler+0x140>)
 800445e:	f002 fa2f 	bl	80068c0 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 2;
 8004462:	2104      	movs	r1, #4
 8004464:	4826      	ldr	r0, [pc, #152]	; (8004500 <EXTI2_TSC_IRQHandler+0x144>)
 8004466:	f002 fa13 	bl	8006890 <HAL_GPIO_ReadPin>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d017      	beq.n	80044a0 <EXTI2_TSC_IRQHandler+0xe4>
 8004470:	4b24      	ldr	r3, [pc, #144]	; (8004504 <EXTI2_TSC_IRQHandler+0x148>)
 8004472:	2202      	movs	r2, #2
 8004474:	601a      	str	r2, [r3, #0]
						break;
 8004476:	e013      	b.n	80044a0 <EXTI2_TSC_IRQHandler+0xe4>
					case 3:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8004478:	2201      	movs	r2, #1
 800447a:	2108      	movs	r1, #8
 800447c:	481f      	ldr	r0, [pc, #124]	; (80044fc <EXTI2_TSC_IRQHandler+0x140>)
 800447e:	f002 fa1f 	bl	80068c0 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 3;
 8004482:	2104      	movs	r1, #4
 8004484:	481e      	ldr	r0, [pc, #120]	; (8004500 <EXTI2_TSC_IRQHandler+0x144>)
 8004486:	f002 fa03 	bl	8006890 <HAL_GPIO_ReadPin>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d009      	beq.n	80044a4 <EXTI2_TSC_IRQHandler+0xe8>
 8004490:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <EXTI2_TSC_IRQHandler+0x148>)
 8004492:	2203      	movs	r2, #3
 8004494:	601a      	str	r2, [r3, #0]
						break;
 8004496:	e005      	b.n	80044a4 <EXTI2_TSC_IRQHandler+0xe8>
						break;
 8004498:	bf00      	nop
 800449a:	e004      	b.n	80044a6 <EXTI2_TSC_IRQHandler+0xea>
						break;
 800449c:	bf00      	nop
 800449e:	e002      	b.n	80044a6 <EXTI2_TSC_IRQHandler+0xea>
						break;
 80044a0:	bf00      	nop
 80044a2:	e000      	b.n	80044a6 <EXTI2_TSC_IRQHandler+0xea>
						break;
 80044a4:	bf00      	nop
			for (int i = 0; i < 4; i++) {
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3301      	adds	r3, #1
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	dd9f      	ble.n	80043f2 <EXTI2_TSC_IRQHandler+0x36>

				}
			}

			keyHandler();
 80044b2:	f7ff f9f9 	bl	80038a8 <keyHandler>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 80044b6:	2201      	movs	r2, #1
 80044b8:	210f      	movs	r1, #15
 80044ba:	4810      	ldr	r0, [pc, #64]	; (80044fc <EXTI2_TSC_IRQHandler+0x140>)
 80044bc:	f002 fa00 	bl	80068c0 <HAL_GPIO_WritePin>

			lastPress = HAL_GetTick();
 80044c0:	f000 fb88 	bl	8004bd4 <HAL_GetTick>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2200      	movs	r2, #0
 80044c8:	469a      	mov	sl, r3
 80044ca:	4693      	mov	fp, r2
 80044cc:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <EXTI2_TSC_IRQHandler+0x138>)
 80044ce:	e9c3 ab00 	strd	sl, fp, [r3]

		}
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2));
 80044d2:	bf00      	nop
 80044d4:	2104      	movs	r1, #4
 80044d6:	480a      	ldr	r0, [pc, #40]	; (8004500 <EXTI2_TSC_IRQHandler+0x144>)
 80044d8:	f002 f9da 	bl	8006890 <HAL_GPIO_ReadPin>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f8      	bne.n	80044d4 <EXTI2_TSC_IRQHandler+0x118>

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80044e2:	2004      	movs	r0, #4
 80044e4:	f002 fa04 	bl	80068f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f2:	bf00      	nop
 80044f4:	20000840 	.word	0x20000840
 80044f8:	20000028 	.word	0x20000028
 80044fc:	48000c00 	.word	0x48000c00
 8004500:	48000800 	.word	0x48000800
 8004504:	2000002c 	.word	0x2000002c

08004508 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
        if (HAL_GetTick() - lastPress > 200) {
 8004510:	f000 fb60 	bl	8004bd4 <HAL_GetTick>
 8004514:	4603      	mov	r3, r0
 8004516:	2200      	movs	r2, #0
 8004518:	4698      	mov	r8, r3
 800451a:	4691      	mov	r9, r2
 800451c:	4b48      	ldr	r3, [pc, #288]	; (8004640 <EXTI3_IRQHandler+0x138>)
 800451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004522:	ebb8 0402 	subs.w	r4, r8, r2
 8004526:	eb69 0503 	sbc.w	r5, r9, r3
 800452a:	2cc9      	cmp	r4, #201	; 0xc9
 800452c:	f175 0300 	sbcs.w	r3, r5, #0
 8004530:	d375      	bcc.n	800461e <EXTI3_IRQHandler+0x116>

            col = 3;
 8004532:	4b44      	ldr	r3, [pc, #272]	; (8004644 <EXTI3_IRQHandler+0x13c>)
 8004534:	2203      	movs	r2, #3
 8004536:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 8004538:	2300      	movs	r3, #0
 800453a:	607b      	str	r3, [r7, #4]
 800453c:	e05c      	b.n	80045f8 <EXTI3_IRQHandler+0xf0>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 800453e:	2200      	movs	r2, #0
 8004540:	210f      	movs	r1, #15
 8004542:	4841      	ldr	r0, [pc, #260]	; (8004648 <EXTI3_IRQHandler+0x140>)
 8004544:	f002 f9bc 	bl	80068c0 <HAL_GPIO_WritePin>
                switch (i) {
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b03      	cmp	r3, #3
 800454c:	d851      	bhi.n	80045f2 <EXTI3_IRQHandler+0xea>
 800454e:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <EXTI3_IRQHandler+0x4c>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	08004565 	.word	0x08004565
 8004558:	08004585 	.word	0x08004585
 800455c:	080045a5 	.word	0x080045a5
 8004560:	080045c5 	.word	0x080045c5
                    case 0:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8004564:	2201      	movs	r2, #1
 8004566:	2101      	movs	r1, #1
 8004568:	4837      	ldr	r0, [pc, #220]	; (8004648 <EXTI3_IRQHandler+0x140>)
 800456a:	f002 f9a9 	bl	80068c0 <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 0;
 800456e:	2108      	movs	r1, #8
 8004570:	4836      	ldr	r0, [pc, #216]	; (800464c <EXTI3_IRQHandler+0x144>)
 8004572:	f002 f98d 	bl	8006890 <HAL_GPIO_ReadPin>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d033      	beq.n	80045e4 <EXTI3_IRQHandler+0xdc>
 800457c:	4b34      	ldr	r3, [pc, #208]	; (8004650 <EXTI3_IRQHandler+0x148>)
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
                        break;
 8004582:	e02f      	b.n	80045e4 <EXTI3_IRQHandler+0xdc>
                    case 1:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8004584:	2201      	movs	r2, #1
 8004586:	2102      	movs	r1, #2
 8004588:	482f      	ldr	r0, [pc, #188]	; (8004648 <EXTI3_IRQHandler+0x140>)
 800458a:	f002 f999 	bl	80068c0 <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 1;
 800458e:	2108      	movs	r1, #8
 8004590:	482e      	ldr	r0, [pc, #184]	; (800464c <EXTI3_IRQHandler+0x144>)
 8004592:	f002 f97d 	bl	8006890 <HAL_GPIO_ReadPin>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d025      	beq.n	80045e8 <EXTI3_IRQHandler+0xe0>
 800459c:	4b2c      	ldr	r3, [pc, #176]	; (8004650 <EXTI3_IRQHandler+0x148>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
                        break;
 80045a2:	e021      	b.n	80045e8 <EXTI3_IRQHandler+0xe0>
                    case 2:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80045a4:	2201      	movs	r2, #1
 80045a6:	2104      	movs	r1, #4
 80045a8:	4827      	ldr	r0, [pc, #156]	; (8004648 <EXTI3_IRQHandler+0x140>)
 80045aa:	f002 f989 	bl	80068c0 <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 2;
 80045ae:	2108      	movs	r1, #8
 80045b0:	4826      	ldr	r0, [pc, #152]	; (800464c <EXTI3_IRQHandler+0x144>)
 80045b2:	f002 f96d 	bl	8006890 <HAL_GPIO_ReadPin>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d017      	beq.n	80045ec <EXTI3_IRQHandler+0xe4>
 80045bc:	4b24      	ldr	r3, [pc, #144]	; (8004650 <EXTI3_IRQHandler+0x148>)
 80045be:	2202      	movs	r2, #2
 80045c0:	601a      	str	r2, [r3, #0]
                        break;
 80045c2:	e013      	b.n	80045ec <EXTI3_IRQHandler+0xe4>
                    case 3:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80045c4:	2201      	movs	r2, #1
 80045c6:	2108      	movs	r1, #8
 80045c8:	481f      	ldr	r0, [pc, #124]	; (8004648 <EXTI3_IRQHandler+0x140>)
 80045ca:	f002 f979 	bl	80068c0 <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 3;
 80045ce:	2108      	movs	r1, #8
 80045d0:	481e      	ldr	r0, [pc, #120]	; (800464c <EXTI3_IRQHandler+0x144>)
 80045d2:	f002 f95d 	bl	8006890 <HAL_GPIO_ReadPin>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d009      	beq.n	80045f0 <EXTI3_IRQHandler+0xe8>
 80045dc:	4b1c      	ldr	r3, [pc, #112]	; (8004650 <EXTI3_IRQHandler+0x148>)
 80045de:	2203      	movs	r2, #3
 80045e0:	601a      	str	r2, [r3, #0]
                        break;
 80045e2:	e005      	b.n	80045f0 <EXTI3_IRQHandler+0xe8>
                        break;
 80045e4:	bf00      	nop
 80045e6:	e004      	b.n	80045f2 <EXTI3_IRQHandler+0xea>
                        break;
 80045e8:	bf00      	nop
 80045ea:	e002      	b.n	80045f2 <EXTI3_IRQHandler+0xea>
                        break;
 80045ec:	bf00      	nop
 80045ee:	e000      	b.n	80045f2 <EXTI3_IRQHandler+0xea>
                        break;
 80045f0:	bf00      	nop
            for (int i = 0; i < 4; i++) {
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3301      	adds	r3, #1
 80045f6:	607b      	str	r3, [r7, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	dd9f      	ble.n	800453e <EXTI3_IRQHandler+0x36>

                }
            }

            keyHandler();
 80045fe:	f7ff f953 	bl	80038a8 <keyHandler>
            lastPress = HAL_GetTick();
 8004602:	f000 fae7 	bl	8004bd4 <HAL_GetTick>
 8004606:	4603      	mov	r3, r0
 8004608:	2200      	movs	r2, #0
 800460a:	469a      	mov	sl, r3
 800460c:	4693      	mov	fp, r2
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <EXTI3_IRQHandler+0x138>)
 8004610:	e9c3 ab00 	strd	sl, fp, [r3]
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 8004614:	2201      	movs	r2, #1
 8004616:	210f      	movs	r1, #15
 8004618:	480b      	ldr	r0, [pc, #44]	; (8004648 <EXTI3_IRQHandler+0x140>)
 800461a:	f002 f951 	bl	80068c0 <HAL_GPIO_WritePin>


        }
        while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3));
 800461e:	bf00      	nop
 8004620:	2108      	movs	r1, #8
 8004622:	480a      	ldr	r0, [pc, #40]	; (800464c <EXTI3_IRQHandler+0x144>)
 8004624:	f002 f934 	bl	8006890 <HAL_GPIO_ReadPin>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f8      	bne.n	8004620 <EXTI3_IRQHandler+0x118>

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800462e:	2008      	movs	r0, #8
 8004630:	f002 f95e 	bl	80068f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800463e:	bf00      	nop
 8004640:	20000840 	.word	0x20000840
 8004644:	20000028 	.word	0x20000028
 8004648:	48000c00 	.word	0x48000c00
 800464c:	48000800 	.word	0x48000800
 8004650:	2000002c 	.word	0x2000002c

08004654 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_Pin);
 8004658:	2010      	movs	r0, #16
 800465a:	f002 f949 	bl	80068f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800465e:	bf00      	nop
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
    static int counter  =  0 ;
    static int temSum = 0;
    static int lumSum = 0 ;
    counter ++;
 800466a:	4b48      	ldr	r3, [pc, #288]	; (800478c <ADC1_2_IRQHandler+0x128>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	4a46      	ldr	r2, [pc, #280]	; (800478c <ADC1_2_IRQHandler+0x128>)
 8004672:	6013      	str	r3, [r2, #0]
    if(counter %100== 0){
 8004674:	4b45      	ldr	r3, [pc, #276]	; (800478c <ADC1_2_IRQHandler+0x128>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	4b45      	ldr	r3, [pc, #276]	; (8004790 <ADC1_2_IRQHandler+0x12c>)
 800467a:	fb83 1302 	smull	r1, r3, r3, r2
 800467e:	1159      	asrs	r1, r3, #5
 8004680:	17d3      	asrs	r3, r2, #31
 8004682:	1acb      	subs	r3, r1, r3
 8004684:	2164      	movs	r1, #100	; 0x64
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d16d      	bne.n	800476c <ADC1_2_IRQHandler+0x108>

        lumSum +=  (int) ((HAL_ADC_GetValue(&hadc1) * 99) / 1000);
 8004690:	4840      	ldr	r0, [pc, #256]	; (8004794 <ADC1_2_IRQHandler+0x130>)
 8004692:	f000 fe0d 	bl	80052b0 <HAL_ADC_GetValue>
 8004696:	4602      	mov	r2, r0
 8004698:	4613      	mov	r3, r2
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	4413      	add	r3, r2
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	4413      	add	r3, r2
 80046a2:	4a3d      	ldr	r2, [pc, #244]	; (8004798 <ADC1_2_IRQHandler+0x134>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	099b      	lsrs	r3, r3, #6
 80046aa:	461a      	mov	r2, r3
 80046ac:	4b3b      	ldr	r3, [pc, #236]	; (800479c <ADC1_2_IRQHandler+0x138>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4413      	add	r3, r2
 80046b2:	4a3a      	ldr	r2, [pc, #232]	; (800479c <ADC1_2_IRQHandler+0x138>)
 80046b4:	6013      	str	r3, [r2, #0]
        int Voltage_mv = (int)(HAL_ADC_GetValue(&hadc2) * 3300 / 4095);
 80046b6:	483a      	ldr	r0, [pc, #232]	; (80047a0 <ADC1_2_IRQHandler+0x13c>)
 80046b8:	f000 fdfa 	bl	80052b0 <HAL_ADC_GetValue>
 80046bc:	4603      	mov	r3, r0
 80046be:	f640 42e4 	movw	r2, #3300	; 0xce4
 80046c2:	fb03 f202 	mul.w	r2, r3, r2
 80046c6:	4b37      	ldr	r3, [pc, #220]	; (80047a4 <ADC1_2_IRQHandler+0x140>)
 80046c8:	fba3 1302 	umull	r1, r3, r3, r2
 80046cc:	1ad2      	subs	r2, r2, r3
 80046ce:	0852      	lsrs	r2, r2, #1
 80046d0:	4413      	add	r3, r2
 80046d2:	0adb      	lsrs	r3, r3, #11
 80046d4:	60fb      	str	r3, [r7, #12]
        temSum += Voltage_mv / 10;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a33      	ldr	r2, [pc, #204]	; (80047a8 <ADC1_2_IRQHandler+0x144>)
 80046da:	fb82 1203 	smull	r1, r2, r2, r3
 80046de:	1092      	asrs	r2, r2, #2
 80046e0:	17db      	asrs	r3, r3, #31
 80046e2:	1ad2      	subs	r2, r2, r3
 80046e4:	4b31      	ldr	r3, [pc, #196]	; (80047ac <ADC1_2_IRQHandler+0x148>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4413      	add	r3, r2
 80046ea:	4a30      	ldr	r2, [pc, #192]	; (80047ac <ADC1_2_IRQHandler+0x148>)
 80046ec:	6013      	str	r3, [r2, #0]

        if(counter == 900){
 80046ee:	4b27      	ldr	r3, [pc, #156]	; (800478c <ADC1_2_IRQHandler+0x128>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80046f6:	d139      	bne.n	800476c <ADC1_2_IRQHandler+0x108>

            int lumCopy = lum;
 80046f8:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <ADC1_2_IRQHandler+0x14c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60bb      	str	r3, [r7, #8]
            int temCopy = temperature;
 80046fe:	4b2d      	ldr	r3, [pc, #180]	; (80047b4 <ADC1_2_IRQHandler+0x150>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	607b      	str	r3, [r7, #4]
            lum = lumSum/10;
 8004704:	4b25      	ldr	r3, [pc, #148]	; (800479c <ADC1_2_IRQHandler+0x138>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <ADC1_2_IRQHandler+0x144>)
 800470a:	fb82 1203 	smull	r1, r2, r2, r3
 800470e:	1092      	asrs	r2, r2, #2
 8004710:	17db      	asrs	r3, r3, #31
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	4a26      	ldr	r2, [pc, #152]	; (80047b0 <ADC1_2_IRQHandler+0x14c>)
 8004716:	6013      	str	r3, [r2, #0]
            temperature = temSum / 10;
 8004718:	4b24      	ldr	r3, [pc, #144]	; (80047ac <ADC1_2_IRQHandler+0x148>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a22      	ldr	r2, [pc, #136]	; (80047a8 <ADC1_2_IRQHandler+0x144>)
 800471e:	fb82 1203 	smull	r1, r2, r2, r3
 8004722:	1092      	asrs	r2, r2, #2
 8004724:	17db      	asrs	r3, r3, #31
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	4a22      	ldr	r2, [pc, #136]	; (80047b4 <ADC1_2_IRQHandler+0x150>)
 800472a:	6013      	str	r3, [r2, #0]
            counter = 0 ;
 800472c:	4b17      	ldr	r3, [pc, #92]	; (800478c <ADC1_2_IRQHandler+0x128>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
            temSum = 0 ;
 8004732:	4b1e      	ldr	r3, [pc, #120]	; (80047ac <ADC1_2_IRQHandler+0x148>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
            lumSum = 0 ;
 8004738:	4b18      	ldr	r3, [pc, #96]	; (800479c <ADC1_2_IRQHandler+0x138>)
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]

            if(lum < lumCopy)HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
 800473e:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <ADC1_2_IRQHandler+0x14c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	429a      	cmp	r2, r3
 8004746:	dd05      	ble.n	8004754 <ADC1_2_IRQHandler+0xf0>
 8004748:	2201      	movs	r2, #1
 800474a:	2104      	movs	r1, #4
 800474c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004750:	f002 f8b6 	bl	80068c0 <HAL_GPIO_WritePin>
            if(temperature > temSum)HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);
 8004754:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <ADC1_2_IRQHandler+0x150>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	4b14      	ldr	r3, [pc, #80]	; (80047ac <ADC1_2_IRQHandler+0x148>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	dd05      	ble.n	800476c <ADC1_2_IRQHandler+0x108>
 8004760:	2200      	movs	r2, #0
 8004762:	2104      	movs	r1, #4
 8004764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004768:	f002 f8aa 	bl	80068c0 <HAL_GPIO_WritePin>
    }




    HAL_ADC_Start_IT(&hadc1);
 800476c:	4809      	ldr	r0, [pc, #36]	; (8004794 <ADC1_2_IRQHandler+0x130>)
 800476e:	f000 fc5f 	bl	8005030 <HAL_ADC_Start_IT>
    HAL_ADC_Start_IT(&hadc2);
 8004772:	480b      	ldr	r0, [pc, #44]	; (80047a0 <ADC1_2_IRQHandler+0x13c>)
 8004774:	f000 fc5c 	bl	8005030 <HAL_ADC_Start_IT>
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004778:	4806      	ldr	r0, [pc, #24]	; (8004794 <ADC1_2_IRQHandler+0x130>)
 800477a:	f000 fda7 	bl	80052cc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800477e:	4808      	ldr	r0, [pc, #32]	; (80047a0 <ADC1_2_IRQHandler+0x13c>)
 8004780:	f000 fda4 	bl	80052cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	200008d0 	.word	0x200008d0
 8004790:	51eb851f 	.word	0x51eb851f
 8004794:	200001d8 	.word	0x200001d8
 8004798:	10624dd3 	.word	0x10624dd3
 800479c:	200008d4 	.word	0x200008d4
 80047a0:	20000228 	.word	0x20000228
 80047a4:	00100101 	.word	0x00100101
 80047a8:	66666667 	.word	0x66666667
 80047ac:	200008d8 	.word	0x200008d8
 80047b0:	20000780 	.word	0x20000780
 80047b4:	20000004 	.word	0x20000004

080047b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80047bc:	2020      	movs	r0, #32
 80047be:	f002 f897 	bl	80068f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80047c2:	bf00      	nop
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
//		shown1 = 1;
//
//	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80047cc:	4803      	ldr	r0, [pc, #12]	; (80047dc <TIM3_IRQHandler+0x14>)
 80047ce:	f004 f8a8 	bl	8008922 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	HAL_TIM_Base_Start_IT(&htim3);
 80047d2:	4802      	ldr	r0, [pc, #8]	; (80047dc <TIM3_IRQHandler+0x14>)
 80047d4:	f003 ffda 	bl	800878c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_IRQn 1 */
}
 80047d8:	bf00      	nop
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20000374 	.word	0x20000374

080047e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80047e4:	4802      	ldr	r0, [pc, #8]	; (80047f0 <USART2_IRQHandler+0x10>)
 80047e6:	f005 f8b7 	bl	8009958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	2000040c 	.word	0x2000040c

080047f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b0c3      	sub	sp, #268	; 0x10c
 80047f8:	af40      	add	r7, sp, #256	; 0x100
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

		if(startState == 1 && HAL_GetTick() - startStateLastTime >= 1000){
 80047fa:	4b7d      	ldr	r3, [pc, #500]	; (80049f0 <TIM6_DAC_IRQHandler+0x1fc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d121      	bne.n	8004846 <TIM6_DAC_IRQHandler+0x52>
 8004802:	f000 f9e7 	bl	8004bd4 <HAL_GetTick>
 8004806:	4603      	mov	r3, r0
 8004808:	4a7a      	ldr	r2, [pc, #488]	; (80049f4 <TIM6_DAC_IRQHandler+0x200>)
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004812:	d318      	bcc.n	8004846 <TIM6_DAC_IRQHandler+0x52>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,1);
 8004814:	2201      	movs	r2, #1
 8004816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800481a:	4877      	ldr	r0, [pc, #476]	; (80049f8 <TIM6_DAC_IRQHandler+0x204>)
 800481c:	f002 f850 	bl	80068c0 <HAL_GPIO_WritePin>
			clear();
 8004820:	f7fb ff9a 	bl	8000758 <clear>
			setCursor(0,0);
 8004824:	2100      	movs	r1, #0
 8004826:	2000      	movs	r0, #0
 8004828:	f7fb ffa0 	bl	800076c <setCursor>
			print(">> ControlPanel  ");
 800482c:	4873      	ldr	r0, [pc, #460]	; (80049fc <TIM6_DAC_IRQHandler+0x208>)
 800482e:	f7fb fffb 	bl	8000828 <print>
			GenerateMenu();
 8004832:	f7fc ffc3 	bl	80017bc <GenerateMenu>
			generateMenu = 1;
 8004836:	4b72      	ldr	r3, [pc, #456]	; (8004a00 <TIM6_DAC_IRQHandler+0x20c>)
 8004838:	2201      	movs	r2, #1
 800483a:	601a      	str	r2, [r3, #0]
			startState = 2;
 800483c:	4b6c      	ldr	r3, [pc, #432]	; (80049f0 <TIM6_DAC_IRQHandler+0x1fc>)
 800483e:	2202      	movs	r2, #2
 8004840:	601a      	str	r2, [r3, #0]
			display();
 8004842:	f7fb ffdb 	bl	80007fc <display>
		}
		if(startState == 3 && HAL_GetTick() - startStateLastTime >= 1000){
 8004846:	4b6a      	ldr	r3, [pc, #424]	; (80049f0 <TIM6_DAC_IRQHandler+0x1fc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b03      	cmp	r3, #3
 800484c:	d110      	bne.n	8004870 <TIM6_DAC_IRQHandler+0x7c>
 800484e:	f000 f9c1 	bl	8004bd4 <HAL_GetTick>
 8004852:	4603      	mov	r3, r0
 8004854:	4a67      	ldr	r2, [pc, #412]	; (80049f4 <TIM6_DAC_IRQHandler+0x200>)
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800485e:	d307      	bcc.n	8004870 <TIM6_DAC_IRQHandler+0x7c>
			startState = 0;
 8004860:	4b63      	ldr	r3, [pc, #396]	; (80049f0 <TIM6_DAC_IRQHandler+0x1fc>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
			generateMenu = 0;
 8004866:	4b66      	ldr	r3, [pc, #408]	; (8004a00 <TIM6_DAC_IRQHandler+0x20c>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
			clear();
 800486c:	f7fb ff74 	bl	8000758 <clear>
		}

		if(temperature > temThreshold || someOneClose){
 8004870:	4b64      	ldr	r3, [pc, #400]	; (8004a04 <TIM6_DAC_IRQHandler+0x210>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b64      	ldr	r3, [pc, #400]	; (8004a08 <TIM6_DAC_IRQHandler+0x214>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	dc03      	bgt.n	8004884 <TIM6_DAC_IRQHandler+0x90>
 800487c:	4b63      	ldr	r3, [pc, #396]	; (8004a0c <TIM6_DAC_IRQHandler+0x218>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d07a      	beq.n	800497a <TIM6_DAC_IRQHandler+0x186>
			// this part can be changed by animation
			char temp[1];
			sprintf(temp,"%d",mSecond);
 8004884:	4b62      	ldr	r3, [pc, #392]	; (8004a10 <TIM6_DAC_IRQHandler+0x21c>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	1d3b      	adds	r3, r7, #4
 800488a:	4962      	ldr	r1, [pc, #392]	; (8004a14 <TIM6_DAC_IRQHandler+0x220>)
 800488c:	4618      	mov	r0, r3
 800488e:	f006 f907 	bl	800aaa0 <siprintf>
			setCursor(17,0);
 8004892:	2100      	movs	r1, #0
 8004894:	2011      	movs	r0, #17
 8004896:	f7fb ff69 	bl	800076c <setCursor>
			print(temp);
 800489a:	1d3b      	adds	r3, r7, #4
 800489c:	4618      	mov	r0, r3
 800489e:	f7fb ffc3 	bl	8000828 <print>
			if(mSecond < 10){
 80048a2:	4b5b      	ldr	r3, [pc, #364]	; (8004a10 <TIM6_DAC_IRQHandler+0x21c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b09      	cmp	r3, #9
 80048a8:	dc47      	bgt.n	800493a <TIM6_DAC_IRQHandler+0x146>
				setCursor(0,0);
 80048aa:	2100      	movs	r1, #0
 80048ac:	2000      	movs	r0, #0
 80048ae:	f7fb ff5d 	bl	800076c <setCursor>
				if(temperature > temThreshold){
 80048b2:	4b54      	ldr	r3, [pc, #336]	; (8004a04 <TIM6_DAC_IRQHandler+0x210>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b54      	ldr	r3, [pc, #336]	; (8004a08 <TIM6_DAC_IRQHandler+0x214>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	dd03      	ble.n	80048c6 <TIM6_DAC_IRQHandler+0xd2>
					print("High Temper     ");
 80048be:	4856      	ldr	r0, [pc, #344]	; (8004a18 <TIM6_DAC_IRQHandler+0x224>)
 80048c0:	f7fb ffb2 	bl	8000828 <print>
 80048c4:	e002      	b.n	80048cc <TIM6_DAC_IRQHandler+0xd8>
					if(temAlarm){
					// activate temperature alarm
					}
				}else{
					print("                   ");
 80048c6:	4855      	ldr	r0, [pc, #340]	; (8004a1c <TIM6_DAC_IRQHandler+0x228>)
 80048c8:	f7fb ffae 	bl	8000828 <print>
				}
				setCursor(0,1);
 80048cc:	2101      	movs	r1, #1
 80048ce:	2000      	movs	r0, #0
 80048d0:	f7fb ff4c 	bl	800076c <setCursor>
				if(someOneClose && securityAlert){
 80048d4:	4b4d      	ldr	r3, [pc, #308]	; (8004a0c <TIM6_DAC_IRQHandler+0x218>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <TIM6_DAC_IRQHandler+0xf8>
 80048dc:	4b50      	ldr	r3, [pc, #320]	; (8004a20 <TIM6_DAC_IRQHandler+0x22c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <TIM6_DAC_IRQHandler+0xf8>
					print("Some One Near By   ");
 80048e4:	484f      	ldr	r0, [pc, #316]	; (8004a24 <TIM6_DAC_IRQHandler+0x230>)
 80048e6:	f7fb ff9f 	bl	8000828 <print>
					if(securityAlarm){
 80048ea:	e002      	b.n	80048f2 <TIM6_DAC_IRQHandler+0xfe>
					// activate security alarm
					}
				}else{
					print("                   ");
 80048ec:	484b      	ldr	r0, [pc, #300]	; (8004a1c <TIM6_DAC_IRQHandler+0x228>)
 80048ee:	f7fb ff9b 	bl	8000828 <print>
				}
				setCursor(0,2);
 80048f2:	2102      	movs	r1, #2
 80048f4:	2000      	movs	r0, #0
 80048f6:	f7fb ff39 	bl	800076c <setCursor>
				print("                   ");
 80048fa:	4848      	ldr	r0, [pc, #288]	; (8004a1c <TIM6_DAC_IRQHandler+0x228>)
 80048fc:	f7fb ff94 	bl	8000828 <print>
				setCursor(0,3);
 8004900:	2103      	movs	r1, #3
 8004902:	2000      	movs	r0, #0
 8004904:	f7fb ff32 	bl	800076c <setCursor>
				print("                   ");
 8004908:	4844      	ldr	r0, [pc, #272]	; (8004a1c <TIM6_DAC_IRQHandler+0x228>)
 800490a:	f7fb ff8d 	bl	8000828 <print>
				shown = 1;
 800490e:	4b46      	ldr	r3, [pc, #280]	; (8004a28 <TIM6_DAC_IRQHandler+0x234>)
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]
				if(mSecond %3 ==0)
 8004914:	4b3e      	ldr	r3, [pc, #248]	; (8004a10 <TIM6_DAC_IRQHandler+0x21c>)
 8004916:	6819      	ldr	r1, [r3, #0]
 8004918:	4b44      	ldr	r3, [pc, #272]	; (8004a2c <TIM6_DAC_IRQHandler+0x238>)
 800491a:	fb83 3201 	smull	r3, r2, r3, r1
 800491e:	17cb      	asrs	r3, r1, #31
 8004920:	1ad2      	subs	r2, r2, r3
 8004922:	4613      	mov	r3, r2
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	4413      	add	r3, r2
 8004928:	1aca      	subs	r2, r1, r3
 800492a:	2a00      	cmp	r2, #0
 800492c:	d102      	bne.n	8004934 <TIM6_DAC_IRQHandler+0x140>
					noDisplay();
 800492e:	f7fb ff4f 	bl	80007d0 <noDisplay>
		if(temperature > temThreshold || someOneClose){
 8004932:	e046      	b.n	80049c2 <TIM6_DAC_IRQHandler+0x1ce>
				else
					display();
 8004934:	f7fb ff62 	bl	80007fc <display>
		if(temperature > temThreshold || someOneClose){
 8004938:	e043      	b.n	80049c2 <TIM6_DAC_IRQHandler+0x1ce>
			}
			else{
				shown = 0;
 800493a:	4b3b      	ldr	r3, [pc, #236]	; (8004a28 <TIM6_DAC_IRQHandler+0x234>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
				clear();
 8004940:	f7fb ff0a 	bl	8000758 <clear>
				if(startState == 2){
 8004944:	4b2a      	ldr	r3, [pc, #168]	; (80049f0 <TIM6_DAC_IRQHandler+0x1fc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d13a      	bne.n	80049c2 <TIM6_DAC_IRQHandler+0x1ce>
					if(inMenu)
 800494c:	4b38      	ldr	r3, [pc, #224]	; (8004a30 <TIM6_DAC_IRQHandler+0x23c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <TIM6_DAC_IRQHandler+0x166>
						ShowMenu();
 8004954:	f7fe f886 	bl	8002a64 <ShowMenu>
		if(temperature > temThreshold || someOneClose){
 8004958:	e033      	b.n	80049c2 <TIM6_DAC_IRQHandler+0x1ce>
					else
						ShowInfo(currentNode->screen);
 800495a:	4b36      	ldr	r3, [pc, #216]	; (8004a34 <TIM6_DAC_IRQHandler+0x240>)
 800495c:	681c      	ldr	r4, [r3, #0]
 800495e:	4668      	mov	r0, sp
 8004960:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004968:	4619      	mov	r1, r3
 800496a:	f005 ff93 	bl	800a894 <memcpy>
 800496e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004974:	f7fe f8ee 	bl	8002b54 <ShowInfo>
		if(temperature > temThreshold || someOneClose){
 8004978:	e023      	b.n	80049c2 <TIM6_DAC_IRQHandler+0x1ce>
				}
			}

		}else if(shown){
 800497a:	4b2b      	ldr	r3, [pc, #172]	; (8004a28 <TIM6_DAC_IRQHandler+0x234>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d020      	beq.n	80049c4 <TIM6_DAC_IRQHandler+0x1d0>
			shown = 0;
 8004982:	4b29      	ldr	r3, [pc, #164]	; (8004a28 <TIM6_DAC_IRQHandler+0x234>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
			clear();
 8004988:	f7fb fee6 	bl	8000758 <clear>
			if(startState == 2){
 800498c:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <TIM6_DAC_IRQHandler+0x1fc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d117      	bne.n	80049c4 <TIM6_DAC_IRQHandler+0x1d0>
				if(inMenu)
 8004994:	4b26      	ldr	r3, [pc, #152]	; (8004a30 <TIM6_DAC_IRQHandler+0x23c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <TIM6_DAC_IRQHandler+0x1ae>
					ShowMenu();
 800499c:	f7fe f862 	bl	8002a64 <ShowMenu>
 80049a0:	e010      	b.n	80049c4 <TIM6_DAC_IRQHandler+0x1d0>
				else
					ShowInfo(currentNode->screen);
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <TIM6_DAC_IRQHandler+0x240>)
 80049a4:	681c      	ldr	r4, [r3, #0]
 80049a6:	4668      	mov	r0, sp
 80049a8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80049ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049b0:	4619      	mov	r1, r3
 80049b2:	f005 ff6f 	bl	800a894 <memcpy>
 80049b6:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80049ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049bc:	f7fe f8ca 	bl	8002b54 <ShowInfo>
 80049c0:	e000      	b.n	80049c4 <TIM6_DAC_IRQHandler+0x1d0>
		if(temperature > temThreshold || someOneClose){
 80049c2:	bf00      	nop
			}
		}
		mSecond++;
 80049c4:	4b12      	ldr	r3, [pc, #72]	; (8004a10 <TIM6_DAC_IRQHandler+0x21c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3301      	adds	r3, #1
 80049ca:	4a11      	ldr	r2, [pc, #68]	; (8004a10 <TIM6_DAC_IRQHandler+0x21c>)
 80049cc:	6013      	str	r3, [r2, #0]
		if(mSecond>=20) mSecond =0;
 80049ce:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <TIM6_DAC_IRQHandler+0x21c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b13      	cmp	r3, #19
 80049d4:	dd02      	ble.n	80049dc <TIM6_DAC_IRQHandler+0x1e8>
 80049d6:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <TIM6_DAC_IRQHandler+0x21c>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80049dc:	4816      	ldr	r0, [pc, #88]	; (8004a38 <TIM6_DAC_IRQHandler+0x244>)
 80049de:	f003 ffa0 	bl	8008922 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
	HAL_TIM_Base_Start_IT(&htim6);
 80049e2:	4815      	ldr	r0, [pc, #84]	; (8004a38 <TIM6_DAC_IRQHandler+0x244>)
 80049e4:	f003 fed2 	bl	800878c <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd90      	pop	{r4, r7, pc}
 80049f0:	20000868 	.word	0x20000868
 80049f4:	2000086c 	.word	0x2000086c
 80049f8:	48001000 	.word	0x48001000
 80049fc:	0800b94c 	.word	0x0800b94c
 8004a00:	20000854 	.word	0x20000854
 8004a04:	20000004 	.word	0x20000004
 8004a08:	20000008 	.word	0x20000008
 8004a0c:	20000784 	.word	0x20000784
 8004a10:	20000870 	.word	0x20000870
 8004a14:	0800b960 	.word	0x0800b960
 8004a18:	0800b964 	.word	0x0800b964
 8004a1c:	0800b86c 	.word	0x0800b86c
 8004a20:	20000014 	.word	0x20000014
 8004a24:	0800b978 	.word	0x0800b978
 8004a28:	20000874 	.word	0x20000874
 8004a2c:	55555556 	.word	0x55555556
 8004a30:	20000120 	.word	0x20000120
 8004a34:	200008cc 	.word	0x200008cc
 8004a38:	200003c0 	.word	0x200003c0

08004a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a44:	4a14      	ldr	r2, [pc, #80]	; (8004a98 <_sbrk+0x5c>)
 8004a46:	4b15      	ldr	r3, [pc, #84]	; (8004a9c <_sbrk+0x60>)
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a50:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <_sbrk+0x64>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a58:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <_sbrk+0x64>)
 8004a5a:	4a12      	ldr	r2, [pc, #72]	; (8004aa4 <_sbrk+0x68>)
 8004a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a5e:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <_sbrk+0x64>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4413      	add	r3, r2
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d207      	bcs.n	8004a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a6c:	f005 fee0 	bl	800a830 <__errno>
 8004a70:	4603      	mov	r3, r0
 8004a72:	220c      	movs	r2, #12
 8004a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a76:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7a:	e009      	b.n	8004a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a7c:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <_sbrk+0x64>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a82:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <_sbrk+0x64>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4413      	add	r3, r2
 8004a8a:	4a05      	ldr	r2, [pc, #20]	; (8004aa0 <_sbrk+0x64>)
 8004a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	2000a000 	.word	0x2000a000
 8004a9c:	00000400 	.word	0x00000400
 8004aa0:	200008dc 	.word	0x200008dc
 8004aa4:	200008f8 	.word	0x200008f8

08004aa8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004aac:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <SystemInit+0x20>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	4a05      	ldr	r2, [pc, #20]	; (8004ac8 <SystemInit+0x20>)
 8004ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004abc:	bf00      	nop
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b04 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ad0:	480d      	ldr	r0, [pc, #52]	; (8004b08 <LoopForever+0x6>)
  ldr r1, =_edata
 8004ad2:	490e      	ldr	r1, [pc, #56]	; (8004b0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ad4:	4a0e      	ldr	r2, [pc, #56]	; (8004b10 <LoopForever+0xe>)
  movs r3, #0
 8004ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ad8:	e002      	b.n	8004ae0 <LoopCopyDataInit>

08004ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ade:	3304      	adds	r3, #4

08004ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ae4:	d3f9      	bcc.n	8004ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ae6:	4a0b      	ldr	r2, [pc, #44]	; (8004b14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ae8:	4c0b      	ldr	r4, [pc, #44]	; (8004b18 <LoopForever+0x16>)
  movs r3, #0
 8004aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004aec:	e001      	b.n	8004af2 <LoopFillZerobss>

08004aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004af0:	3204      	adds	r2, #4

08004af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004af4:	d3fb      	bcc.n	8004aee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004af6:	f7ff ffd7 	bl	8004aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004afa:	f005 fe9f 	bl	800a83c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004afe:	f7fb ff97 	bl	8000a30 <main>

08004b02 <LoopForever>:

LoopForever:
    b LoopForever
 8004b02:	e7fe      	b.n	8004b02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b04:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b0c:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8004b10:	0800ba00 	.word	0x0800ba00
  ldr r2, =_sbss
 8004b14:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8004b18:	200008f4 	.word	0x200008f4

08004b1c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b1c:	e7fe      	b.n	8004b1c <ADC3_IRQHandler>
	...

08004b20 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b24:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <HAL_Init+0x28>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a07      	ldr	r2, [pc, #28]	; (8004b48 <HAL_Init+0x28>)
 8004b2a:	f043 0310 	orr.w	r3, r3, #16
 8004b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b30:	2003      	movs	r0, #3
 8004b32:	f001 fc7b 	bl	800642c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b36:	2000      	movs	r0, #0
 8004b38:	f000 f808 	bl	8004b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b3c:	f7fc fbb2 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40022000 	.word	0x40022000

08004b4c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b54:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <HAL_InitTick+0x54>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <HAL_InitTick+0x58>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f001 fc93 	bl	8006496 <HAL_SYSTICK_Config>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e00e      	b.n	8004b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b0f      	cmp	r3, #15
 8004b7e:	d80a      	bhi.n	8004b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b80:	2200      	movs	r2, #0
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	f04f 30ff 	mov.w	r0, #4294967295
 8004b88:	f001 fc5b 	bl	8006442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b8c:	4a06      	ldr	r2, [pc, #24]	; (8004ba8 <HAL_InitTick+0x5c>)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	e000      	b.n	8004b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20000128 	.word	0x20000128
 8004ba4:	20000130 	.word	0x20000130
 8004ba8:	2000012c 	.word	0x2000012c

08004bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bb0:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <HAL_IncTick+0x20>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_IncTick+0x24>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4413      	add	r3, r2
 8004bbc:	4a04      	ldr	r2, [pc, #16]	; (8004bd0 <HAL_IncTick+0x24>)
 8004bbe:	6013      	str	r3, [r2, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20000130 	.word	0x20000130
 8004bd0:	200008e0 	.word	0x200008e0

08004bd4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return uwTick;  
 8004bd8:	4b03      	ldr	r3, [pc, #12]	; (8004be8 <HAL_GetTick+0x14>)
 8004bda:	681b      	ldr	r3, [r3, #0]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	200008e0 	.word	0x200008e0

08004bec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bf4:	f7ff ffee 	bl	8004bd4 <HAL_GetTick>
 8004bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d005      	beq.n	8004c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c06:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <HAL_Delay+0x44>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4413      	add	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004c12:	bf00      	nop
 8004c14:	f7ff ffde 	bl	8004bd4 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d8f7      	bhi.n	8004c14 <HAL_Delay+0x28>
  {
  }
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000130 	.word	0x20000130

08004c34 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b09a      	sub	sp, #104	; 0x68
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e1c9      	b.n	8005024 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f003 0310 	and.w	r3, r3, #16
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d176      	bne.n	8004d90 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d152      	bne.n	8004d50 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7fc fb11 	bl	80012ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d13b      	bne.n	8004d50 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f001 fa71 	bl	80061c0 <ADC_Disable>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d12f      	bne.n	8004d50 <HAL_ADC_Init+0xe0>
 8004cf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d12b      	bne.n	8004d50 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d00:	f023 0302 	bic.w	r3, r3, #2
 8004d04:	f043 0202 	orr.w	r2, r3, #2
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d1a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d2a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d2c:	4b86      	ldr	r3, [pc, #536]	; (8004f48 <HAL_ADC_Init+0x2d8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a86      	ldr	r2, [pc, #536]	; (8004f4c <HAL_ADC_Init+0x2dc>)
 8004d32:	fba2 2303 	umull	r2, r3, r2, r3
 8004d36:	0c9a      	lsrs	r2, r3, #18
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d42:	e002      	b.n	8004d4a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f9      	bne.n	8004d44 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d6c:	d110      	bne.n	8004d90 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f023 0312 	bic.w	r3, r3, #18
 8004d76:	f043 0210 	orr.w	r2, r3, #16
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	f043 0201 	orr.w	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f040 8136 	bne.w	800500a <HAL_ADC_Init+0x39a>
 8004d9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f040 8131 	bne.w	800500a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f040 8129 	bne.w	800500a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004dc0:	f043 0202 	orr.w	r2, r3, #2
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dd0:	d004      	beq.n	8004ddc <HAL_ADC_Init+0x16c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a5e      	ldr	r2, [pc, #376]	; (8004f50 <HAL_ADC_Init+0x2e0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d101      	bne.n	8004de0 <HAL_ADC_Init+0x170>
 8004ddc:	4b5d      	ldr	r3, [pc, #372]	; (8004f54 <HAL_ADC_Init+0x2e4>)
 8004dde:	e000      	b.n	8004de2 <HAL_ADC_Init+0x172>
 8004de0:	4b5d      	ldr	r3, [pc, #372]	; (8004f58 <HAL_ADC_Init+0x2e8>)
 8004de2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dec:	d102      	bne.n	8004df4 <HAL_ADC_Init+0x184>
 8004dee:	4b58      	ldr	r3, [pc, #352]	; (8004f50 <HAL_ADC_Init+0x2e0>)
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	e01a      	b.n	8004e2a <HAL_ADC_Init+0x1ba>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a55      	ldr	r2, [pc, #340]	; (8004f50 <HAL_ADC_Init+0x2e0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d103      	bne.n	8004e06 <HAL_ADC_Init+0x196>
 8004dfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	e011      	b.n	8004e2a <HAL_ADC_Init+0x1ba>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a54      	ldr	r2, [pc, #336]	; (8004f5c <HAL_ADC_Init+0x2ec>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d102      	bne.n	8004e16 <HAL_ADC_Init+0x1a6>
 8004e10:	4b53      	ldr	r3, [pc, #332]	; (8004f60 <HAL_ADC_Init+0x2f0>)
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e009      	b.n	8004e2a <HAL_ADC_Init+0x1ba>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a51      	ldr	r2, [pc, #324]	; (8004f60 <HAL_ADC_Init+0x2f0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d102      	bne.n	8004e26 <HAL_ADC_Init+0x1b6>
 8004e20:	4b4e      	ldr	r3, [pc, #312]	; (8004f5c <HAL_ADC_Init+0x2ec>)
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e001      	b.n	8004e2a <HAL_ADC_Init+0x1ba>
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d108      	bne.n	8004e4a <HAL_ADC_Init+0x1da>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_ADC_Init+0x1da>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <HAL_ADC_Init+0x1dc>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d11c      	bne.n	8004e8a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004e50:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d010      	beq.n	8004e78 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d107      	bne.n	8004e72 <HAL_ADC_Init+0x202>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_ADC_Init+0x202>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <HAL_ADC_Init+0x204>
 8004e72:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d108      	bne.n	8004e8a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	431a      	orrs	r2, r3
 8004e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e88:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	7e5b      	ldrb	r3, [r3, #25]
 8004e8e:	035b      	lsls	r3, r3, #13
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e94:	2a01      	cmp	r2, #1
 8004e96:	d002      	beq.n	8004e9e <HAL_ADC_Init+0x22e>
 8004e98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e9c:	e000      	b.n	8004ea0 <HAL_ADC_Init+0x230>
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d11b      	bne.n	8004ef6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	7e5b      	ldrb	r3, [r3, #25]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d109      	bne.n	8004eda <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	045a      	lsls	r2, r3, #17
 8004ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed8:	e00d      	b.n	8004ef6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ee2:	f043 0220 	orr.w	r2, r3, #32
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eee:	f043 0201 	orr.w	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d03a      	beq.n	8004f74 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a16      	ldr	r2, [pc, #88]	; (8004f5c <HAL_ADC_Init+0x2ec>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_ADC_Init+0x2a2>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a14      	ldr	r2, [pc, #80]	; (8004f60 <HAL_ADC_Init+0x2f0>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d128      	bne.n	8004f64 <HAL_ADC_Init+0x2f4>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004f1a:	d012      	beq.n	8004f42 <HAL_ADC_Init+0x2d2>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f24:	d00a      	beq.n	8004f3c <HAL_ADC_Init+0x2cc>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004f2e:	d002      	beq.n	8004f36 <HAL_ADC_Init+0x2c6>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	e018      	b.n	8004f68 <HAL_ADC_Init+0x2f8>
 8004f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f3a:	e015      	b.n	8004f68 <HAL_ADC_Init+0x2f8>
 8004f3c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004f40:	e012      	b.n	8004f68 <HAL_ADC_Init+0x2f8>
 8004f42:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004f46:	e00f      	b.n	8004f68 <HAL_ADC_Init+0x2f8>
 8004f48:	20000128 	.word	0x20000128
 8004f4c:	431bde83 	.word	0x431bde83
 8004f50:	50000100 	.word	0x50000100
 8004f54:	50000300 	.word	0x50000300
 8004f58:	50000700 	.word	0x50000700
 8004f5c:	50000400 	.word	0x50000400
 8004f60:	50000500 	.word	0x50000500
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f70:	4313      	orrs	r3, r2
 8004f72:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 030c 	and.w	r3, r3, #12
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d114      	bne.n	8004fac <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f90:	f023 0302 	bic.w	r3, r3, #2
 8004f94:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	7e1b      	ldrb	r3, [r3, #24]
 8004f9a:	039a      	lsls	r2, r3, #14
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	4b1e      	ldr	r3, [pc, #120]	; (800502c <HAL_ADC_Init+0x3bc>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6812      	ldr	r2, [r2, #0]
 8004fba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d10c      	bne.n	8004fe2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	f023 010f 	bic.w	r1, r3, #15
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	1e5a      	subs	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
 8004fe0:	e007      	b.n	8004ff2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 020f 	bic.w	r2, r2, #15
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	f023 0303 	bic.w	r3, r3, #3
 8005000:	f043 0201 	orr.w	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	641a      	str	r2, [r3, #64]	; 0x40
 8005008:	e00a      	b.n	8005020 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f023 0312 	bic.w	r3, r3, #18
 8005012:	f043 0210 	orr.w	r2, r3, #16
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800501a:	2301      	movs	r3, #1
 800501c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8005020:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005024:	4618      	mov	r0, r3
 8005026:	3768      	adds	r7, #104	; 0x68
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	fff0c007 	.word	0xfff0c007

08005030 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	f040 8123 	bne.w	8005292 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_ADC_Start_IT+0x2a>
 8005056:	2302      	movs	r3, #2
 8005058:	e11e      	b.n	8005298 <HAL_ADC_Start_IT+0x268>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f001 f848 	bl	80060f8 <ADC_Enable>
 8005068:	4603      	mov	r3, r0
 800506a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f040 810a 	bne.w	8005288 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800507c:	f023 0301 	bic.w	r3, r3, #1
 8005080:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005090:	d004      	beq.n	800509c <HAL_ADC_Start_IT+0x6c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a82      	ldr	r2, [pc, #520]	; (80052a0 <HAL_ADC_Start_IT+0x270>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d106      	bne.n	80050aa <HAL_ADC_Start_IT+0x7a>
 800509c:	4b81      	ldr	r3, [pc, #516]	; (80052a4 <HAL_ADC_Start_IT+0x274>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d010      	beq.n	80050ca <HAL_ADC_Start_IT+0x9a>
 80050a8:	e005      	b.n	80050b6 <HAL_ADC_Start_IT+0x86>
 80050aa:	4b7f      	ldr	r3, [pc, #508]	; (80052a8 <HAL_ADC_Start_IT+0x278>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <HAL_ADC_Start_IT+0x9a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050be:	d004      	beq.n	80050ca <HAL_ADC_Start_IT+0x9a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a79      	ldr	r2, [pc, #484]	; (80052ac <HAL_ADC_Start_IT+0x27c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d115      	bne.n	80050f6 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d036      	beq.n	8005152 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80050f4:	e02d      	b.n	8005152 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800510a:	d004      	beq.n	8005116 <HAL_ADC_Start_IT+0xe6>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a63      	ldr	r2, [pc, #396]	; (80052a0 <HAL_ADC_Start_IT+0x270>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d10a      	bne.n	800512c <HAL_ADC_Start_IT+0xfc>
 8005116:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf14      	ite	ne
 8005124:	2301      	movne	r3, #1
 8005126:	2300      	moveq	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	e008      	b.n	800513e <HAL_ADC_Start_IT+0x10e>
 800512c:	4b5f      	ldr	r3, [pc, #380]	; (80052ac <HAL_ADC_Start_IT+0x27c>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d007      	beq.n	8005152 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800514a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800515a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515e:	d106      	bne.n	800516e <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005164:	f023 0206 	bic.w	r2, r3, #6
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	645a      	str	r2, [r3, #68]	; 0x44
 800516c:	e002      	b.n	8005174 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	221c      	movs	r2, #28
 8005182:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d110      	bne.n	80051ae <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0204 	bic.w	r2, r2, #4
 800519a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0208 	orr.w	r2, r2, #8
 80051aa:	605a      	str	r2, [r3, #4]
          break;
 80051ac:	e008      	b.n	80051c0 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 020c 	orr.w	r2, r2, #12
 80051bc:	605a      	str	r2, [r3, #4]
          break;
 80051be:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d107      	bne.n	80051d8 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0210 	bic.w	r2, r2, #16
 80051d6:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051e0:	d004      	beq.n	80051ec <HAL_ADC_Start_IT+0x1bc>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a2e      	ldr	r2, [pc, #184]	; (80052a0 <HAL_ADC_Start_IT+0x270>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d106      	bne.n	80051fa <HAL_ADC_Start_IT+0x1ca>
 80051ec:	4b2d      	ldr	r3, [pc, #180]	; (80052a4 <HAL_ADC_Start_IT+0x274>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d03e      	beq.n	8005276 <HAL_ADC_Start_IT+0x246>
 80051f8:	e005      	b.n	8005206 <HAL_ADC_Start_IT+0x1d6>
 80051fa:	4b2b      	ldr	r3, [pc, #172]	; (80052a8 <HAL_ADC_Start_IT+0x278>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	2b00      	cmp	r3, #0
 8005204:	d037      	beq.n	8005276 <HAL_ADC_Start_IT+0x246>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800520e:	d004      	beq.n	800521a <HAL_ADC_Start_IT+0x1ea>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a22      	ldr	r2, [pc, #136]	; (80052a0 <HAL_ADC_Start_IT+0x270>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d106      	bne.n	8005228 <HAL_ADC_Start_IT+0x1f8>
 800521a:	4b22      	ldr	r3, [pc, #136]	; (80052a4 <HAL_ADC_Start_IT+0x274>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	2b05      	cmp	r3, #5
 8005224:	d027      	beq.n	8005276 <HAL_ADC_Start_IT+0x246>
 8005226:	e005      	b.n	8005234 <HAL_ADC_Start_IT+0x204>
 8005228:	4b1f      	ldr	r3, [pc, #124]	; (80052a8 <HAL_ADC_Start_IT+0x278>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	2b05      	cmp	r3, #5
 8005232:	d020      	beq.n	8005276 <HAL_ADC_Start_IT+0x246>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800523c:	d004      	beq.n	8005248 <HAL_ADC_Start_IT+0x218>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a17      	ldr	r2, [pc, #92]	; (80052a0 <HAL_ADC_Start_IT+0x270>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d106      	bne.n	8005256 <HAL_ADC_Start_IT+0x226>
 8005248:	4b16      	ldr	r3, [pc, #88]	; (80052a4 <HAL_ADC_Start_IT+0x274>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 031f 	and.w	r3, r3, #31
 8005250:	2b09      	cmp	r3, #9
 8005252:	d010      	beq.n	8005276 <HAL_ADC_Start_IT+0x246>
 8005254:	e005      	b.n	8005262 <HAL_ADC_Start_IT+0x232>
 8005256:	4b14      	ldr	r3, [pc, #80]	; (80052a8 <HAL_ADC_Start_IT+0x278>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2b09      	cmp	r3, #9
 8005260:	d009      	beq.n	8005276 <HAL_ADC_Start_IT+0x246>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800526a:	d004      	beq.n	8005276 <HAL_ADC_Start_IT+0x246>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a0e      	ldr	r2, [pc, #56]	; (80052ac <HAL_ADC_Start_IT+0x27c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10f      	bne.n	8005296 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0204 	orr.w	r2, r2, #4
 8005284:	609a      	str	r2, [r3, #8]
 8005286:	e006      	b.n	8005296 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005290:	e001      	b.n	8005296 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005292:	2302      	movs	r3, #2
 8005294:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005296:	7bfb      	ldrb	r3, [r7, #15]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	50000100 	.word	0x50000100
 80052a4:	50000300 	.word	0x50000300
 80052a8:	50000700 	.word	0x50000700
 80052ac:	50000400 	.word	0x50000400

080052b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d106      	bne.n	80052fc <HAL_ADC_IRQHandler+0x30>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d00f      	beq.n	800531c <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8005306:	2b08      	cmp	r3, #8
 8005308:	f040 80c0 	bne.w	800548c <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b08      	cmp	r3, #8
 8005318:	f040 80b8 	bne.w	800548c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	d105      	bne.n	8005334 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800533c:	d004      	beq.n	8005348 <HAL_ADC_IRQHandler+0x7c>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a8e      	ldr	r2, [pc, #568]	; (800557c <HAL_ADC_IRQHandler+0x2b0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d106      	bne.n	8005356 <HAL_ADC_IRQHandler+0x8a>
 8005348:	4b8d      	ldr	r3, [pc, #564]	; (8005580 <HAL_ADC_IRQHandler+0x2b4>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	2b00      	cmp	r3, #0
 8005352:	d03e      	beq.n	80053d2 <HAL_ADC_IRQHandler+0x106>
 8005354:	e005      	b.n	8005362 <HAL_ADC_IRQHandler+0x96>
 8005356:	4b8b      	ldr	r3, [pc, #556]	; (8005584 <HAL_ADC_IRQHandler+0x2b8>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 031f 	and.w	r3, r3, #31
 800535e:	2b00      	cmp	r3, #0
 8005360:	d037      	beq.n	80053d2 <HAL_ADC_IRQHandler+0x106>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800536a:	d004      	beq.n	8005376 <HAL_ADC_IRQHandler+0xaa>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a82      	ldr	r2, [pc, #520]	; (800557c <HAL_ADC_IRQHandler+0x2b0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d106      	bne.n	8005384 <HAL_ADC_IRQHandler+0xb8>
 8005376:	4b82      	ldr	r3, [pc, #520]	; (8005580 <HAL_ADC_IRQHandler+0x2b4>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 031f 	and.w	r3, r3, #31
 800537e:	2b05      	cmp	r3, #5
 8005380:	d027      	beq.n	80053d2 <HAL_ADC_IRQHandler+0x106>
 8005382:	e005      	b.n	8005390 <HAL_ADC_IRQHandler+0xc4>
 8005384:	4b7f      	ldr	r3, [pc, #508]	; (8005584 <HAL_ADC_IRQHandler+0x2b8>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	2b05      	cmp	r3, #5
 800538e:	d020      	beq.n	80053d2 <HAL_ADC_IRQHandler+0x106>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005398:	d004      	beq.n	80053a4 <HAL_ADC_IRQHandler+0xd8>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a77      	ldr	r2, [pc, #476]	; (800557c <HAL_ADC_IRQHandler+0x2b0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d106      	bne.n	80053b2 <HAL_ADC_IRQHandler+0xe6>
 80053a4:	4b76      	ldr	r3, [pc, #472]	; (8005580 <HAL_ADC_IRQHandler+0x2b4>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	2b09      	cmp	r3, #9
 80053ae:	d010      	beq.n	80053d2 <HAL_ADC_IRQHandler+0x106>
 80053b0:	e005      	b.n	80053be <HAL_ADC_IRQHandler+0xf2>
 80053b2:	4b74      	ldr	r3, [pc, #464]	; (8005584 <HAL_ADC_IRQHandler+0x2b8>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	2b09      	cmp	r3, #9
 80053bc:	d009      	beq.n	80053d2 <HAL_ADC_IRQHandler+0x106>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053c6:	d004      	beq.n	80053d2 <HAL_ADC_IRQHandler+0x106>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a6e      	ldr	r2, [pc, #440]	; (8005588 <HAL_ADC_IRQHandler+0x2bc>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d104      	bne.n	80053dc <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	e00f      	b.n	80053fc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053e4:	d004      	beq.n	80053f0 <HAL_ADC_IRQHandler+0x124>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a64      	ldr	r2, [pc, #400]	; (800557c <HAL_ADC_IRQHandler+0x2b0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d102      	bne.n	80053f6 <HAL_ADC_IRQHandler+0x12a>
 80053f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80053f4:	e000      	b.n	80053f8 <HAL_ADC_IRQHandler+0x12c>
 80053f6:	4b64      	ldr	r3, [pc, #400]	; (8005588 <HAL_ADC_IRQHandler+0x2bc>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005406:	2b00      	cmp	r3, #0
 8005408:	d139      	bne.n	800547e <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8005410:	2b00      	cmp	r3, #0
 8005412:	d134      	bne.n	800547e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b08      	cmp	r3, #8
 8005420:	d12d      	bne.n	800547e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d11a      	bne.n	8005466 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 020c 	bic.w	r2, r2, #12
 800543e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d112      	bne.n	800547e <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	f043 0201 	orr.w	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	641a      	str	r2, [r3, #64]	; 0x40
 8005464:	e00b      	b.n	800547e <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	f043 0210 	orr.w	r2, r3, #16
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	f043 0201 	orr.w	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff fbd8 	bl	8004c34 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	220c      	movs	r2, #12
 800548a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b20      	cmp	r3, #32
 8005498:	d106      	bne.n	80054a8 <HAL_ADC_IRQHandler+0x1dc>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	d00f      	beq.n	80054c8 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	f040 8143 	bne.w	800573e <HAL_ADC_IRQHandler+0x472>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	f040 813b 	bne.w	800573e <HAL_ADC_IRQHandler+0x472>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054dc:	d004      	beq.n	80054e8 <HAL_ADC_IRQHandler+0x21c>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a26      	ldr	r2, [pc, #152]	; (800557c <HAL_ADC_IRQHandler+0x2b0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d106      	bne.n	80054f6 <HAL_ADC_IRQHandler+0x22a>
 80054e8:	4b25      	ldr	r3, [pc, #148]	; (8005580 <HAL_ADC_IRQHandler+0x2b4>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 031f 	and.w	r3, r3, #31
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d03e      	beq.n	8005572 <HAL_ADC_IRQHandler+0x2a6>
 80054f4:	e005      	b.n	8005502 <HAL_ADC_IRQHandler+0x236>
 80054f6:	4b23      	ldr	r3, [pc, #140]	; (8005584 <HAL_ADC_IRQHandler+0x2b8>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d037      	beq.n	8005572 <HAL_ADC_IRQHandler+0x2a6>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800550a:	d004      	beq.n	8005516 <HAL_ADC_IRQHandler+0x24a>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a1a      	ldr	r2, [pc, #104]	; (800557c <HAL_ADC_IRQHandler+0x2b0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d106      	bne.n	8005524 <HAL_ADC_IRQHandler+0x258>
 8005516:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <HAL_ADC_IRQHandler+0x2b4>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	2b05      	cmp	r3, #5
 8005520:	d027      	beq.n	8005572 <HAL_ADC_IRQHandler+0x2a6>
 8005522:	e005      	b.n	8005530 <HAL_ADC_IRQHandler+0x264>
 8005524:	4b17      	ldr	r3, [pc, #92]	; (8005584 <HAL_ADC_IRQHandler+0x2b8>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	2b05      	cmp	r3, #5
 800552e:	d020      	beq.n	8005572 <HAL_ADC_IRQHandler+0x2a6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005538:	d004      	beq.n	8005544 <HAL_ADC_IRQHandler+0x278>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a0f      	ldr	r2, [pc, #60]	; (800557c <HAL_ADC_IRQHandler+0x2b0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d106      	bne.n	8005552 <HAL_ADC_IRQHandler+0x286>
 8005544:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <HAL_ADC_IRQHandler+0x2b4>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 031f 	and.w	r3, r3, #31
 800554c:	2b09      	cmp	r3, #9
 800554e:	d010      	beq.n	8005572 <HAL_ADC_IRQHandler+0x2a6>
 8005550:	e005      	b.n	800555e <HAL_ADC_IRQHandler+0x292>
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <HAL_ADC_IRQHandler+0x2b8>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	2b09      	cmp	r3, #9
 800555c:	d009      	beq.n	8005572 <HAL_ADC_IRQHandler+0x2a6>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005566:	d004      	beq.n	8005572 <HAL_ADC_IRQHandler+0x2a6>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a06      	ldr	r2, [pc, #24]	; (8005588 <HAL_ADC_IRQHandler+0x2bc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d10c      	bne.n	800558c <HAL_ADC_IRQHandler+0x2c0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	e017      	b.n	80055ac <HAL_ADC_IRQHandler+0x2e0>
 800557c:	50000100 	.word	0x50000100
 8005580:	50000300 	.word	0x50000300
 8005584:	50000700 	.word	0x50000700
 8005588:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005594:	d004      	beq.n	80055a0 <HAL_ADC_IRQHandler+0x2d4>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a5b      	ldr	r2, [pc, #364]	; (8005708 <HAL_ADC_IRQHandler+0x43c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d102      	bne.n	80055a6 <HAL_ADC_IRQHandler+0x2da>
 80055a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80055a4:	e000      	b.n	80055a8 <HAL_ADC_IRQHandler+0x2dc>
 80055a6:	4b59      	ldr	r3, [pc, #356]	; (800570c <HAL_ADC_IRQHandler+0x440>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f040 80ba 	bne.w	8005730 <HAL_ADC_IRQHandler+0x464>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00d      	beq.n	80055e2 <HAL_ADC_IRQHandler+0x316>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f040 80ad 	bne.w	8005730 <HAL_ADC_IRQHandler+0x464>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f040 80a7 	bne.w	8005730 <HAL_ADC_IRQHandler+0x464>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ec:	2b40      	cmp	r3, #64	; 0x40
 80055ee:	f040 809f 	bne.w	8005730 <HAL_ADC_IRQHandler+0x464>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055fa:	d004      	beq.n	8005606 <HAL_ADC_IRQHandler+0x33a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a41      	ldr	r2, [pc, #260]	; (8005708 <HAL_ADC_IRQHandler+0x43c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d106      	bne.n	8005614 <HAL_ADC_IRQHandler+0x348>
 8005606:	4b42      	ldr	r3, [pc, #264]	; (8005710 <HAL_ADC_IRQHandler+0x444>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 031f 	and.w	r3, r3, #31
 800560e:	2b00      	cmp	r3, #0
 8005610:	d03e      	beq.n	8005690 <HAL_ADC_IRQHandler+0x3c4>
 8005612:	e005      	b.n	8005620 <HAL_ADC_IRQHandler+0x354>
 8005614:	4b3f      	ldr	r3, [pc, #252]	; (8005714 <HAL_ADC_IRQHandler+0x448>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 031f 	and.w	r3, r3, #31
 800561c:	2b00      	cmp	r3, #0
 800561e:	d037      	beq.n	8005690 <HAL_ADC_IRQHandler+0x3c4>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005628:	d004      	beq.n	8005634 <HAL_ADC_IRQHandler+0x368>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a36      	ldr	r2, [pc, #216]	; (8005708 <HAL_ADC_IRQHandler+0x43c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d106      	bne.n	8005642 <HAL_ADC_IRQHandler+0x376>
 8005634:	4b36      	ldr	r3, [pc, #216]	; (8005710 <HAL_ADC_IRQHandler+0x444>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	2b06      	cmp	r3, #6
 800563e:	d027      	beq.n	8005690 <HAL_ADC_IRQHandler+0x3c4>
 8005640:	e005      	b.n	800564e <HAL_ADC_IRQHandler+0x382>
 8005642:	4b34      	ldr	r3, [pc, #208]	; (8005714 <HAL_ADC_IRQHandler+0x448>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	2b06      	cmp	r3, #6
 800564c:	d020      	beq.n	8005690 <HAL_ADC_IRQHandler+0x3c4>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005656:	d004      	beq.n	8005662 <HAL_ADC_IRQHandler+0x396>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a2a      	ldr	r2, [pc, #168]	; (8005708 <HAL_ADC_IRQHandler+0x43c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d106      	bne.n	8005670 <HAL_ADC_IRQHandler+0x3a4>
 8005662:	4b2b      	ldr	r3, [pc, #172]	; (8005710 <HAL_ADC_IRQHandler+0x444>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	2b07      	cmp	r3, #7
 800566c:	d010      	beq.n	8005690 <HAL_ADC_IRQHandler+0x3c4>
 800566e:	e005      	b.n	800567c <HAL_ADC_IRQHandler+0x3b0>
 8005670:	4b28      	ldr	r3, [pc, #160]	; (8005714 <HAL_ADC_IRQHandler+0x448>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	2b07      	cmp	r3, #7
 800567a:	d009      	beq.n	8005690 <HAL_ADC_IRQHandler+0x3c4>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005684:	d004      	beq.n	8005690 <HAL_ADC_IRQHandler+0x3c4>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a20      	ldr	r2, [pc, #128]	; (800570c <HAL_ADC_IRQHandler+0x440>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d104      	bne.n	800569a <HAL_ADC_IRQHandler+0x3ce>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e00f      	b.n	80056ba <HAL_ADC_IRQHandler+0x3ee>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056a2:	d004      	beq.n	80056ae <HAL_ADC_IRQHandler+0x3e2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a17      	ldr	r2, [pc, #92]	; (8005708 <HAL_ADC_IRQHandler+0x43c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d102      	bne.n	80056b4 <HAL_ADC_IRQHandler+0x3e8>
 80056ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80056b2:	e000      	b.n	80056b6 <HAL_ADC_IRQHandler+0x3ea>
 80056b4:	4b15      	ldr	r3, [pc, #84]	; (800570c <HAL_ADC_IRQHandler+0x440>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d135      	bne.n	8005730 <HAL_ADC_IRQHandler+0x464>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d122      	bne.n	8005718 <HAL_ADC_IRQHandler+0x44c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056e0:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d11a      	bne.n	8005730 <HAL_ADC_IRQHandler+0x464>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f043 0201 	orr.w	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	641a      	str	r2, [r3, #64]	; 0x40
 8005706:	e013      	b.n	8005730 <HAL_ADC_IRQHandler+0x464>
 8005708:	50000100 	.word	0x50000100
 800570c:	50000400 	.word	0x50000400
 8005710:	50000300 	.word	0x50000300
 8005714:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	f043 0210 	orr.w	r2, r3, #16
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005728:	f043 0201 	orr.w	r2, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f8db 	bl	80058ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2260      	movs	r2, #96	; 0x60
 800573c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d113      	bne.n	8005774 <HAL_ADC_IRQHandler+0x4a8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005756:	2b80      	cmp	r3, #128	; 0x80
 8005758:	d10c      	bne.n	8005774 <HAL_ADC_IRQHandler+0x4a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff fa6e 	bl	8004c48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2280      	movs	r2, #128	; 0x80
 8005772:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005782:	d115      	bne.n	80057b0 <HAL_ADC_IRQHandler+0x4e4>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005792:	d10d      	bne.n	80057b0 <HAL_ADC_IRQHandler+0x4e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f8b7 	bl	8005914 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ae:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057be:	d115      	bne.n	80057ec <HAL_ADC_IRQHandler+0x520>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ce:	d10d      	bne.n	80057ec <HAL_ADC_IRQHandler+0x520>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f8a3 	bl	8005928 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ea:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0310 	and.w	r3, r3, #16
 80057f6:	2b10      	cmp	r3, #16
 80057f8:	d149      	bne.n	800588e <HAL_ADC_IRQHandler+0x5c2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b10      	cmp	r3, #16
 8005806:	d142      	bne.n	800588e <HAL_ADC_IRQHandler+0x5c2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580c:	2b01      	cmp	r3, #1
 800580e:	d102      	bne.n	8005816 <HAL_ADC_IRQHandler+0x54a>
    {
      overrun_error = 1U;
 8005810:	2301      	movs	r3, #1
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e025      	b.n	8005862 <HAL_ADC_IRQHandler+0x596>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800581e:	d004      	beq.n	800582a <HAL_ADC_IRQHandler+0x55e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a2e      	ldr	r2, [pc, #184]	; (80058e0 <HAL_ADC_IRQHandler+0x614>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d101      	bne.n	800582e <HAL_ADC_IRQHandler+0x562>
 800582a:	4b2e      	ldr	r3, [pc, #184]	; (80058e4 <HAL_ADC_IRQHandler+0x618>)
 800582c:	e000      	b.n	8005830 <HAL_ADC_IRQHandler+0x564>
 800582e:	4b2e      	ldr	r3, [pc, #184]	; (80058e8 <HAL_ADC_IRQHandler+0x61c>)
 8005830:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <HAL_ADC_IRQHandler+0x586>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b01      	cmp	r3, #1
 800584a:	d10a      	bne.n	8005862 <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 800584c:	2301      	movs	r3, #1
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	e007      	b.n	8005862 <HAL_ADC_IRQHandler+0x596>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 800585e:	2301      	movs	r3, #1
 8005860:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d10e      	bne.n	8005886 <HAL_ADC_IRQHandler+0x5ba>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005878:	f043 0202 	orr.w	r2, r3, #2
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff f9eb 	bl	8004c5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2210      	movs	r2, #16
 800588c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589c:	d11b      	bne.n	80058d6 <HAL_ADC_IRQHandler+0x60a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ac:	d113      	bne.n	80058d6 <HAL_ADC_IRQHandler+0x60a>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058be:	f043 0208 	orr.w	r2, r3, #8
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058ce:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f815 	bl	8005900 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80058d6:	bf00      	nop
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	50000100 	.word	0x50000100
 80058e4:	50000300 	.word	0x50000300
 80058e8:	50000700 	.word	0x50000700

080058ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800593c:	b480      	push	{r7}
 800593e:	b09b      	sub	sp, #108	; 0x6c
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_ADC_ConfigChannel+0x22>
 800595a:	2302      	movs	r3, #2
 800595c:	e2ca      	b.n	8005ef4 <HAL_ADC_ConfigChannel+0x5b8>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	f040 82ae 	bne.w	8005ed2 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b04      	cmp	r3, #4
 800597c:	d81c      	bhi.n	80059b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	4413      	add	r3, r2
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	461a      	mov	r2, r3
 8005992:	231f      	movs	r3, #31
 8005994:	4093      	lsls	r3, r2
 8005996:	43db      	mvns	r3, r3
 8005998:	4019      	ands	r1, r3
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	4413      	add	r3, r2
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	fa00 f203 	lsl.w	r2, r0, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	631a      	str	r2, [r3, #48]	; 0x30
 80059b6:	e063      	b.n	8005a80 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b09      	cmp	r3, #9
 80059be:	d81e      	bhi.n	80059fe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	4413      	add	r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	3b1e      	subs	r3, #30
 80059d4:	221f      	movs	r2, #31
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	43db      	mvns	r3, r3
 80059dc:	4019      	ands	r1, r3
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	4413      	add	r3, r2
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	3b1e      	subs	r3, #30
 80059f0:	fa00 f203 	lsl.w	r2, r0, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	635a      	str	r2, [r3, #52]	; 0x34
 80059fc:	e040      	b.n	8005a80 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b0e      	cmp	r3, #14
 8005a04:	d81e      	bhi.n	8005a44 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	4413      	add	r3, r2
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	3b3c      	subs	r3, #60	; 0x3c
 8005a1a:	221f      	movs	r2, #31
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	43db      	mvns	r3, r3
 8005a22:	4019      	ands	r1, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	4413      	add	r3, r2
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	3b3c      	subs	r3, #60	; 0x3c
 8005a36:	fa00 f203 	lsl.w	r2, r0, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	639a      	str	r2, [r3, #56]	; 0x38
 8005a42:	e01d      	b.n	8005a80 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	4413      	add	r3, r2
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	3b5a      	subs	r3, #90	; 0x5a
 8005a58:	221f      	movs	r2, #31
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	43db      	mvns	r3, r3
 8005a60:	4019      	ands	r1, r3
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	6818      	ldr	r0, [r3, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	3b5a      	subs	r3, #90	; 0x5a
 8005a74:	fa00 f203 	lsl.w	r2, r0, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 030c 	and.w	r3, r3, #12
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f040 80e5 	bne.w	8005c5a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b09      	cmp	r3, #9
 8005a96:	d91c      	bls.n	8005ad2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6999      	ldr	r1, [r3, #24]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3b1e      	subs	r3, #30
 8005aaa:	2207      	movs	r2, #7
 8005aac:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	4019      	ands	r1, r3
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	6898      	ldr	r0, [r3, #8]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3b1e      	subs	r3, #30
 8005ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	619a      	str	r2, [r3, #24]
 8005ad0:	e019      	b.n	8005b06 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6959      	ldr	r1, [r3, #20]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	4613      	mov	r3, r2
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	4413      	add	r3, r2
 8005ae2:	2207      	movs	r2, #7
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	4019      	ands	r1, r3
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	6898      	ldr	r0, [r3, #8]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	4613      	mov	r3, r2
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	4413      	add	r3, r2
 8005afa:	fa00 f203 	lsl.w	r2, r0, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	695a      	ldr	r2, [r3, #20]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	08db      	lsrs	r3, r3, #3
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d84f      	bhi.n	8005bc8 <HAL_ADC_ConfigChannel+0x28c>
 8005b28:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <HAL_ADC_ConfigChannel+0x1f4>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b41 	.word	0x08005b41
 8005b34:	08005b63 	.word	0x08005b63
 8005b38:	08005b85 	.word	0x08005b85
 8005b3c:	08005ba7 	.word	0x08005ba7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b46:	4b9a      	ldr	r3, [pc, #616]	; (8005db0 <HAL_ADC_ConfigChannel+0x474>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	6812      	ldr	r2, [r2, #0]
 8005b4e:	0691      	lsls	r1, r2, #26
 8005b50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b52:	430a      	orrs	r2, r1
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005b5e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005b60:	e07e      	b.n	8005c60 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005b68:	4b91      	ldr	r3, [pc, #580]	; (8005db0 <HAL_ADC_ConfigChannel+0x474>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	6812      	ldr	r2, [r2, #0]
 8005b70:	0691      	lsls	r1, r2, #26
 8005b72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b74:	430a      	orrs	r2, r1
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005b80:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005b82:	e06d      	b.n	8005c60 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005b8a:	4b89      	ldr	r3, [pc, #548]	; (8005db0 <HAL_ADC_ConfigChannel+0x474>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	0691      	lsls	r1, r2, #26
 8005b94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b96:	430a      	orrs	r2, r1
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005ba2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005ba4:	e05c      	b.n	8005c60 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005bac:	4b80      	ldr	r3, [pc, #512]	; (8005db0 <HAL_ADC_ConfigChannel+0x474>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	0691      	lsls	r1, r2, #26
 8005bb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005bc4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005bc6:	e04b      	b.n	8005c60 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	069b      	lsls	r3, r3, #26
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d107      	bne.n	8005bec <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005bea:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	069b      	lsls	r3, r3, #26
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d107      	bne.n	8005c10 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005c0e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	069b      	lsls	r3, r3, #26
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d107      	bne.n	8005c34 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005c32:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	069b      	lsls	r3, r3, #26
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d10a      	bne.n	8005c5e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005c56:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005c58:	e001      	b.n	8005c5e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8005c5a:	bf00      	nop
 8005c5c:	e000      	b.n	8005c60 <HAL_ADC_ConfigChannel+0x324>
      break;
 8005c5e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d108      	bne.n	8005c80 <HAL_ADC_ConfigChannel+0x344>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_ADC_ConfigChannel+0x344>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <HAL_ADC_ConfigChannel+0x346>
 8005c80:	2300      	movs	r3, #0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f040 8130 	bne.w	8005ee8 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d00f      	beq.n	8005cb0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	43da      	mvns	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	400a      	ands	r2, r1
 8005caa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005cae:	e049      	b.n	8005d44 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	409a      	lsls	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b09      	cmp	r3, #9
 8005cd0:	d91c      	bls.n	8005d0c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6999      	ldr	r1, [r3, #24]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	3b1b      	subs	r3, #27
 8005ce4:	2207      	movs	r2, #7
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	43db      	mvns	r3, r3
 8005cec:	4019      	ands	r1, r3
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6898      	ldr	r0, [r3, #8]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3b1b      	subs	r3, #27
 8005cfe:	fa00 f203 	lsl.w	r2, r0, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	619a      	str	r2, [r3, #24]
 8005d0a:	e01b      	b.n	8005d44 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6959      	ldr	r1, [r3, #20]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	4613      	mov	r3, r2
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	4413      	add	r3, r2
 8005d1e:	2207      	movs	r2, #7
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	43db      	mvns	r3, r3
 8005d26:	4019      	ands	r1, r3
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	6898      	ldr	r0, [r3, #8]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	4613      	mov	r3, r2
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	4413      	add	r3, r2
 8005d38:	fa00 f203 	lsl.w	r2, r0, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d4c:	d004      	beq.n	8005d58 <HAL_ADC_ConfigChannel+0x41c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a18      	ldr	r2, [pc, #96]	; (8005db4 <HAL_ADC_ConfigChannel+0x478>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d101      	bne.n	8005d5c <HAL_ADC_ConfigChannel+0x420>
 8005d58:	4b17      	ldr	r3, [pc, #92]	; (8005db8 <HAL_ADC_ConfigChannel+0x47c>)
 8005d5a:	e000      	b.n	8005d5e <HAL_ADC_ConfigChannel+0x422>
 8005d5c:	4b17      	ldr	r3, [pc, #92]	; (8005dbc <HAL_ADC_ConfigChannel+0x480>)
 8005d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b10      	cmp	r3, #16
 8005d66:	d105      	bne.n	8005d74 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d015      	beq.n	8005da0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005d78:	2b11      	cmp	r3, #17
 8005d7a:	d105      	bne.n	8005d88 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00b      	beq.n	8005da0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005d8c:	2b12      	cmp	r3, #18
 8005d8e:	f040 80ab 	bne.w	8005ee8 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f040 80a4 	bne.w	8005ee8 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005da8:	d10a      	bne.n	8005dc0 <HAL_ADC_ConfigChannel+0x484>
 8005daa:	4b02      	ldr	r3, [pc, #8]	; (8005db4 <HAL_ADC_ConfigChannel+0x478>)
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	e022      	b.n	8005df6 <HAL_ADC_ConfigChannel+0x4ba>
 8005db0:	83fff000 	.word	0x83fff000
 8005db4:	50000100 	.word	0x50000100
 8005db8:	50000300 	.word	0x50000300
 8005dbc:	50000700 	.word	0x50000700
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a4e      	ldr	r2, [pc, #312]	; (8005f00 <HAL_ADC_ConfigChannel+0x5c4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d103      	bne.n	8005dd2 <HAL_ADC_ConfigChannel+0x496>
 8005dca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e011      	b.n	8005df6 <HAL_ADC_ConfigChannel+0x4ba>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a4b      	ldr	r2, [pc, #300]	; (8005f04 <HAL_ADC_ConfigChannel+0x5c8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d102      	bne.n	8005de2 <HAL_ADC_ConfigChannel+0x4a6>
 8005ddc:	4b4a      	ldr	r3, [pc, #296]	; (8005f08 <HAL_ADC_ConfigChannel+0x5cc>)
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	e009      	b.n	8005df6 <HAL_ADC_ConfigChannel+0x4ba>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a48      	ldr	r2, [pc, #288]	; (8005f08 <HAL_ADC_ConfigChannel+0x5cc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d102      	bne.n	8005df2 <HAL_ADC_ConfigChannel+0x4b6>
 8005dec:	4b45      	ldr	r3, [pc, #276]	; (8005f04 <HAL_ADC_ConfigChannel+0x5c8>)
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e001      	b.n	8005df6 <HAL_ADC_ConfigChannel+0x4ba>
 8005df2:	2300      	movs	r3, #0
 8005df4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 0303 	and.w	r3, r3, #3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d108      	bne.n	8005e16 <HAL_ADC_ConfigChannel+0x4da>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d101      	bne.n	8005e16 <HAL_ADC_ConfigChannel+0x4da>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <HAL_ADC_ConfigChannel+0x4dc>
 8005e16:	2300      	movs	r3, #0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d150      	bne.n	8005ebe <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005e1c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d010      	beq.n	8005e44 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d107      	bne.n	8005e3e <HAL_ADC_ConfigChannel+0x502>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_ADC_ConfigChannel+0x502>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <HAL_ADC_ConfigChannel+0x504>
 8005e3e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d13c      	bne.n	8005ebe <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d11d      	bne.n	8005e88 <HAL_ADC_ConfigChannel+0x54c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e54:	d118      	bne.n	8005e88 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e60:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005e62:	4b2a      	ldr	r3, [pc, #168]	; (8005f0c <HAL_ADC_ConfigChannel+0x5d0>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a2a      	ldr	r2, [pc, #168]	; (8005f10 <HAL_ADC_ConfigChannel+0x5d4>)
 8005e68:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6c:	0c9a      	lsrs	r2, r3, #18
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005e78:	e002      	b.n	8005e80 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1f9      	bne.n	8005e7a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005e86:	e02e      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b11      	cmp	r3, #17
 8005e8e:	d10b      	bne.n	8005ea8 <HAL_ADC_ConfigChannel+0x56c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e98:	d106      	bne.n	8005ea8 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ea4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005ea6:	e01e      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b12      	cmp	r3, #18
 8005eae:	d11a      	bne.n	8005ee6 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eba:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005ebc:	e013      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	f043 0220 	orr.w	r2, r3, #32
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005ed0:	e00a      	b.n	8005ee8 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f043 0220 	orr.w	r2, r3, #32
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005ee4:	e000      	b.n	8005ee8 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005ee6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005ef0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	376c      	adds	r7, #108	; 0x6c
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	50000100 	.word	0x50000100
 8005f04:	50000400 	.word	0x50000400
 8005f08:	50000500 	.word	0x50000500
 8005f0c:	20000128 	.word	0x20000128
 8005f10:	431bde83 	.word	0x431bde83

08005f14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b099      	sub	sp, #100	; 0x64
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f2c:	d102      	bne.n	8005f34 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8005f2e:	4b6d      	ldr	r3, [pc, #436]	; (80060e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005f30:	60bb      	str	r3, [r7, #8]
 8005f32:	e01a      	b.n	8005f6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a6a      	ldr	r2, [pc, #424]	; (80060e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d103      	bne.n	8005f46 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8005f3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005f42:	60bb      	str	r3, [r7, #8]
 8005f44:	e011      	b.n	8005f6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a67      	ldr	r2, [pc, #412]	; (80060e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d102      	bne.n	8005f56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005f50:	4b66      	ldr	r3, [pc, #408]	; (80060ec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005f52:	60bb      	str	r3, [r7, #8]
 8005f54:	e009      	b.n	8005f6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a64      	ldr	r2, [pc, #400]	; (80060ec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d102      	bne.n	8005f66 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005f60:	4b61      	ldr	r3, [pc, #388]	; (80060e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005f62:	60bb      	str	r3, [r7, #8]
 8005f64:	e001      	b.n	8005f6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e0b0      	b.n	80060d6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e0a9      	b.n	80060d6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f040 808d 	bne.w	80060b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f040 8086 	bne.w	80060b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fb0:	d004      	beq.n	8005fbc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a4b      	ldr	r2, [pc, #300]	; (80060e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d101      	bne.n	8005fc0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005fbc:	4b4c      	ldr	r3, [pc, #304]	; (80060f0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8005fbe:	e000      	b.n	8005fc2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005fc0:	4b4c      	ldr	r3, [pc, #304]	; (80060f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8005fc2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d040      	beq.n	800604e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	6859      	ldr	r1, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fde:	035b      	lsls	r3, r3, #13
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d108      	bne.n	8006008 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006004:	2301      	movs	r3, #1
 8006006:	e000      	b.n	800600a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8006008:	2300      	movs	r3, #0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d15c      	bne.n	80060c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	2b01      	cmp	r3, #1
 8006018:	d107      	bne.n	800602a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006026:	2301      	movs	r3, #1
 8006028:	e000      	b.n	800602c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800602a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800602c:	2b00      	cmp	r3, #0
 800602e:	d14b      	bne.n	80060c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006038:	f023 030f 	bic.w	r3, r3, #15
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	6811      	ldr	r1, [r2, #0]
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	6892      	ldr	r2, [r2, #8]
 8006044:	430a      	orrs	r2, r1
 8006046:	431a      	orrs	r2, r3
 8006048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800604a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800604c:	e03c      	b.n	80060c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800604e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006058:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 0303 	and.w	r3, r3, #3
 8006064:	2b01      	cmp	r3, #1
 8006066:	d108      	bne.n	800607a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800607a:	2300      	movs	r3, #0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d123      	bne.n	80060c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 0303 	and.w	r3, r3, #3
 8006088:	2b01      	cmp	r3, #1
 800608a:	d107      	bne.n	800609c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006098:	2301      	movs	r3, #1
 800609a:	e000      	b.n	800609e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800609c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d112      	bne.n	80060c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80060a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80060aa:	f023 030f 	bic.w	r3, r3, #15
 80060ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060b0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80060b2:	e009      	b.n	80060c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	f043 0220 	orr.w	r2, r3, #32
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80060c6:	e000      	b.n	80060ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80060c8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80060d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80060d6:	4618      	mov	r0, r3
 80060d8:	3764      	adds	r7, #100	; 0x64
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	50000100 	.word	0x50000100
 80060e8:	50000400 	.word	0x50000400
 80060ec:	50000500 	.word	0x50000500
 80060f0:	50000300 	.word	0x50000300
 80060f4:	50000700 	.word	0x50000700

080060f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b01      	cmp	r3, #1
 8006110:	d108      	bne.n	8006124 <ADC_Enable+0x2c>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <ADC_Enable+0x2c>
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <ADC_Enable+0x2e>
 8006124:	2300      	movs	r3, #0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d143      	bne.n	80061b2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	4b22      	ldr	r3, [pc, #136]	; (80061bc <ADC_Enable+0xc4>)
 8006132:	4013      	ands	r3, r2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00d      	beq.n	8006154 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	f043 0210 	orr.w	r2, r3, #16
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006148:	f043 0201 	orr.w	r2, r3, #1
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e02f      	b.n	80061b4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0201 	orr.w	r2, r2, #1
 8006162:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8006164:	f7fe fd36 	bl	8004bd4 <HAL_GetTick>
 8006168:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800616a:	e01b      	b.n	80061a4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800616c:	f7fe fd32 	bl	8004bd4 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d914      	bls.n	80061a4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b01      	cmp	r3, #1
 8006186:	d00d      	beq.n	80061a4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	f043 0210 	orr.w	r2, r3, #16
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006198:	f043 0201 	orr.w	r2, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e007      	b.n	80061b4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d1dc      	bne.n	800616c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	8000003f 	.word	0x8000003f

080061c0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d108      	bne.n	80061ec <ADC_Disable+0x2c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <ADC_Disable+0x2c>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <ADC_Disable+0x2e>
 80061ec:	2300      	movs	r3, #0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d047      	beq.n	8006282 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f003 030d 	and.w	r3, r3, #13
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d10f      	bne.n	8006220 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0202 	orr.w	r2, r2, #2
 800620e:	609a      	str	r2, [r3, #8]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2203      	movs	r2, #3
 8006216:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8006218:	f7fe fcdc 	bl	8004bd4 <HAL_GetTick>
 800621c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800621e:	e029      	b.n	8006274 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	f043 0210 	orr.w	r2, r3, #16
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006230:	f043 0201 	orr.w	r2, r3, #1
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e023      	b.n	8006284 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800623c:	f7fe fcca 	bl	8004bd4 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d914      	bls.n	8006274 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b01      	cmp	r3, #1
 8006256:	d10d      	bne.n	8006274 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625c:	f043 0210 	orr.w	r2, r3, #16
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006268:	f043 0201 	orr.w	r2, r3, #1
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e007      	b.n	8006284 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b01      	cmp	r3, #1
 8006280:	d0dc      	beq.n	800623c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800629c:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <__NVIC_SetPriorityGrouping+0x44>)
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062a8:	4013      	ands	r3, r2
 80062aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062be:	4a04      	ldr	r2, [pc, #16]	; (80062d0 <__NVIC_SetPriorityGrouping+0x44>)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	60d3      	str	r3, [r2, #12]
}
 80062c4:	bf00      	nop
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	e000ed00 	.word	0xe000ed00

080062d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062d8:	4b04      	ldr	r3, [pc, #16]	; (80062ec <__NVIC_GetPriorityGrouping+0x18>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	0a1b      	lsrs	r3, r3, #8
 80062de:	f003 0307 	and.w	r3, r3, #7
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	e000ed00 	.word	0xe000ed00

080062f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	4603      	mov	r3, r0
 80062f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	db0b      	blt.n	800631a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	f003 021f 	and.w	r2, r3, #31
 8006308:	4907      	ldr	r1, [pc, #28]	; (8006328 <__NVIC_EnableIRQ+0x38>)
 800630a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	2001      	movs	r0, #1
 8006312:	fa00 f202 	lsl.w	r2, r0, r2
 8006316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	e000e100 	.word	0xe000e100

0800632c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	4603      	mov	r3, r0
 8006334:	6039      	str	r1, [r7, #0]
 8006336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800633c:	2b00      	cmp	r3, #0
 800633e:	db0a      	blt.n	8006356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	b2da      	uxtb	r2, r3
 8006344:	490c      	ldr	r1, [pc, #48]	; (8006378 <__NVIC_SetPriority+0x4c>)
 8006346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800634a:	0112      	lsls	r2, r2, #4
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	440b      	add	r3, r1
 8006350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006354:	e00a      	b.n	800636c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	b2da      	uxtb	r2, r3
 800635a:	4908      	ldr	r1, [pc, #32]	; (800637c <__NVIC_SetPriority+0x50>)
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	3b04      	subs	r3, #4
 8006364:	0112      	lsls	r2, r2, #4
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	440b      	add	r3, r1
 800636a:	761a      	strb	r2, [r3, #24]
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	e000e100 	.word	0xe000e100
 800637c:	e000ed00 	.word	0xe000ed00

08006380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006380:	b480      	push	{r7}
 8006382:	b089      	sub	sp, #36	; 0x24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f1c3 0307 	rsb	r3, r3, #7
 800639a:	2b04      	cmp	r3, #4
 800639c:	bf28      	it	cs
 800639e:	2304      	movcs	r3, #4
 80063a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	3304      	adds	r3, #4
 80063a6:	2b06      	cmp	r3, #6
 80063a8:	d902      	bls.n	80063b0 <NVIC_EncodePriority+0x30>
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	3b03      	subs	r3, #3
 80063ae:	e000      	b.n	80063b2 <NVIC_EncodePriority+0x32>
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063b4:	f04f 32ff 	mov.w	r2, #4294967295
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	43da      	mvns	r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	401a      	ands	r2, r3
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063c8:	f04f 31ff 	mov.w	r1, #4294967295
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	fa01 f303 	lsl.w	r3, r1, r3
 80063d2:	43d9      	mvns	r1, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063d8:	4313      	orrs	r3, r2
         );
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3724      	adds	r7, #36	; 0x24
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
	...

080063e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063f8:	d301      	bcc.n	80063fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063fa:	2301      	movs	r3, #1
 80063fc:	e00f      	b.n	800641e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063fe:	4a0a      	ldr	r2, [pc, #40]	; (8006428 <SysTick_Config+0x40>)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3b01      	subs	r3, #1
 8006404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006406:	210f      	movs	r1, #15
 8006408:	f04f 30ff 	mov.w	r0, #4294967295
 800640c:	f7ff ff8e 	bl	800632c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <SysTick_Config+0x40>)
 8006412:	2200      	movs	r2, #0
 8006414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006416:	4b04      	ldr	r3, [pc, #16]	; (8006428 <SysTick_Config+0x40>)
 8006418:	2207      	movs	r2, #7
 800641a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	e000e010 	.word	0xe000e010

0800642c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff ff29 	bl	800628c <__NVIC_SetPriorityGrouping>
}
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b086      	sub	sp, #24
 8006446:	af00      	add	r7, sp, #0
 8006448:	4603      	mov	r3, r0
 800644a:	60b9      	str	r1, [r7, #8]
 800644c:	607a      	str	r2, [r7, #4]
 800644e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006454:	f7ff ff3e 	bl	80062d4 <__NVIC_GetPriorityGrouping>
 8006458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	6978      	ldr	r0, [r7, #20]
 8006460:	f7ff ff8e 	bl	8006380 <NVIC_EncodePriority>
 8006464:	4602      	mov	r2, r0
 8006466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800646a:	4611      	mov	r1, r2
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff ff5d 	bl	800632c <__NVIC_SetPriority>
}
 8006472:	bf00      	nop
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	4603      	mov	r3, r0
 8006482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff ff31 	bl	80062f0 <__NVIC_EnableIRQ>
}
 800648e:	bf00      	nop
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff ffa2 	bl	80063e8 <SysTick_Config>
 80064a4:	4603      	mov	r3, r0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d008      	beq.n	80064d2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2204      	movs	r2, #4
 80064c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e020      	b.n	8006514 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 020e 	bic.w	r2, r2, #14
 80064e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fa:	2101      	movs	r1, #1
 80064fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006500:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006532:	2b02      	cmp	r3, #2
 8006534:	d005      	beq.n	8006542 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2204      	movs	r2, #4
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	73fb      	strb	r3, [r7, #15]
 8006540:	e027      	b.n	8006592 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 020e 	bic.w	r2, r2, #14
 8006550:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0201 	bic.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656a:	2101      	movs	r1, #1
 800656c:	fa01 f202 	lsl.w	r2, r1, r2
 8006570:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	4798      	blx	r3
    } 
  }
  return status;
 8006592:	7bfb      	ldrb	r3, [r7, #15]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065aa:	e154      	b.n	8006856 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	2101      	movs	r1, #1
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	fa01 f303 	lsl.w	r3, r1, r3
 80065b8:	4013      	ands	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 8146 	beq.w	8006850 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d005      	beq.n	80065dc <HAL_GPIO_Init+0x40>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d130      	bne.n	800663e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	2203      	movs	r2, #3
 80065e8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ec:	43db      	mvns	r3, r3
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4013      	ands	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006612:	2201      	movs	r2, #1
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	43db      	mvns	r3, r3
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4013      	ands	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	091b      	lsrs	r3, r3, #4
 8006628:	f003 0201 	and.w	r2, r3, #1
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	2b03      	cmp	r3, #3
 8006648:	d017      	beq.n	800667a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	2203      	movs	r2, #3
 8006656:	fa02 f303 	lsl.w	r3, r2, r3
 800665a:	43db      	mvns	r3, r3
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4013      	ands	r3, r2
 8006660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	fa02 f303 	lsl.w	r3, r2, r3
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d123      	bne.n	80066ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	08da      	lsrs	r2, r3, #3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3208      	adds	r2, #8
 800668e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006692:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	220f      	movs	r2, #15
 800669e:	fa02 f303 	lsl.w	r3, r2, r3
 80066a2:	43db      	mvns	r3, r3
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4013      	ands	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	691a      	ldr	r2, [r3, #16]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	4313      	orrs	r3, r2
 80066be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	08da      	lsrs	r2, r3, #3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3208      	adds	r2, #8
 80066c8:	6939      	ldr	r1, [r7, #16]
 80066ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	2203      	movs	r2, #3
 80066da:	fa02 f303 	lsl.w	r3, r2, r3
 80066de:	43db      	mvns	r3, r3
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4013      	ands	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f003 0203 	and.w	r2, r3, #3
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 80a0 	beq.w	8006850 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006710:	4b58      	ldr	r3, [pc, #352]	; (8006874 <HAL_GPIO_Init+0x2d8>)
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	4a57      	ldr	r2, [pc, #348]	; (8006874 <HAL_GPIO_Init+0x2d8>)
 8006716:	f043 0301 	orr.w	r3, r3, #1
 800671a:	6193      	str	r3, [r2, #24]
 800671c:	4b55      	ldr	r3, [pc, #340]	; (8006874 <HAL_GPIO_Init+0x2d8>)
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	60bb      	str	r3, [r7, #8]
 8006726:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006728:	4a53      	ldr	r2, [pc, #332]	; (8006878 <HAL_GPIO_Init+0x2dc>)
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	089b      	lsrs	r3, r3, #2
 800672e:	3302      	adds	r3, #2
 8006730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006734:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f003 0303 	and.w	r3, r3, #3
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	220f      	movs	r2, #15
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	43db      	mvns	r3, r3
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4013      	ands	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006752:	d019      	beq.n	8006788 <HAL_GPIO_Init+0x1ec>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a49      	ldr	r2, [pc, #292]	; (800687c <HAL_GPIO_Init+0x2e0>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d013      	beq.n	8006784 <HAL_GPIO_Init+0x1e8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a48      	ldr	r2, [pc, #288]	; (8006880 <HAL_GPIO_Init+0x2e4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00d      	beq.n	8006780 <HAL_GPIO_Init+0x1e4>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a47      	ldr	r2, [pc, #284]	; (8006884 <HAL_GPIO_Init+0x2e8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d007      	beq.n	800677c <HAL_GPIO_Init+0x1e0>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a46      	ldr	r2, [pc, #280]	; (8006888 <HAL_GPIO_Init+0x2ec>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d101      	bne.n	8006778 <HAL_GPIO_Init+0x1dc>
 8006774:	2304      	movs	r3, #4
 8006776:	e008      	b.n	800678a <HAL_GPIO_Init+0x1ee>
 8006778:	2305      	movs	r3, #5
 800677a:	e006      	b.n	800678a <HAL_GPIO_Init+0x1ee>
 800677c:	2303      	movs	r3, #3
 800677e:	e004      	b.n	800678a <HAL_GPIO_Init+0x1ee>
 8006780:	2302      	movs	r3, #2
 8006782:	e002      	b.n	800678a <HAL_GPIO_Init+0x1ee>
 8006784:	2301      	movs	r3, #1
 8006786:	e000      	b.n	800678a <HAL_GPIO_Init+0x1ee>
 8006788:	2300      	movs	r3, #0
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	f002 0203 	and.w	r2, r2, #3
 8006790:	0092      	lsls	r2, r2, #2
 8006792:	4093      	lsls	r3, r2
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	4313      	orrs	r3, r2
 8006798:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800679a:	4937      	ldr	r1, [pc, #220]	; (8006878 <HAL_GPIO_Init+0x2dc>)
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	089b      	lsrs	r3, r3, #2
 80067a0:	3302      	adds	r3, #2
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067a8:	4b38      	ldr	r3, [pc, #224]	; (800688c <HAL_GPIO_Init+0x2f0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	43db      	mvns	r3, r3
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4013      	ands	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80067cc:	4a2f      	ldr	r2, [pc, #188]	; (800688c <HAL_GPIO_Init+0x2f0>)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80067d2:	4b2e      	ldr	r3, [pc, #184]	; (800688c <HAL_GPIO_Init+0x2f0>)
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	43db      	mvns	r3, r3
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4013      	ands	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80067f6:	4a25      	ldr	r2, [pc, #148]	; (800688c <HAL_GPIO_Init+0x2f0>)
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067fc:	4b23      	ldr	r3, [pc, #140]	; (800688c <HAL_GPIO_Init+0x2f0>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	43db      	mvns	r3, r3
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4013      	ands	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4313      	orrs	r3, r2
 800681e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006820:	4a1a      	ldr	r2, [pc, #104]	; (800688c <HAL_GPIO_Init+0x2f0>)
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006826:	4b19      	ldr	r3, [pc, #100]	; (800688c <HAL_GPIO_Init+0x2f0>)
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	43db      	mvns	r3, r3
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4013      	ands	r3, r2
 8006834:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800684a:	4a10      	ldr	r2, [pc, #64]	; (800688c <HAL_GPIO_Init+0x2f0>)
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	3301      	adds	r3, #1
 8006854:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	fa22 f303 	lsr.w	r3, r2, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	f47f aea3 	bne.w	80065ac <HAL_GPIO_Init+0x10>
  }
}
 8006866:	bf00      	nop
 8006868:	bf00      	nop
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	40021000 	.word	0x40021000
 8006878:	40010000 	.word	0x40010000
 800687c:	48000400 	.word	0x48000400
 8006880:	48000800 	.word	0x48000800
 8006884:	48000c00 	.word	0x48000c00
 8006888:	48001000 	.word	0x48001000
 800688c:	40010400 	.word	0x40010400

08006890 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	887b      	ldrh	r3, [r7, #2]
 80068a2:	4013      	ands	r3, r2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068a8:	2301      	movs	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
 80068ac:	e001      	b.n	80068b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	807b      	strh	r3, [r7, #2]
 80068cc:	4613      	mov	r3, r2
 80068ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068d0:	787b      	ldrb	r3, [r7, #1]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80068d6:	887a      	ldrh	r2, [r7, #2]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80068dc:	e002      	b.n	80068e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80068de:	887a      	ldrh	r2, [r7, #2]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80068fa:	4b08      	ldr	r3, [pc, #32]	; (800691c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068fc:	695a      	ldr	r2, [r3, #20]
 80068fe:	88fb      	ldrh	r3, [r7, #6]
 8006900:	4013      	ands	r3, r2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d006      	beq.n	8006914 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006906:	4a05      	ldr	r2, [pc, #20]	; (800691c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006908:	88fb      	ldrh	r3, [r7, #6]
 800690a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 f806 	bl	8006920 <HAL_GPIO_EXTI_Callback>
  }
}
 8006914:	bf00      	nop
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40010400 	.word	0x40010400

08006920 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b082      	sub	sp, #8
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e081      	b.n	8006a4c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d106      	bne.n	8006962 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7fa fd53 	bl	8001408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2224      	movs	r2, #36	; 0x24
 8006966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0201 	bic.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006986:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006996:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d107      	bne.n	80069b0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ac:	609a      	str	r2, [r3, #8]
 80069ae:	e006      	b.n	80069be <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80069bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d104      	bne.n	80069d0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6812      	ldr	r2, [r2, #0]
 80069da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80069de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691a      	ldr	r2, [r3, #16]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69d9      	ldr	r1, [r3, #28]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1a      	ldr	r2, [r3, #32]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0201 	orr.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d138      	bne.n	8006adc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e032      	b.n	8006ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2224      	movs	r2, #36	; 0x24
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0201 	bic.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006aa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6819      	ldr	r1, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0201 	orr.w	r2, r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e000      	b.n	8006ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006adc:	2302      	movs	r3, #2
  }
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d139      	bne.n	8006b74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e033      	b.n	8006b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2224      	movs	r2, #36	; 0x24
 8006b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	021b      	lsls	r3, r3, #8
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	e000      	b.n	8006b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b74:	2302      	movs	r3, #2
  }
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b84:	b08b      	sub	sp, #44	; 0x2c
 8006b86:	af06      	add	r7, sp, #24
 8006b88:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e0d0      	b.n	8006d36 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d106      	bne.n	8006bae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7fa fd87 	bl	80016bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2203      	movs	r2, #3
 8006bb2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f003 fdfc 	bl	800a7b8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73fb      	strb	r3, [r7, #15]
 8006bc4:	e04c      	b.n	8006c60 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	440b      	add	r3, r1
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	2201      	movs	r2, #1
 8006bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	440b      	add	r3, r1
 8006bec:	7bfa      	ldrb	r2, [r7, #15]
 8006bee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006bf0:	7bfa      	ldrb	r2, [r7, #15]
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	b298      	uxth	r0, r3
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	440b      	add	r3, r1
 8006c02:	3336      	adds	r3, #54	; 0x36
 8006c04:	4602      	mov	r2, r0
 8006c06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	440b      	add	r3, r1
 8006c18:	3303      	adds	r3, #3
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c1e:	7bfa      	ldrb	r2, [r7, #15]
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	440b      	add	r3, r1
 8006c2c:	3338      	adds	r3, #56	; 0x38
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c32:	7bfa      	ldrb	r2, [r7, #15]
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	440b      	add	r3, r1
 8006c40:	333c      	adds	r3, #60	; 0x3c
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c46:	7bfa      	ldrb	r2, [r7, #15]
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	00db      	lsls	r3, r3, #3
 8006c52:	440b      	add	r3, r1
 8006c54:	3340      	adds	r3, #64	; 0x40
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
 8006c60:	7bfa      	ldrb	r2, [r7, #15]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d3ad      	bcc.n	8006bc6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	73fb      	strb	r3, [r7, #15]
 8006c6e:	e044      	b.n	8006cfa <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c70:	7bfa      	ldrb	r2, [r7, #15]
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	440b      	add	r3, r1
 8006c7e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006c82:	2200      	movs	r2, #0
 8006c84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c86:	7bfa      	ldrb	r2, [r7, #15]
 8006c88:	6879      	ldr	r1, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	440b      	add	r3, r1
 8006c94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c98:	7bfa      	ldrb	r2, [r7, #15]
 8006c9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c9c:	7bfa      	ldrb	r2, [r7, #15]
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	440b      	add	r3, r1
 8006caa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006cae:	2200      	movs	r2, #0
 8006cb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006cb2:	7bfa      	ldrb	r2, [r7, #15]
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	440b      	add	r3, r1
 8006cc0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006cc8:	7bfa      	ldrb	r2, [r7, #15]
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	440b      	add	r3, r1
 8006cd6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006cde:	7bfa      	ldrb	r2, [r7, #15]
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	440b      	add	r3, r1
 8006cec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	73fb      	strb	r3, [r7, #15]
 8006cfa:	7bfa      	ldrb	r2, [r7, #15]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d3b5      	bcc.n	8006c70 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	603b      	str	r3, [r7, #0]
 8006d0a:	687e      	ldr	r6, [r7, #4]
 8006d0c:	466d      	mov	r5, sp
 8006d0e:	f106 0410 	add.w	r4, r6, #16
 8006d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	602b      	str	r3, [r5, #0]
 8006d1a:	1d33      	adds	r3, r6, #4
 8006d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d1e:	6838      	ldr	r0, [r7, #0]
 8006d20:	f003 fd65 	bl	800a7ee <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d50:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d102      	bne.n	8006d66 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	f001 b823 	b.w	8007dac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 817d 	beq.w	8007076 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006d7c:	4bbc      	ldr	r3, [pc, #752]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f003 030c 	and.w	r3, r3, #12
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d00c      	beq.n	8006da2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d88:	4bb9      	ldr	r3, [pc, #740]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f003 030c 	and.w	r3, r3, #12
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d15c      	bne.n	8006e4e <HAL_RCC_OscConfig+0x10e>
 8006d94:	4bb6      	ldr	r3, [pc, #728]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da0:	d155      	bne.n	8006e4e <HAL_RCC_OscConfig+0x10e>
 8006da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006da6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006daa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006dae:	fa93 f3a3 	rbit	r3, r3
 8006db2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006db6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dba:	fab3 f383 	clz	r3, r3
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	f043 0301 	orr.w	r3, r3, #1
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d102      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x94>
 8006dce:	4ba8      	ldr	r3, [pc, #672]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	e015      	b.n	8006e00 <HAL_RCC_OscConfig+0xc0>
 8006dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006dd8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ddc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006de0:	fa93 f3a3 	rbit	r3, r3
 8006de4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006dec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006df0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006df4:	fa93 f3a3 	rbit	r3, r3
 8006df8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006dfc:	4b9c      	ldr	r3, [pc, #624]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e04:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006e08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006e0c:	fa92 f2a2 	rbit	r2, r2
 8006e10:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006e14:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006e18:	fab2 f282 	clz	r2, r2
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	f042 0220 	orr.w	r2, r2, #32
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	f002 021f 	and.w	r2, r2, #31
 8006e28:	2101      	movs	r1, #1
 8006e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 811f 	beq.w	8007074 <HAL_RCC_OscConfig+0x334>
 8006e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f040 8116 	bne.w	8007074 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	f000 bfaf 	b.w	8007dac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e5e:	d106      	bne.n	8006e6e <HAL_RCC_OscConfig+0x12e>
 8006e60:	4b83      	ldr	r3, [pc, #524]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a82      	ldr	r2, [pc, #520]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	e036      	b.n	8006edc <HAL_RCC_OscConfig+0x19c>
 8006e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10c      	bne.n	8006e98 <HAL_RCC_OscConfig+0x158>
 8006e7e:	4b7c      	ldr	r3, [pc, #496]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a7b      	ldr	r2, [pc, #492]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e88:	6013      	str	r3, [r2, #0]
 8006e8a:	4b79      	ldr	r3, [pc, #484]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a78      	ldr	r2, [pc, #480]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e94:	6013      	str	r3, [r2, #0]
 8006e96:	e021      	b.n	8006edc <HAL_RCC_OscConfig+0x19c>
 8006e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ea8:	d10c      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x184>
 8006eaa:	4b71      	ldr	r3, [pc, #452]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a70      	ldr	r2, [pc, #448]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	4b6e      	ldr	r3, [pc, #440]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a6d      	ldr	r2, [pc, #436]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	e00b      	b.n	8006edc <HAL_RCC_OscConfig+0x19c>
 8006ec4:	4b6a      	ldr	r3, [pc, #424]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a69      	ldr	r2, [pc, #420]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	4b67      	ldr	r3, [pc, #412]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a66      	ldr	r2, [pc, #408]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eda:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006edc:	4b64      	ldr	r3, [pc, #400]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	f023 020f 	bic.w	r2, r3, #15
 8006ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	495f      	ldr	r1, [pc, #380]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006efa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d059      	beq.n	8006fba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f06:	f7fd fe65 	bl	8004bd4 <HAL_GetTick>
 8006f0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f0e:	e00a      	b.n	8006f26 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f10:	f7fd fe60 	bl	8004bd4 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b64      	cmp	r3, #100	; 0x64
 8006f1e:	d902      	bls.n	8006f26 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	f000 bf43 	b.w	8007dac <HAL_RCC_OscConfig+0x106c>
 8006f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f2a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f2e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006f32:	fa93 f3a3 	rbit	r3, r3
 8006f36:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006f3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f3e:	fab3 f383 	clz	r3, r3
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	095b      	lsrs	r3, r3, #5
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	f043 0301 	orr.w	r3, r3, #1
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d102      	bne.n	8006f58 <HAL_RCC_OscConfig+0x218>
 8006f52:	4b47      	ldr	r3, [pc, #284]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	e015      	b.n	8006f84 <HAL_RCC_OscConfig+0x244>
 8006f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f5c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f60:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006f64:	fa93 f3a3 	rbit	r3, r3
 8006f68:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f70:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006f74:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006f78:	fa93 f3a3 	rbit	r3, r3
 8006f7c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006f80:	4b3b      	ldr	r3, [pc, #236]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f88:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006f8c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006f90:	fa92 f2a2 	rbit	r2, r2
 8006f94:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006f98:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006f9c:	fab2 f282 	clz	r2, r2
 8006fa0:	b2d2      	uxtb	r2, r2
 8006fa2:	f042 0220 	orr.w	r2, r2, #32
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	f002 021f 	and.w	r2, r2, #31
 8006fac:	2101      	movs	r1, #1
 8006fae:	fa01 f202 	lsl.w	r2, r1, r2
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0ab      	beq.n	8006f10 <HAL_RCC_OscConfig+0x1d0>
 8006fb8:	e05d      	b.n	8007076 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fba:	f7fd fe0b 	bl	8004bd4 <HAL_GetTick>
 8006fbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fc2:	e00a      	b.n	8006fda <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fc4:	f7fd fe06 	bl	8004bd4 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b64      	cmp	r3, #100	; 0x64
 8006fd2:	d902      	bls.n	8006fda <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	f000 bee9 	b.w	8007dac <HAL_RCC_OscConfig+0x106c>
 8006fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fde:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fe2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006fe6:	fa93 f3a3 	rbit	r3, r3
 8006fea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006fee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ff2:	fab3 f383 	clz	r3, r3
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	095b      	lsrs	r3, r3, #5
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	f043 0301 	orr.w	r3, r3, #1
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b01      	cmp	r3, #1
 8007004:	d102      	bne.n	800700c <HAL_RCC_OscConfig+0x2cc>
 8007006:	4b1a      	ldr	r3, [pc, #104]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	e015      	b.n	8007038 <HAL_RCC_OscConfig+0x2f8>
 800700c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007010:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007014:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007018:	fa93 f3a3 	rbit	r3, r3
 800701c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007024:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007028:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800702c:	fa93 f3a3 	rbit	r3, r3
 8007030:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007034:	4b0e      	ldr	r3, [pc, #56]	; (8007070 <HAL_RCC_OscConfig+0x330>)
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800703c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007040:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007044:	fa92 f2a2 	rbit	r2, r2
 8007048:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800704c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007050:	fab2 f282 	clz	r2, r2
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	f042 0220 	orr.w	r2, r2, #32
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	f002 021f 	and.w	r2, r2, #31
 8007060:	2101      	movs	r1, #1
 8007062:	fa01 f202 	lsl.w	r2, r1, r2
 8007066:	4013      	ands	r3, r2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1ab      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x284>
 800706c:	e003      	b.n	8007076 <HAL_RCC_OscConfig+0x336>
 800706e:	bf00      	nop
 8007070:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800707a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 817d 	beq.w	8007386 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800708c:	4ba6      	ldr	r3, [pc, #664]	; (8007328 <HAL_RCC_OscConfig+0x5e8>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f003 030c 	and.w	r3, r3, #12
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00b      	beq.n	80070b0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007098:	4ba3      	ldr	r3, [pc, #652]	; (8007328 <HAL_RCC_OscConfig+0x5e8>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f003 030c 	and.w	r3, r3, #12
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d172      	bne.n	800718a <HAL_RCC_OscConfig+0x44a>
 80070a4:	4ba0      	ldr	r3, [pc, #640]	; (8007328 <HAL_RCC_OscConfig+0x5e8>)
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d16c      	bne.n	800718a <HAL_RCC_OscConfig+0x44a>
 80070b0:	2302      	movs	r3, #2
 80070b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80070ba:	fa93 f3a3 	rbit	r3, r3
 80070be:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80070c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070c6:	fab3 f383 	clz	r3, r3
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	095b      	lsrs	r3, r3, #5
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	f043 0301 	orr.w	r3, r3, #1
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d102      	bne.n	80070e0 <HAL_RCC_OscConfig+0x3a0>
 80070da:	4b93      	ldr	r3, [pc, #588]	; (8007328 <HAL_RCC_OscConfig+0x5e8>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	e013      	b.n	8007108 <HAL_RCC_OscConfig+0x3c8>
 80070e0:	2302      	movs	r3, #2
 80070e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80070ea:	fa93 f3a3 	rbit	r3, r3
 80070ee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80070f2:	2302      	movs	r3, #2
 80070f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80070f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80070fc:	fa93 f3a3 	rbit	r3, r3
 8007100:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007104:	4b88      	ldr	r3, [pc, #544]	; (8007328 <HAL_RCC_OscConfig+0x5e8>)
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	2202      	movs	r2, #2
 800710a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800710e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007112:	fa92 f2a2 	rbit	r2, r2
 8007116:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800711a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800711e:	fab2 f282 	clz	r2, r2
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	f042 0220 	orr.w	r2, r2, #32
 8007128:	b2d2      	uxtb	r2, r2
 800712a:	f002 021f 	and.w	r2, r2, #31
 800712e:	2101      	movs	r1, #1
 8007130:	fa01 f202 	lsl.w	r2, r1, r2
 8007134:	4013      	ands	r3, r2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <HAL_RCC_OscConfig+0x410>
 800713a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800713e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d002      	beq.n	8007150 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f000 be2e 	b.w	8007dac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007150:	4b75      	ldr	r3, [pc, #468]	; (8007328 <HAL_RCC_OscConfig+0x5e8>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800715c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	21f8      	movs	r1, #248	; 0xf8
 8007166:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800716a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800716e:	fa91 f1a1 	rbit	r1, r1
 8007172:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007176:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800717a:	fab1 f181 	clz	r1, r1
 800717e:	b2c9      	uxtb	r1, r1
 8007180:	408b      	lsls	r3, r1
 8007182:	4969      	ldr	r1, [pc, #420]	; (8007328 <HAL_RCC_OscConfig+0x5e8>)
 8007184:	4313      	orrs	r3, r2
 8007186:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007188:	e0fd      	b.n	8007386 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800718a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800718e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 8088 	beq.w	80072ac <HAL_RCC_OscConfig+0x56c>
 800719c:	2301      	movs	r3, #1
 800719e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80071a6:	fa93 f3a3 	rbit	r3, r3
 80071aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80071ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071b2:	fab3 f383 	clz	r3, r3
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80071bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	461a      	mov	r2, r3
 80071c4:	2301      	movs	r3, #1
 80071c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c8:	f7fd fd04 	bl	8004bd4 <HAL_GetTick>
 80071cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071d0:	e00a      	b.n	80071e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071d2:	f7fd fcff 	bl	8004bd4 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d902      	bls.n	80071e8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	f000 bde2 	b.w	8007dac <HAL_RCC_OscConfig+0x106c>
 80071e8:	2302      	movs	r3, #2
 80071ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80071f2:	fa93 f3a3 	rbit	r3, r3
 80071f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80071fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071fe:	fab3 f383 	clz	r3, r3
 8007202:	b2db      	uxtb	r3, r3
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f043 0301 	orr.w	r3, r3, #1
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b01      	cmp	r3, #1
 8007210:	d102      	bne.n	8007218 <HAL_RCC_OscConfig+0x4d8>
 8007212:	4b45      	ldr	r3, [pc, #276]	; (8007328 <HAL_RCC_OscConfig+0x5e8>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	e013      	b.n	8007240 <HAL_RCC_OscConfig+0x500>
 8007218:	2302      	movs	r3, #2
 800721a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800721e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007222:	fa93 f3a3 	rbit	r3, r3
 8007226:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800722a:	2302      	movs	r3, #2
 800722c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007230:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007234:	fa93 f3a3 	rbit	r3, r3
 8007238:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800723c:	4b3a      	ldr	r3, [pc, #232]	; (8007328 <HAL_RCC_OscConfig+0x5e8>)
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	2202      	movs	r2, #2
 8007242:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007246:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800724a:	fa92 f2a2 	rbit	r2, r2
 800724e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007252:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007256:	fab2 f282 	clz	r2, r2
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	f042 0220 	orr.w	r2, r2, #32
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	f002 021f 	and.w	r2, r2, #31
 8007266:	2101      	movs	r1, #1
 8007268:	fa01 f202 	lsl.w	r2, r1, r2
 800726c:	4013      	ands	r3, r2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0af      	beq.n	80071d2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007272:	4b2d      	ldr	r3, [pc, #180]	; (8007328 <HAL_RCC_OscConfig+0x5e8>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800727a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800727e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	21f8      	movs	r1, #248	; 0xf8
 8007288:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800728c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007290:	fa91 f1a1 	rbit	r1, r1
 8007294:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007298:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800729c:	fab1 f181 	clz	r1, r1
 80072a0:	b2c9      	uxtb	r1, r1
 80072a2:	408b      	lsls	r3, r1
 80072a4:	4920      	ldr	r1, [pc, #128]	; (8007328 <HAL_RCC_OscConfig+0x5e8>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	600b      	str	r3, [r1, #0]
 80072aa:	e06c      	b.n	8007386 <HAL_RCC_OscConfig+0x646>
 80072ac:	2301      	movs	r3, #1
 80072ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80072b6:	fa93 f3a3 	rbit	r3, r3
 80072ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80072be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072c2:	fab3 f383 	clz	r3, r3
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80072cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	461a      	mov	r2, r3
 80072d4:	2300      	movs	r3, #0
 80072d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072d8:	f7fd fc7c 	bl	8004bd4 <HAL_GetTick>
 80072dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072e0:	e00a      	b.n	80072f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072e2:	f7fd fc77 	bl	8004bd4 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d902      	bls.n	80072f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	f000 bd5a 	b.w	8007dac <HAL_RCC_OscConfig+0x106c>
 80072f8:	2302      	movs	r3, #2
 80072fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007302:	fa93 f3a3 	rbit	r3, r3
 8007306:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800730a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800730e:	fab3 f383 	clz	r3, r3
 8007312:	b2db      	uxtb	r3, r3
 8007314:	095b      	lsrs	r3, r3, #5
 8007316:	b2db      	uxtb	r3, r3
 8007318:	f043 0301 	orr.w	r3, r3, #1
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b01      	cmp	r3, #1
 8007320:	d104      	bne.n	800732c <HAL_RCC_OscConfig+0x5ec>
 8007322:	4b01      	ldr	r3, [pc, #4]	; (8007328 <HAL_RCC_OscConfig+0x5e8>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	e015      	b.n	8007354 <HAL_RCC_OscConfig+0x614>
 8007328:	40021000 	.word	0x40021000
 800732c:	2302      	movs	r3, #2
 800732e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007336:	fa93 f3a3 	rbit	r3, r3
 800733a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800733e:	2302      	movs	r3, #2
 8007340:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007344:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007348:	fa93 f3a3 	rbit	r3, r3
 800734c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007350:	4bc8      	ldr	r3, [pc, #800]	; (8007674 <HAL_RCC_OscConfig+0x934>)
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	2202      	movs	r2, #2
 8007356:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800735a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800735e:	fa92 f2a2 	rbit	r2, r2
 8007362:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007366:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800736a:	fab2 f282 	clz	r2, r2
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	f042 0220 	orr.w	r2, r2, #32
 8007374:	b2d2      	uxtb	r2, r2
 8007376:	f002 021f 	and.w	r2, r2, #31
 800737a:	2101      	movs	r1, #1
 800737c:	fa01 f202 	lsl.w	r2, r1, r2
 8007380:	4013      	ands	r3, r2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1ad      	bne.n	80072e2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800738a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 8110 	beq.w	80075bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800739c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d079      	beq.n	80074a0 <HAL_RCC_OscConfig+0x760>
 80073ac:	2301      	movs	r3, #1
 80073ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073b6:	fa93 f3a3 	rbit	r3, r3
 80073ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80073be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073c2:	fab3 f383 	clz	r3, r3
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	461a      	mov	r2, r3
 80073ca:	4bab      	ldr	r3, [pc, #684]	; (8007678 <HAL_RCC_OscConfig+0x938>)
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	461a      	mov	r2, r3
 80073d2:	2301      	movs	r3, #1
 80073d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073d6:	f7fd fbfd 	bl	8004bd4 <HAL_GetTick>
 80073da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073de:	e00a      	b.n	80073f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073e0:	f7fd fbf8 	bl	8004bd4 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d902      	bls.n	80073f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	f000 bcdb 	b.w	8007dac <HAL_RCC_OscConfig+0x106c>
 80073f6:	2302      	movs	r3, #2
 80073f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007400:	fa93 f3a3 	rbit	r3, r3
 8007404:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800740c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007410:	2202      	movs	r2, #2
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007418:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	fa93 f2a3 	rbit	r2, r3
 8007422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007434:	2202      	movs	r2, #2
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800743c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	fa93 f2a3 	rbit	r2, r3
 8007446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800744a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800744e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007450:	4b88      	ldr	r3, [pc, #544]	; (8007674 <HAL_RCC_OscConfig+0x934>)
 8007452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007458:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800745c:	2102      	movs	r1, #2
 800745e:	6019      	str	r1, [r3, #0]
 8007460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007464:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	fa93 f1a3 	rbit	r1, r3
 800746e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007472:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007476:	6019      	str	r1, [r3, #0]
  return result;
 8007478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800747c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	fab3 f383 	clz	r3, r3
 8007486:	b2db      	uxtb	r3, r3
 8007488:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800748c:	b2db      	uxtb	r3, r3
 800748e:	f003 031f 	and.w	r3, r3, #31
 8007492:	2101      	movs	r1, #1
 8007494:	fa01 f303 	lsl.w	r3, r1, r3
 8007498:	4013      	ands	r3, r2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d0a0      	beq.n	80073e0 <HAL_RCC_OscConfig+0x6a0>
 800749e:	e08d      	b.n	80075bc <HAL_RCC_OscConfig+0x87c>
 80074a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80074a8:	2201      	movs	r2, #1
 80074aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	fa93 f2a3 	rbit	r2, r3
 80074ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074c2:	601a      	str	r2, [r3, #0]
  return result;
 80074c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074ce:	fab3 f383 	clz	r3, r3
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	4b68      	ldr	r3, [pc, #416]	; (8007678 <HAL_RCC_OscConfig+0x938>)
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	461a      	mov	r2, r3
 80074de:	2300      	movs	r3, #0
 80074e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074e2:	f7fd fb77 	bl	8004bd4 <HAL_GetTick>
 80074e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074ea:	e00a      	b.n	8007502 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074ec:	f7fd fb72 	bl	8004bd4 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d902      	bls.n	8007502 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	f000 bc55 	b.w	8007dac <HAL_RCC_OscConfig+0x106c>
 8007502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007506:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800750a:	2202      	movs	r2, #2
 800750c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800750e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007512:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	fa93 f2a3 	rbit	r2, r3
 800751c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007520:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800752a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800752e:	2202      	movs	r2, #2
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007536:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	fa93 f2a3 	rbit	r2, r3
 8007540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800754e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007552:	2202      	movs	r2, #2
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800755a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	fa93 f2a3 	rbit	r2, r3
 8007564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007568:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800756c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800756e:	4b41      	ldr	r3, [pc, #260]	; (8007674 <HAL_RCC_OscConfig+0x934>)
 8007570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007576:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800757a:	2102      	movs	r1, #2
 800757c:	6019      	str	r1, [r3, #0]
 800757e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007582:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	fa93 f1a3 	rbit	r1, r3
 800758c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007590:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007594:	6019      	str	r1, [r3, #0]
  return result;
 8007596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800759a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	fab3 f383 	clz	r3, r3
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	2101      	movs	r1, #1
 80075b2:	fa01 f303 	lsl.w	r3, r1, r3
 80075b6:	4013      	ands	r3, r2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d197      	bne.n	80074ec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 81a1 	beq.w	8007914 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075d2:	2300      	movs	r3, #0
 80075d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075d8:	4b26      	ldr	r3, [pc, #152]	; (8007674 <HAL_RCC_OscConfig+0x934>)
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d116      	bne.n	8007612 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075e4:	4b23      	ldr	r3, [pc, #140]	; (8007674 <HAL_RCC_OscConfig+0x934>)
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	4a22      	ldr	r2, [pc, #136]	; (8007674 <HAL_RCC_OscConfig+0x934>)
 80075ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ee:	61d3      	str	r3, [r2, #28]
 80075f0:	4b20      	ldr	r3, [pc, #128]	; (8007674 <HAL_RCC_OscConfig+0x934>)
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80075f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075fc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007606:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800760a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800760c:	2301      	movs	r3, #1
 800760e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007612:	4b1a      	ldr	r3, [pc, #104]	; (800767c <HAL_RCC_OscConfig+0x93c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761a:	2b00      	cmp	r3, #0
 800761c:	d11a      	bne.n	8007654 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800761e:	4b17      	ldr	r3, [pc, #92]	; (800767c <HAL_RCC_OscConfig+0x93c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a16      	ldr	r2, [pc, #88]	; (800767c <HAL_RCC_OscConfig+0x93c>)
 8007624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007628:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800762a:	f7fd fad3 	bl	8004bd4 <HAL_GetTick>
 800762e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007632:	e009      	b.n	8007648 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007634:	f7fd face 	bl	8004bd4 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	2b64      	cmp	r3, #100	; 0x64
 8007642:	d901      	bls.n	8007648 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e3b1      	b.n	8007dac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007648:	4b0c      	ldr	r3, [pc, #48]	; (800767c <HAL_RCC_OscConfig+0x93c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007650:	2b00      	cmp	r3, #0
 8007652:	d0ef      	beq.n	8007634 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007658:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d10d      	bne.n	8007680 <HAL_RCC_OscConfig+0x940>
 8007664:	4b03      	ldr	r3, [pc, #12]	; (8007674 <HAL_RCC_OscConfig+0x934>)
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	4a02      	ldr	r2, [pc, #8]	; (8007674 <HAL_RCC_OscConfig+0x934>)
 800766a:	f043 0301 	orr.w	r3, r3, #1
 800766e:	6213      	str	r3, [r2, #32]
 8007670:	e03c      	b.n	80076ec <HAL_RCC_OscConfig+0x9ac>
 8007672:	bf00      	nop
 8007674:	40021000 	.word	0x40021000
 8007678:	10908120 	.word	0x10908120
 800767c:	40007000 	.word	0x40007000
 8007680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007684:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10c      	bne.n	80076aa <HAL_RCC_OscConfig+0x96a>
 8007690:	4bc1      	ldr	r3, [pc, #772]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	4ac0      	ldr	r2, [pc, #768]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 8007696:	f023 0301 	bic.w	r3, r3, #1
 800769a:	6213      	str	r3, [r2, #32]
 800769c:	4bbe      	ldr	r3, [pc, #760]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	4abd      	ldr	r2, [pc, #756]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 80076a2:	f023 0304 	bic.w	r3, r3, #4
 80076a6:	6213      	str	r3, [r2, #32]
 80076a8:	e020      	b.n	80076ec <HAL_RCC_OscConfig+0x9ac>
 80076aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	2b05      	cmp	r3, #5
 80076b8:	d10c      	bne.n	80076d4 <HAL_RCC_OscConfig+0x994>
 80076ba:	4bb7      	ldr	r3, [pc, #732]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	4ab6      	ldr	r2, [pc, #728]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 80076c0:	f043 0304 	orr.w	r3, r3, #4
 80076c4:	6213      	str	r3, [r2, #32]
 80076c6:	4bb4      	ldr	r3, [pc, #720]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	4ab3      	ldr	r2, [pc, #716]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 80076cc:	f043 0301 	orr.w	r3, r3, #1
 80076d0:	6213      	str	r3, [r2, #32]
 80076d2:	e00b      	b.n	80076ec <HAL_RCC_OscConfig+0x9ac>
 80076d4:	4bb0      	ldr	r3, [pc, #704]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	4aaf      	ldr	r2, [pc, #700]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 80076da:	f023 0301 	bic.w	r3, r3, #1
 80076de:	6213      	str	r3, [r2, #32]
 80076e0:	4bad      	ldr	r3, [pc, #692]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	4aac      	ldr	r2, [pc, #688]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 80076e6:	f023 0304 	bic.w	r3, r3, #4
 80076ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 8081 	beq.w	8007800 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076fe:	f7fd fa69 	bl	8004bd4 <HAL_GetTick>
 8007702:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007706:	e00b      	b.n	8007720 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007708:	f7fd fa64 	bl	8004bd4 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	f241 3288 	movw	r2, #5000	; 0x1388
 8007718:	4293      	cmp	r3, r2
 800771a:	d901      	bls.n	8007720 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e345      	b.n	8007dac <HAL_RCC_OscConfig+0x106c>
 8007720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007724:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007728:	2202      	movs	r2, #2
 800772a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800772c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007730:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	fa93 f2a3 	rbit	r2, r3
 800773a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800773e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007748:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800774c:	2202      	movs	r2, #2
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007754:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	fa93 f2a3 	rbit	r2, r3
 800775e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007762:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007766:	601a      	str	r2, [r3, #0]
  return result;
 8007768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800776c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007770:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007772:	fab3 f383 	clz	r3, r3
 8007776:	b2db      	uxtb	r3, r3
 8007778:	095b      	lsrs	r3, r3, #5
 800777a:	b2db      	uxtb	r3, r3
 800777c:	f043 0302 	orr.w	r3, r3, #2
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d102      	bne.n	800778c <HAL_RCC_OscConfig+0xa4c>
 8007786:	4b84      	ldr	r3, [pc, #528]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	e013      	b.n	80077b4 <HAL_RCC_OscConfig+0xa74>
 800778c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007790:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007794:	2202      	movs	r2, #2
 8007796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800779c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	fa93 f2a3 	rbit	r2, r3
 80077a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	4b79      	ldr	r3, [pc, #484]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80077bc:	2102      	movs	r1, #2
 80077be:	6011      	str	r1, [r2, #0]
 80077c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80077c8:	6812      	ldr	r2, [r2, #0]
 80077ca:	fa92 f1a2 	rbit	r1, r2
 80077ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80077d6:	6011      	str	r1, [r2, #0]
  return result;
 80077d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077dc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80077e0:	6812      	ldr	r2, [r2, #0]
 80077e2:	fab2 f282 	clz	r2, r2
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ec:	b2d2      	uxtb	r2, r2
 80077ee:	f002 021f 	and.w	r2, r2, #31
 80077f2:	2101      	movs	r1, #1
 80077f4:	fa01 f202 	lsl.w	r2, r1, r2
 80077f8:	4013      	ands	r3, r2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d084      	beq.n	8007708 <HAL_RCC_OscConfig+0x9c8>
 80077fe:	e07f      	b.n	8007900 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007800:	f7fd f9e8 	bl	8004bd4 <HAL_GetTick>
 8007804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007808:	e00b      	b.n	8007822 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800780a:	f7fd f9e3 	bl	8004bd4 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	f241 3288 	movw	r2, #5000	; 0x1388
 800781a:	4293      	cmp	r3, r2
 800781c:	d901      	bls.n	8007822 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e2c4      	b.n	8007dac <HAL_RCC_OscConfig+0x106c>
 8007822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007826:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800782a:	2202      	movs	r2, #2
 800782c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800782e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007832:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	fa93 f2a3 	rbit	r2, r3
 800783c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007840:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800784a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800784e:	2202      	movs	r2, #2
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007856:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	fa93 f2a3 	rbit	r2, r3
 8007860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007864:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007868:	601a      	str	r2, [r3, #0]
  return result;
 800786a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800786e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007872:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007874:	fab3 f383 	clz	r3, r3
 8007878:	b2db      	uxtb	r3, r3
 800787a:	095b      	lsrs	r3, r3, #5
 800787c:	b2db      	uxtb	r3, r3
 800787e:	f043 0302 	orr.w	r3, r3, #2
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d102      	bne.n	800788e <HAL_RCC_OscConfig+0xb4e>
 8007888:	4b43      	ldr	r3, [pc, #268]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	e013      	b.n	80078b6 <HAL_RCC_OscConfig+0xb76>
 800788e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007892:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007896:	2202      	movs	r2, #2
 8007898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800789a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800789e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	fa93 f2a3 	rbit	r2, r3
 80078a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	4b39      	ldr	r3, [pc, #228]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 80078b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80078be:	2102      	movs	r1, #2
 80078c0:	6011      	str	r1, [r2, #0]
 80078c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078c6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80078ca:	6812      	ldr	r2, [r2, #0]
 80078cc:	fa92 f1a2 	rbit	r1, r2
 80078d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80078d8:	6011      	str	r1, [r2, #0]
  return result;
 80078da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078de:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80078e2:	6812      	ldr	r2, [r2, #0]
 80078e4:	fab2 f282 	clz	r2, r2
 80078e8:	b2d2      	uxtb	r2, r2
 80078ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	f002 021f 	and.w	r2, r2, #31
 80078f4:	2101      	movs	r1, #1
 80078f6:	fa01 f202 	lsl.w	r2, r1, r2
 80078fa:	4013      	ands	r3, r2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d184      	bne.n	800780a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007900:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007904:	2b01      	cmp	r3, #1
 8007906:	d105      	bne.n	8007914 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007908:	4b23      	ldr	r3, [pc, #140]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	4a22      	ldr	r2, [pc, #136]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 800790e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007912:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8242 	beq.w	8007daa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007926:	4b1c      	ldr	r3, [pc, #112]	; (8007998 <HAL_RCC_OscConfig+0xc58>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f003 030c 	and.w	r3, r3, #12
 800792e:	2b08      	cmp	r3, #8
 8007930:	f000 8213 	beq.w	8007d5a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	2b02      	cmp	r3, #2
 8007942:	f040 8162 	bne.w	8007c0a <HAL_RCC_OscConfig+0xeca>
 8007946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800794a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800794e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007958:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	fa93 f2a3 	rbit	r2, r3
 8007962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007966:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800796a:	601a      	str	r2, [r3, #0]
  return result;
 800796c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007970:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007974:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007976:	fab3 f383 	clz	r3, r3
 800797a:	b2db      	uxtb	r3, r3
 800797c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007980:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	461a      	mov	r2, r3
 8007988:	2300      	movs	r3, #0
 800798a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800798c:	f7fd f922 	bl	8004bd4 <HAL_GetTick>
 8007990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007994:	e00c      	b.n	80079b0 <HAL_RCC_OscConfig+0xc70>
 8007996:	bf00      	nop
 8007998:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800799c:	f7fd f91a 	bl	8004bd4 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e1fd      	b.n	8007dac <HAL_RCC_OscConfig+0x106c>
 80079b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80079b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80079bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	fa93 f2a3 	rbit	r2, r3
 80079cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80079d4:	601a      	str	r2, [r3, #0]
  return result;
 80079d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80079de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079e0:	fab3 f383 	clz	r3, r3
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	095b      	lsrs	r3, r3, #5
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	f043 0301 	orr.w	r3, r3, #1
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d102      	bne.n	80079fa <HAL_RCC_OscConfig+0xcba>
 80079f4:	4bb0      	ldr	r3, [pc, #704]	; (8007cb8 <HAL_RCC_OscConfig+0xf78>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	e027      	b.n	8007a4a <HAL_RCC_OscConfig+0xd0a>
 80079fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007a02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a0c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	fa93 f2a3 	rbit	r2, r3
 8007a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a1a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a24:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a32:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	fa93 f2a3 	rbit	r2, r3
 8007a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a40:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a44:	601a      	str	r2, [r3, #0]
 8007a46:	4b9c      	ldr	r3, [pc, #624]	; (8007cb8 <HAL_RCC_OscConfig+0xf78>)
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a4e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007a52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007a56:	6011      	str	r1, [r2, #0]
 8007a58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a5c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007a60:	6812      	ldr	r2, [r2, #0]
 8007a62:	fa92 f1a2 	rbit	r1, r2
 8007a66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a6a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007a6e:	6011      	str	r1, [r2, #0]
  return result;
 8007a70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a74:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007a78:	6812      	ldr	r2, [r2, #0]
 8007a7a:	fab2 f282 	clz	r2, r2
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	f042 0220 	orr.w	r2, r2, #32
 8007a84:	b2d2      	uxtb	r2, r2
 8007a86:	f002 021f 	and.w	r2, r2, #31
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8007a90:	4013      	ands	r3, r2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d182      	bne.n	800799c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a96:	4b88      	ldr	r3, [pc, #544]	; (8007cb8 <HAL_RCC_OscConfig+0xf78>)
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	497f      	ldr	r1, [pc, #508]	; (8007cb8 <HAL_RCC_OscConfig+0xf78>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	604b      	str	r3, [r1, #4]
 8007abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ac2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007ac6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ad0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	fa93 f2a3 	rbit	r2, r3
 8007ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ade:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007ae2:	601a      	str	r2, [r3, #0]
  return result;
 8007ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ae8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007aec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007aee:	fab3 f383 	clz	r3, r3
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	461a      	mov	r2, r3
 8007b00:	2301      	movs	r3, #1
 8007b02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b04:	f7fd f866 	bl	8004bd4 <HAL_GetTick>
 8007b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b0c:	e009      	b.n	8007b22 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b0e:	f7fd f861 	bl	8004bd4 <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d901      	bls.n	8007b22 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e144      	b.n	8007dac <HAL_RCC_OscConfig+0x106c>
 8007b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b26:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	fa93 f2a3 	rbit	r2, r3
 8007b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b42:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007b46:	601a      	str	r2, [r3, #0]
  return result;
 8007b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b4c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007b50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b52:	fab3 f383 	clz	r3, r3
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	095b      	lsrs	r3, r3, #5
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f043 0301 	orr.w	r3, r3, #1
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d102      	bne.n	8007b6c <HAL_RCC_OscConfig+0xe2c>
 8007b66:	4b54      	ldr	r3, [pc, #336]	; (8007cb8 <HAL_RCC_OscConfig+0xf78>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	e027      	b.n	8007bbc <HAL_RCC_OscConfig+0xe7c>
 8007b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b70:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007b74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b7e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	fa93 f2a3 	rbit	r2, r3
 8007b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b8c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b96:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007b9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ba4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	fa93 f2a3 	rbit	r2, r3
 8007bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bb2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	4b3f      	ldr	r3, [pc, #252]	; (8007cb8 <HAL_RCC_OscConfig+0xf78>)
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bc0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007bc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007bc8:	6011      	str	r1, [r2, #0]
 8007bca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bce:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007bd2:	6812      	ldr	r2, [r2, #0]
 8007bd4:	fa92 f1a2 	rbit	r1, r2
 8007bd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bdc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007be0:	6011      	str	r1, [r2, #0]
  return result;
 8007be2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007be6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007bea:	6812      	ldr	r2, [r2, #0]
 8007bec:	fab2 f282 	clz	r2, r2
 8007bf0:	b2d2      	uxtb	r2, r2
 8007bf2:	f042 0220 	orr.w	r2, r2, #32
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	f002 021f 	and.w	r2, r2, #31
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8007c02:	4013      	ands	r3, r2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d082      	beq.n	8007b0e <HAL_RCC_OscConfig+0xdce>
 8007c08:	e0cf      	b.n	8007daa <HAL_RCC_OscConfig+0x106a>
 8007c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c0e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007c12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c1c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	fa93 f2a3 	rbit	r2, r3
 8007c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c2a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007c2e:	601a      	str	r2, [r3, #0]
  return result;
 8007c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c34:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007c38:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c3a:	fab3 f383 	clz	r3, r3
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007c44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c50:	f7fc ffc0 	bl	8004bd4 <HAL_GetTick>
 8007c54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c58:	e009      	b.n	8007c6e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c5a:	f7fc ffbb 	bl	8004bd4 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e09e      	b.n	8007dac <HAL_RCC_OscConfig+0x106c>
 8007c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c72:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c80:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	fa93 f2a3 	rbit	r2, r3
 8007c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c8e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007c92:	601a      	str	r2, [r3, #0]
  return result;
 8007c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c98:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007c9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c9e:	fab3 f383 	clz	r3, r3
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	095b      	lsrs	r3, r3, #5
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f043 0301 	orr.w	r3, r3, #1
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d104      	bne.n	8007cbc <HAL_RCC_OscConfig+0xf7c>
 8007cb2:	4b01      	ldr	r3, [pc, #4]	; (8007cb8 <HAL_RCC_OscConfig+0xf78>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	e029      	b.n	8007d0c <HAL_RCC_OscConfig+0xfcc>
 8007cb8:	40021000 	.word	0x40021000
 8007cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cc0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007cc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	fa93 f2a3 	rbit	r2, r3
 8007cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cdc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ce6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007cea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007cee:	601a      	str	r2, [r3, #0]
 8007cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cf4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	fa93 f2a3 	rbit	r2, r3
 8007cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d02:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	4b2b      	ldr	r3, [pc, #172]	; (8007db8 <HAL_RCC_OscConfig+0x1078>)
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d10:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007d14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007d18:	6011      	str	r1, [r2, #0]
 8007d1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d1e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007d22:	6812      	ldr	r2, [r2, #0]
 8007d24:	fa92 f1a2 	rbit	r1, r2
 8007d28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d2c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007d30:	6011      	str	r1, [r2, #0]
  return result;
 8007d32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d36:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007d3a:	6812      	ldr	r2, [r2, #0]
 8007d3c:	fab2 f282 	clz	r2, r2
 8007d40:	b2d2      	uxtb	r2, r2
 8007d42:	f042 0220 	orr.w	r2, r2, #32
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	f002 021f 	and.w	r2, r2, #31
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8007d52:	4013      	ands	r3, r2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d180      	bne.n	8007c5a <HAL_RCC_OscConfig+0xf1a>
 8007d58:	e027      	b.n	8007daa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d101      	bne.n	8007d6e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e01e      	b.n	8007dac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007d6e:	4b12      	ldr	r3, [pc, #72]	; (8007db8 <HAL_RCC_OscConfig+0x1078>)
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007d76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007d7a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d10b      	bne.n	8007da6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007d8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007d92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d001      	beq.n	8007daa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e000      	b.n	8007dac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	40021000 	.word	0x40021000

08007dbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b09e      	sub	sp, #120	; 0x78
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e162      	b.n	800809a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007dd4:	4b90      	ldr	r3, [pc, #576]	; (8008018 <HAL_RCC_ClockConfig+0x25c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0307 	and.w	r3, r3, #7
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d910      	bls.n	8007e04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007de2:	4b8d      	ldr	r3, [pc, #564]	; (8008018 <HAL_RCC_ClockConfig+0x25c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f023 0207 	bic.w	r2, r3, #7
 8007dea:	498b      	ldr	r1, [pc, #556]	; (8008018 <HAL_RCC_ClockConfig+0x25c>)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007df2:	4b89      	ldr	r3, [pc, #548]	; (8008018 <HAL_RCC_ClockConfig+0x25c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d001      	beq.n	8007e04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e14a      	b.n	800809a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0302 	and.w	r3, r3, #2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d008      	beq.n	8007e22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e10:	4b82      	ldr	r3, [pc, #520]	; (800801c <HAL_RCC_ClockConfig+0x260>)
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	497f      	ldr	r1, [pc, #508]	; (800801c <HAL_RCC_ClockConfig+0x260>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 80dc 	beq.w	8007fe8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d13c      	bne.n	8007eb2 <HAL_RCC_ClockConfig+0xf6>
 8007e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e40:	fa93 f3a3 	rbit	r3, r3
 8007e44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e48:	fab3 f383 	clz	r3, r3
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	095b      	lsrs	r3, r3, #5
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	f043 0301 	orr.w	r3, r3, #1
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d102      	bne.n	8007e62 <HAL_RCC_ClockConfig+0xa6>
 8007e5c:	4b6f      	ldr	r3, [pc, #444]	; (800801c <HAL_RCC_ClockConfig+0x260>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	e00f      	b.n	8007e82 <HAL_RCC_ClockConfig+0xc6>
 8007e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e6a:	fa93 f3a3 	rbit	r3, r3
 8007e6e:	667b      	str	r3, [r7, #100]	; 0x64
 8007e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e74:	663b      	str	r3, [r7, #96]	; 0x60
 8007e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e78:	fa93 f3a3 	rbit	r3, r3
 8007e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e7e:	4b67      	ldr	r3, [pc, #412]	; (800801c <HAL_RCC_ClockConfig+0x260>)
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e86:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e8a:	fa92 f2a2 	rbit	r2, r2
 8007e8e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007e90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e92:	fab2 f282 	clz	r2, r2
 8007e96:	b2d2      	uxtb	r2, r2
 8007e98:	f042 0220 	orr.w	r2, r2, #32
 8007e9c:	b2d2      	uxtb	r2, r2
 8007e9e:	f002 021f 	and.w	r2, r2, #31
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d17b      	bne.n	8007fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e0f3      	b.n	800809a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d13c      	bne.n	8007f34 <HAL_RCC_ClockConfig+0x178>
 8007eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ebe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec2:	fa93 f3a3 	rbit	r3, r3
 8007ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eca:	fab3 f383 	clz	r3, r3
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	095b      	lsrs	r3, r3, #5
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f043 0301 	orr.w	r3, r3, #1
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d102      	bne.n	8007ee4 <HAL_RCC_ClockConfig+0x128>
 8007ede:	4b4f      	ldr	r3, [pc, #316]	; (800801c <HAL_RCC_ClockConfig+0x260>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	e00f      	b.n	8007f04 <HAL_RCC_ClockConfig+0x148>
 8007ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ee8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eec:	fa93 f3a3 	rbit	r3, r3
 8007ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007efa:	fa93 f3a3 	rbit	r3, r3
 8007efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f00:	4b46      	ldr	r3, [pc, #280]	; (800801c <HAL_RCC_ClockConfig+0x260>)
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f08:	63ba      	str	r2, [r7, #56]	; 0x38
 8007f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f0c:	fa92 f2a2 	rbit	r2, r2
 8007f10:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f14:	fab2 f282 	clz	r2, r2
 8007f18:	b2d2      	uxtb	r2, r2
 8007f1a:	f042 0220 	orr.w	r2, r2, #32
 8007f1e:	b2d2      	uxtb	r2, r2
 8007f20:	f002 021f 	and.w	r2, r2, #31
 8007f24:	2101      	movs	r1, #1
 8007f26:	fa01 f202 	lsl.w	r2, r1, r2
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d13a      	bne.n	8007fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e0b2      	b.n	800809a <HAL_RCC_ClockConfig+0x2de>
 8007f34:	2302      	movs	r3, #2
 8007f36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	fa93 f3a3 	rbit	r3, r3
 8007f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f42:	fab3 f383 	clz	r3, r3
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	095b      	lsrs	r3, r3, #5
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	f043 0301 	orr.w	r3, r3, #1
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d102      	bne.n	8007f5c <HAL_RCC_ClockConfig+0x1a0>
 8007f56:	4b31      	ldr	r3, [pc, #196]	; (800801c <HAL_RCC_ClockConfig+0x260>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	e00d      	b.n	8007f78 <HAL_RCC_ClockConfig+0x1bc>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	fa93 f3a3 	rbit	r3, r3
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24
 8007f68:	2302      	movs	r3, #2
 8007f6a:	623b      	str	r3, [r7, #32]
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	fa93 f3a3 	rbit	r3, r3
 8007f72:	61fb      	str	r3, [r7, #28]
 8007f74:	4b29      	ldr	r3, [pc, #164]	; (800801c <HAL_RCC_ClockConfig+0x260>)
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	2202      	movs	r2, #2
 8007f7a:	61ba      	str	r2, [r7, #24]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	fa92 f2a2 	rbit	r2, r2
 8007f82:	617a      	str	r2, [r7, #20]
  return result;
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	fab2 f282 	clz	r2, r2
 8007f8a:	b2d2      	uxtb	r2, r2
 8007f8c:	f042 0220 	orr.w	r2, r2, #32
 8007f90:	b2d2      	uxtb	r2, r2
 8007f92:	f002 021f 	and.w	r2, r2, #31
 8007f96:	2101      	movs	r1, #1
 8007f98:	fa01 f202 	lsl.w	r2, r1, r2
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e079      	b.n	800809a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fa6:	4b1d      	ldr	r3, [pc, #116]	; (800801c <HAL_RCC_ClockConfig+0x260>)
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f023 0203 	bic.w	r2, r3, #3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	491a      	ldr	r1, [pc, #104]	; (800801c <HAL_RCC_ClockConfig+0x260>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fb8:	f7fc fe0c 	bl	8004bd4 <HAL_GetTick>
 8007fbc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fbe:	e00a      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fc0:	f7fc fe08 	bl	8004bd4 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e061      	b.n	800809a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fd6:	4b11      	ldr	r3, [pc, #68]	; (800801c <HAL_RCC_ClockConfig+0x260>)
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f003 020c 	and.w	r2, r3, #12
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d1eb      	bne.n	8007fc0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fe8:	4b0b      	ldr	r3, [pc, #44]	; (8008018 <HAL_RCC_ClockConfig+0x25c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0307 	and.w	r3, r3, #7
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d214      	bcs.n	8008020 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ff6:	4b08      	ldr	r3, [pc, #32]	; (8008018 <HAL_RCC_ClockConfig+0x25c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f023 0207 	bic.w	r2, r3, #7
 8007ffe:	4906      	ldr	r1, [pc, #24]	; (8008018 <HAL_RCC_ClockConfig+0x25c>)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	4313      	orrs	r3, r2
 8008004:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008006:	4b04      	ldr	r3, [pc, #16]	; (8008018 <HAL_RCC_ClockConfig+0x25c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0307 	and.w	r3, r3, #7
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	429a      	cmp	r2, r3
 8008012:	d005      	beq.n	8008020 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e040      	b.n	800809a <HAL_RCC_ClockConfig+0x2de>
 8008018:	40022000 	.word	0x40022000
 800801c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b00      	cmp	r3, #0
 800802a:	d008      	beq.n	800803e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800802c:	4b1d      	ldr	r3, [pc, #116]	; (80080a4 <HAL_RCC_ClockConfig+0x2e8>)
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	491a      	ldr	r1, [pc, #104]	; (80080a4 <HAL_RCC_ClockConfig+0x2e8>)
 800803a:	4313      	orrs	r3, r2
 800803c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0308 	and.w	r3, r3, #8
 8008046:	2b00      	cmp	r3, #0
 8008048:	d009      	beq.n	800805e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800804a:	4b16      	ldr	r3, [pc, #88]	; (80080a4 <HAL_RCC_ClockConfig+0x2e8>)
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	4912      	ldr	r1, [pc, #72]	; (80080a4 <HAL_RCC_ClockConfig+0x2e8>)
 800805a:	4313      	orrs	r3, r2
 800805c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800805e:	f000 f829 	bl	80080b4 <HAL_RCC_GetSysClockFreq>
 8008062:	4601      	mov	r1, r0
 8008064:	4b0f      	ldr	r3, [pc, #60]	; (80080a4 <HAL_RCC_ClockConfig+0x2e8>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800806c:	22f0      	movs	r2, #240	; 0xf0
 800806e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	fa92 f2a2 	rbit	r2, r2
 8008076:	60fa      	str	r2, [r7, #12]
  return result;
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	fab2 f282 	clz	r2, r2
 800807e:	b2d2      	uxtb	r2, r2
 8008080:	40d3      	lsrs	r3, r2
 8008082:	4a09      	ldr	r2, [pc, #36]	; (80080a8 <HAL_RCC_ClockConfig+0x2ec>)
 8008084:	5cd3      	ldrb	r3, [r2, r3]
 8008086:	fa21 f303 	lsr.w	r3, r1, r3
 800808a:	4a08      	ldr	r2, [pc, #32]	; (80080ac <HAL_RCC_ClockConfig+0x2f0>)
 800808c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800808e:	4b08      	ldr	r3, [pc, #32]	; (80080b0 <HAL_RCC_ClockConfig+0x2f4>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4618      	mov	r0, r3
 8008094:	f7fc fd5a 	bl	8004b4c <HAL_InitTick>
  
  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3778      	adds	r7, #120	; 0x78
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	40021000 	.word	0x40021000
 80080a8:	0800b98c 	.word	0x0800b98c
 80080ac:	20000128 	.word	0x20000128
 80080b0:	2000012c 	.word	0x2000012c

080080b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b08b      	sub	sp, #44	; 0x2c
 80080b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	61fb      	str	r3, [r7, #28]
 80080be:	2300      	movs	r3, #0
 80080c0:	61bb      	str	r3, [r7, #24]
 80080c2:	2300      	movs	r3, #0
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
 80080c6:	2300      	movs	r3, #0
 80080c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80080ce:	4b29      	ldr	r3, [pc, #164]	; (8008174 <HAL_RCC_GetSysClockFreq+0xc0>)
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	f003 030c 	and.w	r3, r3, #12
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d002      	beq.n	80080e4 <HAL_RCC_GetSysClockFreq+0x30>
 80080de:	2b08      	cmp	r3, #8
 80080e0:	d003      	beq.n	80080ea <HAL_RCC_GetSysClockFreq+0x36>
 80080e2:	e03c      	b.n	800815e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80080e4:	4b24      	ldr	r3, [pc, #144]	; (8008178 <HAL_RCC_GetSysClockFreq+0xc4>)
 80080e6:	623b      	str	r3, [r7, #32]
      break;
 80080e8:	e03c      	b.n	8008164 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80080f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80080f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	fa92 f2a2 	rbit	r2, r2
 80080fc:	607a      	str	r2, [r7, #4]
  return result;
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	fab2 f282 	clz	r2, r2
 8008104:	b2d2      	uxtb	r2, r2
 8008106:	40d3      	lsrs	r3, r2
 8008108:	4a1c      	ldr	r2, [pc, #112]	; (800817c <HAL_RCC_GetSysClockFreq+0xc8>)
 800810a:	5cd3      	ldrb	r3, [r2, r3]
 800810c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800810e:	4b19      	ldr	r3, [pc, #100]	; (8008174 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008112:	f003 030f 	and.w	r3, r3, #15
 8008116:	220f      	movs	r2, #15
 8008118:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	fa92 f2a2 	rbit	r2, r2
 8008120:	60fa      	str	r2, [r7, #12]
  return result;
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	fab2 f282 	clz	r2, r2
 8008128:	b2d2      	uxtb	r2, r2
 800812a:	40d3      	lsrs	r3, r2
 800812c:	4a14      	ldr	r2, [pc, #80]	; (8008180 <HAL_RCC_GetSysClockFreq+0xcc>)
 800812e:	5cd3      	ldrb	r3, [r2, r3]
 8008130:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d008      	beq.n	800814e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800813c:	4a0e      	ldr	r2, [pc, #56]	; (8008178 <HAL_RCC_GetSysClockFreq+0xc4>)
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	fbb2 f2f3 	udiv	r2, r2, r3
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	fb02 f303 	mul.w	r3, r2, r3
 800814a:	627b      	str	r3, [r7, #36]	; 0x24
 800814c:	e004      	b.n	8008158 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	4a0c      	ldr	r2, [pc, #48]	; (8008184 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008152:	fb02 f303 	mul.w	r3, r2, r3
 8008156:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	623b      	str	r3, [r7, #32]
      break;
 800815c:	e002      	b.n	8008164 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800815e:	4b06      	ldr	r3, [pc, #24]	; (8008178 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008160:	623b      	str	r3, [r7, #32]
      break;
 8008162:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008164:	6a3b      	ldr	r3, [r7, #32]
}
 8008166:	4618      	mov	r0, r3
 8008168:	372c      	adds	r7, #44	; 0x2c
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	40021000 	.word	0x40021000
 8008178:	007a1200 	.word	0x007a1200
 800817c:	0800b9a4 	.word	0x0800b9a4
 8008180:	0800b9b4 	.word	0x0800b9b4
 8008184:	003d0900 	.word	0x003d0900

08008188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800818c:	4b03      	ldr	r3, [pc, #12]	; (800819c <HAL_RCC_GetHCLKFreq+0x14>)
 800818e:	681b      	ldr	r3, [r3, #0]
}
 8008190:	4618      	mov	r0, r3
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	20000128 	.word	0x20000128

080081a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80081a6:	f7ff ffef 	bl	8008188 <HAL_RCC_GetHCLKFreq>
 80081aa:	4601      	mov	r1, r0
 80081ac:	4b0b      	ldr	r3, [pc, #44]	; (80081dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80081b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	fa92 f2a2 	rbit	r2, r2
 80081c0:	603a      	str	r2, [r7, #0]
  return result;
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	fab2 f282 	clz	r2, r2
 80081c8:	b2d2      	uxtb	r2, r2
 80081ca:	40d3      	lsrs	r3, r2
 80081cc:	4a04      	ldr	r2, [pc, #16]	; (80081e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80081ce:	5cd3      	ldrb	r3, [r2, r3]
 80081d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	40021000 	.word	0x40021000
 80081e0:	0800b99c 	.word	0x0800b99c

080081e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80081ea:	f7ff ffcd 	bl	8008188 <HAL_RCC_GetHCLKFreq>
 80081ee:	4601      	mov	r1, r0
 80081f0:	4b0b      	ldr	r3, [pc, #44]	; (8008220 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80081f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80081fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	fa92 f2a2 	rbit	r2, r2
 8008204:	603a      	str	r2, [r7, #0]
  return result;
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	fab2 f282 	clz	r2, r2
 800820c:	b2d2      	uxtb	r2, r2
 800820e:	40d3      	lsrs	r3, r2
 8008210:	4a04      	ldr	r2, [pc, #16]	; (8008224 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008212:	5cd3      	ldrb	r3, [r2, r3]
 8008214:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	40021000 	.word	0x40021000
 8008224:	0800b99c 	.word	0x0800b99c

08008228 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b092      	sub	sp, #72	; 0x48
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008230:	2300      	movs	r3, #0
 8008232:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008234:	2300      	movs	r3, #0
 8008236:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008238:	2300      	movs	r3, #0
 800823a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 80d4 	beq.w	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800824c:	4b4e      	ldr	r3, [pc, #312]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10e      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008258:	4b4b      	ldr	r3, [pc, #300]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	4a4a      	ldr	r2, [pc, #296]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800825e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008262:	61d3      	str	r3, [r2, #28]
 8008264:	4b48      	ldr	r3, [pc, #288]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800826c:	60bb      	str	r3, [r7, #8]
 800826e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008270:	2301      	movs	r3, #1
 8008272:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008276:	4b45      	ldr	r3, [pc, #276]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827e:	2b00      	cmp	r3, #0
 8008280:	d118      	bne.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008282:	4b42      	ldr	r3, [pc, #264]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a41      	ldr	r2, [pc, #260]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800828c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800828e:	f7fc fca1 	bl	8004bd4 <HAL_GetTick>
 8008292:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008294:	e008      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008296:	f7fc fc9d 	bl	8004bd4 <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	2b64      	cmp	r3, #100	; 0x64
 80082a2:	d901      	bls.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e169      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082a8:	4b38      	ldr	r3, [pc, #224]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0f0      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80082b4:	4b34      	ldr	r3, [pc, #208]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80082be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 8084 	beq.w	80083ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d07c      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082d4:	4b2c      	ldr	r3, [pc, #176]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	fa93 f3a3 	rbit	r3, r3
 80082ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80082ee:	fab3 f383 	clz	r3, r3
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	461a      	mov	r2, r3
 80082f6:	4b26      	ldr	r3, [pc, #152]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80082f8:	4413      	add	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	461a      	mov	r2, r3
 80082fe:	2301      	movs	r3, #1
 8008300:	6013      	str	r3, [r2, #0]
 8008302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008306:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830a:	fa93 f3a3 	rbit	r3, r3
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008312:	fab3 f383 	clz	r3, r3
 8008316:	b2db      	uxtb	r3, r3
 8008318:	461a      	mov	r2, r3
 800831a:	4b1d      	ldr	r3, [pc, #116]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800831c:	4413      	add	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	461a      	mov	r2, r3
 8008322:	2300      	movs	r3, #0
 8008324:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008326:	4a18      	ldr	r2, [pc, #96]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800832c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d04b      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008336:	f7fc fc4d 	bl	8004bd4 <HAL_GetTick>
 800833a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800833c:	e00a      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800833e:	f7fc fc49 	bl	8004bd4 <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	f241 3288 	movw	r2, #5000	; 0x1388
 800834c:	4293      	cmp	r3, r2
 800834e:	d901      	bls.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e113      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008354:	2302      	movs	r3, #2
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835a:	fa93 f3a3 	rbit	r3, r3
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
 8008360:	2302      	movs	r3, #2
 8008362:	623b      	str	r3, [r7, #32]
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	fa93 f3a3 	rbit	r3, r3
 800836a:	61fb      	str	r3, [r7, #28]
  return result;
 800836c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800836e:	fab3 f383 	clz	r3, r3
 8008372:	b2db      	uxtb	r3, r3
 8008374:	095b      	lsrs	r3, r3, #5
 8008376:	b2db      	uxtb	r3, r3
 8008378:	f043 0302 	orr.w	r3, r3, #2
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b02      	cmp	r3, #2
 8008380:	d108      	bne.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008382:	4b01      	ldr	r3, [pc, #4]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	e00d      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008388:	40021000 	.word	0x40021000
 800838c:	40007000 	.word	0x40007000
 8008390:	10908100 	.word	0x10908100
 8008394:	2302      	movs	r3, #2
 8008396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	fa93 f3a3 	rbit	r3, r3
 800839e:	617b      	str	r3, [r7, #20]
 80083a0:	4b78      	ldr	r3, [pc, #480]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	2202      	movs	r2, #2
 80083a6:	613a      	str	r2, [r7, #16]
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	fa92 f2a2 	rbit	r2, r2
 80083ae:	60fa      	str	r2, [r7, #12]
  return result;
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	fab2 f282 	clz	r2, r2
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083bc:	b2d2      	uxtb	r2, r2
 80083be:	f002 021f 	and.w	r2, r2, #31
 80083c2:	2101      	movs	r1, #1
 80083c4:	fa01 f202 	lsl.w	r2, r1, r2
 80083c8:	4013      	ands	r3, r2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0b7      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80083ce:	4b6d      	ldr	r3, [pc, #436]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	496a      	ldr	r1, [pc, #424]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80083e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d105      	bne.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083e8:	4b66      	ldr	r3, [pc, #408]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	4a65      	ldr	r2, [pc, #404]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80083ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d008      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008400:	4b60      	ldr	r3, [pc, #384]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008404:	f023 0203 	bic.w	r2, r3, #3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	495d      	ldr	r1, [pc, #372]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800840e:	4313      	orrs	r3, r2
 8008410:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b00      	cmp	r3, #0
 800841c:	d008      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800841e:	4b59      	ldr	r3, [pc, #356]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008422:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	4956      	ldr	r1, [pc, #344]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800842c:	4313      	orrs	r3, r2
 800842e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0304 	and.w	r3, r3, #4
 8008438:	2b00      	cmp	r3, #0
 800843a:	d008      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800843c:	4b51      	ldr	r3, [pc, #324]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800843e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	494e      	ldr	r1, [pc, #312]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800844a:	4313      	orrs	r3, r2
 800844c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0320 	and.w	r3, r3, #32
 8008456:	2b00      	cmp	r3, #0
 8008458:	d008      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800845a:	4b4a      	ldr	r3, [pc, #296]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800845c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845e:	f023 0210 	bic.w	r2, r3, #16
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	4947      	ldr	r1, [pc, #284]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008468:	4313      	orrs	r3, r2
 800846a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d008      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008478:	4b42      	ldr	r3, [pc, #264]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008484:	493f      	ldr	r1, [pc, #252]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008486:	4313      	orrs	r3, r2
 8008488:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008492:	2b00      	cmp	r3, #0
 8008494:	d008      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008496:	4b3b      	ldr	r3, [pc, #236]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849a:	f023 0220 	bic.w	r2, r3, #32
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	4938      	ldr	r1, [pc, #224]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0308 	and.w	r3, r3, #8
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d008      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80084b4:	4b33      	ldr	r3, [pc, #204]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80084b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	4930      	ldr	r1, [pc, #192]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0310 	and.w	r3, r3, #16
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d008      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80084d2:	4b2c      	ldr	r3, [pc, #176]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80084d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	4929      	ldr	r1, [pc, #164]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d008      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80084f0:	4b24      	ldr	r3, [pc, #144]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fc:	4921      	ldr	r1, [pc, #132]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850a:	2b00      	cmp	r3, #0
 800850c:	d008      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800850e:	4b1d      	ldr	r3, [pc, #116]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008512:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	491a      	ldr	r1, [pc, #104]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800851c:	4313      	orrs	r3, r2
 800851e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008528:	2b00      	cmp	r3, #0
 800852a:	d008      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800852c:	4b15      	ldr	r3, [pc, #84]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800852e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008530:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008538:	4912      	ldr	r1, [pc, #72]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800853a:	4313      	orrs	r3, r2
 800853c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d008      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800854a:	4b0e      	ldr	r3, [pc, #56]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800854c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	490b      	ldr	r1, [pc, #44]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008558:	4313      	orrs	r3, r2
 800855a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d008      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008568:	4b06      	ldr	r3, [pc, #24]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800856a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008574:	4903      	ldr	r1, [pc, #12]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008576:	4313      	orrs	r3, r2
 8008578:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3748      	adds	r7, #72	; 0x48
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	40021000 	.word	0x40021000

08008588 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e09d      	b.n	80086d6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d108      	bne.n	80085b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085aa:	d009      	beq.n	80085c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	61da      	str	r2, [r3, #28]
 80085b2:	e005      	b.n	80085c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d106      	bne.n	80085e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7f8 ff58 	bl	8001490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008600:	d902      	bls.n	8008608 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	e002      	b.n	800860e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800860c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008616:	d007      	beq.n	8008628 <HAL_SPI_Init+0xa0>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008620:	d002      	beq.n	8008628 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008638:	431a      	orrs	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	431a      	orrs	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008656:	431a      	orrs	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	69db      	ldr	r3, [r3, #28]
 800865c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008660:	431a      	orrs	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866a:	ea42 0103 	orr.w	r1, r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008672:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	0c1b      	lsrs	r3, r3, #16
 8008684:	f003 0204 	and.w	r2, r3, #4
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	f003 0310 	and.w	r3, r3, #16
 8008690:	431a      	orrs	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	431a      	orrs	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80086a4:	ea42 0103 	orr.w	r1, r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	69da      	ldr	r2, [r3, #28]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e049      	b.n	8008784 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d106      	bne.n	800870a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7f8 ff05 	bl	8001514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2202      	movs	r2, #2
 800870e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	3304      	adds	r3, #4
 800871a:	4619      	mov	r1, r3
 800871c:	4610      	mov	r0, r2
 800871e:	f000 fc2f 	bl	8008f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b01      	cmp	r3, #1
 800879e:	d001      	beq.n	80087a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e04a      	b.n	800883a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68da      	ldr	r2, [r3, #12]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0201 	orr.w	r2, r2, #1
 80087ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a21      	ldr	r2, [pc, #132]	; (8008848 <HAL_TIM_Base_Start_IT+0xbc>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d018      	beq.n	80087f8 <HAL_TIM_Base_Start_IT+0x6c>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ce:	d013      	beq.n	80087f8 <HAL_TIM_Base_Start_IT+0x6c>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a1d      	ldr	r2, [pc, #116]	; (800884c <HAL_TIM_Base_Start_IT+0xc0>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d00e      	beq.n	80087f8 <HAL_TIM_Base_Start_IT+0x6c>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a1c      	ldr	r2, [pc, #112]	; (8008850 <HAL_TIM_Base_Start_IT+0xc4>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d009      	beq.n	80087f8 <HAL_TIM_Base_Start_IT+0x6c>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a1a      	ldr	r2, [pc, #104]	; (8008854 <HAL_TIM_Base_Start_IT+0xc8>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d004      	beq.n	80087f8 <HAL_TIM_Base_Start_IT+0x6c>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a19      	ldr	r2, [pc, #100]	; (8008858 <HAL_TIM_Base_Start_IT+0xcc>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d115      	bne.n	8008824 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689a      	ldr	r2, [r3, #8]
 80087fe:	4b17      	ldr	r3, [pc, #92]	; (800885c <HAL_TIM_Base_Start_IT+0xd0>)
 8008800:	4013      	ands	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2b06      	cmp	r3, #6
 8008808:	d015      	beq.n	8008836 <HAL_TIM_Base_Start_IT+0xaa>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008810:	d011      	beq.n	8008836 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f042 0201 	orr.w	r2, r2, #1
 8008820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008822:	e008      	b.n	8008836 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f042 0201 	orr.w	r2, r2, #1
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	e000      	b.n	8008838 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008836:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	40012c00 	.word	0x40012c00
 800884c:	40000400 	.word	0x40000400
 8008850:	40000800 	.word	0x40000800
 8008854:	40013400 	.word	0x40013400
 8008858:	40014000 	.word	0x40014000
 800885c:	00010007 	.word	0x00010007

08008860 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e049      	b.n	8008906 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d106      	bne.n	800888c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f841 	bl	800890e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2202      	movs	r2, #2
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	3304      	adds	r3, #4
 800889c:	4619      	mov	r1, r3
 800889e:	4610      	mov	r0, r2
 80088a0:	f000 fb6e 	bl	8008f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008916:	bf00      	nop
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b082      	sub	sp, #8
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b02      	cmp	r3, #2
 8008936:	d122      	bne.n	800897e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	f003 0302 	and.w	r3, r3, #2
 8008942:	2b02      	cmp	r3, #2
 8008944:	d11b      	bne.n	800897e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f06f 0202 	mvn.w	r2, #2
 800894e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	f003 0303 	and.w	r3, r3, #3
 8008960:	2b00      	cmp	r3, #0
 8008962:	d003      	beq.n	800896c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 faec 	bl	8008f42 <HAL_TIM_IC_CaptureCallback>
 800896a:	e005      	b.n	8008978 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fade 	bl	8008f2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 faef 	bl	8008f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	f003 0304 	and.w	r3, r3, #4
 8008988:	2b04      	cmp	r3, #4
 800898a:	d122      	bne.n	80089d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	f003 0304 	and.w	r3, r3, #4
 8008996:	2b04      	cmp	r3, #4
 8008998:	d11b      	bne.n	80089d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f06f 0204 	mvn.w	r2, #4
 80089a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2202      	movs	r2, #2
 80089a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fac2 	bl	8008f42 <HAL_TIM_IC_CaptureCallback>
 80089be:	e005      	b.n	80089cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fab4 	bl	8008f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fac5 	bl	8008f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	f003 0308 	and.w	r3, r3, #8
 80089dc:	2b08      	cmp	r3, #8
 80089de:	d122      	bne.n	8008a26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	f003 0308 	and.w	r3, r3, #8
 80089ea:	2b08      	cmp	r3, #8
 80089ec:	d11b      	bne.n	8008a26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f06f 0208 	mvn.w	r2, #8
 80089f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2204      	movs	r2, #4
 80089fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fa98 	bl	8008f42 <HAL_TIM_IC_CaptureCallback>
 8008a12:	e005      	b.n	8008a20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fa8a 	bl	8008f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa9b 	bl	8008f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	f003 0310 	and.w	r3, r3, #16
 8008a30:	2b10      	cmp	r3, #16
 8008a32:	d122      	bne.n	8008a7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f003 0310 	and.w	r3, r3, #16
 8008a3e:	2b10      	cmp	r3, #16
 8008a40:	d11b      	bne.n	8008a7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f06f 0210 	mvn.w	r2, #16
 8008a4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2208      	movs	r2, #8
 8008a50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fa6e 	bl	8008f42 <HAL_TIM_IC_CaptureCallback>
 8008a66:	e005      	b.n	8008a74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fa60 	bl	8008f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fa71 	bl	8008f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	f003 0301 	and.w	r3, r3, #1
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d10e      	bne.n	8008aa6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d107      	bne.n	8008aa6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f06f 0201 	mvn.w	r2, #1
 8008a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fa3a 	bl	8008f1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab0:	2b80      	cmp	r3, #128	; 0x80
 8008ab2:	d10e      	bne.n	8008ad2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008abe:	2b80      	cmp	r3, #128	; 0x80
 8008ac0:	d107      	bne.n	8008ad2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fee1 	bl	8009894 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ae0:	d10e      	bne.n	8008b00 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aec:	2b80      	cmp	r3, #128	; 0x80
 8008aee:	d107      	bne.n	8008b00 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fed4 	bl	80098a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0a:	2b40      	cmp	r3, #64	; 0x40
 8008b0c:	d10e      	bne.n	8008b2c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b18:	2b40      	cmp	r3, #64	; 0x40
 8008b1a:	d107      	bne.n	8008b2c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fa1f 	bl	8008f6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	f003 0320 	and.w	r3, r3, #32
 8008b36:	2b20      	cmp	r3, #32
 8008b38:	d10e      	bne.n	8008b58 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	f003 0320 	and.w	r3, r3, #32
 8008b44:	2b20      	cmp	r3, #32
 8008b46:	d107      	bne.n	8008b58 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f06f 0220 	mvn.w	r2, #32
 8008b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fe94 	bl	8009880 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b58:	bf00      	nop
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	e0ff      	b.n	8008d7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b14      	cmp	r3, #20
 8008b8a:	f200 80f0 	bhi.w	8008d6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008b8e:	a201      	add	r2, pc, #4	; (adr r2, 8008b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b94:	08008be9 	.word	0x08008be9
 8008b98:	08008d6f 	.word	0x08008d6f
 8008b9c:	08008d6f 	.word	0x08008d6f
 8008ba0:	08008d6f 	.word	0x08008d6f
 8008ba4:	08008c29 	.word	0x08008c29
 8008ba8:	08008d6f 	.word	0x08008d6f
 8008bac:	08008d6f 	.word	0x08008d6f
 8008bb0:	08008d6f 	.word	0x08008d6f
 8008bb4:	08008c6b 	.word	0x08008c6b
 8008bb8:	08008d6f 	.word	0x08008d6f
 8008bbc:	08008d6f 	.word	0x08008d6f
 8008bc0:	08008d6f 	.word	0x08008d6f
 8008bc4:	08008cab 	.word	0x08008cab
 8008bc8:	08008d6f 	.word	0x08008d6f
 8008bcc:	08008d6f 	.word	0x08008d6f
 8008bd0:	08008d6f 	.word	0x08008d6f
 8008bd4:	08008ced 	.word	0x08008ced
 8008bd8:	08008d6f 	.word	0x08008d6f
 8008bdc:	08008d6f 	.word	0x08008d6f
 8008be0:	08008d6f 	.word	0x08008d6f
 8008be4:	08008d2d 	.word	0x08008d2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68b9      	ldr	r1, [r7, #8]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 fa56 	bl	80090a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	699a      	ldr	r2, [r3, #24]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f042 0208 	orr.w	r2, r2, #8
 8008c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	699a      	ldr	r2, [r3, #24]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f022 0204 	bic.w	r2, r2, #4
 8008c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6999      	ldr	r1, [r3, #24]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	691a      	ldr	r2, [r3, #16]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	619a      	str	r2, [r3, #24]
      break;
 8008c26:	e0a5      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68b9      	ldr	r1, [r7, #8]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fac6 	bl	80091c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699a      	ldr	r2, [r3, #24]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	699a      	ldr	r2, [r3, #24]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6999      	ldr	r1, [r3, #24]
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	021a      	lsls	r2, r3, #8
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	619a      	str	r2, [r3, #24]
      break;
 8008c68:	e084      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fb2f 	bl	80092d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69da      	ldr	r2, [r3, #28]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0208 	orr.w	r2, r2, #8
 8008c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	69da      	ldr	r2, [r3, #28]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f022 0204 	bic.w	r2, r2, #4
 8008c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	69d9      	ldr	r1, [r3, #28]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	691a      	ldr	r2, [r3, #16]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	430a      	orrs	r2, r1
 8008ca6:	61da      	str	r2, [r3, #28]
      break;
 8008ca8:	e064      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68b9      	ldr	r1, [r7, #8]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fb97 	bl	80093e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	69da      	ldr	r2, [r3, #28]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	69da      	ldr	r2, [r3, #28]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	69d9      	ldr	r1, [r3, #28]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	021a      	lsls	r2, r3, #8
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	61da      	str	r2, [r3, #28]
      break;
 8008cea:	e043      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 fbe0 	bl	80094b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f042 0208 	orr.w	r2, r2, #8
 8008d06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f022 0204 	bic.w	r2, r2, #4
 8008d16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	691a      	ldr	r2, [r3, #16]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008d2a:	e023      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68b9      	ldr	r1, [r7, #8]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 fc24 	bl	8009580 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	021a      	lsls	r2, r3, #8
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008d6c:	e002      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	75fb      	strb	r3, [r7, #23]
      break;
 8008d72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop

08008d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d101      	bne.n	8008da4 <HAL_TIM_ConfigClockSource+0x1c>
 8008da0:	2302      	movs	r3, #2
 8008da2:	e0b6      	b.n	8008f12 <HAL_TIM_ConfigClockSource+0x18a>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008de0:	d03e      	beq.n	8008e60 <HAL_TIM_ConfigClockSource+0xd8>
 8008de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008de6:	f200 8087 	bhi.w	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dee:	f000 8086 	beq.w	8008efe <HAL_TIM_ConfigClockSource+0x176>
 8008df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008df6:	d87f      	bhi.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008df8:	2b70      	cmp	r3, #112	; 0x70
 8008dfa:	d01a      	beq.n	8008e32 <HAL_TIM_ConfigClockSource+0xaa>
 8008dfc:	2b70      	cmp	r3, #112	; 0x70
 8008dfe:	d87b      	bhi.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008e00:	2b60      	cmp	r3, #96	; 0x60
 8008e02:	d050      	beq.n	8008ea6 <HAL_TIM_ConfigClockSource+0x11e>
 8008e04:	2b60      	cmp	r3, #96	; 0x60
 8008e06:	d877      	bhi.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008e08:	2b50      	cmp	r3, #80	; 0x50
 8008e0a:	d03c      	beq.n	8008e86 <HAL_TIM_ConfigClockSource+0xfe>
 8008e0c:	2b50      	cmp	r3, #80	; 0x50
 8008e0e:	d873      	bhi.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008e10:	2b40      	cmp	r3, #64	; 0x40
 8008e12:	d058      	beq.n	8008ec6 <HAL_TIM_ConfigClockSource+0x13e>
 8008e14:	2b40      	cmp	r3, #64	; 0x40
 8008e16:	d86f      	bhi.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008e18:	2b30      	cmp	r3, #48	; 0x30
 8008e1a:	d064      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8008e1c:	2b30      	cmp	r3, #48	; 0x30
 8008e1e:	d86b      	bhi.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008e20:	2b20      	cmp	r3, #32
 8008e22:	d060      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8008e24:	2b20      	cmp	r3, #32
 8008e26:	d867      	bhi.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d05c      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8008e2c:	2b10      	cmp	r3, #16
 8008e2e:	d05a      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8008e30:	e062      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6818      	ldr	r0, [r3, #0]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	6899      	ldr	r1, [r3, #8]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f000 fc7d 	bl	8009740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	609a      	str	r2, [r3, #8]
      break;
 8008e5e:	e04f      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6818      	ldr	r0, [r3, #0]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	6899      	ldr	r1, [r3, #8]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	f000 fc66 	bl	8009740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e82:	609a      	str	r2, [r3, #8]
      break;
 8008e84:	e03c      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	6859      	ldr	r1, [r3, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	461a      	mov	r2, r3
 8008e94:	f000 fbda 	bl	800964c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2150      	movs	r1, #80	; 0x50
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fc33 	bl	800970a <TIM_ITRx_SetConfig>
      break;
 8008ea4:	e02c      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6818      	ldr	r0, [r3, #0]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	6859      	ldr	r1, [r3, #4]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f000 fbf9 	bl	80096aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2160      	movs	r1, #96	; 0x60
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 fc23 	bl	800970a <TIM_ITRx_SetConfig>
      break;
 8008ec4:	e01c      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6818      	ldr	r0, [r3, #0]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	6859      	ldr	r1, [r3, #4]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f000 fbba 	bl	800964c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2140      	movs	r1, #64	; 0x40
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fc13 	bl	800970a <TIM_ITRx_SetConfig>
      break;
 8008ee4:	e00c      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	f000 fc0a 	bl	800970a <TIM_ITRx_SetConfig>
      break;
 8008ef6:	e003      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	73fb      	strb	r3, [r7, #15]
      break;
 8008efc:	e000      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008efe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b083      	sub	sp, #12
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008f22:	bf00      	nop
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f36:	bf00      	nop
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f4a:	bf00      	nop
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b083      	sub	sp, #12
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f5e:	bf00      	nop
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f72:	bf00      	nop
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
	...

08008f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a3c      	ldr	r2, [pc, #240]	; (8009084 <TIM_Base_SetConfig+0x104>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d00f      	beq.n	8008fb8 <TIM_Base_SetConfig+0x38>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f9e:	d00b      	beq.n	8008fb8 <TIM_Base_SetConfig+0x38>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a39      	ldr	r2, [pc, #228]	; (8009088 <TIM_Base_SetConfig+0x108>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d007      	beq.n	8008fb8 <TIM_Base_SetConfig+0x38>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a38      	ldr	r2, [pc, #224]	; (800908c <TIM_Base_SetConfig+0x10c>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d003      	beq.n	8008fb8 <TIM_Base_SetConfig+0x38>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a37      	ldr	r2, [pc, #220]	; (8009090 <TIM_Base_SetConfig+0x110>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d108      	bne.n	8008fca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a2d      	ldr	r2, [pc, #180]	; (8009084 <TIM_Base_SetConfig+0x104>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d01b      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fd8:	d017      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a2a      	ldr	r2, [pc, #168]	; (8009088 <TIM_Base_SetConfig+0x108>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d013      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a29      	ldr	r2, [pc, #164]	; (800908c <TIM_Base_SetConfig+0x10c>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d00f      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a28      	ldr	r2, [pc, #160]	; (8009090 <TIM_Base_SetConfig+0x110>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d00b      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a27      	ldr	r2, [pc, #156]	; (8009094 <TIM_Base_SetConfig+0x114>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d007      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a26      	ldr	r2, [pc, #152]	; (8009098 <TIM_Base_SetConfig+0x118>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d003      	beq.n	800900a <TIM_Base_SetConfig+0x8a>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a25      	ldr	r2, [pc, #148]	; (800909c <TIM_Base_SetConfig+0x11c>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d108      	bne.n	800901c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	4313      	orrs	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	4313      	orrs	r3, r2
 8009028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	689a      	ldr	r2, [r3, #8]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a10      	ldr	r2, [pc, #64]	; (8009084 <TIM_Base_SetConfig+0x104>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d00f      	beq.n	8009068 <TIM_Base_SetConfig+0xe8>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a11      	ldr	r2, [pc, #68]	; (8009090 <TIM_Base_SetConfig+0x110>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d00b      	beq.n	8009068 <TIM_Base_SetConfig+0xe8>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a10      	ldr	r2, [pc, #64]	; (8009094 <TIM_Base_SetConfig+0x114>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d007      	beq.n	8009068 <TIM_Base_SetConfig+0xe8>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a0f      	ldr	r2, [pc, #60]	; (8009098 <TIM_Base_SetConfig+0x118>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d003      	beq.n	8009068 <TIM_Base_SetConfig+0xe8>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a0e      	ldr	r2, [pc, #56]	; (800909c <TIM_Base_SetConfig+0x11c>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d103      	bne.n	8009070 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	691a      	ldr	r2, [r3, #16]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	615a      	str	r2, [r3, #20]
}
 8009076:	bf00      	nop
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	40012c00 	.word	0x40012c00
 8009088:	40000400 	.word	0x40000400
 800908c:	40000800 	.word	0x40000800
 8009090:	40013400 	.word	0x40013400
 8009094:	40014000 	.word	0x40014000
 8009098:	40014400 	.word	0x40014400
 800909c:	40014800 	.word	0x40014800

080090a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	f023 0201 	bic.w	r2, r3, #1
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 0303 	bic.w	r3, r3, #3
 80090da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f023 0302 	bic.w	r3, r3, #2
 80090ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a2c      	ldr	r2, [pc, #176]	; (80091ac <TIM_OC1_SetConfig+0x10c>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d00f      	beq.n	8009120 <TIM_OC1_SetConfig+0x80>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a2b      	ldr	r2, [pc, #172]	; (80091b0 <TIM_OC1_SetConfig+0x110>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d00b      	beq.n	8009120 <TIM_OC1_SetConfig+0x80>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a2a      	ldr	r2, [pc, #168]	; (80091b4 <TIM_OC1_SetConfig+0x114>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d007      	beq.n	8009120 <TIM_OC1_SetConfig+0x80>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a29      	ldr	r2, [pc, #164]	; (80091b8 <TIM_OC1_SetConfig+0x118>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d003      	beq.n	8009120 <TIM_OC1_SetConfig+0x80>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a28      	ldr	r2, [pc, #160]	; (80091bc <TIM_OC1_SetConfig+0x11c>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d10c      	bne.n	800913a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	f023 0308 	bic.w	r3, r3, #8
 8009126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	4313      	orrs	r3, r2
 8009130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f023 0304 	bic.w	r3, r3, #4
 8009138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a1b      	ldr	r2, [pc, #108]	; (80091ac <TIM_OC1_SetConfig+0x10c>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d00f      	beq.n	8009162 <TIM_OC1_SetConfig+0xc2>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a1a      	ldr	r2, [pc, #104]	; (80091b0 <TIM_OC1_SetConfig+0x110>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d00b      	beq.n	8009162 <TIM_OC1_SetConfig+0xc2>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a19      	ldr	r2, [pc, #100]	; (80091b4 <TIM_OC1_SetConfig+0x114>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d007      	beq.n	8009162 <TIM_OC1_SetConfig+0xc2>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a18      	ldr	r2, [pc, #96]	; (80091b8 <TIM_OC1_SetConfig+0x118>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d003      	beq.n	8009162 <TIM_OC1_SetConfig+0xc2>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a17      	ldr	r2, [pc, #92]	; (80091bc <TIM_OC1_SetConfig+0x11c>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d111      	bne.n	8009186 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	4313      	orrs	r3, r2
 800917a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	4313      	orrs	r3, r2
 8009184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	621a      	str	r2, [r3, #32]
}
 80091a0:	bf00      	nop
 80091a2:	371c      	adds	r7, #28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr
 80091ac:	40012c00 	.word	0x40012c00
 80091b0:	40013400 	.word	0x40013400
 80091b4:	40014000 	.word	0x40014000
 80091b8:	40014400 	.word	0x40014400
 80091bc:	40014800 	.word	0x40014800

080091c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	f023 0210 	bic.w	r2, r3, #16
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4313      	orrs	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	f023 0320 	bic.w	r3, r3, #32
 800920e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	011b      	lsls	r3, r3, #4
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	4313      	orrs	r3, r2
 800921a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a28      	ldr	r2, [pc, #160]	; (80092c0 <TIM_OC2_SetConfig+0x100>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d003      	beq.n	800922c <TIM_OC2_SetConfig+0x6c>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a27      	ldr	r2, [pc, #156]	; (80092c4 <TIM_OC2_SetConfig+0x104>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d10d      	bne.n	8009248 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	011b      	lsls	r3, r3, #4
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	4313      	orrs	r3, r2
 800923e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009246:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a1d      	ldr	r2, [pc, #116]	; (80092c0 <TIM_OC2_SetConfig+0x100>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d00f      	beq.n	8009270 <TIM_OC2_SetConfig+0xb0>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a1c      	ldr	r2, [pc, #112]	; (80092c4 <TIM_OC2_SetConfig+0x104>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d00b      	beq.n	8009270 <TIM_OC2_SetConfig+0xb0>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a1b      	ldr	r2, [pc, #108]	; (80092c8 <TIM_OC2_SetConfig+0x108>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d007      	beq.n	8009270 <TIM_OC2_SetConfig+0xb0>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a1a      	ldr	r2, [pc, #104]	; (80092cc <TIM_OC2_SetConfig+0x10c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d003      	beq.n	8009270 <TIM_OC2_SetConfig+0xb0>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a19      	ldr	r2, [pc, #100]	; (80092d0 <TIM_OC2_SetConfig+0x110>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d113      	bne.n	8009298 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009276:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800927e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	695b      	ldr	r3, [r3, #20]
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	4313      	orrs	r3, r2
 800928a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	4313      	orrs	r3, r2
 8009296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	621a      	str	r2, [r3, #32]
}
 80092b2:	bf00      	nop
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	40012c00 	.word	0x40012c00
 80092c4:	40013400 	.word	0x40013400
 80092c8:	40014000 	.word	0x40014000
 80092cc:	40014400 	.word	0x40014400
 80092d0:	40014800 	.word	0x40014800

080092d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	69db      	ldr	r3, [r3, #28]
 80092fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f023 0303 	bic.w	r3, r3, #3
 800930e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	4313      	orrs	r3, r2
 8009318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	021b      	lsls	r3, r3, #8
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	4313      	orrs	r3, r2
 800932c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a27      	ldr	r2, [pc, #156]	; (80093d0 <TIM_OC3_SetConfig+0xfc>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d003      	beq.n	800933e <TIM_OC3_SetConfig+0x6a>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a26      	ldr	r2, [pc, #152]	; (80093d4 <TIM_OC3_SetConfig+0x100>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d10d      	bne.n	800935a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	021b      	lsls	r3, r3, #8
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	4313      	orrs	r3, r2
 8009350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009358:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a1c      	ldr	r2, [pc, #112]	; (80093d0 <TIM_OC3_SetConfig+0xfc>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d00f      	beq.n	8009382 <TIM_OC3_SetConfig+0xae>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a1b      	ldr	r2, [pc, #108]	; (80093d4 <TIM_OC3_SetConfig+0x100>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d00b      	beq.n	8009382 <TIM_OC3_SetConfig+0xae>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a1a      	ldr	r2, [pc, #104]	; (80093d8 <TIM_OC3_SetConfig+0x104>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d007      	beq.n	8009382 <TIM_OC3_SetConfig+0xae>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a19      	ldr	r2, [pc, #100]	; (80093dc <TIM_OC3_SetConfig+0x108>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d003      	beq.n	8009382 <TIM_OC3_SetConfig+0xae>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a18      	ldr	r2, [pc, #96]	; (80093e0 <TIM_OC3_SetConfig+0x10c>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d113      	bne.n	80093aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	695b      	ldr	r3, [r3, #20]
 8009396:	011b      	lsls	r3, r3, #4
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	4313      	orrs	r3, r2
 800939c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	011b      	lsls	r3, r3, #4
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	621a      	str	r2, [r3, #32]
}
 80093c4:	bf00      	nop
 80093c6:	371c      	adds	r7, #28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	40012c00 	.word	0x40012c00
 80093d4:	40013400 	.word	0x40013400
 80093d8:	40014000 	.word	0x40014000
 80093dc:	40014400 	.word	0x40014400
 80093e0:	40014800 	.word	0x40014800

080093e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800941e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	021b      	lsls	r3, r3, #8
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	4313      	orrs	r3, r2
 800942a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	031b      	lsls	r3, r3, #12
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	4313      	orrs	r3, r2
 800943e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a18      	ldr	r2, [pc, #96]	; (80094a4 <TIM_OC4_SetConfig+0xc0>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00f      	beq.n	8009468 <TIM_OC4_SetConfig+0x84>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a17      	ldr	r2, [pc, #92]	; (80094a8 <TIM_OC4_SetConfig+0xc4>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d00b      	beq.n	8009468 <TIM_OC4_SetConfig+0x84>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a16      	ldr	r2, [pc, #88]	; (80094ac <TIM_OC4_SetConfig+0xc8>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d007      	beq.n	8009468 <TIM_OC4_SetConfig+0x84>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a15      	ldr	r2, [pc, #84]	; (80094b0 <TIM_OC4_SetConfig+0xcc>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d003      	beq.n	8009468 <TIM_OC4_SetConfig+0x84>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a14      	ldr	r2, [pc, #80]	; (80094b4 <TIM_OC4_SetConfig+0xd0>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d109      	bne.n	800947c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800946e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	695b      	ldr	r3, [r3, #20]
 8009474:	019b      	lsls	r3, r3, #6
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	4313      	orrs	r3, r2
 800947a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	621a      	str	r2, [r3, #32]
}
 8009496:	bf00      	nop
 8009498:	371c      	adds	r7, #28
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	40012c00 	.word	0x40012c00
 80094a8:	40013400 	.word	0x40013400
 80094ac:	40014000 	.word	0x40014000
 80094b0:	40014400 	.word	0x40014400
 80094b4:	40014800 	.word	0x40014800

080094b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80094fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	041b      	lsls	r3, r3, #16
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	4313      	orrs	r3, r2
 8009508:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a17      	ldr	r2, [pc, #92]	; (800956c <TIM_OC5_SetConfig+0xb4>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d00f      	beq.n	8009532 <TIM_OC5_SetConfig+0x7a>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a16      	ldr	r2, [pc, #88]	; (8009570 <TIM_OC5_SetConfig+0xb8>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d00b      	beq.n	8009532 <TIM_OC5_SetConfig+0x7a>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a15      	ldr	r2, [pc, #84]	; (8009574 <TIM_OC5_SetConfig+0xbc>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d007      	beq.n	8009532 <TIM_OC5_SetConfig+0x7a>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a14      	ldr	r2, [pc, #80]	; (8009578 <TIM_OC5_SetConfig+0xc0>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d003      	beq.n	8009532 <TIM_OC5_SetConfig+0x7a>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a13      	ldr	r2, [pc, #76]	; (800957c <TIM_OC5_SetConfig+0xc4>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d109      	bne.n	8009546 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009538:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	021b      	lsls	r3, r3, #8
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	4313      	orrs	r3, r2
 8009544:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	697a      	ldr	r2, [r7, #20]
 800954a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	621a      	str	r2, [r3, #32]
}
 8009560:	bf00      	nop
 8009562:	371c      	adds	r7, #28
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	40012c00 	.word	0x40012c00
 8009570:	40013400 	.word	0x40013400
 8009574:	40014000 	.word	0x40014000
 8009578:	40014400 	.word	0x40014400
 800957c:	40014800 	.word	0x40014800

08009580 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009580:	b480      	push	{r7}
 8009582:	b087      	sub	sp, #28
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a1b      	ldr	r3, [r3, #32]
 800959a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	021b      	lsls	r3, r3, #8
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	4313      	orrs	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	051b      	lsls	r3, r3, #20
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a18      	ldr	r2, [pc, #96]	; (8009638 <TIM_OC6_SetConfig+0xb8>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d00f      	beq.n	80095fc <TIM_OC6_SetConfig+0x7c>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a17      	ldr	r2, [pc, #92]	; (800963c <TIM_OC6_SetConfig+0xbc>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d00b      	beq.n	80095fc <TIM_OC6_SetConfig+0x7c>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a16      	ldr	r2, [pc, #88]	; (8009640 <TIM_OC6_SetConfig+0xc0>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d007      	beq.n	80095fc <TIM_OC6_SetConfig+0x7c>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a15      	ldr	r2, [pc, #84]	; (8009644 <TIM_OC6_SetConfig+0xc4>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d003      	beq.n	80095fc <TIM_OC6_SetConfig+0x7c>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a14      	ldr	r2, [pc, #80]	; (8009648 <TIM_OC6_SetConfig+0xc8>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d109      	bne.n	8009610 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009602:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	695b      	ldr	r3, [r3, #20]
 8009608:	029b      	lsls	r3, r3, #10
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	4313      	orrs	r3, r2
 800960e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	685a      	ldr	r2, [r3, #4]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	621a      	str	r2, [r3, #32]
}
 800962a:	bf00      	nop
 800962c:	371c      	adds	r7, #28
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	40012c00 	.word	0x40012c00
 800963c:	40013400 	.word	0x40013400
 8009640:	40014000 	.word	0x40014000
 8009644:	40014400 	.word	0x40014400
 8009648:	40014800 	.word	0x40014800

0800964c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800964c:	b480      	push	{r7}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6a1b      	ldr	r3, [r3, #32]
 800965c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	f023 0201 	bic.w	r2, r3, #1
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	011b      	lsls	r3, r3, #4
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	4313      	orrs	r3, r2
 8009680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f023 030a 	bic.w	r3, r3, #10
 8009688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	4313      	orrs	r3, r2
 8009690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	621a      	str	r2, [r3, #32]
}
 800969e:	bf00      	nop
 80096a0:	371c      	adds	r7, #28
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b087      	sub	sp, #28
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	60b9      	str	r1, [r7, #8]
 80096b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	f023 0210 	bic.w	r2, r3, #16
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	031b      	lsls	r3, r3, #12
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	4313      	orrs	r3, r2
 80096de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80096e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	011b      	lsls	r3, r3, #4
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	693a      	ldr	r2, [r7, #16]
 80096fc:	621a      	str	r2, [r3, #32]
}
 80096fe:	bf00      	nop
 8009700:	371c      	adds	r7, #28
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800970a:	b480      	push	{r7}
 800970c:	b085      	sub	sp, #20
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	4313      	orrs	r3, r2
 8009728:	f043 0307 	orr.w	r3, r3, #7
 800972c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	609a      	str	r2, [r3, #8]
}
 8009734:	bf00      	nop
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009740:	b480      	push	{r7}
 8009742:	b087      	sub	sp, #28
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
 800974c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800975a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	021a      	lsls	r2, r3, #8
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	431a      	orrs	r2, r3
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	4313      	orrs	r3, r2
 8009768:	697a      	ldr	r2, [r7, #20]
 800976a:	4313      	orrs	r3, r2
 800976c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	609a      	str	r2, [r3, #8]
}
 8009774:	bf00      	nop
 8009776:	371c      	adds	r7, #28
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009790:	2b01      	cmp	r3, #1
 8009792:	d101      	bne.n	8009798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009794:	2302      	movs	r3, #2
 8009796:	e063      	b.n	8009860 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a2b      	ldr	r2, [pc, #172]	; (800986c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d004      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a2a      	ldr	r2, [pc, #168]	; (8009870 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d108      	bne.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80097d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	4313      	orrs	r3, r2
 80097dc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a1b      	ldr	r2, [pc, #108]	; (800986c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d018      	beq.n	8009834 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800980a:	d013      	beq.n	8009834 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a18      	ldr	r2, [pc, #96]	; (8009874 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d00e      	beq.n	8009834 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a17      	ldr	r2, [pc, #92]	; (8009878 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d009      	beq.n	8009834 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a12      	ldr	r2, [pc, #72]	; (8009870 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d004      	beq.n	8009834 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a13      	ldr	r2, [pc, #76]	; (800987c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d10c      	bne.n	800984e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800983a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	4313      	orrs	r3, r2
 8009844:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	40012c00 	.word	0x40012c00
 8009870:	40013400 	.word	0x40013400
 8009874:	40000400 	.word	0x40000400
 8009878:	40000800 	.word	0x40000800
 800987c:	40014000 	.word	0x40014000

08009880 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e040      	b.n	8009950 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d106      	bne.n	80098e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7f7 fea2 	bl	8001628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2224      	movs	r2, #36	; 0x24
 80098e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f022 0201 	bic.w	r2, r2, #1
 80098f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fb2a 	bl	8009f54 <UART_SetConfig>
 8009900:	4603      	mov	r3, r0
 8009902:	2b01      	cmp	r3, #1
 8009904:	d101      	bne.n	800990a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e022      	b.n	8009950 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990e:	2b00      	cmp	r3, #0
 8009910:	d002      	beq.n	8009918 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fcf4 	bl	800a300 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689a      	ldr	r2, [r3, #8]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f042 0201 	orr.w	r2, r2, #1
 8009946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fd7b 	bl	800a444 <UART_CheckIdleState>
 800994e:	4603      	mov	r3, r0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b0ba      	sub	sp, #232	; 0xe8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	69db      	ldr	r3, [r3, #28]
 8009966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800997e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009982:	f640 030f 	movw	r3, #2063	; 0x80f
 8009986:	4013      	ands	r3, r2
 8009988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800998c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009990:	2b00      	cmp	r3, #0
 8009992:	d115      	bne.n	80099c0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009998:	f003 0320 	and.w	r3, r3, #32
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00f      	beq.n	80099c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80099a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099a4:	f003 0320 	and.w	r3, r3, #32
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d009      	beq.n	80099c0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 82a3 	beq.w	8009efc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	4798      	blx	r3
      }
      return;
 80099be:	e29d      	b.n	8009efc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80099c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f000 8117 	beq.w	8009bf8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80099ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d106      	bne.n	80099e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80099d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80099da:	4b85      	ldr	r3, [pc, #532]	; (8009bf0 <HAL_UART_IRQHandler+0x298>)
 80099dc:	4013      	ands	r3, r2
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 810a 	beq.w	8009bf8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d011      	beq.n	8009a14 <HAL_UART_IRQHandler+0xbc>
 80099f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00b      	beq.n	8009a14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2201      	movs	r2, #1
 8009a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a0a:	f043 0201 	orr.w	r2, r3, #1
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a18:	f003 0302 	and.w	r3, r3, #2
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d011      	beq.n	8009a44 <HAL_UART_IRQHandler+0xec>
 8009a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a24:	f003 0301 	and.w	r3, r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00b      	beq.n	8009a44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2202      	movs	r2, #2
 8009a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a3a:	f043 0204 	orr.w	r2, r3, #4
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a48:	f003 0304 	and.w	r3, r3, #4
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d011      	beq.n	8009a74 <HAL_UART_IRQHandler+0x11c>
 8009a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00b      	beq.n	8009a74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2204      	movs	r2, #4
 8009a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a6a:	f043 0202 	orr.w	r2, r3, #2
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a78:	f003 0308 	and.w	r3, r3, #8
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d017      	beq.n	8009ab0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a84:	f003 0320 	and.w	r3, r3, #32
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d105      	bne.n	8009a98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00b      	beq.n	8009ab0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2208      	movs	r2, #8
 8009a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009aa6:	f043 0208 	orr.w	r2, r3, #8
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d012      	beq.n	8009ae2 <HAL_UART_IRQHandler+0x18a>
 8009abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00c      	beq.n	8009ae2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ad0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ad8:	f043 0220 	orr.w	r2, r3, #32
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 8209 	beq.w	8009f00 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009af2:	f003 0320 	and.w	r3, r3, #32
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00d      	beq.n	8009b16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009afe:	f003 0320 	and.w	r3, r3, #32
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d007      	beq.n	8009b16 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2a:	2b40      	cmp	r3, #64	; 0x40
 8009b2c:	d005      	beq.n	8009b3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d04f      	beq.n	8009bda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fd8f 	bl	800a65e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4a:	2b40      	cmp	r3, #64	; 0x40
 8009b4c:	d141      	bne.n	8009bd2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3308      	adds	r3, #8
 8009b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b5c:	e853 3f00 	ldrex	r3, [r3]
 8009b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3308      	adds	r3, #8
 8009b76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009b7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b8a:	e841 2300 	strex	r3, r2, [r1]
 8009b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1d9      	bne.n	8009b4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d013      	beq.n	8009bca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba6:	4a13      	ldr	r2, [pc, #76]	; (8009bf4 <HAL_UART_IRQHandler+0x29c>)
 8009ba8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fc fcb6 	bl	8006520 <HAL_DMA_Abort_IT>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d017      	beq.n	8009bea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc8:	e00f      	b.n	8009bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f9ac 	bl	8009f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd0:	e00b      	b.n	8009bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f9a8 	bl	8009f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd8:	e007      	b.n	8009bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f9a4 	bl	8009f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009be8:	e18a      	b.n	8009f00 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bea:	bf00      	nop
    return;
 8009bec:	e188      	b.n	8009f00 <HAL_UART_IRQHandler+0x5a8>
 8009bee:	bf00      	nop
 8009bf0:	04000120 	.word	0x04000120
 8009bf4:	0800a725 	.word	0x0800a725

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	f040 8143 	bne.w	8009e88 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c06:	f003 0310 	and.w	r3, r3, #16
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 813c 	beq.w	8009e88 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c14:	f003 0310 	and.w	r3, r3, #16
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f000 8135 	beq.w	8009e88 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2210      	movs	r2, #16
 8009c24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c30:	2b40      	cmp	r3, #64	; 0x40
 8009c32:	f040 80b1 	bne.w	8009d98 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 815c 	beq.w	8009f04 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c56:	429a      	cmp	r2, r3
 8009c58:	f080 8154 	bcs.w	8009f04 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	2b20      	cmp	r3, #32
 8009c6e:	f000 8085 	beq.w	8009d7c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c7e:	e853 3f00 	ldrex	r3, [r3]
 8009c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ca0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009ca8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009cac:	e841 2300 	strex	r3, r2, [r1]
 8009cb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1da      	bne.n	8009c72 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3308      	adds	r3, #8
 8009cc2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cc6:	e853 3f00 	ldrex	r3, [r3]
 8009cca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cce:	f023 0301 	bic.w	r3, r3, #1
 8009cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3308      	adds	r3, #8
 8009cdc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009ce0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009ce4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ce8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009cec:	e841 2300 	strex	r3, r2, [r1]
 8009cf0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1e1      	bne.n	8009cbc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d02:	e853 3f00 	ldrex	r3, [r3]
 8009d06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3308      	adds	r3, #8
 8009d18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d24:	e841 2300 	strex	r3, r2, [r1]
 8009d28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1e3      	bne.n	8009cf8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2220      	movs	r2, #32
 8009d34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d44:	e853 3f00 	ldrex	r3, [r3]
 8009d48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d4c:	f023 0310 	bic.w	r3, r3, #16
 8009d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	461a      	mov	r2, r3
 8009d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d66:	e841 2300 	strex	r3, r2, [r1]
 8009d6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1e4      	bne.n	8009d3c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fc fb99 	bl	80064ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f8d3 	bl	8009f3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d96:	e0b5      	b.n	8009f04 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 80a7 	beq.w	8009f08 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8009dba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f000 80a2 	beq.w	8009f08 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dcc:	e853 3f00 	ldrex	r3, [r3]
 8009dd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	461a      	mov	r2, r3
 8009de2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009de6:	647b      	str	r3, [r7, #68]	; 0x44
 8009de8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dee:	e841 2300 	strex	r3, r2, [r1]
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1e4      	bne.n	8009dc4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3308      	adds	r3, #8
 8009e00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e04:	e853 3f00 	ldrex	r3, [r3]
 8009e08:	623b      	str	r3, [r7, #32]
   return(result);
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	f023 0301 	bic.w	r3, r3, #1
 8009e10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	3308      	adds	r3, #8
 8009e1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e1e:	633a      	str	r2, [r7, #48]	; 0x30
 8009e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e26:	e841 2300 	strex	r3, r2, [r1]
 8009e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1e3      	bne.n	8009dfa <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2220      	movs	r2, #32
 8009e36:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	e853 3f00 	ldrex	r3, [r3]
 8009e50:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f023 0310 	bic.w	r3, r3, #16
 8009e58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	461a      	mov	r2, r3
 8009e62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e66:	61fb      	str	r3, [r7, #28]
 8009e68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6a:	69b9      	ldr	r1, [r7, #24]
 8009e6c:	69fa      	ldr	r2, [r7, #28]
 8009e6e:	e841 2300 	strex	r3, r2, [r1]
 8009e72:	617b      	str	r3, [r7, #20]
   return(result);
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1e4      	bne.n	8009e44 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f85b 	bl	8009f3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e86:	e03f      	b.n	8009f08 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00e      	beq.n	8009eb2 <HAL_UART_IRQHandler+0x55a>
 8009e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d008      	beq.n	8009eb2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009ea8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fc7a 	bl	800a7a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009eb0:	e02d      	b.n	8009f0e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00e      	beq.n	8009edc <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d008      	beq.n	8009edc <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d01c      	beq.n	8009f0c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	4798      	blx	r3
    }
    return;
 8009eda:	e017      	b.n	8009f0c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d012      	beq.n	8009f0e <HAL_UART_IRQHandler+0x5b6>
 8009ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00c      	beq.n	8009f0e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fc2b 	bl	800a750 <UART_EndTransmit_IT>
    return;
 8009efa:	e008      	b.n	8009f0e <HAL_UART_IRQHandler+0x5b6>
      return;
 8009efc:	bf00      	nop
 8009efe:	e006      	b.n	8009f0e <HAL_UART_IRQHandler+0x5b6>
    return;
 8009f00:	bf00      	nop
 8009f02:	e004      	b.n	8009f0e <HAL_UART_IRQHandler+0x5b6>
      return;
 8009f04:	bf00      	nop
 8009f06:	e002      	b.n	8009f0e <HAL_UART_IRQHandler+0x5b6>
      return;
 8009f08:	bf00      	nop
 8009f0a:	e000      	b.n	8009f0e <HAL_UART_IRQHandler+0x5b6>
    return;
 8009f0c:	bf00      	nop
  }

}
 8009f0e:	37e8      	adds	r7, #232	; 0xe8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	689a      	ldr	r2, [r3, #8]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	69db      	ldr	r3, [r3, #28]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009f82:	f023 030c 	bic.w	r3, r3, #12
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	6812      	ldr	r2, [r2, #0]
 8009f8a:	6979      	ldr	r1, [r7, #20]
 8009f8c:	430b      	orrs	r3, r1
 8009f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	68da      	ldr	r2, [r3, #12]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a1b      	ldr	r3, [r3, #32]
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4aa8      	ldr	r2, [pc, #672]	; (800a270 <UART_SetConfig+0x31c>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d120      	bne.n	800a016 <UART_SetConfig+0xc2>
 8009fd4:	4ba7      	ldr	r3, [pc, #668]	; (800a274 <UART_SetConfig+0x320>)
 8009fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd8:	f003 0303 	and.w	r3, r3, #3
 8009fdc:	2b03      	cmp	r3, #3
 8009fde:	d817      	bhi.n	800a010 <UART_SetConfig+0xbc>
 8009fe0:	a201      	add	r2, pc, #4	; (adr r2, 8009fe8 <UART_SetConfig+0x94>)
 8009fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe6:	bf00      	nop
 8009fe8:	08009ff9 	.word	0x08009ff9
 8009fec:	0800a005 	.word	0x0800a005
 8009ff0:	0800a00b 	.word	0x0800a00b
 8009ff4:	08009fff 	.word	0x08009fff
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	77fb      	strb	r3, [r7, #31]
 8009ffc:	e0b5      	b.n	800a16a <UART_SetConfig+0x216>
 8009ffe:	2302      	movs	r3, #2
 800a000:	77fb      	strb	r3, [r7, #31]
 800a002:	e0b2      	b.n	800a16a <UART_SetConfig+0x216>
 800a004:	2304      	movs	r3, #4
 800a006:	77fb      	strb	r3, [r7, #31]
 800a008:	e0af      	b.n	800a16a <UART_SetConfig+0x216>
 800a00a:	2308      	movs	r3, #8
 800a00c:	77fb      	strb	r3, [r7, #31]
 800a00e:	e0ac      	b.n	800a16a <UART_SetConfig+0x216>
 800a010:	2310      	movs	r3, #16
 800a012:	77fb      	strb	r3, [r7, #31]
 800a014:	e0a9      	b.n	800a16a <UART_SetConfig+0x216>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a97      	ldr	r2, [pc, #604]	; (800a278 <UART_SetConfig+0x324>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d124      	bne.n	800a06a <UART_SetConfig+0x116>
 800a020:	4b94      	ldr	r3, [pc, #592]	; (800a274 <UART_SetConfig+0x320>)
 800a022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a028:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a02c:	d011      	beq.n	800a052 <UART_SetConfig+0xfe>
 800a02e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a032:	d817      	bhi.n	800a064 <UART_SetConfig+0x110>
 800a034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a038:	d011      	beq.n	800a05e <UART_SetConfig+0x10a>
 800a03a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a03e:	d811      	bhi.n	800a064 <UART_SetConfig+0x110>
 800a040:	2b00      	cmp	r3, #0
 800a042:	d003      	beq.n	800a04c <UART_SetConfig+0xf8>
 800a044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a048:	d006      	beq.n	800a058 <UART_SetConfig+0x104>
 800a04a:	e00b      	b.n	800a064 <UART_SetConfig+0x110>
 800a04c:	2300      	movs	r3, #0
 800a04e:	77fb      	strb	r3, [r7, #31]
 800a050:	e08b      	b.n	800a16a <UART_SetConfig+0x216>
 800a052:	2302      	movs	r3, #2
 800a054:	77fb      	strb	r3, [r7, #31]
 800a056:	e088      	b.n	800a16a <UART_SetConfig+0x216>
 800a058:	2304      	movs	r3, #4
 800a05a:	77fb      	strb	r3, [r7, #31]
 800a05c:	e085      	b.n	800a16a <UART_SetConfig+0x216>
 800a05e:	2308      	movs	r3, #8
 800a060:	77fb      	strb	r3, [r7, #31]
 800a062:	e082      	b.n	800a16a <UART_SetConfig+0x216>
 800a064:	2310      	movs	r3, #16
 800a066:	77fb      	strb	r3, [r7, #31]
 800a068:	e07f      	b.n	800a16a <UART_SetConfig+0x216>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a83      	ldr	r2, [pc, #524]	; (800a27c <UART_SetConfig+0x328>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d124      	bne.n	800a0be <UART_SetConfig+0x16a>
 800a074:	4b7f      	ldr	r3, [pc, #508]	; (800a274 <UART_SetConfig+0x320>)
 800a076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a078:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a07c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a080:	d011      	beq.n	800a0a6 <UART_SetConfig+0x152>
 800a082:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a086:	d817      	bhi.n	800a0b8 <UART_SetConfig+0x164>
 800a088:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a08c:	d011      	beq.n	800a0b2 <UART_SetConfig+0x15e>
 800a08e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a092:	d811      	bhi.n	800a0b8 <UART_SetConfig+0x164>
 800a094:	2b00      	cmp	r3, #0
 800a096:	d003      	beq.n	800a0a0 <UART_SetConfig+0x14c>
 800a098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a09c:	d006      	beq.n	800a0ac <UART_SetConfig+0x158>
 800a09e:	e00b      	b.n	800a0b8 <UART_SetConfig+0x164>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	77fb      	strb	r3, [r7, #31]
 800a0a4:	e061      	b.n	800a16a <UART_SetConfig+0x216>
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	77fb      	strb	r3, [r7, #31]
 800a0aa:	e05e      	b.n	800a16a <UART_SetConfig+0x216>
 800a0ac:	2304      	movs	r3, #4
 800a0ae:	77fb      	strb	r3, [r7, #31]
 800a0b0:	e05b      	b.n	800a16a <UART_SetConfig+0x216>
 800a0b2:	2308      	movs	r3, #8
 800a0b4:	77fb      	strb	r3, [r7, #31]
 800a0b6:	e058      	b.n	800a16a <UART_SetConfig+0x216>
 800a0b8:	2310      	movs	r3, #16
 800a0ba:	77fb      	strb	r3, [r7, #31]
 800a0bc:	e055      	b.n	800a16a <UART_SetConfig+0x216>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a6f      	ldr	r2, [pc, #444]	; (800a280 <UART_SetConfig+0x32c>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d124      	bne.n	800a112 <UART_SetConfig+0x1be>
 800a0c8:	4b6a      	ldr	r3, [pc, #424]	; (800a274 <UART_SetConfig+0x320>)
 800a0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a0d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a0d4:	d011      	beq.n	800a0fa <UART_SetConfig+0x1a6>
 800a0d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a0da:	d817      	bhi.n	800a10c <UART_SetConfig+0x1b8>
 800a0dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0e0:	d011      	beq.n	800a106 <UART_SetConfig+0x1b2>
 800a0e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0e6:	d811      	bhi.n	800a10c <UART_SetConfig+0x1b8>
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d003      	beq.n	800a0f4 <UART_SetConfig+0x1a0>
 800a0ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0f0:	d006      	beq.n	800a100 <UART_SetConfig+0x1ac>
 800a0f2:	e00b      	b.n	800a10c <UART_SetConfig+0x1b8>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	77fb      	strb	r3, [r7, #31]
 800a0f8:	e037      	b.n	800a16a <UART_SetConfig+0x216>
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	77fb      	strb	r3, [r7, #31]
 800a0fe:	e034      	b.n	800a16a <UART_SetConfig+0x216>
 800a100:	2304      	movs	r3, #4
 800a102:	77fb      	strb	r3, [r7, #31]
 800a104:	e031      	b.n	800a16a <UART_SetConfig+0x216>
 800a106:	2308      	movs	r3, #8
 800a108:	77fb      	strb	r3, [r7, #31]
 800a10a:	e02e      	b.n	800a16a <UART_SetConfig+0x216>
 800a10c:	2310      	movs	r3, #16
 800a10e:	77fb      	strb	r3, [r7, #31]
 800a110:	e02b      	b.n	800a16a <UART_SetConfig+0x216>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a5b      	ldr	r2, [pc, #364]	; (800a284 <UART_SetConfig+0x330>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d124      	bne.n	800a166 <UART_SetConfig+0x212>
 800a11c:	4b55      	ldr	r3, [pc, #340]	; (800a274 <UART_SetConfig+0x320>)
 800a11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a120:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a124:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a128:	d011      	beq.n	800a14e <UART_SetConfig+0x1fa>
 800a12a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a12e:	d817      	bhi.n	800a160 <UART_SetConfig+0x20c>
 800a130:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a134:	d011      	beq.n	800a15a <UART_SetConfig+0x206>
 800a136:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a13a:	d811      	bhi.n	800a160 <UART_SetConfig+0x20c>
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d003      	beq.n	800a148 <UART_SetConfig+0x1f4>
 800a140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a144:	d006      	beq.n	800a154 <UART_SetConfig+0x200>
 800a146:	e00b      	b.n	800a160 <UART_SetConfig+0x20c>
 800a148:	2300      	movs	r3, #0
 800a14a:	77fb      	strb	r3, [r7, #31]
 800a14c:	e00d      	b.n	800a16a <UART_SetConfig+0x216>
 800a14e:	2302      	movs	r3, #2
 800a150:	77fb      	strb	r3, [r7, #31]
 800a152:	e00a      	b.n	800a16a <UART_SetConfig+0x216>
 800a154:	2304      	movs	r3, #4
 800a156:	77fb      	strb	r3, [r7, #31]
 800a158:	e007      	b.n	800a16a <UART_SetConfig+0x216>
 800a15a:	2308      	movs	r3, #8
 800a15c:	77fb      	strb	r3, [r7, #31]
 800a15e:	e004      	b.n	800a16a <UART_SetConfig+0x216>
 800a160:	2310      	movs	r3, #16
 800a162:	77fb      	strb	r3, [r7, #31]
 800a164:	e001      	b.n	800a16a <UART_SetConfig+0x216>
 800a166:	2310      	movs	r3, #16
 800a168:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a172:	d15c      	bne.n	800a22e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 800a174:	7ffb      	ldrb	r3, [r7, #31]
 800a176:	2b08      	cmp	r3, #8
 800a178:	d827      	bhi.n	800a1ca <UART_SetConfig+0x276>
 800a17a:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <UART_SetConfig+0x22c>)
 800a17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a180:	0800a1a5 	.word	0x0800a1a5
 800a184:	0800a1ad 	.word	0x0800a1ad
 800a188:	0800a1b5 	.word	0x0800a1b5
 800a18c:	0800a1cb 	.word	0x0800a1cb
 800a190:	0800a1bb 	.word	0x0800a1bb
 800a194:	0800a1cb 	.word	0x0800a1cb
 800a198:	0800a1cb 	.word	0x0800a1cb
 800a19c:	0800a1cb 	.word	0x0800a1cb
 800a1a0:	0800a1c3 	.word	0x0800a1c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1a4:	f7fd fffc 	bl	80081a0 <HAL_RCC_GetPCLK1Freq>
 800a1a8:	61b8      	str	r0, [r7, #24]
        break;
 800a1aa:	e013      	b.n	800a1d4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1ac:	f7fe f81a 	bl	80081e4 <HAL_RCC_GetPCLK2Freq>
 800a1b0:	61b8      	str	r0, [r7, #24]
        break;
 800a1b2:	e00f      	b.n	800a1d4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1b4:	4b34      	ldr	r3, [pc, #208]	; (800a288 <UART_SetConfig+0x334>)
 800a1b6:	61bb      	str	r3, [r7, #24]
        break;
 800a1b8:	e00c      	b.n	800a1d4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1ba:	f7fd ff7b 	bl	80080b4 <HAL_RCC_GetSysClockFreq>
 800a1be:	61b8      	str	r0, [r7, #24]
        break;
 800a1c0:	e008      	b.n	800a1d4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1c6:	61bb      	str	r3, [r7, #24]
        break;
 800a1c8:	e004      	b.n	800a1d4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	77bb      	strb	r3, [r7, #30]
        break;
 800a1d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 8084 	beq.w	800a2e4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	005a      	lsls	r2, r3, #1
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	085b      	lsrs	r3, r3, #1
 800a1e6:	441a      	add	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	2b0f      	cmp	r3, #15
 800a1f8:	d916      	bls.n	800a228 <UART_SetConfig+0x2d4>
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a200:	d212      	bcs.n	800a228 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	b29b      	uxth	r3, r3
 800a206:	f023 030f 	bic.w	r3, r3, #15
 800a20a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	085b      	lsrs	r3, r3, #1
 800a210:	b29b      	uxth	r3, r3
 800a212:	f003 0307 	and.w	r3, r3, #7
 800a216:	b29a      	uxth	r2, r3
 800a218:	89fb      	ldrh	r3, [r7, #14]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	89fa      	ldrh	r2, [r7, #14]
 800a224:	60da      	str	r2, [r3, #12]
 800a226:	e05d      	b.n	800a2e4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	77bb      	strb	r3, [r7, #30]
 800a22c:	e05a      	b.n	800a2e4 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a22e:	7ffb      	ldrb	r3, [r7, #31]
 800a230:	2b08      	cmp	r3, #8
 800a232:	d836      	bhi.n	800a2a2 <UART_SetConfig+0x34e>
 800a234:	a201      	add	r2, pc, #4	; (adr r2, 800a23c <UART_SetConfig+0x2e8>)
 800a236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23a:	bf00      	nop
 800a23c:	0800a261 	.word	0x0800a261
 800a240:	0800a269 	.word	0x0800a269
 800a244:	0800a28d 	.word	0x0800a28d
 800a248:	0800a2a3 	.word	0x0800a2a3
 800a24c:	0800a293 	.word	0x0800a293
 800a250:	0800a2a3 	.word	0x0800a2a3
 800a254:	0800a2a3 	.word	0x0800a2a3
 800a258:	0800a2a3 	.word	0x0800a2a3
 800a25c:	0800a29b 	.word	0x0800a29b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a260:	f7fd ff9e 	bl	80081a0 <HAL_RCC_GetPCLK1Freq>
 800a264:	61b8      	str	r0, [r7, #24]
        break;
 800a266:	e021      	b.n	800a2ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a268:	f7fd ffbc 	bl	80081e4 <HAL_RCC_GetPCLK2Freq>
 800a26c:	61b8      	str	r0, [r7, #24]
        break;
 800a26e:	e01d      	b.n	800a2ac <UART_SetConfig+0x358>
 800a270:	40013800 	.word	0x40013800
 800a274:	40021000 	.word	0x40021000
 800a278:	40004400 	.word	0x40004400
 800a27c:	40004800 	.word	0x40004800
 800a280:	40004c00 	.word	0x40004c00
 800a284:	40005000 	.word	0x40005000
 800a288:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a28c:	4b1b      	ldr	r3, [pc, #108]	; (800a2fc <UART_SetConfig+0x3a8>)
 800a28e:	61bb      	str	r3, [r7, #24]
        break;
 800a290:	e00c      	b.n	800a2ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a292:	f7fd ff0f 	bl	80080b4 <HAL_RCC_GetSysClockFreq>
 800a296:	61b8      	str	r0, [r7, #24]
        break;
 800a298:	e008      	b.n	800a2ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a29a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a29e:	61bb      	str	r3, [r7, #24]
        break;
 800a2a0:	e004      	b.n	800a2ac <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	77bb      	strb	r3, [r7, #30]
        break;
 800a2aa:	bf00      	nop
    }

    if (pclk != 0U)
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d018      	beq.n	800a2e4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	085a      	lsrs	r2, r3, #1
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	441a      	add	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	2b0f      	cmp	r3, #15
 800a2cc:	d908      	bls.n	800a2e0 <UART_SetConfig+0x38c>
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2d4:	d204      	bcs.n	800a2e0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	60da      	str	r2, [r3, #12]
 800a2de:	e001      	b.n	800a2e4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a2f0:	7fbb      	ldrb	r3, [r7, #30]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3720      	adds	r7, #32
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	007a1200 	.word	0x007a1200

0800a300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00a      	beq.n	800a32a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	430a      	orrs	r2, r1
 800a328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32e:	f003 0302 	and.w	r3, r3, #2
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00a      	beq.n	800a34c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	430a      	orrs	r2, r1
 800a34a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a350:	f003 0304 	and.w	r3, r3, #4
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00a      	beq.n	800a36e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	430a      	orrs	r2, r1
 800a36c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a372:	f003 0308 	and.w	r3, r3, #8
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00a      	beq.n	800a390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	430a      	orrs	r2, r1
 800a38e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a394:	f003 0310 	and.w	r3, r3, #16
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00a      	beq.n	800a3b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	430a      	orrs	r2, r1
 800a3b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b6:	f003 0320 	and.w	r3, r3, #32
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00a      	beq.n	800a3d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	430a      	orrs	r2, r1
 800a3d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d01a      	beq.n	800a416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3fe:	d10a      	bne.n	800a416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	430a      	orrs	r2, r1
 800a414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00a      	beq.n	800a438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	430a      	orrs	r2, r1
 800a436:	605a      	str	r2, [r3, #4]
  }
}
 800a438:	bf00      	nop
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af02      	add	r7, sp, #8
 800a44a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a454:	f7fa fbbe 	bl	8004bd4 <HAL_GetTick>
 800a458:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f003 0308 	and.w	r3, r3, #8
 800a464:	2b08      	cmp	r3, #8
 800a466:	d10e      	bne.n	800a486 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a468:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 f82d 	bl	800a4d6 <UART_WaitOnFlagUntilTimeout>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a482:	2303      	movs	r3, #3
 800a484:	e023      	b.n	800a4ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 0304 	and.w	r3, r3, #4
 800a490:	2b04      	cmp	r3, #4
 800a492:	d10e      	bne.n	800a4b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a494:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f817 	bl	800a4d6 <UART_WaitOnFlagUntilTimeout>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e00d      	b.n	800a4ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2220      	movs	r2, #32
 800a4bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b09c      	sub	sp, #112	; 0x70
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	603b      	str	r3, [r7, #0]
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4e6:	e0a5      	b.n	800a634 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ee:	f000 80a1 	beq.w	800a634 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4f2:	f7fa fb6f 	bl	8004bd4 <HAL_GetTick>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	1ad3      	subs	r3, r2, r3
 800a4fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d302      	bcc.n	800a508 <UART_WaitOnFlagUntilTimeout+0x32>
 800a502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a504:	2b00      	cmp	r3, #0
 800a506:	d13e      	bne.n	800a586 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a510:	e853 3f00 	ldrex	r3, [r3]
 800a514:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a518:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a51c:	667b      	str	r3, [r7, #100]	; 0x64
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	461a      	mov	r2, r3
 800a524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a526:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a528:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a52c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a52e:	e841 2300 	strex	r3, r2, [r1]
 800a532:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1e6      	bne.n	800a508 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3308      	adds	r3, #8
 800a540:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a544:	e853 3f00 	ldrex	r3, [r3]
 800a548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54c:	f023 0301 	bic.w	r3, r3, #1
 800a550:	663b      	str	r3, [r7, #96]	; 0x60
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3308      	adds	r3, #8
 800a558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a55a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a55c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a562:	e841 2300 	strex	r3, r2, [r1]
 800a566:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1e5      	bne.n	800a53a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2220      	movs	r2, #32
 800a572:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2220      	movs	r2, #32
 800a578:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a582:	2303      	movs	r3, #3
 800a584:	e067      	b.n	800a656 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 0304 	and.w	r3, r3, #4
 800a590:	2b00      	cmp	r3, #0
 800a592:	d04f      	beq.n	800a634 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	69db      	ldr	r3, [r3, #28]
 800a59a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a59e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5a2:	d147      	bne.n	800a634 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b6:	e853 3f00 	ldrex	r3, [r3]
 800a5ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a5c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a5ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5d4:	e841 2300 	strex	r3, r2, [r1]
 800a5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1e6      	bne.n	800a5ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3308      	adds	r3, #8
 800a5e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	e853 3f00 	ldrex	r3, [r3]
 800a5ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	f023 0301 	bic.w	r3, r3, #1
 800a5f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	3308      	adds	r3, #8
 800a5fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a600:	623a      	str	r2, [r7, #32]
 800a602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a604:	69f9      	ldr	r1, [r7, #28]
 800a606:	6a3a      	ldr	r2, [r7, #32]
 800a608:	e841 2300 	strex	r3, r2, [r1]
 800a60c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1e5      	bne.n	800a5e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2220      	movs	r2, #32
 800a618:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2220      	movs	r2, #32
 800a61e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2220      	movs	r2, #32
 800a624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	e010      	b.n	800a656 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	69da      	ldr	r2, [r3, #28]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	4013      	ands	r3, r2
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	429a      	cmp	r2, r3
 800a642:	bf0c      	ite	eq
 800a644:	2301      	moveq	r3, #1
 800a646:	2300      	movne	r3, #0
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	461a      	mov	r2, r3
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	429a      	cmp	r2, r3
 800a650:	f43f af4a 	beq.w	800a4e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3770      	adds	r7, #112	; 0x70
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a65e:	b480      	push	{r7}
 800a660:	b095      	sub	sp, #84	; 0x54
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66e:	e853 3f00 	ldrex	r3, [r3]
 800a672:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a676:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a67a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	461a      	mov	r2, r3
 800a682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a684:	643b      	str	r3, [r7, #64]	; 0x40
 800a686:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a688:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a68a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a68c:	e841 2300 	strex	r3, r2, [r1]
 800a690:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a694:	2b00      	cmp	r3, #0
 800a696:	d1e6      	bne.n	800a666 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	3308      	adds	r3, #8
 800a69e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a0:	6a3b      	ldr	r3, [r7, #32]
 800a6a2:	e853 3f00 	ldrex	r3, [r3]
 800a6a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	f023 0301 	bic.w	r3, r3, #1
 800a6ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	3308      	adds	r3, #8
 800a6b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a6ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6c0:	e841 2300 	strex	r3, r2, [r1]
 800a6c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1e5      	bne.n	800a698 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d118      	bne.n	800a706 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	e853 3f00 	ldrex	r3, [r3]
 800a6e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	f023 0310 	bic.w	r3, r3, #16
 800a6e8:	647b      	str	r3, [r7, #68]	; 0x44
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f2:	61bb      	str	r3, [r7, #24]
 800a6f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f6:	6979      	ldr	r1, [r7, #20]
 800a6f8:	69ba      	ldr	r2, [r7, #24]
 800a6fa:	e841 2300 	strex	r3, r2, [r1]
 800a6fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1e6      	bne.n	800a6d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2220      	movs	r2, #32
 800a70a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a718:	bf00      	nop
 800a71a:	3754      	adds	r7, #84	; 0x54
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f7ff fbf0 	bl	8009f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a748:	bf00      	nop
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b088      	sub	sp, #32
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	e853 3f00 	ldrex	r3, [r3]
 800a764:	60bb      	str	r3, [r7, #8]
   return(result);
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a76c:	61fb      	str	r3, [r7, #28]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	61bb      	str	r3, [r7, #24]
 800a778:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77a:	6979      	ldr	r1, [r7, #20]
 800a77c:	69ba      	ldr	r2, [r7, #24]
 800a77e:	e841 2300 	strex	r3, r2, [r1]
 800a782:	613b      	str	r3, [r7, #16]
   return(result);
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e6      	bne.n	800a758 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2220      	movs	r2, #32
 800a78e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7ff fbbc 	bl	8009f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a79c:	bf00      	nop
 800a79e:	3720      	adds	r7, #32
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a7c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a7c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	43db      	mvns	r3, r3
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3714      	adds	r7, #20
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	f107 0014 	add.w	r0, r7, #20
 800a7fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	b004      	add	sp, #16
 800a82e:	4770      	bx	lr

0800a830 <__errno>:
 800a830:	4b01      	ldr	r3, [pc, #4]	; (800a838 <__errno+0x8>)
 800a832:	6818      	ldr	r0, [r3, #0]
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	20000134 	.word	0x20000134

0800a83c <__libc_init_array>:
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	4d0d      	ldr	r5, [pc, #52]	; (800a874 <__libc_init_array+0x38>)
 800a840:	4c0d      	ldr	r4, [pc, #52]	; (800a878 <__libc_init_array+0x3c>)
 800a842:	1b64      	subs	r4, r4, r5
 800a844:	10a4      	asrs	r4, r4, #2
 800a846:	2600      	movs	r6, #0
 800a848:	42a6      	cmp	r6, r4
 800a84a:	d109      	bne.n	800a860 <__libc_init_array+0x24>
 800a84c:	4d0b      	ldr	r5, [pc, #44]	; (800a87c <__libc_init_array+0x40>)
 800a84e:	4c0c      	ldr	r4, [pc, #48]	; (800a880 <__libc_init_array+0x44>)
 800a850:	f000 fcae 	bl	800b1b0 <_init>
 800a854:	1b64      	subs	r4, r4, r5
 800a856:	10a4      	asrs	r4, r4, #2
 800a858:	2600      	movs	r6, #0
 800a85a:	42a6      	cmp	r6, r4
 800a85c:	d105      	bne.n	800a86a <__libc_init_array+0x2e>
 800a85e:	bd70      	pop	{r4, r5, r6, pc}
 800a860:	f855 3b04 	ldr.w	r3, [r5], #4
 800a864:	4798      	blx	r3
 800a866:	3601      	adds	r6, #1
 800a868:	e7ee      	b.n	800a848 <__libc_init_array+0xc>
 800a86a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a86e:	4798      	blx	r3
 800a870:	3601      	adds	r6, #1
 800a872:	e7f2      	b.n	800a85a <__libc_init_array+0x1e>
 800a874:	0800b9f8 	.word	0x0800b9f8
 800a878:	0800b9f8 	.word	0x0800b9f8
 800a87c:	0800b9f8 	.word	0x0800b9f8
 800a880:	0800b9fc 	.word	0x0800b9fc

0800a884 <malloc>:
 800a884:	4b02      	ldr	r3, [pc, #8]	; (800a890 <malloc+0xc>)
 800a886:	4601      	mov	r1, r0
 800a888:	6818      	ldr	r0, [r3, #0]
 800a88a:	f000 b885 	b.w	800a998 <_malloc_r>
 800a88e:	bf00      	nop
 800a890:	20000134 	.word	0x20000134

0800a894 <memcpy>:
 800a894:	440a      	add	r2, r1
 800a896:	4291      	cmp	r1, r2
 800a898:	f100 33ff 	add.w	r3, r0, #4294967295
 800a89c:	d100      	bne.n	800a8a0 <memcpy+0xc>
 800a89e:	4770      	bx	lr
 800a8a0:	b510      	push	{r4, lr}
 800a8a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8aa:	4291      	cmp	r1, r2
 800a8ac:	d1f9      	bne.n	800a8a2 <memcpy+0xe>
 800a8ae:	bd10      	pop	{r4, pc}

0800a8b0 <memset>:
 800a8b0:	4402      	add	r2, r0
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d100      	bne.n	800a8ba <memset+0xa>
 800a8b8:	4770      	bx	lr
 800a8ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a8be:	e7f9      	b.n	800a8b4 <memset+0x4>

0800a8c0 <_free_r>:
 800a8c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8c2:	2900      	cmp	r1, #0
 800a8c4:	d044      	beq.n	800a950 <_free_r+0x90>
 800a8c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8ca:	9001      	str	r0, [sp, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f1a1 0404 	sub.w	r4, r1, #4
 800a8d2:	bfb8      	it	lt
 800a8d4:	18e4      	addlt	r4, r4, r3
 800a8d6:	f000 f91b 	bl	800ab10 <__malloc_lock>
 800a8da:	4a1e      	ldr	r2, [pc, #120]	; (800a954 <_free_r+0x94>)
 800a8dc:	9801      	ldr	r0, [sp, #4]
 800a8de:	6813      	ldr	r3, [r2, #0]
 800a8e0:	b933      	cbnz	r3, 800a8f0 <_free_r+0x30>
 800a8e2:	6063      	str	r3, [r4, #4]
 800a8e4:	6014      	str	r4, [r2, #0]
 800a8e6:	b003      	add	sp, #12
 800a8e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8ec:	f000 b916 	b.w	800ab1c <__malloc_unlock>
 800a8f0:	42a3      	cmp	r3, r4
 800a8f2:	d908      	bls.n	800a906 <_free_r+0x46>
 800a8f4:	6825      	ldr	r5, [r4, #0]
 800a8f6:	1961      	adds	r1, r4, r5
 800a8f8:	428b      	cmp	r3, r1
 800a8fa:	bf01      	itttt	eq
 800a8fc:	6819      	ldreq	r1, [r3, #0]
 800a8fe:	685b      	ldreq	r3, [r3, #4]
 800a900:	1949      	addeq	r1, r1, r5
 800a902:	6021      	streq	r1, [r4, #0]
 800a904:	e7ed      	b.n	800a8e2 <_free_r+0x22>
 800a906:	461a      	mov	r2, r3
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	b10b      	cbz	r3, 800a910 <_free_r+0x50>
 800a90c:	42a3      	cmp	r3, r4
 800a90e:	d9fa      	bls.n	800a906 <_free_r+0x46>
 800a910:	6811      	ldr	r1, [r2, #0]
 800a912:	1855      	adds	r5, r2, r1
 800a914:	42a5      	cmp	r5, r4
 800a916:	d10b      	bne.n	800a930 <_free_r+0x70>
 800a918:	6824      	ldr	r4, [r4, #0]
 800a91a:	4421      	add	r1, r4
 800a91c:	1854      	adds	r4, r2, r1
 800a91e:	42a3      	cmp	r3, r4
 800a920:	6011      	str	r1, [r2, #0]
 800a922:	d1e0      	bne.n	800a8e6 <_free_r+0x26>
 800a924:	681c      	ldr	r4, [r3, #0]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	6053      	str	r3, [r2, #4]
 800a92a:	4421      	add	r1, r4
 800a92c:	6011      	str	r1, [r2, #0]
 800a92e:	e7da      	b.n	800a8e6 <_free_r+0x26>
 800a930:	d902      	bls.n	800a938 <_free_r+0x78>
 800a932:	230c      	movs	r3, #12
 800a934:	6003      	str	r3, [r0, #0]
 800a936:	e7d6      	b.n	800a8e6 <_free_r+0x26>
 800a938:	6825      	ldr	r5, [r4, #0]
 800a93a:	1961      	adds	r1, r4, r5
 800a93c:	428b      	cmp	r3, r1
 800a93e:	bf04      	itt	eq
 800a940:	6819      	ldreq	r1, [r3, #0]
 800a942:	685b      	ldreq	r3, [r3, #4]
 800a944:	6063      	str	r3, [r4, #4]
 800a946:	bf04      	itt	eq
 800a948:	1949      	addeq	r1, r1, r5
 800a94a:	6021      	streq	r1, [r4, #0]
 800a94c:	6054      	str	r4, [r2, #4]
 800a94e:	e7ca      	b.n	800a8e6 <_free_r+0x26>
 800a950:	b003      	add	sp, #12
 800a952:	bd30      	pop	{r4, r5, pc}
 800a954:	200008e4 	.word	0x200008e4

0800a958 <sbrk_aligned>:
 800a958:	b570      	push	{r4, r5, r6, lr}
 800a95a:	4e0e      	ldr	r6, [pc, #56]	; (800a994 <sbrk_aligned+0x3c>)
 800a95c:	460c      	mov	r4, r1
 800a95e:	6831      	ldr	r1, [r6, #0]
 800a960:	4605      	mov	r5, r0
 800a962:	b911      	cbnz	r1, 800a96a <sbrk_aligned+0x12>
 800a964:	f000 f88c 	bl	800aa80 <_sbrk_r>
 800a968:	6030      	str	r0, [r6, #0]
 800a96a:	4621      	mov	r1, r4
 800a96c:	4628      	mov	r0, r5
 800a96e:	f000 f887 	bl	800aa80 <_sbrk_r>
 800a972:	1c43      	adds	r3, r0, #1
 800a974:	d00a      	beq.n	800a98c <sbrk_aligned+0x34>
 800a976:	1cc4      	adds	r4, r0, #3
 800a978:	f024 0403 	bic.w	r4, r4, #3
 800a97c:	42a0      	cmp	r0, r4
 800a97e:	d007      	beq.n	800a990 <sbrk_aligned+0x38>
 800a980:	1a21      	subs	r1, r4, r0
 800a982:	4628      	mov	r0, r5
 800a984:	f000 f87c 	bl	800aa80 <_sbrk_r>
 800a988:	3001      	adds	r0, #1
 800a98a:	d101      	bne.n	800a990 <sbrk_aligned+0x38>
 800a98c:	f04f 34ff 	mov.w	r4, #4294967295
 800a990:	4620      	mov	r0, r4
 800a992:	bd70      	pop	{r4, r5, r6, pc}
 800a994:	200008e8 	.word	0x200008e8

0800a998 <_malloc_r>:
 800a998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a99c:	1ccd      	adds	r5, r1, #3
 800a99e:	f025 0503 	bic.w	r5, r5, #3
 800a9a2:	3508      	adds	r5, #8
 800a9a4:	2d0c      	cmp	r5, #12
 800a9a6:	bf38      	it	cc
 800a9a8:	250c      	movcc	r5, #12
 800a9aa:	2d00      	cmp	r5, #0
 800a9ac:	4607      	mov	r7, r0
 800a9ae:	db01      	blt.n	800a9b4 <_malloc_r+0x1c>
 800a9b0:	42a9      	cmp	r1, r5
 800a9b2:	d905      	bls.n	800a9c0 <_malloc_r+0x28>
 800a9b4:	230c      	movs	r3, #12
 800a9b6:	603b      	str	r3, [r7, #0]
 800a9b8:	2600      	movs	r6, #0
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c0:	4e2e      	ldr	r6, [pc, #184]	; (800aa7c <_malloc_r+0xe4>)
 800a9c2:	f000 f8a5 	bl	800ab10 <__malloc_lock>
 800a9c6:	6833      	ldr	r3, [r6, #0]
 800a9c8:	461c      	mov	r4, r3
 800a9ca:	bb34      	cbnz	r4, 800aa1a <_malloc_r+0x82>
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	f7ff ffc2 	bl	800a958 <sbrk_aligned>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	d14d      	bne.n	800aa76 <_malloc_r+0xde>
 800a9da:	6834      	ldr	r4, [r6, #0]
 800a9dc:	4626      	mov	r6, r4
 800a9de:	2e00      	cmp	r6, #0
 800a9e0:	d140      	bne.n	800aa64 <_malloc_r+0xcc>
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	eb04 0803 	add.w	r8, r4, r3
 800a9ec:	f000 f848 	bl	800aa80 <_sbrk_r>
 800a9f0:	4580      	cmp	r8, r0
 800a9f2:	d13a      	bne.n	800aa6a <_malloc_r+0xd2>
 800a9f4:	6821      	ldr	r1, [r4, #0]
 800a9f6:	3503      	adds	r5, #3
 800a9f8:	1a6d      	subs	r5, r5, r1
 800a9fa:	f025 0503 	bic.w	r5, r5, #3
 800a9fe:	3508      	adds	r5, #8
 800aa00:	2d0c      	cmp	r5, #12
 800aa02:	bf38      	it	cc
 800aa04:	250c      	movcc	r5, #12
 800aa06:	4629      	mov	r1, r5
 800aa08:	4638      	mov	r0, r7
 800aa0a:	f7ff ffa5 	bl	800a958 <sbrk_aligned>
 800aa0e:	3001      	adds	r0, #1
 800aa10:	d02b      	beq.n	800aa6a <_malloc_r+0xd2>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	442b      	add	r3, r5
 800aa16:	6023      	str	r3, [r4, #0]
 800aa18:	e00e      	b.n	800aa38 <_malloc_r+0xa0>
 800aa1a:	6822      	ldr	r2, [r4, #0]
 800aa1c:	1b52      	subs	r2, r2, r5
 800aa1e:	d41e      	bmi.n	800aa5e <_malloc_r+0xc6>
 800aa20:	2a0b      	cmp	r2, #11
 800aa22:	d916      	bls.n	800aa52 <_malloc_r+0xba>
 800aa24:	1961      	adds	r1, r4, r5
 800aa26:	42a3      	cmp	r3, r4
 800aa28:	6025      	str	r5, [r4, #0]
 800aa2a:	bf18      	it	ne
 800aa2c:	6059      	strne	r1, [r3, #4]
 800aa2e:	6863      	ldr	r3, [r4, #4]
 800aa30:	bf08      	it	eq
 800aa32:	6031      	streq	r1, [r6, #0]
 800aa34:	5162      	str	r2, [r4, r5]
 800aa36:	604b      	str	r3, [r1, #4]
 800aa38:	4638      	mov	r0, r7
 800aa3a:	f104 060b 	add.w	r6, r4, #11
 800aa3e:	f000 f86d 	bl	800ab1c <__malloc_unlock>
 800aa42:	f026 0607 	bic.w	r6, r6, #7
 800aa46:	1d23      	adds	r3, r4, #4
 800aa48:	1af2      	subs	r2, r6, r3
 800aa4a:	d0b6      	beq.n	800a9ba <_malloc_r+0x22>
 800aa4c:	1b9b      	subs	r3, r3, r6
 800aa4e:	50a3      	str	r3, [r4, r2]
 800aa50:	e7b3      	b.n	800a9ba <_malloc_r+0x22>
 800aa52:	6862      	ldr	r2, [r4, #4]
 800aa54:	42a3      	cmp	r3, r4
 800aa56:	bf0c      	ite	eq
 800aa58:	6032      	streq	r2, [r6, #0]
 800aa5a:	605a      	strne	r2, [r3, #4]
 800aa5c:	e7ec      	b.n	800aa38 <_malloc_r+0xa0>
 800aa5e:	4623      	mov	r3, r4
 800aa60:	6864      	ldr	r4, [r4, #4]
 800aa62:	e7b2      	b.n	800a9ca <_malloc_r+0x32>
 800aa64:	4634      	mov	r4, r6
 800aa66:	6876      	ldr	r6, [r6, #4]
 800aa68:	e7b9      	b.n	800a9de <_malloc_r+0x46>
 800aa6a:	230c      	movs	r3, #12
 800aa6c:	603b      	str	r3, [r7, #0]
 800aa6e:	4638      	mov	r0, r7
 800aa70:	f000 f854 	bl	800ab1c <__malloc_unlock>
 800aa74:	e7a1      	b.n	800a9ba <_malloc_r+0x22>
 800aa76:	6025      	str	r5, [r4, #0]
 800aa78:	e7de      	b.n	800aa38 <_malloc_r+0xa0>
 800aa7a:	bf00      	nop
 800aa7c:	200008e4 	.word	0x200008e4

0800aa80 <_sbrk_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	4d06      	ldr	r5, [pc, #24]	; (800aa9c <_sbrk_r+0x1c>)
 800aa84:	2300      	movs	r3, #0
 800aa86:	4604      	mov	r4, r0
 800aa88:	4608      	mov	r0, r1
 800aa8a:	602b      	str	r3, [r5, #0]
 800aa8c:	f7f9 ffd6 	bl	8004a3c <_sbrk>
 800aa90:	1c43      	adds	r3, r0, #1
 800aa92:	d102      	bne.n	800aa9a <_sbrk_r+0x1a>
 800aa94:	682b      	ldr	r3, [r5, #0]
 800aa96:	b103      	cbz	r3, 800aa9a <_sbrk_r+0x1a>
 800aa98:	6023      	str	r3, [r4, #0]
 800aa9a:	bd38      	pop	{r3, r4, r5, pc}
 800aa9c:	200008ec 	.word	0x200008ec

0800aaa0 <siprintf>:
 800aaa0:	b40e      	push	{r1, r2, r3}
 800aaa2:	b500      	push	{lr}
 800aaa4:	b09c      	sub	sp, #112	; 0x70
 800aaa6:	ab1d      	add	r3, sp, #116	; 0x74
 800aaa8:	9002      	str	r0, [sp, #8]
 800aaaa:	9006      	str	r0, [sp, #24]
 800aaac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aab0:	4809      	ldr	r0, [pc, #36]	; (800aad8 <siprintf+0x38>)
 800aab2:	9107      	str	r1, [sp, #28]
 800aab4:	9104      	str	r1, [sp, #16]
 800aab6:	4909      	ldr	r1, [pc, #36]	; (800aadc <siprintf+0x3c>)
 800aab8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aabc:	9105      	str	r1, [sp, #20]
 800aabe:	6800      	ldr	r0, [r0, #0]
 800aac0:	9301      	str	r3, [sp, #4]
 800aac2:	a902      	add	r1, sp, #8
 800aac4:	f000 f88c 	bl	800abe0 <_svfiprintf_r>
 800aac8:	9b02      	ldr	r3, [sp, #8]
 800aaca:	2200      	movs	r2, #0
 800aacc:	701a      	strb	r2, [r3, #0]
 800aace:	b01c      	add	sp, #112	; 0x70
 800aad0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aad4:	b003      	add	sp, #12
 800aad6:	4770      	bx	lr
 800aad8:	20000134 	.word	0x20000134
 800aadc:	ffff0208 	.word	0xffff0208

0800aae0 <strcat>:
 800aae0:	b510      	push	{r4, lr}
 800aae2:	4602      	mov	r2, r0
 800aae4:	7814      	ldrb	r4, [r2, #0]
 800aae6:	4613      	mov	r3, r2
 800aae8:	3201      	adds	r2, #1
 800aaea:	2c00      	cmp	r4, #0
 800aaec:	d1fa      	bne.n	800aae4 <strcat+0x4>
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaf4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aaf8:	2a00      	cmp	r2, #0
 800aafa:	d1f9      	bne.n	800aaf0 <strcat+0x10>
 800aafc:	bd10      	pop	{r4, pc}

0800aafe <strcpy>:
 800aafe:	4603      	mov	r3, r0
 800ab00:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab04:	f803 2b01 	strb.w	r2, [r3], #1
 800ab08:	2a00      	cmp	r2, #0
 800ab0a:	d1f9      	bne.n	800ab00 <strcpy+0x2>
 800ab0c:	4770      	bx	lr
	...

0800ab10 <__malloc_lock>:
 800ab10:	4801      	ldr	r0, [pc, #4]	; (800ab18 <__malloc_lock+0x8>)
 800ab12:	f000 baf9 	b.w	800b108 <__retarget_lock_acquire_recursive>
 800ab16:	bf00      	nop
 800ab18:	200008f0 	.word	0x200008f0

0800ab1c <__malloc_unlock>:
 800ab1c:	4801      	ldr	r0, [pc, #4]	; (800ab24 <__malloc_unlock+0x8>)
 800ab1e:	f000 baf4 	b.w	800b10a <__retarget_lock_release_recursive>
 800ab22:	bf00      	nop
 800ab24:	200008f0 	.word	0x200008f0

0800ab28 <__ssputs_r>:
 800ab28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab2c:	688e      	ldr	r6, [r1, #8]
 800ab2e:	429e      	cmp	r6, r3
 800ab30:	4682      	mov	sl, r0
 800ab32:	460c      	mov	r4, r1
 800ab34:	4690      	mov	r8, r2
 800ab36:	461f      	mov	r7, r3
 800ab38:	d838      	bhi.n	800abac <__ssputs_r+0x84>
 800ab3a:	898a      	ldrh	r2, [r1, #12]
 800ab3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab40:	d032      	beq.n	800aba8 <__ssputs_r+0x80>
 800ab42:	6825      	ldr	r5, [r4, #0]
 800ab44:	6909      	ldr	r1, [r1, #16]
 800ab46:	eba5 0901 	sub.w	r9, r5, r1
 800ab4a:	6965      	ldr	r5, [r4, #20]
 800ab4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab54:	3301      	adds	r3, #1
 800ab56:	444b      	add	r3, r9
 800ab58:	106d      	asrs	r5, r5, #1
 800ab5a:	429d      	cmp	r5, r3
 800ab5c:	bf38      	it	cc
 800ab5e:	461d      	movcc	r5, r3
 800ab60:	0553      	lsls	r3, r2, #21
 800ab62:	d531      	bpl.n	800abc8 <__ssputs_r+0xa0>
 800ab64:	4629      	mov	r1, r5
 800ab66:	f7ff ff17 	bl	800a998 <_malloc_r>
 800ab6a:	4606      	mov	r6, r0
 800ab6c:	b950      	cbnz	r0, 800ab84 <__ssputs_r+0x5c>
 800ab6e:	230c      	movs	r3, #12
 800ab70:	f8ca 3000 	str.w	r3, [sl]
 800ab74:	89a3      	ldrh	r3, [r4, #12]
 800ab76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab7a:	81a3      	strh	r3, [r4, #12]
 800ab7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab84:	6921      	ldr	r1, [r4, #16]
 800ab86:	464a      	mov	r2, r9
 800ab88:	f7ff fe84 	bl	800a894 <memcpy>
 800ab8c:	89a3      	ldrh	r3, [r4, #12]
 800ab8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab96:	81a3      	strh	r3, [r4, #12]
 800ab98:	6126      	str	r6, [r4, #16]
 800ab9a:	6165      	str	r5, [r4, #20]
 800ab9c:	444e      	add	r6, r9
 800ab9e:	eba5 0509 	sub.w	r5, r5, r9
 800aba2:	6026      	str	r6, [r4, #0]
 800aba4:	60a5      	str	r5, [r4, #8]
 800aba6:	463e      	mov	r6, r7
 800aba8:	42be      	cmp	r6, r7
 800abaa:	d900      	bls.n	800abae <__ssputs_r+0x86>
 800abac:	463e      	mov	r6, r7
 800abae:	6820      	ldr	r0, [r4, #0]
 800abb0:	4632      	mov	r2, r6
 800abb2:	4641      	mov	r1, r8
 800abb4:	f000 faaa 	bl	800b10c <memmove>
 800abb8:	68a3      	ldr	r3, [r4, #8]
 800abba:	1b9b      	subs	r3, r3, r6
 800abbc:	60a3      	str	r3, [r4, #8]
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	4433      	add	r3, r6
 800abc2:	6023      	str	r3, [r4, #0]
 800abc4:	2000      	movs	r0, #0
 800abc6:	e7db      	b.n	800ab80 <__ssputs_r+0x58>
 800abc8:	462a      	mov	r2, r5
 800abca:	f000 fab9 	bl	800b140 <_realloc_r>
 800abce:	4606      	mov	r6, r0
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d1e1      	bne.n	800ab98 <__ssputs_r+0x70>
 800abd4:	6921      	ldr	r1, [r4, #16]
 800abd6:	4650      	mov	r0, sl
 800abd8:	f7ff fe72 	bl	800a8c0 <_free_r>
 800abdc:	e7c7      	b.n	800ab6e <__ssputs_r+0x46>
	...

0800abe0 <_svfiprintf_r>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	4698      	mov	r8, r3
 800abe6:	898b      	ldrh	r3, [r1, #12]
 800abe8:	061b      	lsls	r3, r3, #24
 800abea:	b09d      	sub	sp, #116	; 0x74
 800abec:	4607      	mov	r7, r0
 800abee:	460d      	mov	r5, r1
 800abf0:	4614      	mov	r4, r2
 800abf2:	d50e      	bpl.n	800ac12 <_svfiprintf_r+0x32>
 800abf4:	690b      	ldr	r3, [r1, #16]
 800abf6:	b963      	cbnz	r3, 800ac12 <_svfiprintf_r+0x32>
 800abf8:	2140      	movs	r1, #64	; 0x40
 800abfa:	f7ff fecd 	bl	800a998 <_malloc_r>
 800abfe:	6028      	str	r0, [r5, #0]
 800ac00:	6128      	str	r0, [r5, #16]
 800ac02:	b920      	cbnz	r0, 800ac0e <_svfiprintf_r+0x2e>
 800ac04:	230c      	movs	r3, #12
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0c:	e0d1      	b.n	800adb2 <_svfiprintf_r+0x1d2>
 800ac0e:	2340      	movs	r3, #64	; 0x40
 800ac10:	616b      	str	r3, [r5, #20]
 800ac12:	2300      	movs	r3, #0
 800ac14:	9309      	str	r3, [sp, #36]	; 0x24
 800ac16:	2320      	movs	r3, #32
 800ac18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac20:	2330      	movs	r3, #48	; 0x30
 800ac22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800adcc <_svfiprintf_r+0x1ec>
 800ac26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac2a:	f04f 0901 	mov.w	r9, #1
 800ac2e:	4623      	mov	r3, r4
 800ac30:	469a      	mov	sl, r3
 800ac32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac36:	b10a      	cbz	r2, 800ac3c <_svfiprintf_r+0x5c>
 800ac38:	2a25      	cmp	r2, #37	; 0x25
 800ac3a:	d1f9      	bne.n	800ac30 <_svfiprintf_r+0x50>
 800ac3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ac40:	d00b      	beq.n	800ac5a <_svfiprintf_r+0x7a>
 800ac42:	465b      	mov	r3, fp
 800ac44:	4622      	mov	r2, r4
 800ac46:	4629      	mov	r1, r5
 800ac48:	4638      	mov	r0, r7
 800ac4a:	f7ff ff6d 	bl	800ab28 <__ssputs_r>
 800ac4e:	3001      	adds	r0, #1
 800ac50:	f000 80aa 	beq.w	800ada8 <_svfiprintf_r+0x1c8>
 800ac54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac56:	445a      	add	r2, fp
 800ac58:	9209      	str	r2, [sp, #36]	; 0x24
 800ac5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f000 80a2 	beq.w	800ada8 <_svfiprintf_r+0x1c8>
 800ac64:	2300      	movs	r3, #0
 800ac66:	f04f 32ff 	mov.w	r2, #4294967295
 800ac6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac6e:	f10a 0a01 	add.w	sl, sl, #1
 800ac72:	9304      	str	r3, [sp, #16]
 800ac74:	9307      	str	r3, [sp, #28]
 800ac76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac7a:	931a      	str	r3, [sp, #104]	; 0x68
 800ac7c:	4654      	mov	r4, sl
 800ac7e:	2205      	movs	r2, #5
 800ac80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac84:	4851      	ldr	r0, [pc, #324]	; (800adcc <_svfiprintf_r+0x1ec>)
 800ac86:	f7f5 fabb 	bl	8000200 <memchr>
 800ac8a:	9a04      	ldr	r2, [sp, #16]
 800ac8c:	b9d8      	cbnz	r0, 800acc6 <_svfiprintf_r+0xe6>
 800ac8e:	06d0      	lsls	r0, r2, #27
 800ac90:	bf44      	itt	mi
 800ac92:	2320      	movmi	r3, #32
 800ac94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac98:	0711      	lsls	r1, r2, #28
 800ac9a:	bf44      	itt	mi
 800ac9c:	232b      	movmi	r3, #43	; 0x2b
 800ac9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aca2:	f89a 3000 	ldrb.w	r3, [sl]
 800aca6:	2b2a      	cmp	r3, #42	; 0x2a
 800aca8:	d015      	beq.n	800acd6 <_svfiprintf_r+0xf6>
 800acaa:	9a07      	ldr	r2, [sp, #28]
 800acac:	4654      	mov	r4, sl
 800acae:	2000      	movs	r0, #0
 800acb0:	f04f 0c0a 	mov.w	ip, #10
 800acb4:	4621      	mov	r1, r4
 800acb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acba:	3b30      	subs	r3, #48	; 0x30
 800acbc:	2b09      	cmp	r3, #9
 800acbe:	d94e      	bls.n	800ad5e <_svfiprintf_r+0x17e>
 800acc0:	b1b0      	cbz	r0, 800acf0 <_svfiprintf_r+0x110>
 800acc2:	9207      	str	r2, [sp, #28]
 800acc4:	e014      	b.n	800acf0 <_svfiprintf_r+0x110>
 800acc6:	eba0 0308 	sub.w	r3, r0, r8
 800acca:	fa09 f303 	lsl.w	r3, r9, r3
 800acce:	4313      	orrs	r3, r2
 800acd0:	9304      	str	r3, [sp, #16]
 800acd2:	46a2      	mov	sl, r4
 800acd4:	e7d2      	b.n	800ac7c <_svfiprintf_r+0x9c>
 800acd6:	9b03      	ldr	r3, [sp, #12]
 800acd8:	1d19      	adds	r1, r3, #4
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	9103      	str	r1, [sp, #12]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	bfbb      	ittet	lt
 800ace2:	425b      	neglt	r3, r3
 800ace4:	f042 0202 	orrlt.w	r2, r2, #2
 800ace8:	9307      	strge	r3, [sp, #28]
 800acea:	9307      	strlt	r3, [sp, #28]
 800acec:	bfb8      	it	lt
 800acee:	9204      	strlt	r2, [sp, #16]
 800acf0:	7823      	ldrb	r3, [r4, #0]
 800acf2:	2b2e      	cmp	r3, #46	; 0x2e
 800acf4:	d10c      	bne.n	800ad10 <_svfiprintf_r+0x130>
 800acf6:	7863      	ldrb	r3, [r4, #1]
 800acf8:	2b2a      	cmp	r3, #42	; 0x2a
 800acfa:	d135      	bne.n	800ad68 <_svfiprintf_r+0x188>
 800acfc:	9b03      	ldr	r3, [sp, #12]
 800acfe:	1d1a      	adds	r2, r3, #4
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	9203      	str	r2, [sp, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	bfb8      	it	lt
 800ad08:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad0c:	3402      	adds	r4, #2
 800ad0e:	9305      	str	r3, [sp, #20]
 800ad10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800addc <_svfiprintf_r+0x1fc>
 800ad14:	7821      	ldrb	r1, [r4, #0]
 800ad16:	2203      	movs	r2, #3
 800ad18:	4650      	mov	r0, sl
 800ad1a:	f7f5 fa71 	bl	8000200 <memchr>
 800ad1e:	b140      	cbz	r0, 800ad32 <_svfiprintf_r+0x152>
 800ad20:	2340      	movs	r3, #64	; 0x40
 800ad22:	eba0 000a 	sub.w	r0, r0, sl
 800ad26:	fa03 f000 	lsl.w	r0, r3, r0
 800ad2a:	9b04      	ldr	r3, [sp, #16]
 800ad2c:	4303      	orrs	r3, r0
 800ad2e:	3401      	adds	r4, #1
 800ad30:	9304      	str	r3, [sp, #16]
 800ad32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad36:	4826      	ldr	r0, [pc, #152]	; (800add0 <_svfiprintf_r+0x1f0>)
 800ad38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad3c:	2206      	movs	r2, #6
 800ad3e:	f7f5 fa5f 	bl	8000200 <memchr>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d038      	beq.n	800adb8 <_svfiprintf_r+0x1d8>
 800ad46:	4b23      	ldr	r3, [pc, #140]	; (800add4 <_svfiprintf_r+0x1f4>)
 800ad48:	bb1b      	cbnz	r3, 800ad92 <_svfiprintf_r+0x1b2>
 800ad4a:	9b03      	ldr	r3, [sp, #12]
 800ad4c:	3307      	adds	r3, #7
 800ad4e:	f023 0307 	bic.w	r3, r3, #7
 800ad52:	3308      	adds	r3, #8
 800ad54:	9303      	str	r3, [sp, #12]
 800ad56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad58:	4433      	add	r3, r6
 800ad5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad5c:	e767      	b.n	800ac2e <_svfiprintf_r+0x4e>
 800ad5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad62:	460c      	mov	r4, r1
 800ad64:	2001      	movs	r0, #1
 800ad66:	e7a5      	b.n	800acb4 <_svfiprintf_r+0xd4>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	3401      	adds	r4, #1
 800ad6c:	9305      	str	r3, [sp, #20]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	f04f 0c0a 	mov.w	ip, #10
 800ad74:	4620      	mov	r0, r4
 800ad76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad7a:	3a30      	subs	r2, #48	; 0x30
 800ad7c:	2a09      	cmp	r2, #9
 800ad7e:	d903      	bls.n	800ad88 <_svfiprintf_r+0x1a8>
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d0c5      	beq.n	800ad10 <_svfiprintf_r+0x130>
 800ad84:	9105      	str	r1, [sp, #20]
 800ad86:	e7c3      	b.n	800ad10 <_svfiprintf_r+0x130>
 800ad88:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e7f0      	b.n	800ad74 <_svfiprintf_r+0x194>
 800ad92:	ab03      	add	r3, sp, #12
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	462a      	mov	r2, r5
 800ad98:	4b0f      	ldr	r3, [pc, #60]	; (800add8 <_svfiprintf_r+0x1f8>)
 800ad9a:	a904      	add	r1, sp, #16
 800ad9c:	4638      	mov	r0, r7
 800ad9e:	f3af 8000 	nop.w
 800ada2:	1c42      	adds	r2, r0, #1
 800ada4:	4606      	mov	r6, r0
 800ada6:	d1d6      	bne.n	800ad56 <_svfiprintf_r+0x176>
 800ada8:	89ab      	ldrh	r3, [r5, #12]
 800adaa:	065b      	lsls	r3, r3, #25
 800adac:	f53f af2c 	bmi.w	800ac08 <_svfiprintf_r+0x28>
 800adb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adb2:	b01d      	add	sp, #116	; 0x74
 800adb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb8:	ab03      	add	r3, sp, #12
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	462a      	mov	r2, r5
 800adbe:	4b06      	ldr	r3, [pc, #24]	; (800add8 <_svfiprintf_r+0x1f8>)
 800adc0:	a904      	add	r1, sp, #16
 800adc2:	4638      	mov	r0, r7
 800adc4:	f000 f87a 	bl	800aebc <_printf_i>
 800adc8:	e7eb      	b.n	800ada2 <_svfiprintf_r+0x1c2>
 800adca:	bf00      	nop
 800adcc:	0800b9c4 	.word	0x0800b9c4
 800add0:	0800b9ce 	.word	0x0800b9ce
 800add4:	00000000 	.word	0x00000000
 800add8:	0800ab29 	.word	0x0800ab29
 800addc:	0800b9ca 	.word	0x0800b9ca

0800ade0 <_printf_common>:
 800ade0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade4:	4616      	mov	r6, r2
 800ade6:	4699      	mov	r9, r3
 800ade8:	688a      	ldr	r2, [r1, #8]
 800adea:	690b      	ldr	r3, [r1, #16]
 800adec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800adf0:	4293      	cmp	r3, r2
 800adf2:	bfb8      	it	lt
 800adf4:	4613      	movlt	r3, r2
 800adf6:	6033      	str	r3, [r6, #0]
 800adf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800adfc:	4607      	mov	r7, r0
 800adfe:	460c      	mov	r4, r1
 800ae00:	b10a      	cbz	r2, 800ae06 <_printf_common+0x26>
 800ae02:	3301      	adds	r3, #1
 800ae04:	6033      	str	r3, [r6, #0]
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	0699      	lsls	r1, r3, #26
 800ae0a:	bf42      	ittt	mi
 800ae0c:	6833      	ldrmi	r3, [r6, #0]
 800ae0e:	3302      	addmi	r3, #2
 800ae10:	6033      	strmi	r3, [r6, #0]
 800ae12:	6825      	ldr	r5, [r4, #0]
 800ae14:	f015 0506 	ands.w	r5, r5, #6
 800ae18:	d106      	bne.n	800ae28 <_printf_common+0x48>
 800ae1a:	f104 0a19 	add.w	sl, r4, #25
 800ae1e:	68e3      	ldr	r3, [r4, #12]
 800ae20:	6832      	ldr	r2, [r6, #0]
 800ae22:	1a9b      	subs	r3, r3, r2
 800ae24:	42ab      	cmp	r3, r5
 800ae26:	dc26      	bgt.n	800ae76 <_printf_common+0x96>
 800ae28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae2c:	1e13      	subs	r3, r2, #0
 800ae2e:	6822      	ldr	r2, [r4, #0]
 800ae30:	bf18      	it	ne
 800ae32:	2301      	movne	r3, #1
 800ae34:	0692      	lsls	r2, r2, #26
 800ae36:	d42b      	bmi.n	800ae90 <_printf_common+0xb0>
 800ae38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae3c:	4649      	mov	r1, r9
 800ae3e:	4638      	mov	r0, r7
 800ae40:	47c0      	blx	r8
 800ae42:	3001      	adds	r0, #1
 800ae44:	d01e      	beq.n	800ae84 <_printf_common+0xa4>
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	68e5      	ldr	r5, [r4, #12]
 800ae4a:	6832      	ldr	r2, [r6, #0]
 800ae4c:	f003 0306 	and.w	r3, r3, #6
 800ae50:	2b04      	cmp	r3, #4
 800ae52:	bf08      	it	eq
 800ae54:	1aad      	subeq	r5, r5, r2
 800ae56:	68a3      	ldr	r3, [r4, #8]
 800ae58:	6922      	ldr	r2, [r4, #16]
 800ae5a:	bf0c      	ite	eq
 800ae5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae60:	2500      	movne	r5, #0
 800ae62:	4293      	cmp	r3, r2
 800ae64:	bfc4      	itt	gt
 800ae66:	1a9b      	subgt	r3, r3, r2
 800ae68:	18ed      	addgt	r5, r5, r3
 800ae6a:	2600      	movs	r6, #0
 800ae6c:	341a      	adds	r4, #26
 800ae6e:	42b5      	cmp	r5, r6
 800ae70:	d11a      	bne.n	800aea8 <_printf_common+0xc8>
 800ae72:	2000      	movs	r0, #0
 800ae74:	e008      	b.n	800ae88 <_printf_common+0xa8>
 800ae76:	2301      	movs	r3, #1
 800ae78:	4652      	mov	r2, sl
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	47c0      	blx	r8
 800ae80:	3001      	adds	r0, #1
 800ae82:	d103      	bne.n	800ae8c <_printf_common+0xac>
 800ae84:	f04f 30ff 	mov.w	r0, #4294967295
 800ae88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae8c:	3501      	adds	r5, #1
 800ae8e:	e7c6      	b.n	800ae1e <_printf_common+0x3e>
 800ae90:	18e1      	adds	r1, r4, r3
 800ae92:	1c5a      	adds	r2, r3, #1
 800ae94:	2030      	movs	r0, #48	; 0x30
 800ae96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae9a:	4422      	add	r2, r4
 800ae9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aea4:	3302      	adds	r3, #2
 800aea6:	e7c7      	b.n	800ae38 <_printf_common+0x58>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	4622      	mov	r2, r4
 800aeac:	4649      	mov	r1, r9
 800aeae:	4638      	mov	r0, r7
 800aeb0:	47c0      	blx	r8
 800aeb2:	3001      	adds	r0, #1
 800aeb4:	d0e6      	beq.n	800ae84 <_printf_common+0xa4>
 800aeb6:	3601      	adds	r6, #1
 800aeb8:	e7d9      	b.n	800ae6e <_printf_common+0x8e>
	...

0800aebc <_printf_i>:
 800aebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aec0:	7e0f      	ldrb	r7, [r1, #24]
 800aec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aec4:	2f78      	cmp	r7, #120	; 0x78
 800aec6:	4691      	mov	r9, r2
 800aec8:	4680      	mov	r8, r0
 800aeca:	460c      	mov	r4, r1
 800aecc:	469a      	mov	sl, r3
 800aece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aed2:	d807      	bhi.n	800aee4 <_printf_i+0x28>
 800aed4:	2f62      	cmp	r7, #98	; 0x62
 800aed6:	d80a      	bhi.n	800aeee <_printf_i+0x32>
 800aed8:	2f00      	cmp	r7, #0
 800aeda:	f000 80d8 	beq.w	800b08e <_printf_i+0x1d2>
 800aede:	2f58      	cmp	r7, #88	; 0x58
 800aee0:	f000 80a3 	beq.w	800b02a <_printf_i+0x16e>
 800aee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aeec:	e03a      	b.n	800af64 <_printf_i+0xa8>
 800aeee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aef2:	2b15      	cmp	r3, #21
 800aef4:	d8f6      	bhi.n	800aee4 <_printf_i+0x28>
 800aef6:	a101      	add	r1, pc, #4	; (adr r1, 800aefc <_printf_i+0x40>)
 800aef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aefc:	0800af55 	.word	0x0800af55
 800af00:	0800af69 	.word	0x0800af69
 800af04:	0800aee5 	.word	0x0800aee5
 800af08:	0800aee5 	.word	0x0800aee5
 800af0c:	0800aee5 	.word	0x0800aee5
 800af10:	0800aee5 	.word	0x0800aee5
 800af14:	0800af69 	.word	0x0800af69
 800af18:	0800aee5 	.word	0x0800aee5
 800af1c:	0800aee5 	.word	0x0800aee5
 800af20:	0800aee5 	.word	0x0800aee5
 800af24:	0800aee5 	.word	0x0800aee5
 800af28:	0800b075 	.word	0x0800b075
 800af2c:	0800af99 	.word	0x0800af99
 800af30:	0800b057 	.word	0x0800b057
 800af34:	0800aee5 	.word	0x0800aee5
 800af38:	0800aee5 	.word	0x0800aee5
 800af3c:	0800b097 	.word	0x0800b097
 800af40:	0800aee5 	.word	0x0800aee5
 800af44:	0800af99 	.word	0x0800af99
 800af48:	0800aee5 	.word	0x0800aee5
 800af4c:	0800aee5 	.word	0x0800aee5
 800af50:	0800b05f 	.word	0x0800b05f
 800af54:	682b      	ldr	r3, [r5, #0]
 800af56:	1d1a      	adds	r2, r3, #4
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	602a      	str	r2, [r5, #0]
 800af5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af64:	2301      	movs	r3, #1
 800af66:	e0a3      	b.n	800b0b0 <_printf_i+0x1f4>
 800af68:	6820      	ldr	r0, [r4, #0]
 800af6a:	6829      	ldr	r1, [r5, #0]
 800af6c:	0606      	lsls	r6, r0, #24
 800af6e:	f101 0304 	add.w	r3, r1, #4
 800af72:	d50a      	bpl.n	800af8a <_printf_i+0xce>
 800af74:	680e      	ldr	r6, [r1, #0]
 800af76:	602b      	str	r3, [r5, #0]
 800af78:	2e00      	cmp	r6, #0
 800af7a:	da03      	bge.n	800af84 <_printf_i+0xc8>
 800af7c:	232d      	movs	r3, #45	; 0x2d
 800af7e:	4276      	negs	r6, r6
 800af80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af84:	485e      	ldr	r0, [pc, #376]	; (800b100 <_printf_i+0x244>)
 800af86:	230a      	movs	r3, #10
 800af88:	e019      	b.n	800afbe <_printf_i+0x102>
 800af8a:	680e      	ldr	r6, [r1, #0]
 800af8c:	602b      	str	r3, [r5, #0]
 800af8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800af92:	bf18      	it	ne
 800af94:	b236      	sxthne	r6, r6
 800af96:	e7ef      	b.n	800af78 <_printf_i+0xbc>
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	6820      	ldr	r0, [r4, #0]
 800af9c:	1d19      	adds	r1, r3, #4
 800af9e:	6029      	str	r1, [r5, #0]
 800afa0:	0601      	lsls	r1, r0, #24
 800afa2:	d501      	bpl.n	800afa8 <_printf_i+0xec>
 800afa4:	681e      	ldr	r6, [r3, #0]
 800afa6:	e002      	b.n	800afae <_printf_i+0xf2>
 800afa8:	0646      	lsls	r6, r0, #25
 800afaa:	d5fb      	bpl.n	800afa4 <_printf_i+0xe8>
 800afac:	881e      	ldrh	r6, [r3, #0]
 800afae:	4854      	ldr	r0, [pc, #336]	; (800b100 <_printf_i+0x244>)
 800afb0:	2f6f      	cmp	r7, #111	; 0x6f
 800afb2:	bf0c      	ite	eq
 800afb4:	2308      	moveq	r3, #8
 800afb6:	230a      	movne	r3, #10
 800afb8:	2100      	movs	r1, #0
 800afba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afbe:	6865      	ldr	r5, [r4, #4]
 800afc0:	60a5      	str	r5, [r4, #8]
 800afc2:	2d00      	cmp	r5, #0
 800afc4:	bfa2      	ittt	ge
 800afc6:	6821      	ldrge	r1, [r4, #0]
 800afc8:	f021 0104 	bicge.w	r1, r1, #4
 800afcc:	6021      	strge	r1, [r4, #0]
 800afce:	b90e      	cbnz	r6, 800afd4 <_printf_i+0x118>
 800afd0:	2d00      	cmp	r5, #0
 800afd2:	d04d      	beq.n	800b070 <_printf_i+0x1b4>
 800afd4:	4615      	mov	r5, r2
 800afd6:	fbb6 f1f3 	udiv	r1, r6, r3
 800afda:	fb03 6711 	mls	r7, r3, r1, r6
 800afde:	5dc7      	ldrb	r7, [r0, r7]
 800afe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800afe4:	4637      	mov	r7, r6
 800afe6:	42bb      	cmp	r3, r7
 800afe8:	460e      	mov	r6, r1
 800afea:	d9f4      	bls.n	800afd6 <_printf_i+0x11a>
 800afec:	2b08      	cmp	r3, #8
 800afee:	d10b      	bne.n	800b008 <_printf_i+0x14c>
 800aff0:	6823      	ldr	r3, [r4, #0]
 800aff2:	07de      	lsls	r6, r3, #31
 800aff4:	d508      	bpl.n	800b008 <_printf_i+0x14c>
 800aff6:	6923      	ldr	r3, [r4, #16]
 800aff8:	6861      	ldr	r1, [r4, #4]
 800affa:	4299      	cmp	r1, r3
 800affc:	bfde      	ittt	le
 800affe:	2330      	movle	r3, #48	; 0x30
 800b000:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b004:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b008:	1b52      	subs	r2, r2, r5
 800b00a:	6122      	str	r2, [r4, #16]
 800b00c:	f8cd a000 	str.w	sl, [sp]
 800b010:	464b      	mov	r3, r9
 800b012:	aa03      	add	r2, sp, #12
 800b014:	4621      	mov	r1, r4
 800b016:	4640      	mov	r0, r8
 800b018:	f7ff fee2 	bl	800ade0 <_printf_common>
 800b01c:	3001      	adds	r0, #1
 800b01e:	d14c      	bne.n	800b0ba <_printf_i+0x1fe>
 800b020:	f04f 30ff 	mov.w	r0, #4294967295
 800b024:	b004      	add	sp, #16
 800b026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b02a:	4835      	ldr	r0, [pc, #212]	; (800b100 <_printf_i+0x244>)
 800b02c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b030:	6829      	ldr	r1, [r5, #0]
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	f851 6b04 	ldr.w	r6, [r1], #4
 800b038:	6029      	str	r1, [r5, #0]
 800b03a:	061d      	lsls	r5, r3, #24
 800b03c:	d514      	bpl.n	800b068 <_printf_i+0x1ac>
 800b03e:	07df      	lsls	r7, r3, #31
 800b040:	bf44      	itt	mi
 800b042:	f043 0320 	orrmi.w	r3, r3, #32
 800b046:	6023      	strmi	r3, [r4, #0]
 800b048:	b91e      	cbnz	r6, 800b052 <_printf_i+0x196>
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	f023 0320 	bic.w	r3, r3, #32
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	2310      	movs	r3, #16
 800b054:	e7b0      	b.n	800afb8 <_printf_i+0xfc>
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	f043 0320 	orr.w	r3, r3, #32
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	2378      	movs	r3, #120	; 0x78
 800b060:	4828      	ldr	r0, [pc, #160]	; (800b104 <_printf_i+0x248>)
 800b062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b066:	e7e3      	b.n	800b030 <_printf_i+0x174>
 800b068:	0659      	lsls	r1, r3, #25
 800b06a:	bf48      	it	mi
 800b06c:	b2b6      	uxthmi	r6, r6
 800b06e:	e7e6      	b.n	800b03e <_printf_i+0x182>
 800b070:	4615      	mov	r5, r2
 800b072:	e7bb      	b.n	800afec <_printf_i+0x130>
 800b074:	682b      	ldr	r3, [r5, #0]
 800b076:	6826      	ldr	r6, [r4, #0]
 800b078:	6961      	ldr	r1, [r4, #20]
 800b07a:	1d18      	adds	r0, r3, #4
 800b07c:	6028      	str	r0, [r5, #0]
 800b07e:	0635      	lsls	r5, r6, #24
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	d501      	bpl.n	800b088 <_printf_i+0x1cc>
 800b084:	6019      	str	r1, [r3, #0]
 800b086:	e002      	b.n	800b08e <_printf_i+0x1d2>
 800b088:	0670      	lsls	r0, r6, #25
 800b08a:	d5fb      	bpl.n	800b084 <_printf_i+0x1c8>
 800b08c:	8019      	strh	r1, [r3, #0]
 800b08e:	2300      	movs	r3, #0
 800b090:	6123      	str	r3, [r4, #16]
 800b092:	4615      	mov	r5, r2
 800b094:	e7ba      	b.n	800b00c <_printf_i+0x150>
 800b096:	682b      	ldr	r3, [r5, #0]
 800b098:	1d1a      	adds	r2, r3, #4
 800b09a:	602a      	str	r2, [r5, #0]
 800b09c:	681d      	ldr	r5, [r3, #0]
 800b09e:	6862      	ldr	r2, [r4, #4]
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f7f5 f8ac 	bl	8000200 <memchr>
 800b0a8:	b108      	cbz	r0, 800b0ae <_printf_i+0x1f2>
 800b0aa:	1b40      	subs	r0, r0, r5
 800b0ac:	6060      	str	r0, [r4, #4]
 800b0ae:	6863      	ldr	r3, [r4, #4]
 800b0b0:	6123      	str	r3, [r4, #16]
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0b8:	e7a8      	b.n	800b00c <_printf_i+0x150>
 800b0ba:	6923      	ldr	r3, [r4, #16]
 800b0bc:	462a      	mov	r2, r5
 800b0be:	4649      	mov	r1, r9
 800b0c0:	4640      	mov	r0, r8
 800b0c2:	47d0      	blx	sl
 800b0c4:	3001      	adds	r0, #1
 800b0c6:	d0ab      	beq.n	800b020 <_printf_i+0x164>
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	079b      	lsls	r3, r3, #30
 800b0cc:	d413      	bmi.n	800b0f6 <_printf_i+0x23a>
 800b0ce:	68e0      	ldr	r0, [r4, #12]
 800b0d0:	9b03      	ldr	r3, [sp, #12]
 800b0d2:	4298      	cmp	r0, r3
 800b0d4:	bfb8      	it	lt
 800b0d6:	4618      	movlt	r0, r3
 800b0d8:	e7a4      	b.n	800b024 <_printf_i+0x168>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	4632      	mov	r2, r6
 800b0de:	4649      	mov	r1, r9
 800b0e0:	4640      	mov	r0, r8
 800b0e2:	47d0      	blx	sl
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	d09b      	beq.n	800b020 <_printf_i+0x164>
 800b0e8:	3501      	adds	r5, #1
 800b0ea:	68e3      	ldr	r3, [r4, #12]
 800b0ec:	9903      	ldr	r1, [sp, #12]
 800b0ee:	1a5b      	subs	r3, r3, r1
 800b0f0:	42ab      	cmp	r3, r5
 800b0f2:	dcf2      	bgt.n	800b0da <_printf_i+0x21e>
 800b0f4:	e7eb      	b.n	800b0ce <_printf_i+0x212>
 800b0f6:	2500      	movs	r5, #0
 800b0f8:	f104 0619 	add.w	r6, r4, #25
 800b0fc:	e7f5      	b.n	800b0ea <_printf_i+0x22e>
 800b0fe:	bf00      	nop
 800b100:	0800b9d5 	.word	0x0800b9d5
 800b104:	0800b9e6 	.word	0x0800b9e6

0800b108 <__retarget_lock_acquire_recursive>:
 800b108:	4770      	bx	lr

0800b10a <__retarget_lock_release_recursive>:
 800b10a:	4770      	bx	lr

0800b10c <memmove>:
 800b10c:	4288      	cmp	r0, r1
 800b10e:	b510      	push	{r4, lr}
 800b110:	eb01 0402 	add.w	r4, r1, r2
 800b114:	d902      	bls.n	800b11c <memmove+0x10>
 800b116:	4284      	cmp	r4, r0
 800b118:	4623      	mov	r3, r4
 800b11a:	d807      	bhi.n	800b12c <memmove+0x20>
 800b11c:	1e43      	subs	r3, r0, #1
 800b11e:	42a1      	cmp	r1, r4
 800b120:	d008      	beq.n	800b134 <memmove+0x28>
 800b122:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b126:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b12a:	e7f8      	b.n	800b11e <memmove+0x12>
 800b12c:	4402      	add	r2, r0
 800b12e:	4601      	mov	r1, r0
 800b130:	428a      	cmp	r2, r1
 800b132:	d100      	bne.n	800b136 <memmove+0x2a>
 800b134:	bd10      	pop	{r4, pc}
 800b136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b13a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b13e:	e7f7      	b.n	800b130 <memmove+0x24>

0800b140 <_realloc_r>:
 800b140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b144:	4680      	mov	r8, r0
 800b146:	4614      	mov	r4, r2
 800b148:	460e      	mov	r6, r1
 800b14a:	b921      	cbnz	r1, 800b156 <_realloc_r+0x16>
 800b14c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b150:	4611      	mov	r1, r2
 800b152:	f7ff bc21 	b.w	800a998 <_malloc_r>
 800b156:	b92a      	cbnz	r2, 800b164 <_realloc_r+0x24>
 800b158:	f7ff fbb2 	bl	800a8c0 <_free_r>
 800b15c:	4625      	mov	r5, r4
 800b15e:	4628      	mov	r0, r5
 800b160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b164:	f000 f81b 	bl	800b19e <_malloc_usable_size_r>
 800b168:	4284      	cmp	r4, r0
 800b16a:	4607      	mov	r7, r0
 800b16c:	d802      	bhi.n	800b174 <_realloc_r+0x34>
 800b16e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b172:	d812      	bhi.n	800b19a <_realloc_r+0x5a>
 800b174:	4621      	mov	r1, r4
 800b176:	4640      	mov	r0, r8
 800b178:	f7ff fc0e 	bl	800a998 <_malloc_r>
 800b17c:	4605      	mov	r5, r0
 800b17e:	2800      	cmp	r0, #0
 800b180:	d0ed      	beq.n	800b15e <_realloc_r+0x1e>
 800b182:	42bc      	cmp	r4, r7
 800b184:	4622      	mov	r2, r4
 800b186:	4631      	mov	r1, r6
 800b188:	bf28      	it	cs
 800b18a:	463a      	movcs	r2, r7
 800b18c:	f7ff fb82 	bl	800a894 <memcpy>
 800b190:	4631      	mov	r1, r6
 800b192:	4640      	mov	r0, r8
 800b194:	f7ff fb94 	bl	800a8c0 <_free_r>
 800b198:	e7e1      	b.n	800b15e <_realloc_r+0x1e>
 800b19a:	4635      	mov	r5, r6
 800b19c:	e7df      	b.n	800b15e <_realloc_r+0x1e>

0800b19e <_malloc_usable_size_r>:
 800b19e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1a2:	1f18      	subs	r0, r3, #4
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	bfbc      	itt	lt
 800b1a8:	580b      	ldrlt	r3, [r1, r0]
 800b1aa:	18c0      	addlt	r0, r0, r3
 800b1ac:	4770      	bx	lr
	...

0800b1b0 <_init>:
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b2:	bf00      	nop
 800b1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b6:	bc08      	pop	{r3}
 800b1b8:	469e      	mov	lr, r3
 800b1ba:	4770      	bx	lr

0800b1bc <_fini>:
 800b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1be:	bf00      	nop
 800b1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c2:	bc08      	pop	{r3}
 800b1c4:	469e      	mov	lr, r3
 800b1c6:	4770      	bx	lr
