
finalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d054  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800d1e8  0800d1e8  0001d1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc58  0800dc58  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800dc58  0800dc58  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dc58  0800dc58  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc58  0800dc58  0001dc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc5c  0800dc5c  0001dc5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800dc60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a4  2**0
                  CONTENTS
 10 .bss          00000768  200001a8  200001a8  000201a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000910  20000910  000201a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d5e7  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c3  00000000  00000000  0003d7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  00040c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001758  00000000  00000000  000424a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020bbd  00000000  00000000  00043c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f562  00000000  00000000  000647bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c76e6  00000000  00000000  00083d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b405  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070a4  00000000  00000000  0014b458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a8 	.word	0x200001a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d1cc 	.word	0x0800d1cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ac 	.word	0x200001ac
 80001cc:	0800d1cc 	.word	0x0800d1cc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	; 0x38
 8000ba0:	af0a      	add	r7, sp, #40	; 0x28
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4603      	mov	r3, r0
 8000bac:	817b      	strh	r3, [r7, #10]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	813b      	strh	r3, [r7, #8]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <LiquidCrystal+0x90>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d019      	beq.n	8000bf2 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000bbe:	8939      	ldrh	r1, [r7, #8]
 8000bc0:	897a      	ldrh	r2, [r7, #10]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	9308      	str	r3, [sp, #32]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	9307      	str	r3, [sp, #28]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9306      	str	r3, [sp, #24]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9305      	str	r3, [sp, #20]
 8000bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bd4:	9304      	str	r3, [sp, #16]
 8000bd6:	8c3b      	ldrh	r3, [r7, #32]
 8000bd8:	9303      	str	r3, [sp, #12]
 8000bda:	8bbb      	ldrh	r3, [r7, #28]
 8000bdc:	9302      	str	r3, [sp, #8]
 8000bde:	8b3b      	ldrh	r3, [r7, #24]
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	460b      	mov	r3, r1
 8000be8:	68f9      	ldr	r1, [r7, #12]
 8000bea:	2001      	movs	r0, #1
 8000bec:	f000 f820 	bl	8000c30 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000bf0:	e018      	b.n	8000c24 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000bf2:	8939      	ldrh	r1, [r7, #8]
 8000bf4:	897a      	ldrh	r2, [r7, #10]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9308      	str	r3, [sp, #32]
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	9307      	str	r3, [sp, #28]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9306      	str	r3, [sp, #24]
 8000c02:	2300      	movs	r3, #0
 8000c04:	9305      	str	r3, [sp, #20]
 8000c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c08:	9304      	str	r3, [sp, #16]
 8000c0a:	8c3b      	ldrh	r3, [r7, #32]
 8000c0c:	9303      	str	r3, [sp, #12]
 8000c0e:	8bbb      	ldrh	r3, [r7, #28]
 8000c10:	9302      	str	r3, [sp, #8]
 8000c12:	8b3b      	ldrh	r3, [r7, #24]
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	68f9      	ldr	r1, [r7, #12]
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 f806 	bl	8000c30 <init>
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000000 	.word	0x20000000

08000c30 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	460b      	mov	r3, r1
 8000c42:	81bb      	strh	r3, [r7, #12]
 8000c44:	4613      	mov	r3, r2
 8000c46:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000c48:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <init+0x84>)
 8000c4a:	89bb      	ldrh	r3, [r7, #12]
 8000c4c:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000c4e:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <init+0x88>)
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000c54:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <init+0x8c>)
 8000c56:	8b3b      	ldrh	r3, [r7, #24]
 8000c58:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000c5a:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <init+0x90>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000c60:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <init+0x94>)
 8000c62:	8bbb      	ldrh	r3, [r7, #28]
 8000c64:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000c66:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <init+0x94>)
 8000c68:	8c3b      	ldrh	r3, [r7, #32]
 8000c6a:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000c6c:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <init+0x94>)
 8000c6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c70:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000c72:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <init+0x94>)
 8000c74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c76:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000c78:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <init+0x94>)
 8000c7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c7c:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000c7e:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <init+0x94>)
 8000c80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000c82:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000c84:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <init+0x94>)
 8000c86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c88:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <init+0x94>)
 8000c8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c8e:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <init+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e002      	b.n	8000ca4 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <init+0x98>)
 8000ca0:	2210      	movs	r2, #16
 8000ca2:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	2010      	movs	r0, #16
 8000ca8:	f000 f810 	bl	8000ccc <begin>
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200001c6 	.word	0x200001c6
 8000cb8:	200001c8 	.word	0x200001c8
 8000cbc:	200001ca 	.word	0x200001ca
 8000cc0:	200001dc 	.word	0x200001dc
 8000cc4:	200001cc 	.word	0x200001cc
 8000cc8:	200001e0 	.word	0x200001e0

08000ccc <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	460a      	mov	r2, r1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d906      	bls.n	8000cf0 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000ce2:	4b77      	ldr	r3, [pc, #476]	; (8000ec0 <begin+0x1f4>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b74      	ldr	r3, [pc, #464]	; (8000ec0 <begin+0x1f4>)
 8000cee:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000cf0:	4a74      	ldr	r2, [pc, #464]	; (8000ec4 <begin+0x1f8>)
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	3340      	adds	r3, #64	; 0x40
 8000cfc:	2140      	movs	r1, #64	; 0x40
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f988 	bl	8001014 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000d04:	4b70      	ldr	r3, [pc, #448]	; (8000ec8 <begin+0x1fc>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d009      	beq.n	8000d20 <begin+0x54>
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d106      	bne.n	8000d20 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000d12:	4b6b      	ldr	r3, [pc, #428]	; (8000ec0 <begin+0x1f4>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b68      	ldr	r3, [pc, #416]	; (8000ec0 <begin+0x1f4>)
 8000d1e:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000d20:	f000 f8e4 	bl	8000eec <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000d2c:	4b67      	ldr	r3, [pc, #412]	; (8000ecc <begin+0x200>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d01b      	beq.n	8000d6c <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000d34:	4b66      	ldr	r3, [pc, #408]	; (8000ed0 <begin+0x204>)
 8000d36:	881a      	ldrh	r2, [r3, #0]
 8000d38:	4b66      	ldr	r3, [pc, #408]	; (8000ed4 <begin+0x208>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b65      	ldr	r3, [pc, #404]	; (8000ed8 <begin+0x20c>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	4b64      	ldr	r3, [pc, #400]	; (8000edc <begin+0x210>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4b62      	ldr	r3, [pc, #392]	; (8000edc <begin+0x210>)
 8000d52:	885b      	ldrh	r3, [r3, #2]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b60      	ldr	r3, [pc, #384]	; (8000edc <begin+0x210>)
 8000d5a:	889b      	ldrh	r3, [r3, #4]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b5e      	ldr	r3, [pc, #376]	; (8000edc <begin+0x210>)
 8000d62:	88db      	ldrh	r3, [r3, #6]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	e02a      	b.n	8000dc2 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d6c:	4b58      	ldr	r3, [pc, #352]	; (8000ed0 <begin+0x204>)
 8000d6e:	881a      	ldrh	r2, [r3, #0]
 8000d70:	4b58      	ldr	r3, [pc, #352]	; (8000ed4 <begin+0x208>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b57      	ldr	r3, [pc, #348]	; (8000ed8 <begin+0x20c>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d80:	4b56      	ldr	r3, [pc, #344]	; (8000edc <begin+0x210>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d88:	4b54      	ldr	r3, [pc, #336]	; (8000edc <begin+0x210>)
 8000d8a:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d90:	4b52      	ldr	r3, [pc, #328]	; (8000edc <begin+0x210>)
 8000d92:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000d98:	4b50      	ldr	r3, [pc, #320]	; (8000edc <begin+0x210>)
 8000d9a:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b4e      	ldr	r3, [pc, #312]	; (8000edc <begin+0x210>)
 8000da2:	891b      	ldrh	r3, [r3, #8]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <begin+0x210>)
 8000daa:	895b      	ldrh	r3, [r3, #10]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b4a      	ldr	r3, [pc, #296]	; (8000edc <begin+0x210>)
 8000db2:	899b      	ldrh	r3, [r3, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b48      	ldr	r3, [pc, #288]	; (8000edc <begin+0x210>)
 8000dba:	89db      	ldrh	r3, [r3, #14]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000dc0:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 8000dc2:	4b47      	ldr	r3, [pc, #284]	; (8000ee0 <begin+0x214>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f107 020c 	add.w	r2, r7, #12
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f006 fa7f 	bl	80072d0 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 8000dd2:	2032      	movs	r0, #50	; 0x32
 8000dd4:	f004 fda4 	bl	8005920 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000dd8:	4b41      	ldr	r3, [pc, #260]	; (8000ee0 <begin+0x214>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a3c      	ldr	r2, [pc, #240]	; (8000ed0 <begin+0x204>)
 8000dde:	8811      	ldrh	r1, [r2, #0]
 8000de0:	2200      	movs	r2, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f006 fc06 	bl	80075f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000de8:	4b3d      	ldr	r3, [pc, #244]	; (8000ee0 <begin+0x214>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a3a      	ldr	r2, [pc, #232]	; (8000ed8 <begin+0x20c>)
 8000dee:	8811      	ldrh	r1, [r2, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f006 fbfe 	bl	80075f4 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8000df8:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <begin+0x208>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	2bff      	cmp	r3, #255	; 0xff
 8000dfe:	d007      	beq.n	8000e10 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000e00:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <begin+0x214>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a33      	ldr	r2, [pc, #204]	; (8000ed4 <begin+0x208>)
 8000e06:	8811      	ldrh	r1, [r2, #0]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f006 fbf2 	bl	80075f4 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000e10:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <begin+0x1f4>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d115      	bne.n	8000e48 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 fa31 	bl	8001284 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000e22:	2005      	movs	r0, #5
 8000e24:	f004 fd7c 	bl	8005920 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 fa2b 	bl	8001284 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f004 fd76 	bl	8005920 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 fa25 	bl	8001284 <write4bits>
    HAL_Delay(1);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f004 fd70 	bl	8005920 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000e40:	2002      	movs	r0, #2
 8000e42:	f000 fa1f 	bl	8001284 <write4bits>
 8000e46:	e01d      	b.n	8000e84 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <begin+0x1f4>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	f043 0320 	orr.w	r3, r3, #32
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f991 	bl	800117a <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000e58:	2005      	movs	r0, #5
 8000e5a:	f004 fd61 	bl	8005920 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <begin+0x1f4>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f043 0320 	orr.w	r3, r3, #32
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f986 	bl	800117a <command>
    HAL_Delay(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f004 fd56 	bl	8005920 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <begin+0x1f4>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f043 0320 	orr.w	r3, r3, #32
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f97b 	bl	800117a <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <begin+0x1f4>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	f043 0320 	orr.w	r3, r3, #32
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f973 	bl	800117a <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <begin+0x218>)
 8000e96:	2204      	movs	r2, #4
 8000e98:	701a      	strb	r2, [r3, #0]
  display();
 8000e9a:	f000 f92d 	bl	80010f8 <display>

  // clear it off
  clear();
 8000e9e:	f000 f8d9 	bl	8001054 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <begin+0x21c>)
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <begin+0x21c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f961 	bl	800117a <command>

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200001e0 	.word	0x200001e0
 8000ec4:	200001e3 	.word	0x200001e3
 8000ec8:	200001c4 	.word	0x200001c4
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	200001c6 	.word	0x200001c6
 8000ed4:	200001c8 	.word	0x200001c8
 8000ed8:	200001ca 	.word	0x200001ca
 8000edc:	200001cc 	.word	0x200001cc
 8000ee0:	200001dc 	.word	0x200001dc
 8000ee4:	200001e1 	.word	0x200001e1
 8000ee8:	200001e2 	.word	0x200001e2

08000eec <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8000ef2:	4b41      	ldr	r3, [pc, #260]	; (8000ff8 <enableClock+0x10c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000efa:	d10c      	bne.n	8000f16 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b3f      	ldr	r3, [pc, #252]	; (8000ffc <enableClock+0x110>)
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	4a3e      	ldr	r2, [pc, #248]	; (8000ffc <enableClock+0x110>)
 8000f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f06:	6153      	str	r3, [r2, #20]
 8000f08:	4b3c      	ldr	r3, [pc, #240]	; (8000ffc <enableClock+0x110>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000f14:	e06a      	b.n	8000fec <enableClock+0x100>
  else if(_port == GPIOB)
 8000f16:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <enableClock+0x10c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a39      	ldr	r2, [pc, #228]	; (8001000 <enableClock+0x114>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d10c      	bne.n	8000f3a <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <enableClock+0x110>)
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	4a35      	ldr	r2, [pc, #212]	; (8000ffc <enableClock+0x110>)
 8000f26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2a:	6153      	str	r3, [r2, #20]
 8000f2c:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <enableClock+0x110>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	69bb      	ldr	r3, [r7, #24]
}
 8000f38:	e058      	b.n	8000fec <enableClock+0x100>
  else if(_port == GPIOB)
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <enableClock+0x10c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a30      	ldr	r2, [pc, #192]	; (8001000 <enableClock+0x114>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d10c      	bne.n	8000f5e <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <enableClock+0x110>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4a2c      	ldr	r2, [pc, #176]	; (8000ffc <enableClock+0x110>)
 8000f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4e:	6153      	str	r3, [r2, #20]
 8000f50:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <enableClock+0x110>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697b      	ldr	r3, [r7, #20]
}
 8000f5c:	e046      	b.n	8000fec <enableClock+0x100>
	else if(_port == GPIOC)
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <enableClock+0x10c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a28      	ldr	r2, [pc, #160]	; (8001004 <enableClock+0x118>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d10c      	bne.n	8000f82 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f68:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <enableClock+0x110>)
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	4a23      	ldr	r2, [pc, #140]	; (8000ffc <enableClock+0x110>)
 8000f6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f72:	6153      	str	r3, [r2, #20]
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <enableClock+0x110>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]
}
 8000f80:	e034      	b.n	8000fec <enableClock+0x100>
	else if(_port == GPIOD)
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <enableClock+0x10c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a20      	ldr	r2, [pc, #128]	; (8001008 <enableClock+0x11c>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d10c      	bne.n	8000fa6 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <enableClock+0x110>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	4a1a      	ldr	r2, [pc, #104]	; (8000ffc <enableClock+0x110>)
 8000f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f96:	6153      	str	r3, [r2, #20]
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <enableClock+0x110>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	e022      	b.n	8000fec <enableClock+0x100>
	else if(_port == GPIOE)
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <enableClock+0x10c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a18      	ldr	r2, [pc, #96]	; (800100c <enableClock+0x120>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d10c      	bne.n	8000fca <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <enableClock+0x110>)
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <enableClock+0x110>)
 8000fb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fba:	6153      	str	r3, [r2, #20]
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <enableClock+0x110>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
}
 8000fc8:	e010      	b.n	8000fec <enableClock+0x100>
	else if(_port == GPIOF)
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <enableClock+0x10c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <enableClock+0x124>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d10b      	bne.n	8000fec <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <enableClock+0x110>)
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <enableClock+0x110>)
 8000fda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fde:	6153      	str	r3, [r2, #20]
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <enableClock+0x110>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
}
 8000fec:	bf00      	nop
 8000fee:	3724      	adds	r7, #36	; 0x24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	200001dc 	.word	0x200001dc
 8000ffc:	40021000 	.word	0x40021000
 8001000:	48000400 	.word	0x48000400
 8001004:	48000800 	.word	0x48000800
 8001008:	48000c00 	.word	0x48000c00
 800100c:	48001000 	.word	0x48001000
 8001010:	48001400 	.word	0x48001400

08001014 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <setRowOffsets+0x3c>)
 8001028:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <setRowOffsets+0x3c>)
 8001030:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <setRowOffsets+0x3c>)
 8001038:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <setRowOffsets+0x3c>)
 8001040:	70da      	strb	r2, [r3, #3]
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200001e4 	.word	0x200001e4

08001054 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8001058:	2001      	movs	r0, #1
 800105a:	f000 f88e 	bl	800117a <command>
  HAL_Delay(2);  // this command takes a long time!
 800105e:	2002      	movs	r0, #2
 8001060:	f004 fc5e 	bl	8005920 <HAL_Delay>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	460a      	mov	r2, r1
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	4613      	mov	r3, r2
 8001076:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8001078:	2304      	movs	r3, #4
 800107a:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d803      	bhi.n	800108c <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	3b01      	subs	r3, #1
 800108a:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <setCursor+0x5c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	79ba      	ldrb	r2, [r7, #6]
 8001092:	429a      	cmp	r2, r3
 8001094:	d303      	bcc.n	800109e <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <setCursor+0x5c>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	3b01      	subs	r3, #1
 800109c:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <setCursor+0x60>)
 80010a2:	5cd2      	ldrb	r2, [r2, r3]
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	4413      	add	r3, r2
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f860 	bl	800117a <command>
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200001e3 	.word	0x200001e3
 80010c8:	200001e4 	.word	0x200001e4

080010cc <noDisplay>:

// Turn the display on/off (quickly)
void noDisplay(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  _displaycontrol &= ~LCD_DISPLAYON;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <noDisplay+0x28>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	f023 0304 	bic.w	r3, r3, #4
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <noDisplay+0x28>)
 80010dc:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <noDisplay+0x28>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f846 	bl	800117a <command>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001e1 	.word	0x200001e1

080010f8 <display>:
void display(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <display+0x28>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <display+0x28>)
 8001108:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <display+0x28>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f043 0308 	orr.w	r3, r3, #8
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f830 	bl	800117a <command>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001e1 	.word	0x200001e1

08001124 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <print+0x12>
 8001132:	2300      	movs	r3, #0
 8001134:	e01d      	b.n	8001172 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff f852 	bl	80001e4 <strlen>
 8001140:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8001146:	e00c      	b.n	8001162 <print+0x3e>
    if (write(*buffer++)) n++;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	617a      	str	r2, [r7, #20]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f820 	bl	8001196 <write>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d008      	beq.n	800116e <print+0x4a>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1e5a      	subs	r2, r3, #1
 8001166:	613a      	str	r2, [r7, #16]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1ed      	bne.n	8001148 <print+0x24>
 800116c:	e000      	b.n	8001170 <print+0x4c>
    else break;
 800116e:	bf00      	nop
  }
  return n;
 8001170:	68fb      	ldr	r3, [r7, #12]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f813 	bl	80011b4 <send>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <write>:

inline size_t write(uint8_t value) {
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2101      	movs	r1, #1
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 f805 	bl	80011b4 <send>
  return 1; // assume sucess
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <send+0x6c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a16      	ldr	r2, [pc, #88]	; (8001224 <send+0x70>)
 80011ca:	8811      	ldrh	r1, [r2, #0]
 80011cc:	79ba      	ldrb	r2, [r7, #6]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f006 fa10 	bl	80075f4 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <send+0x74>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	2bff      	cmp	r3, #255	; 0xff
 80011da:	d007      	beq.n	80011ec <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <send+0x6c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a11      	ldr	r2, [pc, #68]	; (8001228 <send+0x74>)
 80011e2:	8811      	ldrh	r1, [r2, #0]
 80011e4:	2200      	movs	r2, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f006 fa04 	bl	80075f4 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <send+0x78>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <send+0x4e>
    write8bits(value); 
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f86c 	bl	80012d8 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8001200:	e009      	b.n	8001216 <send+0x62>
    write4bits(value>>4);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f83b 	bl	8001284 <write4bits>
    write4bits(value);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f837 	bl	8001284 <write4bits>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200001dc 	.word	0x200001dc
 8001224:	200001c6 	.word	0x200001c6
 8001228:	200001c8 	.word	0x200001c8
 800122c:	200001e0 	.word	0x200001e0

08001230 <pulseEnable>:

void pulseEnable(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <pulseEnable+0x4c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a11      	ldr	r2, [pc, #68]	; (8001280 <pulseEnable+0x50>)
 800123a:	8811      	ldrh	r1, [r2, #0]
 800123c:	2200      	movs	r2, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f006 f9d8 	bl	80075f4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8001244:	2001      	movs	r0, #1
 8001246:	f004 fb6b 	bl	8005920 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <pulseEnable+0x4c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <pulseEnable+0x50>)
 8001250:	8811      	ldrh	r1, [r2, #0]
 8001252:	2201      	movs	r2, #1
 8001254:	4618      	mov	r0, r3
 8001256:	f006 f9cd 	bl	80075f4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 800125a:	2001      	movs	r0, #1
 800125c:	f004 fb60 	bl	8005920 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <pulseEnable+0x4c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <pulseEnable+0x50>)
 8001266:	8811      	ldrh	r1, [r2, #0]
 8001268:	2200      	movs	r2, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f006 f9c2 	bl	80075f4 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8001270:	2001      	movs	r0, #1
 8001272:	f004 fb55 	bl	8005920 <HAL_Delay>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200001dc 	.word	0x200001dc
 8001280:	200001ca 	.word	0x200001ca

08001284 <write4bits>:

void write4bits(uint8_t value) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	e013      	b.n	80012bc <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <write4bits+0x4c>)
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <write4bits+0x50>)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80012a0:	79fa      	ldrb	r2, [r7, #7]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	fa42 f303 	asr.w	r3, r2, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	f006 f99f 	bl	80075f4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3301      	adds	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	dde8      	ble.n	8001294 <write4bits+0x10>
  }

  pulseEnable();
 80012c2:	f7ff ffb5 	bl	8001230 <pulseEnable>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200001dc 	.word	0x200001dc
 80012d4:	200001cc 	.word	0x200001cc

080012d8 <write8bits>:

void write8bits(uint8_t value) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	e013      	b.n	8001310 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <write8bits+0x4c>)
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <write8bits+0x50>)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	fa42 f303 	asr.w	r3, r2, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	f006 f975 	bl	80075f4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3301      	adds	r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b07      	cmp	r3, #7
 8001314:	dde8      	ble.n	80012e8 <write8bits+0x10>
  }
  
  pulseEnable();
 8001316:	f7ff ff8b 	bl	8001230 <pulseEnable>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200001dc 	.word	0x200001dc
 8001328:	200001cc 	.word	0x200001cc

0800132c <buzzerInit>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
TIM_HandleTypeDef *buzzerPwmTimer;
uint32_t buzzerPwmChannel;
TIM_HandleTypeDef htim2;
void buzzerInit() {
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
    buzzerPwmTimer = &htim2;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <buzzerInit+0x24>)
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <buzzerInit+0x28>)
 8001334:	601a      	str	r2, [r3, #0]
    buzzerPwmChannel = TIM_CHANNEL_1;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <buzzerInit+0x2c>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Start(buzzerPwmTimer, buzzerPwmChannel);
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <buzzerInit+0x24>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a05      	ldr	r2, [pc, #20]	; (8001358 <buzzerInit+0x2c>)
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f008 f986 	bl	8009658 <HAL_TIM_PWM_Start>
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000078c 	.word	0x2000078c
 8001354:	20000338 	.word	0x20000338
 8001358:	20000790 	.word	0x20000790

0800135c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001362:	f004 fa77 	bl	8005854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001366:	f000 f85f 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136a:	f000 fb5b 	bl	8001a24 <MX_GPIO_Init>
  MX_I2C1_Init();
 800136e:	f000 f98f 	bl	8001690 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001372:	f000 f9cd 	bl	8001710 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001376:	f000 fa09 	bl	800178c <MX_TIM2_Init>
  MX_TIM3_Init();
 800137a:	f000 fa7d 	bl	8001878 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800137e:	f000 faff 	bl	8001980 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8001382:	f000 fb2d 	bl	80019e0 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8001386:	f000 f8b5 	bl	80014f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800138a:	f000 f923 	bl	80015d4 <MX_ADC2_Init>
  MX_TIM6_Init();
 800138e:	f000 fac1 	bl	8001914 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	buzzerInit();
 8001392:	f7ff ffcb 	bl	800132c <buzzerInit>
    HAL_ADC_Start_IT(&hadc1);//light
 8001396:	481e      	ldr	r0, [pc, #120]	; (8001410 <main+0xb4>)
 8001398:	f004 fce4 	bl	8005d64 <HAL_ADC_Start_IT>
    HAL_ADC_Start_IT(&hadc2);
 800139c:	481d      	ldr	r0, [pc, #116]	; (8001414 <main+0xb8>)
 800139e:	f004 fce1 	bl	8005d64 <HAL_ADC_Start_IT>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80013a2:	2201      	movs	r2, #1
 80013a4:	2101      	movs	r1, #1
 80013a6:	481c      	ldr	r0, [pc, #112]	; (8001418 <main+0xbc>)
 80013a8:	f006 f924 	bl	80075f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2102      	movs	r1, #2
 80013b0:	4819      	ldr	r0, [pc, #100]	; (8001418 <main+0xbc>)
 80013b2:	f006 f91f 	bl	80075f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2104      	movs	r1, #4
 80013ba:	4817      	ldr	r0, [pc, #92]	; (8001418 <main+0xbc>)
 80013bc:	f006 f91a 	bl	80075f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2108      	movs	r1, #8
 80013c4:	4814      	ldr	r0, [pc, #80]	; (8001418 <main+0xbc>)
 80013c6:	f006 f915 	bl	80075f4 <HAL_GPIO_WritePin>
	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 80013ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ce:	9303      	str	r3, [sp, #12]
 80013d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ee:	480a      	ldr	r0, [pc, #40]	; (8001418 <main+0xbc>)
 80013f0:	f7ff fbd4 	bl	8000b9c <LiquidCrystal>
    begin(20,4);
 80013f4:	2104      	movs	r1, #4
 80013f6:	2014      	movs	r0, #20
 80013f8:	f7ff fc68 	bl	8000ccc <begin>
	HAL_TIM_Base_Start_IT(&htim6);
 80013fc:	4807      	ldr	r0, [pc, #28]	; (800141c <main+0xc0>)
 80013fe:	f008 f85f 	bl	80094c0 <HAL_TIM_Base_Start_IT>

    HAL_TIM_Base_Start_IT(&htim3);
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <main+0xc4>)
 8001404:	f008 f85c 	bl	80094c0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim2);
 8001408:	4806      	ldr	r0, [pc, #24]	; (8001424 <main+0xc8>)
 800140a:	f008 f859 	bl	80094c0 <HAL_TIM_Base_Start_IT>
//    print(">> ControlPanel");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800140e:	e7fe      	b.n	800140e <main+0xb2>
 8001410:	200001e8 	.word	0x200001e8
 8001414:	20000238 	.word	0x20000238
 8001418:	48000c00 	.word	0x48000c00
 800141c:	200003d0 	.word	0x200003d0
 8001420:	20000384 	.word	0x20000384
 8001424:	20000338 	.word	0x20000338

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b09e      	sub	sp, #120	; 0x78
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001432:	2228      	movs	r2, #40	; 0x28
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f00a f9fc 	bl	800b834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	223c      	movs	r2, #60	; 0x3c
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f00a f9ee 	bl	800b834 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001458:	2303      	movs	r3, #3
 800145a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800145c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001460:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001466:	2301      	movs	r3, #1
 8001468:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146a:	2310      	movs	r3, #16
 800146c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146e:	2302      	movs	r3, #2
 8001470:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001476:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001478:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800147c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001482:	4618      	mov	r0, r3
 8001484:	f006 faf6 	bl	8007a74 <HAL_RCC_OscConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800148e:	f000 fba9 	bl	8001be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001492:	230f      	movs	r3, #15
 8001494:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001496:	2302      	movs	r3, #2
 8001498:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800149e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014ac:	2101      	movs	r1, #1
 80014ae:	4618      	mov	r0, r3
 80014b0:	f007 fb1e 	bl	8008af0 <HAL_RCC_ClockConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014ba:	f000 fb93 	bl	8001be4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <SystemClock_Config+0xc8>)
 80014c0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80014c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80014d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d6:	463b      	mov	r3, r7
 80014d8:	4618      	mov	r0, r3
 80014da:	f007 fd3f 	bl	8008f5c <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014e4:	f000 fb7e 	bl	8001be4 <Error_Handler>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3778      	adds	r7, #120	; 0x78
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	000200a2 	.word	0x000200a2

080014f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001518:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800151c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800151e:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800152a:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001532:	2200      	movs	r2, #0
 8001534:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001536:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001540:	2200      	movs	r2, #0
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001546:	2201      	movs	r2, #1
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001552:	2201      	movs	r2, #1
 8001554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001560:	2204      	movs	r2, #4
 8001562:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001566:	2200      	movs	r2, #0
 8001568:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800156c:	2200      	movs	r2, #0
 800156e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001570:	4817      	ldr	r0, [pc, #92]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001572:	f004 fa17 	bl	80059a4 <HAL_ADC_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800157c:	f000 fb32 	bl	8001be4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4811      	ldr	r0, [pc, #68]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800158c:	f005 fb5c 	bl	8006c48 <HAL_ADCEx_MultiModeConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001596:	f000 fb25 	bl	8001be4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800159a:	2302      	movs	r3, #2
 800159c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800159e:	2301      	movs	r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80015a6:	2307      	movs	r3, #7
 80015a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_ADC1_Init+0xdc>)
 80015b8:	f005 f85a 	bl	8006670 <HAL_ADC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80015c2:	f000 fb0f 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200001e8 	.word	0x200001e8

080015d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015da:	463b      	mov	r3, r7
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
 80015e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80015ea:	4b27      	ldr	r3, [pc, #156]	; (8001688 <MX_ADC2_Init+0xb4>)
 80015ec:	4a27      	ldr	r2, [pc, #156]	; (800168c <MX_ADC2_Init+0xb8>)
 80015ee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <MX_ADC2_Init+0xb4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015f6:	4b24      	ldr	r3, [pc, #144]	; (8001688 <MX_ADC2_Init+0xb4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <MX_ADC2_Init+0xb4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001604:	2200      	movs	r2, #0
 8001606:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <MX_ADC2_Init+0xb4>)
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001612:	2200      	movs	r2, #0
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001618:	2201      	movs	r2, #1
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <MX_ADC2_Init+0xb4>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001624:	2201      	movs	r2, #1
 8001626:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <MX_ADC2_Init+0xb4>)
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001632:	2204      	movs	r2, #4
 8001634:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001638:	2200      	movs	r2, #0
 800163a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <MX_ADC2_Init+0xb4>)
 800163e:	2200      	movs	r2, #0
 8001640:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001642:	4811      	ldr	r0, [pc, #68]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001644:	f004 f9ae 	bl	80059a4 <HAL_ADC_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800164e:	f000 fac9 	bl	8001be4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001652:	2301      	movs	r3, #1
 8001654:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001656:	2301      	movs	r3, #1
 8001658:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800165e:	2307      	movs	r3, #7
 8001660:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <MX_ADC2_Init+0xb4>)
 8001670:	f004 fffe 	bl	8006670 <HAL_ADC_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800167a:	f000 fab3 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000238 	.word	0x20000238
 800168c:	50000100 	.word	0x50000100

08001690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <MX_I2C1_Init+0x74>)
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <MX_I2C1_Init+0x78>)
 8001698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_I2C1_Init+0x74>)
 800169c:	4a1b      	ldr	r2, [pc, #108]	; (800170c <MX_I2C1_Init+0x7c>)
 800169e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <MX_I2C1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_I2C1_Init+0x74>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <MX_I2C1_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_I2C1_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_I2C1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_I2C1_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_I2C1_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ca:	480e      	ldr	r0, [pc, #56]	; (8001704 <MX_I2C1_Init+0x74>)
 80016cc:	f005 ffcd 	bl	800766a <HAL_I2C_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016d6:	f000 fa85 	bl	8001be4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016da:	2100      	movs	r1, #0
 80016dc:	4809      	ldr	r0, [pc, #36]	; (8001704 <MX_I2C1_Init+0x74>)
 80016de:	f006 f853 	bl	8007788 <HAL_I2CEx_ConfigAnalogFilter>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016e8:	f000 fa7c 	bl	8001be4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016ec:	2100      	movs	r1, #0
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_I2C1_Init+0x74>)
 80016f0:	f006 f895 	bl	800781e <HAL_I2CEx_ConfigDigitalFilter>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016fa:	f000 fa73 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000288 	.word	0x20000288
 8001708:	40005400 	.word	0x40005400
 800170c:	2000090e 	.word	0x2000090e

08001710 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_SPI1_Init+0x74>)
 8001716:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <MX_SPI1_Init+0x78>)
 8001718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_SPI1_Init+0x74>)
 800171c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_SPI1_Init+0x74>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_SPI1_Init+0x74>)
 800172a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800172e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_SPI1_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <MX_SPI1_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_SPI1_Init+0x74>)
 800173e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001742:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_SPI1_Init+0x74>)
 8001746:	2208      	movs	r2, #8
 8001748:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_SPI1_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_SPI1_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_SPI1_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_SPI1_Init+0x74>)
 800175e:	2207      	movs	r2, #7
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_SPI1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_SPI1_Init+0x74>)
 800176a:	2208      	movs	r2, #8
 800176c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_SPI1_Init+0x74>)
 8001770:	f007 fda4 	bl	80092bc <HAL_SPI_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800177a:	f000 fa33 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200002d4 	.word	0x200002d4
 8001788:	40013000 	.word	0x40013000

0800178c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08e      	sub	sp, #56	; 0x38
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ac:	463b      	mov	r3, r7
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	615a      	str	r2, [r3, #20]
 80017bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <MX_TIM2_Init+0xe8>)
 80017c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017c6:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <MX_TIM2_Init+0xe8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b29      	ldr	r3, [pc, #164]	; (8001874 <MX_TIM2_Init+0xe8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017d2:	4b28      	ldr	r3, [pc, #160]	; (8001874 <MX_TIM2_Init+0xe8>)
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017da:	4b26      	ldr	r3, [pc, #152]	; (8001874 <MX_TIM2_Init+0xe8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e0:	4b24      	ldr	r3, [pc, #144]	; (8001874 <MX_TIM2_Init+0xe8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017e6:	4823      	ldr	r0, [pc, #140]	; (8001874 <MX_TIM2_Init+0xe8>)
 80017e8:	f007 fe13 	bl	8009412 <HAL_TIM_Base_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80017f2:	f000 f9f7 	bl	8001be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001800:	4619      	mov	r1, r3
 8001802:	481c      	ldr	r0, [pc, #112]	; (8001874 <MX_TIM2_Init+0xe8>)
 8001804:	f008 fa5c 	bl	8009cc0 <HAL_TIM_ConfigClockSource>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800180e:	f000 f9e9 	bl	8001be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001812:	4818      	ldr	r0, [pc, #96]	; (8001874 <MX_TIM2_Init+0xe8>)
 8001814:	f007 febe 	bl	8009594 <HAL_TIM_PWM_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800181e:	f000 f9e1 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	4810      	ldr	r0, [pc, #64]	; (8001874 <MX_TIM2_Init+0xe8>)
 8001832:	f008 ff67 	bl	800a704 <HAL_TIMEx_MasterConfigSynchronization>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800183c:	f000 f9d2 	bl	8001be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001840:	2360      	movs	r3, #96	; 0x60
 8001842:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	2200      	movs	r2, #0
 8001854:	4619      	mov	r1, r3
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <MX_TIM2_Init+0xe8>)
 8001858:	f008 f91e 	bl	8009a98 <HAL_TIM_PWM_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001862:	f000 f9bf 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001866:	4803      	ldr	r0, [pc, #12]	; (8001874 <MX_TIM2_Init+0xe8>)
 8001868:	f000 fb56 	bl	8001f18 <HAL_TIM_MspPostInit>

}
 800186c:	bf00      	nop
 800186e:	3738      	adds	r7, #56	; 0x38
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000338 	.word	0x20000338

08001878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <MX_TIM3_Init+0x94>)
 8001898:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <MX_TIM3_Init+0x98>)
 800189a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4799;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <MX_TIM3_Init+0x94>)
 800189e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80018a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <MX_TIM3_Init+0x94>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <MX_TIM3_Init+0x94>)
 80018ac:	2264      	movs	r2, #100	; 0x64
 80018ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_TIM3_Init+0x94>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <MX_TIM3_Init+0x94>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018bc:	4813      	ldr	r0, [pc, #76]	; (800190c <MX_TIM3_Init+0x94>)
 80018be:	f007 fda8 	bl	8009412 <HAL_TIM_Base_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80018c8:	f000 f98c 	bl	8001be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	4619      	mov	r1, r3
 80018d8:	480c      	ldr	r0, [pc, #48]	; (800190c <MX_TIM3_Init+0x94>)
 80018da:	f008 f9f1 	bl	8009cc0 <HAL_TIM_ConfigClockSource>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80018e4:	f000 f97e 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_TIM3_Init+0x94>)
 80018f6:	f008 ff05 	bl	800a704 <HAL_TIMEx_MasterConfigSynchronization>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001900:	f000 f970 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000384 	.word	0x20000384
 8001910:	40000400 	.word	0x40000400

08001914 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_TIM6_Init+0x64>)
 8001926:	4a15      	ldr	r2, [pc, #84]	; (800197c <MX_TIM6_Init+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4799;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <MX_TIM6_Init+0x64>)
 800192c:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001930:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_TIM6_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_TIM6_Init+0x64>)
 800193a:	2264      	movs	r2, #100	; 0x64
 800193c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_TIM6_Init+0x64>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <MX_TIM6_Init+0x64>)
 8001946:	f007 fd64 	bl	8009412 <HAL_TIM_Base_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001950:	f000 f948 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_TIM6_Init+0x64>)
 8001962:	f008 fecf 	bl	800a704 <HAL_TIMEx_MasterConfigSynchronization>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800196c:	f000 f93a 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200003d0 	.word	0x200003d0
 800197c:	40001000 	.word	0x40001000

08001980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 8001986:	4a15      	ldr	r2, [pc, #84]	; (80019dc <MX_USART2_UART_Init+0x5c>)
 8001988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 800198c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019be:	2200      	movs	r2, #0
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_USART2_UART_Init+0x58>)
 80019c4:	f008 ff3c 	bl	800a840 <HAL_UART_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019ce:	f000 f909 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000041c 	.word	0x2000041c
 80019dc:	40004400 	.word	0x40004400

080019e0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <MX_USB_PCD_Init+0x3c>)
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <MX_USB_PCD_Init+0x40>)
 80019e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_USB_PCD_Init+0x3c>)
 80019ec:	2208      	movs	r2, #8
 80019ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <MX_USB_PCD_Init+0x3c>)
 80019f2:	2202      	movs	r2, #2
 80019f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_USB_PCD_Init+0x3c>)
 80019f8:	2202      	movs	r2, #2
 80019fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <MX_USB_PCD_Init+0x3c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_USB_PCD_Init+0x3c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <MX_USB_PCD_Init+0x3c>)
 8001a0a:	f005 ff54 	bl	80078b6 <HAL_PCD_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001a14:	f000 f8e6 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	200004a0 	.word	0x200004a0
 8001a20:	40005c00 	.word	0x40005c00

08001a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a3a:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	4a65      	ldr	r2, [pc, #404]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a44:	6153      	str	r3, [r2, #20]
 8001a46:	4b63      	ldr	r3, [pc, #396]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	4b60      	ldr	r3, [pc, #384]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	4a5f      	ldr	r2, [pc, #380]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001a58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a5c:	6153      	str	r3, [r2, #20]
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a6a:	4b5a      	ldr	r3, [pc, #360]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	4a59      	ldr	r2, [pc, #356]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001a70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a74:	6153      	str	r3, [r2, #20]
 8001a76:	4b57      	ldr	r3, [pc, #348]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	4b54      	ldr	r3, [pc, #336]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	4a53      	ldr	r2, [pc, #332]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8c:	6153      	str	r3, [r2, #20]
 8001a8e:	4b51      	ldr	r3, [pc, #324]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9a:	4b4e      	ldr	r3, [pc, #312]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4a4d      	ldr	r2, [pc, #308]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001aa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001aa4:	6153      	str	r3, [r2, #20]
 8001aa6:	4b4b      	ldr	r3, [pc, #300]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4b48      	ldr	r3, [pc, #288]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	4a47      	ldr	r2, [pc, #284]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001abc:	6153      	str	r3, [r2, #20]
 8001abe:	4b45      	ldr	r3, [pc, #276]	; (8001bd4 <MX_GPIO_Init+0x1b0>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001aca:	2200      	movs	r2, #0
 8001acc:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001ad0:	4841      	ldr	r0, [pc, #260]	; (8001bd8 <MX_GPIO_Init+0x1b4>)
 8001ad2:	f005 fd8f 	bl	80075f4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_Pin|LCDD9_Pin|LCDD10_Pin|LCDD11_Pin
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f647 710f 	movw	r1, #32527	; 0x7f0f
 8001adc:	483f      	ldr	r0, [pc, #252]	; (8001bdc <MX_GPIO_Init+0x1b8>)
 8001ade:	f005 fd89 	bl	80075f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001ae2:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001ae6:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	4837      	ldr	r0, [pc, #220]	; (8001bd8 <MX_GPIO_Init+0x1b4>)
 8001afc:	f005 fbe8 	bl	80072d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : keyPad_Pin PC1 PC2 PC3
                           PC5 */
  GPIO_InitStruct.Pin = keyPad_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b00:	232f      	movs	r3, #47	; 0x2f
 8001b02:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	4619      	mov	r1, r3
 8001b14:	4832      	ldr	r0, [pc, #200]	; (8001be0 <MX_GPIO_Init+0x1bc>)
 8001b16:	f005 fbdb 	bl	80072d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b30:	f005 fbce 	bl	80072d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 8001b34:	2310      	movs	r3, #16
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4619      	mov	r1, r3
 8001b48:	4825      	ldr	r0, [pc, #148]	; (8001be0 <MX_GPIO_Init+0x1bc>)
 8001b4a:	f005 fbc1 	bl	80072d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Pin LCDD9_Pin LCDD10_Pin LCDD11_Pin
                           LCDD12_Pin LCDD13_Pin LCDD14_Pin keyPadO_Pin
                           PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = LCD_Pin|LCDD9_Pin|LCDD10_Pin|LCDD11_Pin
 8001b4e:	f647 730f 	movw	r3, #32527	; 0x7f0f
 8001b52:	61fb      	str	r3, [r7, #28]
                          |LCDD12_Pin|LCDD13_Pin|LCDD14_Pin|keyPadO_Pin
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b60:	f107 031c 	add.w	r3, r7, #28
 8001b64:	4619      	mov	r1, r3
 8001b66:	481d      	ldr	r0, [pc, #116]	; (8001bdc <MX_GPIO_Init+0x1b8>)
 8001b68:	f005 fbb2 	bl	80072d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2101      	movs	r1, #1
 8001b70:	2006      	movs	r0, #6
 8001b72:	f005 fb00 	bl	8007176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b76:	2006      	movs	r0, #6
 8001b78:	f005 fb19 	bl	80071ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2101      	movs	r1, #1
 8001b80:	2007      	movs	r0, #7
 8001b82:	f005 faf8 	bl	8007176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b86:	2007      	movs	r0, #7
 8001b88:	f005 fb11 	bl	80071ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 1, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2101      	movs	r1, #1
 8001b90:	2008      	movs	r0, #8
 8001b92:	f005 faf0 	bl	8007176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001b96:	2008      	movs	r0, #8
 8001b98:	f005 fb09 	bl	80071ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	2009      	movs	r0, #9
 8001ba2:	f005 fae8 	bl	8007176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001ba6:	2009      	movs	r0, #9
 8001ba8:	f005 fb01 	bl	80071ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2101      	movs	r1, #1
 8001bb0:	200a      	movs	r0, #10
 8001bb2:	f005 fae0 	bl	8007176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001bb6:	200a      	movs	r0, #10
 8001bb8:	f005 faf9 	bl	80071ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	2017      	movs	r0, #23
 8001bc2:	f005 fad8 	bl	8007176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001bc6:	2017      	movs	r0, #23
 8001bc8:	f005 faf1 	bl	80071ae <HAL_NVIC_EnableIRQ>

}
 8001bcc:	bf00      	nop
 8001bce:	3730      	adds	r7, #48	; 0x30
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	48001000 	.word	0x48001000
 8001bdc:	48000c00 	.word	0x48000c00
 8001be0:	48000800 	.word	0x48000800

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be8:	b672      	cpsid	i
}
 8001bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bec:	e7fe      	b.n	8001bec <Error_Handler+0x8>
	...

08001bf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_MspInit+0x44>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <HAL_MspInit+0x44>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6193      	str	r3, [r2, #24]
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_MspInit+0x44>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_MspInit+0x44>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_MspInit+0x44>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	61d3      	str	r3, [r2, #28]
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_MspInit+0x44>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001c26:	2006      	movs	r0, #6
 8001c28:	f005 fa9a 	bl	8007160 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08c      	sub	sp, #48	; 0x30
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c58:	d136      	bne.n	8001cc8 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c5a:	4b3b      	ldr	r3, [pc, #236]	; (8001d48 <HAL_ADC_MspInit+0x110>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4a39      	ldr	r2, [pc, #228]	; (8001d48 <HAL_ADC_MspInit+0x110>)
 8001c62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c64:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <HAL_ADC_MspInit+0x110>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10b      	bne.n	8001c84 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c6c:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6153      	str	r3, [r2, #20]
 8001c78:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	4a30      	ldr	r2, [pc, #192]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8e:	6153      	str	r3, [r2, #20]
 8001c90:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = LUM_Pin;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LUM_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb2:	f005 fb0d 	bl	80072d0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2012      	movs	r0, #18
 8001cbc:	f005 fa5b 	bl	8007176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001cc0:	2012      	movs	r0, #18
 8001cc2:	f005 fa74 	bl	80071ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001cc6:	e03a      	b.n	8001d3e <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a20      	ldr	r2, [pc, #128]	; (8001d50 <HAL_ADC_MspInit+0x118>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d135      	bne.n	8001d3e <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_ADC_MspInit+0x110>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <HAL_ADC_MspInit+0x110>)
 8001cda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_ADC_MspInit+0x110>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d10b      	bne.n	8001cfc <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cee:	6153      	str	r3, [r2, #20]
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d06:	6153      	str	r3, [r2, #20]
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TEM_Pin;
 8001d14:	2310      	movs	r3, #16
 8001d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TEM_GPIO_Port, &GPIO_InitStruct);
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	4619      	mov	r1, r3
 8001d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2a:	f005 fad1 	bl	80072d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2012      	movs	r0, #18
 8001d34:	f005 fa1f 	bl	8007176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d38:	2012      	movs	r0, #18
 8001d3a:	f005 fa38 	bl	80071ae <HAL_NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3730      	adds	r7, #48	; 0x30
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000794 	.word	0x20000794
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	50000100 	.word	0x50000100

08001d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_I2C_MspInit+0x7c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d127      	bne.n	8001dc6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <HAL_I2C_MspInit+0x80>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	4a16      	ldr	r2, [pc, #88]	; (8001dd4 <HAL_I2C_MspInit+0x80>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d80:	6153      	str	r3, [r2, #20]
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <HAL_I2C_MspInit+0x80>)
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001d8e:	23c0      	movs	r3, #192	; 0xc0
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d92:	2312      	movs	r3, #18
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d96:	2301      	movs	r3, #1
 8001d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <HAL_I2C_MspInit+0x84>)
 8001daa:	f005 fa91 	bl	80072d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_I2C_MspInit+0x80>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <HAL_I2C_MspInit+0x80>)
 8001db4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001db8:	61d3      	str	r3, [r2, #28]
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_I2C_MspInit+0x80>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3728      	adds	r7, #40	; 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40005400 	.word	0x40005400
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	48000400 	.word	0x48000400

08001ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_SPI_MspInit+0x7c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d128      	bne.n	8001e50 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e08:	6193      	str	r3, [r2, #24]
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e20:	6153      	str	r3, [r2, #20]
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_SPI_MspInit+0x80>)
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001e2e:	23e0      	movs	r3, #224	; 0xe0
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e3e:	2305      	movs	r3, #5
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4c:	f005 fa40 	bl	80072d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40013000 	.word	0x40013000
 8001e5c:	40021000 	.word	0x40021000

08001e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e70:	d114      	bne.n	8001e9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e72:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <HAL_TIM_Base_MspInit+0xac>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4a25      	ldr	r2, [pc, #148]	; (8001f0c <HAL_TIM_Base_MspInit+0xac>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	61d3      	str	r3, [r2, #28]
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <HAL_TIM_Base_MspInit+0xac>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	201c      	movs	r0, #28
 8001e90:	f005 f971 	bl	8007176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e94:	201c      	movs	r0, #28
 8001e96:	f005 f98a 	bl	80071ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001e9a:	e032      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <HAL_TIM_Base_MspInit+0xb0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d114      	bne.n	8001ed0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ea6:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_TIM_Base_MspInit+0xac>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <HAL_TIM_Base_MspInit+0xac>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_TIM_Base_MspInit+0xac>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	201d      	movs	r0, #29
 8001ec4:	f005 f957 	bl	8007176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ec8:	201d      	movs	r0, #29
 8001eca:	f005 f970 	bl	80071ae <HAL_NVIC_EnableIRQ>
}
 8001ece:	e018      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <HAL_TIM_Base_MspInit+0xb4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d113      	bne.n	8001f02 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_TIM_Base_MspInit+0xac>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <HAL_TIM_Base_MspInit+0xac>)
 8001ee0:	f043 0310 	orr.w	r3, r3, #16
 8001ee4:	61d3      	str	r3, [r2, #28]
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_TIM_Base_MspInit+0xac>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	2036      	movs	r0, #54	; 0x36
 8001ef8:	f005 f93d 	bl	8007176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001efc:	2036      	movs	r0, #54	; 0x36
 8001efe:	f005 f956 	bl	80071ae <HAL_NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40001000 	.word	0x40001000

08001f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d11d      	bne.n	8001f76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_TIM_MspPostInit+0x68>)
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	4a10      	ldr	r2, [pc, #64]	; (8001f80 <HAL_TIM_MspPostInit+0x68>)
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	6153      	str	r3, [r2, #20]
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HAL_TIM_MspPostInit+0x68>)
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f64:	2301      	movs	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f72:	f005 f9ad 	bl	80072d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f76:	bf00      	nop
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <HAL_UART_MspInit+0x8c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d130      	bne.n	8002008 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_UART_MspInit+0x90>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <HAL_UART_MspInit+0x90>)
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	61d3      	str	r3, [r2, #28]
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_UART_MspInit+0x90>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_UART_MspInit+0x90>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4a14      	ldr	r2, [pc, #80]	; (8002014 <HAL_UART_MspInit+0x90>)
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	6153      	str	r3, [r2, #20]
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_UART_MspInit+0x90>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fd6:	230c      	movs	r3, #12
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff4:	f005 f96c 	bl	80072d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2026      	movs	r0, #38	; 0x26
 8001ffe:	f005 f8ba 	bl	8007176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002002:	2026      	movs	r0, #38	; 0x26
 8002004:	f005 f8d3 	bl	80071ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002008:	bf00      	nop
 800200a:	3728      	adds	r7, #40	; 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40004400 	.word	0x40004400
 8002014:	40021000 	.word	0x40021000

08002018 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a18      	ldr	r2, [pc, #96]	; (8002098 <HAL_PCD_MspInit+0x80>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d129      	bne.n	800208e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_PCD_MspInit+0x84>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <HAL_PCD_MspInit+0x84>)
 8002040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002044:	6153      	str	r3, [r2, #20]
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_PCD_MspInit+0x84>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002052:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002064:	230e      	movs	r3, #14
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002072:	f005 f92d 	bl	80072d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_PCD_MspInit+0x84>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <HAL_PCD_MspInit+0x84>)
 800207c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002080:	61d3      	str	r3, [r2, #28]
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_PCD_MspInit+0x84>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800208e:	bf00      	nop
 8002090:	3728      	adds	r7, #40	; 0x28
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40005c00 	.word	0x40005c00
 800209c:	40021000 	.word	0x40021000

080020a0 <createNode>:
    struct TreeNode* child8;
    struct TreeNode* parent;
    struct menuScreen screen;
};

struct TreeNode* createNode(struct menuScreen screen, struct TreeNode* parent) {
 80020a0:	b084      	sub	sp, #16
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	f107 0c10 	add.w	ip, r7, #16
 80020ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
 80020b0:	f44f 709a 	mov.w	r0, #308	; 0x134
 80020b4:	f009 fba8 	bl	800b808 <malloc>
 80020b8:	4603      	mov	r3, r0
 80020ba:	607b      	str	r3, [r7, #4]
    newNode->child1 = NULL;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
    newNode->child2 = NULL;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
    newNode->child3 = NULL;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
    newNode->child4 = NULL;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	60da      	str	r2, [r3, #12]
    newNode->child5 = NULL;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
    newNode->child6 = NULL;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
    newNode->child7 = NULL;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
    newNode->child8 = NULL;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	61da      	str	r2, [r3, #28]
    newNode->parent = parent;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80020f2:	621a      	str	r2, [r3, #32]
    newNode->screen = screen;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3324      	adds	r3, #36	; 0x24
 80020f8:	f107 0110 	add.w	r1, r7, #16
 80020fc:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002100:	4618      	mov	r0, r3
 8002102:	f009 fb89 	bl	800b818 <memcpy>
    return newNode;
 8002106:	687b      	ldr	r3, [r7, #4]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002112:	b004      	add	sp, #16
 8002114:	4770      	bx	lr
	...

08002118 <GenerateMenu>:
struct TreeNode* node19;
struct TreeNode* node_1;

struct TreeNode* currentNode;

void GenerateMenu(){
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211a:	f5ad 5dba 	sub.w	sp, sp, #5952	; 0x1740
 800211e:	b087      	sub	sp, #28
 8002120:	af42      	add	r7, sp, #264	; 0x108
	struct menuScreen mainMenu = {0, 1, 1, {">> ControlPanel   "}, ""};
 8002122:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002126:	f103 0310 	add.w	r3, r3, #16
 800212a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800212e:	4618      	mov	r0, r3
 8002130:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002134:	461a      	mov	r2, r3
 8002136:	2100      	movs	r1, #0
 8002138:	f009 fb7c 	bl	800b834 <memset>
 800213c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002140:	f103 0310 	add.w	r3, r3, #16
 8002144:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002148:	2201      	movs	r2, #1
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002150:	f103 0310 	add.w	r3, r3, #16
 8002154:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002158:	2201      	movs	r2, #1
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002160:	f103 0310 	add.w	r3, r3, #16
 8002164:	f5a3 7688 	sub.w	r6, r3, #272	; 0x110
 8002168:	4bd8      	ldr	r3, [pc, #864]	; (80024cc <GenerateMenu+0x3b4>)
 800216a:	f106 040c 	add.w	r4, r6, #12
 800216e:	461d      	mov	r5, r3
 8002170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	8022      	strh	r2, [r4, #0]
 800217a:	3402      	adds	r4, #2
 800217c:	0c1b      	lsrs	r3, r3, #16
 800217e:	7023      	strb	r3, [r4, #0]
 8002180:	2300      	movs	r3, #0
 8002182:	77f3      	strb	r3, [r6, #31]
    struct menuScreen controlPanel = {1, 7, 1, {">> Temperature   ", "> Security       ", "> Lights       ", "> Scenarios    ", "> StartSetting   ","> AddScenario   ","> ShutDown   "}, ""};
 8002184:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002188:	f103 0310 	add.w	r3, r3, #16
 800218c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002190:	4618      	mov	r0, r3
 8002192:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002196:	461a      	mov	r2, r3
 8002198:	2100      	movs	r1, #0
 800219a:	f009 fb4b 	bl	800b834 <memset>
 800219e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80021a2:	f103 0310 	add.w	r3, r3, #16
 80021a6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80021b2:	f103 0310 	add.w	r3, r3, #16
 80021b6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80021ba:	2207      	movs	r2, #7
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80021c2:	f103 0310 	add.w	r3, r3, #16
 80021c6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80021ca:	2201      	movs	r2, #1
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80021d2:	f103 0310 	add.w	r3, r3, #16
 80021d6:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 80021da:	4bbd      	ldr	r3, [pc, #756]	; (80024d0 <GenerateMenu+0x3b8>)
 80021dc:	f106 040c 	add.w	r4, r6, #12
 80021e0:	461d      	mov	r5, r3
 80021e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e6:	682b      	ldr	r3, [r5, #0]
 80021e8:	8023      	strh	r3, [r4, #0]
 80021ea:	2300      	movs	r3, #0
 80021ec:	83f3      	strh	r3, [r6, #30]
 80021ee:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80021f2:	f103 0310 	add.w	r3, r3, #16
 80021f6:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 80021fa:	4bb6      	ldr	r3, [pc, #728]	; (80024d4 <GenerateMenu+0x3bc>)
 80021fc:	f106 0420 	add.w	r4, r6, #32
 8002200:	461d      	mov	r5, r3
 8002202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002206:	682b      	ldr	r3, [r5, #0]
 8002208:	8023      	strh	r3, [r4, #0]
 800220a:	2300      	movs	r3, #0
 800220c:	8673      	strh	r3, [r6, #50]	; 0x32
 800220e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002212:	f103 0310 	add.w	r3, r3, #16
 8002216:	f5a3 7408 	sub.w	r4, r3, #544	; 0x220
 800221a:	4baf      	ldr	r3, [pc, #700]	; (80024d8 <GenerateMenu+0x3c0>)
 800221c:	f104 0534 	add.w	r5, r4, #52	; 0x34
 8002220:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002222:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002226:	2300      	movs	r3, #0
 8002228:	6463      	str	r3, [r4, #68]	; 0x44
 800222a:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800222e:	f103 0310 	add.w	r3, r3, #16
 8002232:	f5a3 7408 	sub.w	r4, r3, #544	; 0x220
 8002236:	4ba9      	ldr	r3, [pc, #676]	; (80024dc <GenerateMenu+0x3c4>)
 8002238:	f104 0548 	add.w	r5, r4, #72	; 0x48
 800223c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800223e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002242:	2300      	movs	r3, #0
 8002244:	65a3      	str	r3, [r4, #88]	; 0x58
 8002246:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800224a:	f103 0310 	add.w	r3, r3, #16
 800224e:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 8002252:	4ba3      	ldr	r3, [pc, #652]	; (80024e0 <GenerateMenu+0x3c8>)
 8002254:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 8002258:	461d      	mov	r5, r3
 800225a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225e:	682b      	ldr	r3, [r5, #0]
 8002260:	8023      	strh	r3, [r4, #0]
 8002262:	2300      	movs	r3, #0
 8002264:	f8a6 306e 	strh.w	r3, [r6, #110]	; 0x6e
 8002268:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800226c:	f103 0310 	add.w	r3, r3, #16
 8002270:	f5a3 7608 	sub.w	r6, r3, #544	; 0x220
 8002274:	4b9b      	ldr	r3, [pc, #620]	; (80024e4 <GenerateMenu+0x3cc>)
 8002276:	f106 0470 	add.w	r4, r6, #112	; 0x70
 800227a:	461d      	mov	r5, r3
 800227c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800227e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002280:	682b      	ldr	r3, [r5, #0]
 8002282:	7023      	strb	r3, [r4, #0]
 8002284:	f106 0381 	add.w	r3, r6, #129	; 0x81
 8002288:	2200      	movs	r2, #0
 800228a:	801a      	strh	r2, [r3, #0]
 800228c:	709a      	strb	r2, [r3, #2]
 800228e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002292:	f103 0310 	add.w	r3, r3, #16
 8002296:	f5a3 7508 	sub.w	r5, r3, #544	; 0x220
 800229a:	4b93      	ldr	r3, [pc, #588]	; (80024e8 <GenerateMenu+0x3d0>)
 800229c:	f105 0484 	add.w	r4, r5, #132	; 0x84
 80022a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a2:	c407      	stmia	r4!, {r0, r1, r2}
 80022a4:	8023      	strh	r3, [r4, #0]
 80022a6:	f105 0392 	add.w	r3, r5, #146	; 0x92
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	809a      	strh	r2, [r3, #4]
    struct menuScreen temperature = {2, 2, 1, {">> Threshold    ", "> AlarmSound   "}, ""};
 80022b0:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80022b4:	f103 0310 	add.w	r3, r3, #16
 80022b8:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80022bc:	4618      	mov	r0, r3
 80022be:	f44f 7388 	mov.w	r3, #272	; 0x110
 80022c2:	461a      	mov	r2, r3
 80022c4:	2100      	movs	r1, #0
 80022c6:	f009 fab5 	bl	800b834 <memset>
 80022ca:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80022ce:	f103 0310 	add.w	r3, r3, #16
 80022d2:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80022d6:	2202      	movs	r2, #2
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80022de:	f103 0310 	add.w	r3, r3, #16
 80022e2:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80022e6:	2202      	movs	r2, #2
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80022ee:	f103 0310 	add.w	r3, r3, #16
 80022f2:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80022f6:	2201      	movs	r2, #1
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80022fe:	f103 0310 	add.w	r3, r3, #16
 8002302:	f5a3 764c 	sub.w	r6, r3, #816	; 0x330
 8002306:	4b79      	ldr	r3, [pc, #484]	; (80024ec <GenerateMenu+0x3d4>)
 8002308:	f106 040c 	add.w	r4, r6, #12
 800230c:	461d      	mov	r5, r3
 800230e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002312:	682b      	ldr	r3, [r5, #0]
 8002314:	7023      	strb	r3, [r4, #0]
 8002316:	f106 031d 	add.w	r3, r6, #29
 800231a:	2200      	movs	r2, #0
 800231c:	801a      	strh	r2, [r3, #0]
 800231e:	709a      	strb	r2, [r3, #2]
 8002320:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002324:	f103 0310 	add.w	r3, r3, #16
 8002328:	f5a3 744c 	sub.w	r4, r3, #816	; 0x330
 800232c:	4b70      	ldr	r3, [pc, #448]	; (80024f0 <GenerateMenu+0x3d8>)
 800232e:	f104 0520 	add.w	r5, r4, #32
 8002332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002334:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002338:	2300      	movs	r3, #0
 800233a:	6323      	str	r3, [r4, #48]	; 0x30
    struct menuScreen security = {3, 2, 1, {">> Activation   ", "> AlarmSound   "}, ""};
 800233c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002340:	f103 0310 	add.w	r3, r3, #16
 8002344:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002348:	4618      	mov	r0, r3
 800234a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800234e:	461a      	mov	r2, r3
 8002350:	2100      	movs	r1, #0
 8002352:	f009 fa6f 	bl	800b834 <memset>
 8002356:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800235a:	f103 0310 	add.w	r3, r3, #16
 800235e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002362:	2203      	movs	r2, #3
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800236a:	f103 0310 	add.w	r3, r3, #16
 800236e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002372:	2202      	movs	r2, #2
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800237a:	f103 0310 	add.w	r3, r3, #16
 800237e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002382:	2201      	movs	r2, #1
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800238a:	f103 0310 	add.w	r3, r3, #16
 800238e:	f5a3 6688 	sub.w	r6, r3, #1088	; 0x440
 8002392:	4b58      	ldr	r3, [pc, #352]	; (80024f4 <GenerateMenu+0x3dc>)
 8002394:	f106 040c 	add.w	r4, r6, #12
 8002398:	461d      	mov	r5, r3
 800239a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800239c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800239e:	682b      	ldr	r3, [r5, #0]
 80023a0:	7023      	strb	r3, [r4, #0]
 80023a2:	f106 031d 	add.w	r3, r6, #29
 80023a6:	2200      	movs	r2, #0
 80023a8:	801a      	strh	r2, [r3, #0]
 80023aa:	709a      	strb	r2, [r3, #2]
 80023ac:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80023b0:	f103 0310 	add.w	r3, r3, #16
 80023b4:	f5a3 6488 	sub.w	r4, r3, #1088	; 0x440
 80023b8:	4b4d      	ldr	r3, [pc, #308]	; (80024f0 <GenerateMenu+0x3d8>)
 80023ba:	f104 0520 	add.w	r5, r4, #32
 80023be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80023c4:	2300      	movs	r3, #0
 80023c6:	6323      	str	r3, [r4, #48]	; 0x30
    struct menuScreen lightsControl = {4, 0, 0, {""}, "X  X  X  X"};
 80023c8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80023cc:	f103 0310 	add.w	r3, r3, #16
 80023d0:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80023d4:	4618      	mov	r0, r3
 80023d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80023da:	461a      	mov	r2, r3
 80023dc:	2100      	movs	r1, #0
 80023de:	f009 fa29 	bl	800b834 <memset>
 80023e2:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80023e6:	f103 0310 	add.w	r3, r3, #16
 80023ea:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80023ee:	2204      	movs	r2, #4
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80023f6:	f103 0310 	add.w	r3, r3, #16
 80023fa:	f5a3 64aa 	sub.w	r4, r3, #1360	; 0x550
 80023fe:	4a3e      	ldr	r2, [pc, #248]	; (80024f8 <GenerateMenu+0x3e0>)
 8002400:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8002404:	ca07      	ldmia	r2, {r0, r1, r2}
 8002406:	c303      	stmia	r3!, {r0, r1}
 8002408:	801a      	strh	r2, [r3, #0]
 800240a:	3302      	adds	r3, #2
 800240c:	0c12      	lsrs	r2, r2, #16
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	f104 03b7 	add.w	r3, r4, #183	; 0xb7
 8002414:	2259      	movs	r2, #89	; 0x59
 8002416:	2100      	movs	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f009 fa0b 	bl	800b834 <memset>
    struct menuScreen scenarios = {5, 2, 1, {">> Scenario 1   ", "> Scenario 2   "}, ""};
 800241e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002422:	f103 0310 	add.w	r3, r3, #16
 8002426:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800242a:	4618      	mov	r0, r3
 800242c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002430:	461a      	mov	r2, r3
 8002432:	2100      	movs	r1, #0
 8002434:	f009 f9fe 	bl	800b834 <memset>
 8002438:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800243c:	f103 0310 	add.w	r3, r3, #16
 8002440:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8002444:	2205      	movs	r2, #5
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800244c:	f103 0310 	add.w	r3, r3, #16
 8002450:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8002454:	2202      	movs	r2, #2
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800245c:	f103 0310 	add.w	r3, r3, #16
 8002460:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8002464:	2201      	movs	r2, #1
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800246c:	f103 0310 	add.w	r3, r3, #16
 8002470:	f5a3 66cc 	sub.w	r6, r3, #1632	; 0x660
 8002474:	4b21      	ldr	r3, [pc, #132]	; (80024fc <GenerateMenu+0x3e4>)
 8002476:	f106 040c 	add.w	r4, r6, #12
 800247a:	461d      	mov	r5, r3
 800247c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800247e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002480:	682b      	ldr	r3, [r5, #0]
 8002482:	7023      	strb	r3, [r4, #0]
 8002484:	f106 031d 	add.w	r3, r6, #29
 8002488:	2200      	movs	r2, #0
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	709a      	strb	r2, [r3, #2]
 800248e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002492:	f103 0310 	add.w	r3, r3, #16
 8002496:	f5a3 64cc 	sub.w	r4, r3, #1632	; 0x660
 800249a:	4b19      	ldr	r3, [pc, #100]	; (8002500 <GenerateMenu+0x3e8>)
 800249c:	f104 0520 	add.w	r5, r4, #32
 80024a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80024a6:	2300      	movs	r3, #0
 80024a8:	6323      	str	r3, [r4, #48]	; 0x30
    struct menuScreen nameSet = {6, 1, 0, {"write your phrase"}," " };
 80024aa:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80024ae:	f103 0310 	add.w	r3, r3, #16
 80024b2:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 80024b6:	4618      	mov	r0, r3
 80024b8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80024bc:	461a      	mov	r2, r3
 80024be:	2100      	movs	r1, #0
 80024c0:	f009 f9b8 	bl	800b834 <memset>
 80024c4:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80024c8:	e01c      	b.n	8002504 <GenerateMenu+0x3ec>
 80024ca:	bf00      	nop
 80024cc:	0800d1e8 	.word	0x0800d1e8
 80024d0:	0800d1fc 	.word	0x0800d1fc
 80024d4:	0800d210 	.word	0x0800d210
 80024d8:	0800d224 	.word	0x0800d224
 80024dc:	0800d238 	.word	0x0800d238
 80024e0:	0800d24c 	.word	0x0800d24c
 80024e4:	0800d260 	.word	0x0800d260
 80024e8:	0800d274 	.word	0x0800d274
 80024ec:	0800d288 	.word	0x0800d288
 80024f0:	0800d29c 	.word	0x0800d29c
 80024f4:	0800d2b0 	.word	0x0800d2b0
 80024f8:	0800d2c4 	.word	0x0800d2c4
 80024fc:	0800d328 	.word	0x0800d328
 8002500:	0800d33c 	.word	0x0800d33c
 8002504:	f103 0310 	add.w	r3, r3, #16
 8002508:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 800250c:	2206      	movs	r2, #6
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002514:	f103 0310 	add.w	r3, r3, #16
 8002518:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 800251c:	2201      	movs	r2, #1
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002524:	f103 0310 	add.w	r3, r3, #16
 8002528:	f5a3 66ee 	sub.w	r6, r3, #1904	; 0x770
 800252c:	4bde      	ldr	r3, [pc, #888]	; (80028a8 <GenerateMenu+0x790>)
 800252e:	f106 040c 	add.w	r4, r6, #12
 8002532:	461d      	mov	r5, r3
 8002534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002538:	682b      	ldr	r3, [r5, #0]
 800253a:	8023      	strh	r3, [r4, #0]
 800253c:	2300      	movs	r3, #0
 800253e:	83f3      	strh	r3, [r6, #30]
 8002540:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002544:	f103 0310 	add.w	r3, r3, #16
 8002548:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 800254c:	2220      	movs	r2, #32
 800254e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8002552:	33b0      	adds	r3, #176	; 0xb0
 8002554:	2260      	movs	r2, #96	; 0x60
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f009 f96b 	bl	800b834 <memset>
    struct menuScreen temThresh = {7, 0, 0, {""}, "<  35  >"};
 800255e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002562:	f103 0310 	add.w	r3, r3, #16
 8002566:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 800256a:	4618      	mov	r0, r3
 800256c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002570:	461a      	mov	r2, r3
 8002572:	2100      	movs	r1, #0
 8002574:	f009 f95e 	bl	800b834 <memset>
 8002578:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800257c:	f103 0310 	add.w	r3, r3, #16
 8002580:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 8002584:	2207      	movs	r2, #7
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800258c:	f103 0310 	add.w	r3, r3, #16
 8002590:	f5a3 6408 	sub.w	r4, r3, #2176	; 0x880
 8002594:	4ac5      	ldr	r2, [pc, #788]	; (80028ac <GenerateMenu+0x794>)
 8002596:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 800259a:	ca07      	ldmia	r2, {r0, r1, r2}
 800259c:	c303      	stmia	r3!, {r0, r1}
 800259e:	701a      	strb	r2, [r3, #0]
 80025a0:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 80025a4:	225b      	movs	r2, #91	; 0x5b
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f009 f943 	bl	800b834 <memset>
    struct menuScreen temAlarm = {8, 0, 0, {""}, "<  on  >"};
 80025ae:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80025b2:	f103 0310 	add.w	r3, r3, #16
 80025b6:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 80025ba:	4618      	mov	r0, r3
 80025bc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80025c0:	461a      	mov	r2, r3
 80025c2:	2100      	movs	r1, #0
 80025c4:	f009 f936 	bl	800b834 <memset>
 80025c8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80025cc:	f103 0310 	add.w	r3, r3, #16
 80025d0:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 80025d4:	2208      	movs	r2, #8
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80025dc:	f103 0310 	add.w	r3, r3, #16
 80025e0:	f5a3 6419 	sub.w	r4, r3, #2448	; 0x990
 80025e4:	4ab2      	ldr	r2, [pc, #712]	; (80028b0 <GenerateMenu+0x798>)
 80025e6:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 80025ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80025ec:	c303      	stmia	r3!, {r0, r1}
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 80025f4:	225b      	movs	r2, #91	; 0x5b
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f009 f91b 	bl	800b834 <memset>
    struct menuScreen securityActivation = {9, 0, 0, {""}, "<  on  >"};
 80025fe:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002602:	f103 0310 	add.w	r3, r3, #16
 8002606:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 800260a:	4618      	mov	r0, r3
 800260c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002610:	461a      	mov	r2, r3
 8002612:	2100      	movs	r1, #0
 8002614:	f009 f90e 	bl	800b834 <memset>
 8002618:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800261c:	f103 0310 	add.w	r3, r3, #16
 8002620:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 8002624:	2209      	movs	r2, #9
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800262c:	f103 0310 	add.w	r3, r3, #16
 8002630:	f5a3 642a 	sub.w	r4, r3, #2720	; 0xaa0
 8002634:	4a9e      	ldr	r2, [pc, #632]	; (80028b0 <GenerateMenu+0x798>)
 8002636:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 800263a:	ca07      	ldmia	r2, {r0, r1, r2}
 800263c:	c303      	stmia	r3!, {r0, r1}
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8002644:	225b      	movs	r2, #91	; 0x5b
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f009 f8f3 	bl	800b834 <memset>
    struct menuScreen securityAlarm = {10, 0, 0, {""}, "<  on  >"};
 800264e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002652:	f103 0310 	add.w	r3, r3, #16
 8002656:	f5a3 633b 	sub.w	r3, r3, #2992	; 0xbb0
 800265a:	4618      	mov	r0, r3
 800265c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002660:	461a      	mov	r2, r3
 8002662:	2100      	movs	r1, #0
 8002664:	f009 f8e6 	bl	800b834 <memset>
 8002668:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800266c:	f103 0310 	add.w	r3, r3, #16
 8002670:	f5a3 633b 	sub.w	r3, r3, #2992	; 0xbb0
 8002674:	220a      	movs	r2, #10
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800267c:	f103 0310 	add.w	r3, r3, #16
 8002680:	f5a3 643b 	sub.w	r4, r3, #2992	; 0xbb0
 8002684:	4a8a      	ldr	r2, [pc, #552]	; (80028b0 <GenerateMenu+0x798>)
 8002686:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 800268a:	ca07      	ldmia	r2, {r0, r1, r2}
 800268c:	c303      	stmia	r3!, {r0, r1}
 800268e:	701a      	strb	r2, [r3, #0]
 8002690:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8002694:	225b      	movs	r2, #91	; 0x5b
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f009 f8cb 	bl	800b834 <memset>
    struct menuScreen scenario1 = {11, 8, 0, {"temTHreshold=22","temAlarm=on","securityAlarm=off","securityAlert=on","light1=on","light2=on","light3=off","light4=off"}, "<  off  >"};
 800269e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80026a2:	f103 0310 	add.w	r3, r3, #16
 80026a6:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 80026aa:	4a82      	ldr	r2, [pc, #520]	; (80028b4 <GenerateMenu+0x79c>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	4611      	mov	r1, r2
 80026b0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80026b4:	461a      	mov	r2, r3
 80026b6:	f009 f8af 	bl	800b818 <memcpy>
    struct menuScreen scenario2 = {12, 8, 0, {"temTHreshold=35","temAlarm=on","securityAlarm=on","securityAlert=on","light1=off","light2=off","light3=off","light4=off"}, "<  off  >"};
 80026ba:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80026be:	f103 0310 	add.w	r3, r3, #16
 80026c2:	f5a3 635d 	sub.w	r3, r3, #3536	; 0xdd0
 80026c6:	4a7c      	ldr	r2, [pc, #496]	; (80028b8 <GenerateMenu+0x7a0>)
 80026c8:	4618      	mov	r0, r3
 80026ca:	4611      	mov	r1, r2
 80026cc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80026d0:	461a      	mov	r2, r3
 80026d2:	f009 f8a1 	bl	800b818 <memcpy>

    struct menuScreen AddScenario= {13, 6, 1, {">> temTHreshold    ","> temAlarm    ","> securityAlarm   ","> securityAlert   ","> lights        ","> create         "}, ""};
 80026d6:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80026da:	f103 0310 	add.w	r3, r3, #16
 80026de:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80026e8:	461a      	mov	r2, r3
 80026ea:	2100      	movs	r1, #0
 80026ec:	f009 f8a2 	bl	800b834 <memset>
 80026f0:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80026f4:	f103 0310 	add.w	r3, r3, #16
 80026f8:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 80026fc:	220d      	movs	r2, #13
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002704:	f103 0310 	add.w	r3, r3, #16
 8002708:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 800270c:	2206      	movs	r2, #6
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002714:	f103 0310 	add.w	r3, r3, #16
 8002718:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 800271c:	2201      	movs	r2, #1
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002724:	f103 0310 	add.w	r3, r3, #16
 8002728:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 800272c:	4a63      	ldr	r2, [pc, #396]	; (80028bc <GenerateMenu+0x7a4>)
 800272e:	f103 040c 	add.w	r4, r3, #12
 8002732:	4615      	mov	r5, r2
 8002734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002738:	682b      	ldr	r3, [r5, #0]
 800273a:	6023      	str	r3, [r4, #0]
 800273c:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002740:	f103 0310 	add.w	r3, r3, #16
 8002744:	f5a3 656e 	sub.w	r5, r3, #3808	; 0xee0
 8002748:	4b5d      	ldr	r3, [pc, #372]	; (80028c0 <GenerateMenu+0x7a8>)
 800274a:	f105 0420 	add.w	r4, r5, #32
 800274e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002750:	c407      	stmia	r4!, {r0, r1, r2}
 8002752:	8023      	strh	r3, [r4, #0]
 8002754:	3402      	adds	r4, #2
 8002756:	0c1b      	lsrs	r3, r3, #16
 8002758:	7023      	strb	r3, [r4, #0]
 800275a:	f105 032f 	add.w	r3, r5, #47	; 0x2f
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	711a      	strb	r2, [r3, #4]
 8002764:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002768:	f103 0310 	add.w	r3, r3, #16
 800276c:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 8002770:	4b54      	ldr	r3, [pc, #336]	; (80028c4 <GenerateMenu+0x7ac>)
 8002772:	f106 0434 	add.w	r4, r6, #52	; 0x34
 8002776:	461d      	mov	r5, r3
 8002778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800277a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800277c:	682b      	ldr	r3, [r5, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	8022      	strh	r2, [r4, #0]
 8002782:	3402      	adds	r4, #2
 8002784:	0c1b      	lsrs	r3, r3, #16
 8002786:	7023      	strb	r3, [r4, #0]
 8002788:	2300      	movs	r3, #0
 800278a:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
 800278e:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002792:	f103 0310 	add.w	r3, r3, #16
 8002796:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 800279a:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <GenerateMenu+0x7b0>)
 800279c:	f106 0448 	add.w	r4, r6, #72	; 0x48
 80027a0:	461d      	mov	r5, r3
 80027a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a6:	682b      	ldr	r3, [r5, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	8022      	strh	r2, [r4, #0]
 80027ac:	3402      	adds	r4, #2
 80027ae:	0c1b      	lsrs	r3, r3, #16
 80027b0:	7023      	strb	r3, [r4, #0]
 80027b2:	2300      	movs	r3, #0
 80027b4:	f886 305b 	strb.w	r3, [r6, #91]	; 0x5b
 80027b8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80027bc:	f103 0310 	add.w	r3, r3, #16
 80027c0:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 80027c4:	4b41      	ldr	r3, [pc, #260]	; (80028cc <GenerateMenu+0x7b4>)
 80027c6:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 80027ca:	461d      	mov	r5, r3
 80027cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027d0:	682b      	ldr	r3, [r5, #0]
 80027d2:	7023      	strb	r3, [r4, #0]
 80027d4:	f106 036d 	add.w	r3, r6, #109	; 0x6d
 80027d8:	2200      	movs	r2, #0
 80027da:	801a      	strh	r2, [r3, #0]
 80027dc:	709a      	strb	r2, [r3, #2]
 80027de:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80027e2:	f103 0310 	add.w	r3, r3, #16
 80027e6:	f5a3 666e 	sub.w	r6, r3, #3808	; 0xee0
 80027ea:	4b39      	ldr	r3, [pc, #228]	; (80028d0 <GenerateMenu+0x7b8>)
 80027ec:	f106 0470 	add.w	r4, r6, #112	; 0x70
 80027f0:	461d      	mov	r5, r3
 80027f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f6:	682b      	ldr	r3, [r5, #0]
 80027f8:	8023      	strh	r3, [r4, #0]
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
    struct menuScreen scenTemThreshold = {14,0,0, {""}, "<  10  >"};
 8002800:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002804:	f103 0310 	add.w	r3, r3, #16
 8002808:	f5a3 637f 	sub.w	r3, r3, #4080	; 0xff0
 800280c:	4618      	mov	r0, r3
 800280e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002812:	461a      	mov	r2, r3
 8002814:	2100      	movs	r1, #0
 8002816:	f009 f80d 	bl	800b834 <memset>
 800281a:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800281e:	f103 0310 	add.w	r3, r3, #16
 8002822:	f5a3 637f 	sub.w	r3, r3, #4080	; 0xff0
 8002826:	220e      	movs	r2, #14
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800282e:	f103 0310 	add.w	r3, r3, #16
 8002832:	f5a3 647f 	sub.w	r4, r3, #4080	; 0xff0
 8002836:	4a27      	ldr	r2, [pc, #156]	; (80028d4 <GenerateMenu+0x7bc>)
 8002838:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 800283c:	ca07      	ldmia	r2, {r0, r1, r2}
 800283e:	c303      	stmia	r3!, {r0, r1}
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8002846:	225b      	movs	r2, #91	; 0x5b
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f008 fff2 	bl	800b834 <memset>
    struct menuScreen scenTemAlarm = {15, 0, 0, {""}, "<  on  >"};
 8002850:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002854:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002858:	4618      	mov	r0, r3
 800285a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800285e:	461a      	mov	r2, r3
 8002860:	2100      	movs	r1, #0
 8002862:	f008 ffe7 	bl	800b834 <memset>
 8002866:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800286a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800286e:	220f      	movs	r2, #15
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002876:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 800287a:	4a0d      	ldr	r2, [pc, #52]	; (80028b0 <GenerateMenu+0x798>)
 800287c:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8002880:	ca07      	ldmia	r2, {r0, r1, r2}
 8002882:	c303      	stmia	r3!, {r0, r1}
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 800288a:	225b      	movs	r2, #91	; 0x5b
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f008 ffd0 	bl	800b834 <memset>
	struct menuScreen scenSecAlarm = {16, 0, 0, {""}, "<  on  >"};
 8002894:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002898:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800289c:	4618      	mov	r0, r3
 800289e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80028a2:	461a      	mov	r2, r3
 80028a4:	2100      	movs	r1, #0
 80028a6:	e017      	b.n	80028d8 <GenerateMenu+0x7c0>
 80028a8:	0800d350 	.word	0x0800d350
 80028ac:	0800d364 	.word	0x0800d364
 80028b0:	0800d3c8 	.word	0x0800d3c8
 80028b4:	0800d42c 	.word	0x0800d42c
 80028b8:	0800d53c 	.word	0x0800d53c
 80028bc:	0800d64c 	.word	0x0800d64c
 80028c0:	0800d660 	.word	0x0800d660
 80028c4:	0800d674 	.word	0x0800d674
 80028c8:	0800d688 	.word	0x0800d688
 80028cc:	0800d69c 	.word	0x0800d69c
 80028d0:	0800d6b0 	.word	0x0800d6b0
 80028d4:	0800d6c4 	.word	0x0800d6c4
 80028d8:	f008 ffac 	bl	800b834 <memset>
 80028dc:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80028e0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80028e4:	2210      	movs	r2, #16
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80028ec:	f5a3 7404 	sub.w	r4, r3, #528	; 0x210
 80028f0:	4ad6      	ldr	r2, [pc, #856]	; (8002c4c <GenerateMenu+0xb34>)
 80028f2:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 80028f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80028f8:	c303      	stmia	r3!, {r0, r1}
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8002900:	225b      	movs	r2, #91	; 0x5b
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f008 ff95 	bl	800b834 <memset>
	struct menuScreen scenSecAlert = {17, 0, 0, {""}, "<  on  >"};
 800290a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800290e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8002912:	4618      	mov	r0, r3
 8002914:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002918:	461a      	mov	r2, r3
 800291a:	2100      	movs	r1, #0
 800291c:	f008 ff8a 	bl	800b834 <memset>
 8002920:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002924:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8002928:	2211      	movs	r2, #17
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002930:	f5a3 7448 	sub.w	r4, r3, #800	; 0x320
 8002934:	4ac5      	ldr	r2, [pc, #788]	; (8002c4c <GenerateMenu+0xb34>)
 8002936:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 800293a:	ca07      	ldmia	r2, {r0, r1, r2}
 800293c:	c303      	stmia	r3!, {r0, r1}
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8002944:	225b      	movs	r2, #91	; 0x5b
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f008 ff73 	bl	800b834 <memset>
	struct menuScreen scenLight = {18, 0, 0, {""}, "X  X  X  X"};
 800294e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002952:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8002956:	4618      	mov	r0, r3
 8002958:	f44f 7388 	mov.w	r3, #272	; 0x110
 800295c:	461a      	mov	r2, r3
 800295e:	2100      	movs	r1, #0
 8002960:	f008 ff68 	bl	800b834 <memset>
 8002964:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002968:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800296c:	2212      	movs	r2, #18
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002974:	f5a3 6486 	sub.w	r4, r3, #1072	; 0x430
 8002978:	4ab5      	ldr	r2, [pc, #724]	; (8002c50 <GenerateMenu+0xb38>)
 800297a:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 800297e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002980:	c303      	stmia	r3!, {r0, r1}
 8002982:	801a      	strh	r2, [r3, #0]
 8002984:	3302      	adds	r3, #2
 8002986:	0c12      	lsrs	r2, r2, #16
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	f104 03b7 	add.w	r3, r4, #183	; 0xb7
 800298e:	2259      	movs	r2, #89	; 0x59
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f008 ff4e 	bl	800b834 <memset>
	struct menuScreen create = {19, 0, 0, {""}, "new scenario created"};
 8002998:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800299c:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 80029a0:	4618      	mov	r0, r3
 80029a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80029a6:	461a      	mov	r2, r3
 80029a8:	2100      	movs	r1, #0
 80029aa:	f008 ff43 	bl	800b834 <memset>
 80029ae:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80029b2:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 80029b6:	2213      	movs	r2, #19
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80029be:	f5a3 66a8 	sub.w	r6, r3, #1344	; 0x540
 80029c2:	4ba4      	ldr	r3, [pc, #656]	; (8002c54 <GenerateMenu+0xb3c>)
 80029c4:	f106 04ac 	add.w	r4, r6, #172	; 0xac
 80029c8:	461d      	mov	r5, r3
 80029ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029d2:	6020      	str	r0, [r4, #0]
 80029d4:	3404      	adds	r4, #4
 80029d6:	7021      	strb	r1, [r4, #0]
 80029d8:	f106 03c1 	add.w	r3, r6, #193	; 0xc1
 80029dc:	224f      	movs	r2, #79	; 0x4f
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f008 ff27 	bl	800b834 <memset>

	struct menuScreen shutDown = {-1, 0, 0, {""}, "Turning Off... "};
 80029e6:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80029ea:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 80029ee:	4618      	mov	r0, r3
 80029f0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80029f4:	461a      	mov	r2, r3
 80029f6:	2100      	movs	r1, #0
 80029f8:	f008 ff1c 	bl	800b834 <memset>
 80029fc:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002a00:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002a0e:	f5a3 64ca 	sub.w	r4, r3, #1616	; 0x650
 8002a12:	4b91      	ldr	r3, [pc, #580]	; (8002c58 <GenerateMenu+0xb40>)
 8002a14:	f104 05ac 	add.w	r5, r4, #172	; 0xac
 8002a18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a1a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a1e:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8002a22:	2254      	movs	r2, #84	; 0x54
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f008 ff04 	bl	800b834 <memset>


    lastId = 19;
 8002a2c:	4b8b      	ldr	r3, [pc, #556]	; (8002c5c <GenerateMenu+0xb44>)
 8002a2e:	2213      	movs	r2, #19
 8002a30:	601a      	str	r2, [r3, #0]
    lastPagesId = 19;
 8002a32:	4b8b      	ldr	r3, [pc, #556]	; (8002c60 <GenerateMenu+0xb48>)
 8002a34:	2213      	movs	r2, #19
 8002a36:	601a      	str	r2, [r3, #0]

    root = createNode(mainMenu, NULL);
 8002a38:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8002a3c:	f103 0310 	add.w	r3, r3, #16
 8002a40:	f5a3 7488 	sub.w	r4, r3, #272	; 0x110
 8002a44:	2300      	movs	r3, #0
 8002a46:	9340      	str	r3, [sp, #256]	; 0x100
 8002a48:	4668      	mov	r0, sp
 8002a4a:	f104 0310 	add.w	r3, r4, #16
 8002a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a52:	4619      	mov	r1, r3
 8002a54:	f008 fee0 	bl	800b818 <memcpy>
 8002a58:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a5c:	f7ff fb20 	bl	80020a0 <createNode>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4a80      	ldr	r2, [pc, #512]	; (8002c64 <GenerateMenu+0xb4c>)
 8002a64:	6013      	str	r3, [r2, #0]
    node1 = createNode(controlPanel, root);
 8002a66:	4b7f      	ldr	r3, [pc, #508]	; (8002c64 <GenerateMenu+0xb4c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002a6e:	f102 0210 	add.w	r2, r2, #16
 8002a72:	f5a2 7408 	sub.w	r4, r2, #544	; 0x220
 8002a76:	9340      	str	r3, [sp, #256]	; 0x100
 8002a78:	4668      	mov	r0, sp
 8002a7a:	f104 0310 	add.w	r3, r4, #16
 8002a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a82:	4619      	mov	r1, r3
 8002a84:	f008 fec8 	bl	800b818 <memcpy>
 8002a88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a8c:	f7ff fb08 	bl	80020a0 <createNode>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4a75      	ldr	r2, [pc, #468]	; (8002c68 <GenerateMenu+0xb50>)
 8002a94:	6013      	str	r3, [r2, #0]
    node2 = createNode(temperature, node1);
 8002a96:	4b74      	ldr	r3, [pc, #464]	; (8002c68 <GenerateMenu+0xb50>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002a9e:	f102 0210 	add.w	r2, r2, #16
 8002aa2:	f5a2 744c 	sub.w	r4, r2, #816	; 0x330
 8002aa6:	9340      	str	r3, [sp, #256]	; 0x100
 8002aa8:	4668      	mov	r0, sp
 8002aaa:	f104 0310 	add.w	r3, r4, #16
 8002aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f008 feb0 	bl	800b818 <memcpy>
 8002ab8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002abc:	f7ff faf0 	bl	80020a0 <createNode>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4a6a      	ldr	r2, [pc, #424]	; (8002c6c <GenerateMenu+0xb54>)
 8002ac4:	6013      	str	r3, [r2, #0]
    node3 = createNode(security, node1);
 8002ac6:	4b68      	ldr	r3, [pc, #416]	; (8002c68 <GenerateMenu+0xb50>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002ace:	f102 0210 	add.w	r2, r2, #16
 8002ad2:	f5a2 6488 	sub.w	r4, r2, #1088	; 0x440
 8002ad6:	9340      	str	r3, [sp, #256]	; 0x100
 8002ad8:	4668      	mov	r0, sp
 8002ada:	f104 0310 	add.w	r3, r4, #16
 8002ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f008 fe98 	bl	800b818 <memcpy>
 8002ae8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002aec:	f7ff fad8 	bl	80020a0 <createNode>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4a5f      	ldr	r2, [pc, #380]	; (8002c70 <GenerateMenu+0xb58>)
 8002af4:	6013      	str	r3, [r2, #0]
    node4 = createNode(lightsControl, node1);
 8002af6:	4b5c      	ldr	r3, [pc, #368]	; (8002c68 <GenerateMenu+0xb50>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002afe:	f102 0210 	add.w	r2, r2, #16
 8002b02:	f5a2 64aa 	sub.w	r4, r2, #1360	; 0x550
 8002b06:	9340      	str	r3, [sp, #256]	; 0x100
 8002b08:	4668      	mov	r0, sp
 8002b0a:	f104 0310 	add.w	r3, r4, #16
 8002b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b12:	4619      	mov	r1, r3
 8002b14:	f008 fe80 	bl	800b818 <memcpy>
 8002b18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b1c:	f7ff fac0 	bl	80020a0 <createNode>
 8002b20:	4603      	mov	r3, r0
 8002b22:	4a54      	ldr	r2, [pc, #336]	; (8002c74 <GenerateMenu+0xb5c>)
 8002b24:	6013      	str	r3, [r2, #0]
    node5 = createNode(scenarios, node1);
 8002b26:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <GenerateMenu+0xb50>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002b2e:	f102 0210 	add.w	r2, r2, #16
 8002b32:	f5a2 64cc 	sub.w	r4, r2, #1632	; 0x660
 8002b36:	9340      	str	r3, [sp, #256]	; 0x100
 8002b38:	4668      	mov	r0, sp
 8002b3a:	f104 0310 	add.w	r3, r4, #16
 8002b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b42:	4619      	mov	r1, r3
 8002b44:	f008 fe68 	bl	800b818 <memcpy>
 8002b48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b4c:	f7ff faa8 	bl	80020a0 <createNode>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4a49      	ldr	r2, [pc, #292]	; (8002c78 <GenerateMenu+0xb60>)
 8002b54:	6013      	str	r3, [r2, #0]
    node6 = createNode(nameSet, node1);
 8002b56:	4b44      	ldr	r3, [pc, #272]	; (8002c68 <GenerateMenu+0xb50>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002b5e:	f102 0210 	add.w	r2, r2, #16
 8002b62:	f5a2 64ee 	sub.w	r4, r2, #1904	; 0x770
 8002b66:	9340      	str	r3, [sp, #256]	; 0x100
 8002b68:	4668      	mov	r0, sp
 8002b6a:	f104 0310 	add.w	r3, r4, #16
 8002b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b72:	4619      	mov	r1, r3
 8002b74:	f008 fe50 	bl	800b818 <memcpy>
 8002b78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b7c:	f7ff fa90 	bl	80020a0 <createNode>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4a3e      	ldr	r2, [pc, #248]	; (8002c7c <GenerateMenu+0xb64>)
 8002b84:	6013      	str	r3, [r2, #0]
    node7 = createNode(temThresh, node2);
 8002b86:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <GenerateMenu+0xb54>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002b8e:	f102 0210 	add.w	r2, r2, #16
 8002b92:	f5a2 6408 	sub.w	r4, r2, #2176	; 0x880
 8002b96:	9340      	str	r3, [sp, #256]	; 0x100
 8002b98:	4668      	mov	r0, sp
 8002b9a:	f104 0310 	add.w	r3, r4, #16
 8002b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f008 fe38 	bl	800b818 <memcpy>
 8002ba8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002bac:	f7ff fa78 	bl	80020a0 <createNode>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4a33      	ldr	r2, [pc, #204]	; (8002c80 <GenerateMenu+0xb68>)
 8002bb4:	6013      	str	r3, [r2, #0]
    node8 = createNode(temAlarm, node2);
 8002bb6:	4b2d      	ldr	r3, [pc, #180]	; (8002c6c <GenerateMenu+0xb54>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002bbe:	f102 0210 	add.w	r2, r2, #16
 8002bc2:	f5a2 6419 	sub.w	r4, r2, #2448	; 0x990
 8002bc6:	9340      	str	r3, [sp, #256]	; 0x100
 8002bc8:	4668      	mov	r0, sp
 8002bca:	f104 0310 	add.w	r3, r4, #16
 8002bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f008 fe20 	bl	800b818 <memcpy>
 8002bd8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002bdc:	f7ff fa60 	bl	80020a0 <createNode>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4a28      	ldr	r2, [pc, #160]	; (8002c84 <GenerateMenu+0xb6c>)
 8002be4:	6013      	str	r3, [r2, #0]
    node9 = createNode(securityActivation, node3);
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <GenerateMenu+0xb58>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002bee:	f102 0210 	add.w	r2, r2, #16
 8002bf2:	f5a2 642a 	sub.w	r4, r2, #2720	; 0xaa0
 8002bf6:	9340      	str	r3, [sp, #256]	; 0x100
 8002bf8:	4668      	mov	r0, sp
 8002bfa:	f104 0310 	add.w	r3, r4, #16
 8002bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c02:	4619      	mov	r1, r3
 8002c04:	f008 fe08 	bl	800b818 <memcpy>
 8002c08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c0c:	f7ff fa48 	bl	80020a0 <createNode>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <GenerateMenu+0xb70>)
 8002c14:	6013      	str	r3, [r2, #0]
    node10 = createNode(securityAlarm, node3);
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <GenerateMenu+0xb58>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002c1e:	f102 0210 	add.w	r2, r2, #16
 8002c22:	f5a2 643b 	sub.w	r4, r2, #2992	; 0xbb0
 8002c26:	9340      	str	r3, [sp, #256]	; 0x100
 8002c28:	4668      	mov	r0, sp
 8002c2a:	f104 0310 	add.w	r3, r4, #16
 8002c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c32:	4619      	mov	r1, r3
 8002c34:	f008 fdf0 	bl	800b818 <memcpy>
 8002c38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c3c:	f7ff fa30 	bl	80020a0 <createNode>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <GenerateMenu+0xb74>)
 8002c44:	6013      	str	r3, [r2, #0]
    node11 = createNode(scenario1, node5);
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <GenerateMenu+0xb60>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	e021      	b.n	8002c90 <GenerateMenu+0xb78>
 8002c4c:	0800d3c8 	.word	0x0800d3c8
 8002c50:	0800d2c4 	.word	0x0800d2c4
 8002c54:	0800d728 	.word	0x0800d728
 8002c58:	0800d78c 	.word	0x0800d78c
 8002c5c:	20000878 	.word	0x20000878
 8002c60:	2000087c 	.word	0x2000087c
 8002c64:	20000890 	.word	0x20000890
 8002c68:	20000894 	.word	0x20000894
 8002c6c:	20000898 	.word	0x20000898
 8002c70:	2000089c 	.word	0x2000089c
 8002c74:	200008a0 	.word	0x200008a0
 8002c78:	200008a4 	.word	0x200008a4
 8002c7c:	200008a8 	.word	0x200008a8
 8002c80:	200008ac 	.word	0x200008ac
 8002c84:	200008b0 	.word	0x200008b0
 8002c88:	200008b4 	.word	0x200008b4
 8002c8c:	200008b8 	.word	0x200008b8
 8002c90:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002c94:	f102 0210 	add.w	r2, r2, #16
 8002c98:	f5a2 644c 	sub.w	r4, r2, #3264	; 0xcc0
 8002c9c:	9340      	str	r3, [sp, #256]	; 0x100
 8002c9e:	4668      	mov	r0, sp
 8002ca0:	f104 0310 	add.w	r3, r4, #16
 8002ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f008 fdb5 	bl	800b818 <memcpy>
 8002cae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cb2:	f7ff f9f5 	bl	80020a0 <createNode>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	4a9d      	ldr	r2, [pc, #628]	; (8002f30 <GenerateMenu+0xe18>)
 8002cba:	6013      	str	r3, [r2, #0]
    node12 = createNode(scenario2, node5);
 8002cbc:	4b9d      	ldr	r3, [pc, #628]	; (8002f34 <GenerateMenu+0xe1c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002cc4:	f102 0210 	add.w	r2, r2, #16
 8002cc8:	f5a2 645d 	sub.w	r4, r2, #3536	; 0xdd0
 8002ccc:	9340      	str	r3, [sp, #256]	; 0x100
 8002cce:	4668      	mov	r0, sp
 8002cd0:	f104 0310 	add.w	r3, r4, #16
 8002cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f008 fd9d 	bl	800b818 <memcpy>
 8002cde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ce2:	f7ff f9dd 	bl	80020a0 <createNode>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a93      	ldr	r2, [pc, #588]	; (8002f38 <GenerateMenu+0xe20>)
 8002cea:	6013      	str	r3, [r2, #0]

    node13 = createNode(AddScenario, node1);
 8002cec:	4b93      	ldr	r3, [pc, #588]	; (8002f3c <GenerateMenu+0xe24>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002cf4:	f102 0210 	add.w	r2, r2, #16
 8002cf8:	f5a2 646e 	sub.w	r4, r2, #3808	; 0xee0
 8002cfc:	9340      	str	r3, [sp, #256]	; 0x100
 8002cfe:	4668      	mov	r0, sp
 8002d00:	f104 0310 	add.w	r3, r4, #16
 8002d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f008 fd85 	bl	800b818 <memcpy>
 8002d0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d12:	f7ff f9c5 	bl	80020a0 <createNode>
 8002d16:	4603      	mov	r3, r0
 8002d18:	4a89      	ldr	r2, [pc, #548]	; (8002f40 <GenerateMenu+0xe28>)
 8002d1a:	6013      	str	r3, [r2, #0]
    node14 = createNode(scenTemThreshold, node13);
 8002d1c:	4b88      	ldr	r3, [pc, #544]	; (8002f40 <GenerateMenu+0xe28>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8002d24:	f102 0210 	add.w	r2, r2, #16
 8002d28:	f5a2 647f 	sub.w	r4, r2, #4080	; 0xff0
 8002d2c:	9340      	str	r3, [sp, #256]	; 0x100
 8002d2e:	4668      	mov	r0, sp
 8002d30:	f104 0310 	add.w	r3, r4, #16
 8002d34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f008 fd6d 	bl	800b818 <memcpy>
 8002d3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d42:	f7ff f9ad 	bl	80020a0 <createNode>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4a7e      	ldr	r2, [pc, #504]	; (8002f44 <GenerateMenu+0xe2c>)
 8002d4a:	6013      	str	r3, [r2, #0]
    node15 = createNode(scenTemAlarm, node13);
 8002d4c:	4b7c      	ldr	r3, [pc, #496]	; (8002f40 <GenerateMenu+0xe28>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002d54:	f5a2 7480 	sub.w	r4, r2, #256	; 0x100
 8002d58:	9340      	str	r3, [sp, #256]	; 0x100
 8002d5a:	4668      	mov	r0, sp
 8002d5c:	f104 0310 	add.w	r3, r4, #16
 8002d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d64:	4619      	mov	r1, r3
 8002d66:	f008 fd57 	bl	800b818 <memcpy>
 8002d6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d6e:	f7ff f997 	bl	80020a0 <createNode>
 8002d72:	4603      	mov	r3, r0
 8002d74:	4a74      	ldr	r2, [pc, #464]	; (8002f48 <GenerateMenu+0xe30>)
 8002d76:	6013      	str	r3, [r2, #0]
    node16 = createNode(scenSecAlarm, node13);
 8002d78:	4b71      	ldr	r3, [pc, #452]	; (8002f40 <GenerateMenu+0xe28>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002d80:	f5a2 7404 	sub.w	r4, r2, #528	; 0x210
 8002d84:	9340      	str	r3, [sp, #256]	; 0x100
 8002d86:	4668      	mov	r0, sp
 8002d88:	f104 0310 	add.w	r3, r4, #16
 8002d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d90:	4619      	mov	r1, r3
 8002d92:	f008 fd41 	bl	800b818 <memcpy>
 8002d96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d9a:	f7ff f981 	bl	80020a0 <createNode>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4a6a      	ldr	r2, [pc, #424]	; (8002f4c <GenerateMenu+0xe34>)
 8002da2:	6013      	str	r3, [r2, #0]
    node17 = createNode(scenSecAlert, node13);
 8002da4:	4b66      	ldr	r3, [pc, #408]	; (8002f40 <GenerateMenu+0xe28>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002dac:	f5a2 7448 	sub.w	r4, r2, #800	; 0x320
 8002db0:	9340      	str	r3, [sp, #256]	; 0x100
 8002db2:	4668      	mov	r0, sp
 8002db4:	f104 0310 	add.w	r3, r4, #16
 8002db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f008 fd2b 	bl	800b818 <memcpy>
 8002dc2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002dc6:	f7ff f96b 	bl	80020a0 <createNode>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4a60      	ldr	r2, [pc, #384]	; (8002f50 <GenerateMenu+0xe38>)
 8002dce:	6013      	str	r3, [r2, #0]
    node18 = createNode(scenLight, node13);
 8002dd0:	4b5b      	ldr	r3, [pc, #364]	; (8002f40 <GenerateMenu+0xe28>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002dd8:	f5a2 6486 	sub.w	r4, r2, #1072	; 0x430
 8002ddc:	9340      	str	r3, [sp, #256]	; 0x100
 8002dde:	4668      	mov	r0, sp
 8002de0:	f104 0310 	add.w	r3, r4, #16
 8002de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002de8:	4619      	mov	r1, r3
 8002dea:	f008 fd15 	bl	800b818 <memcpy>
 8002dee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002df2:	f7ff f955 	bl	80020a0 <createNode>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4a56      	ldr	r2, [pc, #344]	; (8002f54 <GenerateMenu+0xe3c>)
 8002dfa:	6013      	str	r3, [r2, #0]
    node19 = createNode(create, node13);
 8002dfc:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <GenerateMenu+0xe28>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002e04:	f5a2 64a8 	sub.w	r4, r2, #1344	; 0x540
 8002e08:	9340      	str	r3, [sp, #256]	; 0x100
 8002e0a:	4668      	mov	r0, sp
 8002e0c:	f104 0310 	add.w	r3, r4, #16
 8002e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e14:	4619      	mov	r1, r3
 8002e16:	f008 fcff 	bl	800b818 <memcpy>
 8002e1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e1e:	f7ff f93f 	bl	80020a0 <createNode>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4a4c      	ldr	r2, [pc, #304]	; (8002f58 <GenerateMenu+0xe40>)
 8002e26:	6013      	str	r3, [r2, #0]

    node_1 = createNode(shutDown, node1);
 8002e28:	4b44      	ldr	r3, [pc, #272]	; (8002f3c <GenerateMenu+0xe24>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002e30:	f5a2 64ca 	sub.w	r4, r2, #1616	; 0x650
 8002e34:	9340      	str	r3, [sp, #256]	; 0x100
 8002e36:	4668      	mov	r0, sp
 8002e38:	f104 0310 	add.w	r3, r4, #16
 8002e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e40:	4619      	mov	r1, r3
 8002e42:	f008 fce9 	bl	800b818 <memcpy>
 8002e46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e4a:	f7ff f929 	bl	80020a0 <createNode>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4a42      	ldr	r2, [pc, #264]	; (8002f5c <GenerateMenu+0xe44>)
 8002e52:	6013      	str	r3, [r2, #0]


    root->child1 = node1;
 8002e54:	4b42      	ldr	r3, [pc, #264]	; (8002f60 <GenerateMenu+0xe48>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a38      	ldr	r2, [pc, #224]	; (8002f3c <GenerateMenu+0xe24>)
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	601a      	str	r2, [r3, #0]
    node1->child1 = node2;
 8002e5e:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <GenerateMenu+0xe24>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a40      	ldr	r2, [pc, #256]	; (8002f64 <GenerateMenu+0xe4c>)
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	601a      	str	r2, [r3, #0]
    node1->child2 = node3;
 8002e68:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <GenerateMenu+0xe24>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a3e      	ldr	r2, [pc, #248]	; (8002f68 <GenerateMenu+0xe50>)
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	605a      	str	r2, [r3, #4]
    node1->child3 = node4;
 8002e72:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <GenerateMenu+0xe24>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a3d      	ldr	r2, [pc, #244]	; (8002f6c <GenerateMenu+0xe54>)
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	609a      	str	r2, [r3, #8]
    node1->child4 = node5;
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <GenerateMenu+0xe24>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a2c      	ldr	r2, [pc, #176]	; (8002f34 <GenerateMenu+0xe1c>)
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	60da      	str	r2, [r3, #12]
    node1->child5 = node6;
 8002e86:	4b2d      	ldr	r3, [pc, #180]	; (8002f3c <GenerateMenu+0xe24>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a39      	ldr	r2, [pc, #228]	; (8002f70 <GenerateMenu+0xe58>)
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	611a      	str	r2, [r3, #16]
    node1->child6 = node13;
 8002e90:	4b2a      	ldr	r3, [pc, #168]	; (8002f3c <GenerateMenu+0xe24>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a2a      	ldr	r2, [pc, #168]	; (8002f40 <GenerateMenu+0xe28>)
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	615a      	str	r2, [r3, #20]
    node1->child7 = node_1;
 8002e9a:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <GenerateMenu+0xe24>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a2f      	ldr	r2, [pc, #188]	; (8002f5c <GenerateMenu+0xe44>)
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	619a      	str	r2, [r3, #24]


    node2->child1 = node7;
 8002ea4:	4b2f      	ldr	r3, [pc, #188]	; (8002f64 <GenerateMenu+0xe4c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a32      	ldr	r2, [pc, #200]	; (8002f74 <GenerateMenu+0xe5c>)
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	601a      	str	r2, [r3, #0]
    node2->child2 = node8;
 8002eae:	4b2d      	ldr	r3, [pc, #180]	; (8002f64 <GenerateMenu+0xe4c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a31      	ldr	r2, [pc, #196]	; (8002f78 <GenerateMenu+0xe60>)
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	605a      	str	r2, [r3, #4]

    node3->child1 = node9;
 8002eb8:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <GenerateMenu+0xe50>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a2f      	ldr	r2, [pc, #188]	; (8002f7c <GenerateMenu+0xe64>)
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	601a      	str	r2, [r3, #0]
    node3->child2 = node10;
 8002ec2:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <GenerateMenu+0xe50>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a2e      	ldr	r2, [pc, #184]	; (8002f80 <GenerateMenu+0xe68>)
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	605a      	str	r2, [r3, #4]

    node5->child1 = node11;
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <GenerateMenu+0xe1c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <GenerateMenu+0xe18>)
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	601a      	str	r2, [r3, #0]
    node5->child2 = node12;
 8002ed6:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <GenerateMenu+0xe1c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <GenerateMenu+0xe20>)
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	605a      	str	r2, [r3, #4]

    node13->child1 = node14;
 8002ee0:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <GenerateMenu+0xe28>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <GenerateMenu+0xe2c>)
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	601a      	str	r2, [r3, #0]
    node13->child2 = node15;
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <GenerateMenu+0xe28>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <GenerateMenu+0xe30>)
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
    node13->child3 = node16;
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <GenerateMenu+0xe28>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <GenerateMenu+0xe34>)
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	609a      	str	r2, [r3, #8]
    node13->child4 = node17;
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <GenerateMenu+0xe28>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <GenerateMenu+0xe38>)
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	60da      	str	r2, [r3, #12]
    node13->child5 = node18;
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <GenerateMenu+0xe28>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a11      	ldr	r2, [pc, #68]	; (8002f54 <GenerateMenu+0xe3c>)
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	611a      	str	r2, [r3, #16]
    node13->child6 = node19;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <GenerateMenu+0xe28>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a10      	ldr	r2, [pc, #64]	; (8002f58 <GenerateMenu+0xe40>)
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	615a      	str	r2, [r3, #20]

    currentNode = root;
 8002f1c:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <GenerateMenu+0xe48>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <GenerateMenu+0xe6c>)
 8002f22:	6013      	str	r3, [r2, #0]

}
 8002f24:	bf00      	nop
 8002f26:	f507 57b2 	add.w	r7, r7, #5696	; 0x1640
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f30:	200008bc 	.word	0x200008bc
 8002f34:	200008a4 	.word	0x200008a4
 8002f38:	200008c0 	.word	0x200008c0
 8002f3c:	20000894 	.word	0x20000894
 8002f40:	200008c4 	.word	0x200008c4
 8002f44:	200008c8 	.word	0x200008c8
 8002f48:	200008cc 	.word	0x200008cc
 8002f4c:	200008d0 	.word	0x200008d0
 8002f50:	200008d4 	.word	0x200008d4
 8002f54:	200008d8 	.word	0x200008d8
 8002f58:	200008dc 	.word	0x200008dc
 8002f5c:	200008e0 	.word	0x200008e0
 8002f60:	20000890 	.word	0x20000890
 8002f64:	20000898 	.word	0x20000898
 8002f68:	2000089c 	.word	0x2000089c
 8002f6c:	200008a0 	.word	0x200008a0
 8002f70:	200008a8 	.word	0x200008a8
 8002f74:	200008ac 	.word	0x200008ac
 8002f78:	200008b0 	.word	0x200008b0
 8002f7c:	200008b4 	.word	0x200008b4
 8002f80:	200008b8 	.word	0x200008b8
 8002f84:	200008e4 	.word	0x200008e4

08002f88 <createScenario>:
void createScenario() {
 8002f88:	b5b0      	push	{r4, r5, r7, lr}
 8002f8a:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 8002f8e:	af42      	add	r7, sp, #264	; 0x108
    lastId++;
 8002f90:	4bb0      	ldr	r3, [pc, #704]	; (8003254 <createScenario+0x2cc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	4aaf      	ldr	r2, [pc, #700]	; (8003254 <createScenario+0x2cc>)
 8002f98:	6013      	str	r3, [r2, #0]

    char str1[20] ="";
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8002fa0:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
	char str2[20]="";
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002fb4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
	char str3[20]="";
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002fc8:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
	char str4[20]="";
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8002fdc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
    char str5[4][20]={"","","",""};
 8002fea:	4a9b      	ldr	r2, [pc, #620]	; (8003258 <createScenario+0x2d0>)
 8002fec:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	2250      	movs	r2, #80	; 0x50
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f008 fc0f 	bl	800b818 <memcpy>
    sprintf(str1, "temThreshold=%d", newSceneTemThreshold);
 8002ffa:	4b98      	ldr	r3, [pc, #608]	; (800325c <createScenario+0x2d4>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003002:	4997      	ldr	r1, [pc, #604]	; (8003260 <createScenario+0x2d8>)
 8003004:	4618      	mov	r0, r3
 8003006:	f008 fd0d 	bl	800ba24 <siprintf>

    if (newSceneTemAlarm == 1)
 800300a:	4b96      	ldr	r3, [pc, #600]	; (8003264 <createScenario+0x2dc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d106      	bne.n	8003020 <createScenario+0x98>
        strcpy(str2, "temAlarm=on");
 8003012:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8003016:	4a94      	ldr	r2, [pc, #592]	; (8003268 <createScenario+0x2e0>)
 8003018:	ca07      	ldmia	r2, {r0, r1, r2}
 800301a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800301e:	e007      	b.n	8003030 <createScenario+0xa8>
    else
        strcpy(str2, "temAlarm=off");
 8003020:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8003024:	4a91      	ldr	r2, [pc, #580]	; (800326c <createScenario+0x2e4>)
 8003026:	461c      	mov	r4, r3
 8003028:	4613      	mov	r3, r2
 800302a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800302c:	c407      	stmia	r4!, {r0, r1, r2}
 800302e:	7023      	strb	r3, [r4, #0]

    if (newScenesecurityAlarm == 1)
 8003030:	4b8f      	ldr	r3, [pc, #572]	; (8003270 <createScenario+0x2e8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d109      	bne.n	800304c <createScenario+0xc4>
        strcpy(str3, "securityAlarm=on");
 8003038:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800303c:	4a8d      	ldr	r2, [pc, #564]	; (8003274 <createScenario+0x2ec>)
 800303e:	461c      	mov	r4, r3
 8003040:	4615      	mov	r5, r2
 8003042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003046:	682b      	ldr	r3, [r5, #0]
 8003048:	7023      	strb	r3, [r4, #0]
 800304a:	e008      	b.n	800305e <createScenario+0xd6>
    else
        strcpy(str3, "securityAlarm=off");
 800304c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003050:	4a89      	ldr	r2, [pc, #548]	; (8003278 <createScenario+0x2f0>)
 8003052:	461c      	mov	r4, r3
 8003054:	4615      	mov	r5, r2
 8003056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800305a:	682b      	ldr	r3, [r5, #0]
 800305c:	8023      	strh	r3, [r4, #0]

    if (newSceneSecurityAlert == 1)
 800305e:	4b87      	ldr	r3, [pc, #540]	; (800327c <createScenario+0x2f4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d109      	bne.n	800307a <createScenario+0xf2>
        strcpy(str4, "securityAlert=on");
 8003066:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800306a:	4a85      	ldr	r2, [pc, #532]	; (8003280 <createScenario+0x2f8>)
 800306c:	461c      	mov	r4, r3
 800306e:	4615      	mov	r5, r2
 8003070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003074:	682b      	ldr	r3, [r5, #0]
 8003076:	7023      	strb	r3, [r4, #0]
 8003078:	e008      	b.n	800308c <createScenario+0x104>
    else
        strcpy(str4, "securityAlert=off");
 800307a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800307e:	4a81      	ldr	r2, [pc, #516]	; (8003284 <createScenario+0x2fc>)
 8003080:	461c      	mov	r4, r3
 8003082:	4615      	mov	r5, r2
 8003084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003088:	682b      	ldr	r3, [r5, #0]
 800308a:	8023      	strh	r3, [r4, #0]

    for (int i = 0; i < 4; i++) {
 800308c:	2300      	movs	r3, #0
 800308e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8003092:	e02a      	b.n	80030ea <createScenario+0x162>
        if (newScenarioLights[i] == 1)
 8003094:	4a7c      	ldr	r2, [pc, #496]	; (8003288 <createScenario+0x300>)
 8003096:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d10f      	bne.n	80030c2 <createScenario+0x13a>
            sprintf(str5[i], "Light%d=on", i);
 80030a2:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 80030a6:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80030b8:	4974      	ldr	r1, [pc, #464]	; (800328c <createScenario+0x304>)
 80030ba:	4618      	mov	r0, r3
 80030bc:	f008 fcb2 	bl	800ba24 <siprintf>
 80030c0:	e00e      	b.n	80030e0 <createScenario+0x158>
        else
            sprintf(str5[i], "Light%d=off", i);
 80030c2:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 80030c6:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80030d8:	496d      	ldr	r1, [pc, #436]	; (8003290 <createScenario+0x308>)
 80030da:	4618      	mov	r0, r3
 80030dc:	f008 fca2 	bl	800ba24 <siprintf>
    for (int i = 0; i < 4; i++) {
 80030e0:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80030e4:	3301      	adds	r3, #1
 80030e6:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80030ea:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	ddd0      	ble.n	8003094 <createScenario+0x10c>
    }

    addedScenarios[lastScenarioIndex][0] = newSceneTemThreshold;
 80030f2:	4b68      	ldr	r3, [pc, #416]	; (8003294 <createScenario+0x30c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a59      	ldr	r2, [pc, #356]	; (800325c <createScenario+0x2d4>)
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	4967      	ldr	r1, [pc, #412]	; (8003298 <createScenario+0x310>)
 80030fc:	015b      	lsls	r3, r3, #5
 80030fe:	440b      	add	r3, r1
 8003100:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][1] = newSceneTemAlarm;
 8003102:	4b64      	ldr	r3, [pc, #400]	; (8003294 <createScenario+0x30c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a57      	ldr	r2, [pc, #348]	; (8003264 <createScenario+0x2dc>)
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	4963      	ldr	r1, [pc, #396]	; (8003298 <createScenario+0x310>)
 800310c:	015b      	lsls	r3, r3, #5
 800310e:	440b      	add	r3, r1
 8003110:	3304      	adds	r3, #4
 8003112:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][2] = newScenesecurityAlarm;
 8003114:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <createScenario+0x30c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a55      	ldr	r2, [pc, #340]	; (8003270 <createScenario+0x2e8>)
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	495e      	ldr	r1, [pc, #376]	; (8003298 <createScenario+0x310>)
 800311e:	015b      	lsls	r3, r3, #5
 8003120:	440b      	add	r3, r1
 8003122:	3308      	adds	r3, #8
 8003124:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][3] = newSceneSecurityAlert;
 8003126:	4b5b      	ldr	r3, [pc, #364]	; (8003294 <createScenario+0x30c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a54      	ldr	r2, [pc, #336]	; (800327c <createScenario+0x2f4>)
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	495a      	ldr	r1, [pc, #360]	; (8003298 <createScenario+0x310>)
 8003130:	015b      	lsls	r3, r3, #5
 8003132:	440b      	add	r3, r1
 8003134:	330c      	adds	r3, #12
 8003136:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][4] = newScenarioLights[0];
 8003138:	4b56      	ldr	r3, [pc, #344]	; (8003294 <createScenario+0x30c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a52      	ldr	r2, [pc, #328]	; (8003288 <createScenario+0x300>)
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	4955      	ldr	r1, [pc, #340]	; (8003298 <createScenario+0x310>)
 8003142:	015b      	lsls	r3, r3, #5
 8003144:	440b      	add	r3, r1
 8003146:	3310      	adds	r3, #16
 8003148:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][5] = newScenarioLights[1];
 800314a:	4b52      	ldr	r3, [pc, #328]	; (8003294 <createScenario+0x30c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a4e      	ldr	r2, [pc, #312]	; (8003288 <createScenario+0x300>)
 8003150:	6852      	ldr	r2, [r2, #4]
 8003152:	4951      	ldr	r1, [pc, #324]	; (8003298 <createScenario+0x310>)
 8003154:	015b      	lsls	r3, r3, #5
 8003156:	440b      	add	r3, r1
 8003158:	3314      	adds	r3, #20
 800315a:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][6] = newScenarioLights[2];
 800315c:	4b4d      	ldr	r3, [pc, #308]	; (8003294 <createScenario+0x30c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a49      	ldr	r2, [pc, #292]	; (8003288 <createScenario+0x300>)
 8003162:	6892      	ldr	r2, [r2, #8]
 8003164:	494c      	ldr	r1, [pc, #304]	; (8003298 <createScenario+0x310>)
 8003166:	015b      	lsls	r3, r3, #5
 8003168:	440b      	add	r3, r1
 800316a:	3318      	adds	r3, #24
 800316c:	601a      	str	r2, [r3, #0]
    addedScenarios[lastScenarioIndex][7] = newScenarioLights[3];
 800316e:	4b49      	ldr	r3, [pc, #292]	; (8003294 <createScenario+0x30c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a45      	ldr	r2, [pc, #276]	; (8003288 <createScenario+0x300>)
 8003174:	68d2      	ldr	r2, [r2, #12]
 8003176:	4948      	ldr	r1, [pc, #288]	; (8003298 <createScenario+0x310>)
 8003178:	015b      	lsls	r3, r3, #5
 800317a:	440b      	add	r3, r1
 800317c:	331c      	adds	r3, #28
 800317e:	601a      	str	r2, [r3, #0]

    char strArray[8][20]; // Array to hold str1 to str4

    strcpy(strArray[0], str1);
 8003180:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8003184:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f008 fc79 	bl	800ba82 <strcpy>
    strcpy(strArray[1], str2);
 8003190:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8003194:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003198:	3314      	adds	r3, #20
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f008 fc70 	bl	800ba82 <strcpy>
    strcpy(strArray[2], str3);
 80031a2:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80031a6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80031aa:	3328      	adds	r3, #40	; 0x28
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f008 fc67 	bl	800ba82 <strcpy>
    strcpy(strArray[3], str4);
 80031b4:	f507 7205 	add.w	r2, r7, #532	; 0x214
 80031b8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80031bc:	333c      	adds	r3, #60	; 0x3c
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f008 fc5e 	bl	800ba82 <strcpy>
    strcpy(strArray[4], str5[0]);
 80031c6:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 80031ca:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80031ce:	3350      	adds	r3, #80	; 0x50
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f008 fc55 	bl	800ba82 <strcpy>
    strcpy(strArray[5], str5[1]);
 80031d8:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80031dc:	f103 0214 	add.w	r2, r3, #20
 80031e0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80031e4:	3364      	adds	r3, #100	; 0x64
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f008 fc4a 	bl	800ba82 <strcpy>
    strcpy(strArray[6], str5[2]);
 80031ee:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80031f2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80031f6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80031fa:	3378      	adds	r3, #120	; 0x78
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f008 fc3f 	bl	800ba82 <strcpy>
    strcpy(strArray[7], str5[3]);
 8003204:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003208:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800320c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003210:	338c      	adds	r3, #140	; 0x8c
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f008 fc34 	bl	800ba82 <strcpy>

    struct menuScreen newScenario = {lastId, 8, 0};
 800321a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800321e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003222:	4618      	mov	r0, r3
 8003224:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003228:	461a      	mov	r2, r3
 800322a:	2100      	movs	r1, #0
 800322c:	f008 fb02 	bl	800b834 <memset>
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <createScenario+0x2cc>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8003238:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8003242:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003246:	2208      	movs	r2, #8
 8003248:	605a      	str	r2, [r3, #4]

    for (int i = 0; i < 8; i++) {
 800324a:	2300      	movs	r3, #0
 800324c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8003250:	e040      	b.n	80032d4 <createScenario+0x34c>
 8003252:	bf00      	nop
 8003254:	20000878 	.word	0x20000878
 8003258:	0800d8a0 	.word	0x0800d8a0
 800325c:	20000018 	.word	0x20000018
 8003260:	0800d7f0 	.word	0x0800d7f0
 8003264:	2000001c 	.word	0x2000001c
 8003268:	0800d800 	.word	0x0800d800
 800326c:	0800d80c 	.word	0x0800d80c
 8003270:	20000020 	.word	0x20000020
 8003274:	0800d81c 	.word	0x0800d81c
 8003278:	0800d830 	.word	0x0800d830
 800327c:	20000024 	.word	0x20000024
 8003280:	0800d844 	.word	0x0800d844
 8003284:	0800d858 	.word	0x0800d858
 8003288:	20000844 	.word	0x20000844
 800328c:	0800d86c 	.word	0x0800d86c
 8003290:	0800d878 	.word	0x0800d878
 8003294:	2000082c 	.word	0x2000082c
 8003298:	200007ac 	.word	0x200007ac
        strcpy(newScenario.menuItems[i], strArray[i]);
 800329c:	f107 0114 	add.w	r1, r7, #20
 80032a0:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	3308      	adds	r3, #8
 80032ae:	440b      	add	r3, r1
 80032b0:	1d18      	adds	r0, r3, #4
 80032b2:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80032b6:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	4619      	mov	r1, r3
 80032c6:	f008 fbdc 	bl	800ba82 <strcpy>
    for (int i = 0; i < 8; i++) {
 80032ca:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80032ce:	3301      	adds	r3, #1
 80032d0:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80032d4:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80032d8:	2b07      	cmp	r3, #7
 80032da:	dddf      	ble.n	800329c <createScenario+0x314>
    }

    strcpy(newScenario.content, "<  off  >");
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	33ac      	adds	r3, #172	; 0xac
 80032e2:	4a34      	ldr	r2, [pc, #208]	; (80033b4 <createScenario+0x42c>)
 80032e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80032e6:	c303      	stmia	r3!, {r0, r1}
 80032e8:	801a      	strh	r2, [r3, #0]

//    struct menuScreen newScenario = {lastId, 8, 0, strArray, "<  off  >"};

    struct TreeNode* newNode = createNode(newScenario, node5);
 80032ea:	4b33      	ldr	r3, [pc, #204]	; (80033b8 <createScenario+0x430>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f507 721c 	add.w	r2, r7, #624	; 0x270
 80032f2:	f5a2 7417 	sub.w	r4, r2, #604	; 0x25c
 80032f6:	9340      	str	r3, [sp, #256]	; 0x100
 80032f8:	4668      	mov	r0, sp
 80032fa:	f104 0310 	add.w	r3, r4, #16
 80032fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003302:	4619      	mov	r1, r3
 8003304:	f008 fa88 	bl	800b818 <memcpy>
 8003308:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800330c:	f7fe fec8 	bl	80020a0 <createNode>
 8003310:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264

    switch (lastScenarioIndex) {
 8003314:	4b29      	ldr	r3, [pc, #164]	; (80033bc <createScenario+0x434>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d823      	bhi.n	8003364 <createScenario+0x3dc>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <createScenario+0x39c>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003335 	.word	0x08003335
 8003328:	08003341 	.word	0x08003341
 800332c:	0800334d 	.word	0x0800334d
 8003330:	08003359 	.word	0x08003359
        case 0:
            node5->child3 = newNode;
 8003334:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <createScenario+0x430>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800333c:	609a      	str	r2, [r3, #8]
            break;
 800333e:	e011      	b.n	8003364 <createScenario+0x3dc>
        case 1:
            node5->child4 = newNode;
 8003340:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <createScenario+0x430>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8003348:	60da      	str	r2, [r3, #12]
            break;
 800334a:	e00b      	b.n	8003364 <createScenario+0x3dc>
        case 2:
            node5->child5 = newNode;
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <createScenario+0x430>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8003354:	611a      	str	r2, [r3, #16]
            break;
 8003356:	e005      	b.n	8003364 <createScenario+0x3dc>
        case 3:
            node5->child6 = newNode;
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <createScenario+0x430>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8003360:	615a      	str	r2, [r3, #20]
            break;
 8003362:	bf00      	nop
    }
    char newStr[20];
    sprintf(newStr,"> scenario %d",lastScenarioIndex+3);
 8003364:	4b15      	ldr	r3, [pc, #84]	; (80033bc <createScenario+0x434>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	1cda      	adds	r2, r3, #3
 800336a:	463b      	mov	r3, r7
 800336c:	4914      	ldr	r1, [pc, #80]	; (80033c0 <createScenario+0x438>)
 800336e:	4618      	mov	r0, r3
 8003370:	f008 fb58 	bl	800ba24 <siprintf>
    strcpy(node5->screen.menuItems[node5->screen.optionCount],newStr);
 8003374:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <createScenario+0x430>)
 8003376:	6819      	ldr	r1, [r3, #0]
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <createScenario+0x430>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	3328      	adds	r3, #40	; 0x28
 8003388:	440b      	add	r3, r1
 800338a:	3308      	adds	r3, #8
 800338c:	463a      	mov	r2, r7
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f008 fb76 	bl	800ba82 <strcpy>
    node5->screen.optionCount++;
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <createScenario+0x430>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800339c:	3201      	adds	r2, #1
 800339e:	629a      	str	r2, [r3, #40]	; 0x28
    lastScenarioIndex++;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <createScenario+0x434>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	4a05      	ldr	r2, [pc, #20]	; (80033bc <createScenario+0x434>)
 80033a8:	6013      	str	r3, [r2, #0]
}
 80033aa:	bf00      	nop
 80033ac:	f507 771c 	add.w	r7, r7, #624	; 0x270
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bdb0      	pop	{r4, r5, r7, pc}
 80033b4:	0800d884 	.word	0x0800d884
 80033b8:	200008a4 	.word	0x200008a4
 80033bc:	2000082c 	.word	0x2000082c
 80033c0:	0800d890 	.word	0x0800d890

080033c4 <ShowMenu>:

void ShowMenu(){
 80033c4:	b5b0      	push	{r4, r5, r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
	int p = page * 4;
 80033ca:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <ShowMenu+0xe0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	617b      	str	r3, [r7, #20]
//    clear();
	char temp[20] = "                   ";
 80033d2:	4b35      	ldr	r3, [pc, #212]	; (80034a8 <ShowMenu+0xe4>)
 80033d4:	463c      	mov	r4, r7
 80033d6:	461d      	mov	r5, r3
 80033d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033dc:	682b      	ldr	r3, [r5, #0]
 80033de:	6023      	str	r3, [r4, #0]
    setCursor(0,0);
 80033e0:	2100      	movs	r1, #0
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fd fe40 	bl	8001068 <setCursor>
    print(currentMenu[p]);
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4a2e      	ldr	r2, [pc, #184]	; (80034ac <ShowMenu+0xe8>)
 80033f4:	4413      	add	r3, r2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd fe94 	bl	8001124 <print>
    setCursor(0,1);
 80033fc:	2101      	movs	r1, #1
 80033fe:	2000      	movs	r0, #0
 8003400:	f7fd fe32 	bl	8001068 <setCursor>
    if(p+1 >= MenuoptionCounts)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	4b29      	ldr	r3, [pc, #164]	; (80034b0 <ShowMenu+0xec>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	db04      	blt.n	800341a <ShowMenu+0x56>
        print(temp);
 8003410:	463b      	mov	r3, r7
 8003412:	4618      	mov	r0, r3
 8003414:	f7fd fe86 	bl	8001124 <print>
 8003418:	e00a      	b.n	8003430 <ShowMenu+0x6c>
    else
    	print(currentMenu[p+1]);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4a21      	ldr	r2, [pc, #132]	; (80034ac <ShowMenu+0xe8>)
 8003428:	4413      	add	r3, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fe7a 	bl	8001124 <print>
    setCursor(0,2);
 8003430:	2102      	movs	r1, #2
 8003432:	2000      	movs	r0, #0
 8003434:	f7fd fe18 	bl	8001068 <setCursor>
    if(p+2 >= MenuoptionCounts)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	1c9a      	adds	r2, r3, #2
 800343c:	4b1c      	ldr	r3, [pc, #112]	; (80034b0 <ShowMenu+0xec>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	db04      	blt.n	800344e <ShowMenu+0x8a>
        print(temp);
 8003444:	463b      	mov	r3, r7
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd fe6c 	bl	8001124 <print>
 800344c:	e00a      	b.n	8003464 <ShowMenu+0xa0>
    else
    	print(currentMenu[p+2]);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	1c9a      	adds	r2, r3, #2
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4a14      	ldr	r2, [pc, #80]	; (80034ac <ShowMenu+0xe8>)
 800345c:	4413      	add	r3, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fe60 	bl	8001124 <print>
    setCursor(0,3);
 8003464:	2103      	movs	r1, #3
 8003466:	2000      	movs	r0, #0
 8003468:	f7fd fdfe 	bl	8001068 <setCursor>
    if(p+3 >= MenuoptionCounts)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	1cda      	adds	r2, r3, #3
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <ShowMenu+0xec>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	db04      	blt.n	8003482 <ShowMenu+0xbe>
        print(temp);
 8003478:	463b      	mov	r3, r7
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd fe52 	bl	8001124 <print>
 8003480:	e00a      	b.n	8003498 <ShowMenu+0xd4>
    else
    	print(currentMenu[p+3]);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	1cda      	adds	r2, r3, #3
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4a07      	ldr	r2, [pc, #28]	; (80034ac <ShowMenu+0xe8>)
 8003490:	4413      	add	r3, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd fe46 	bl	8001124 <print>
    display();
 8003498:	f7fd fe2e 	bl	80010f8 <display>
}
 800349c:	bf00      	nop
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bdb0      	pop	{r4, r5, r7, pc}
 80034a4:	20000868 	.word	0x20000868
 80034a8:	0800d8f0 	.word	0x0800d8f0
 80034ac:	2000003c 	.word	0x2000003c
 80034b0:	20000864 	.word	0x20000864

080034b4 <ShowInfo>:
void ShowInfo(struct menuScreen info){
 80034b4:	b084      	sub	sp, #16
 80034b6:	b5b0      	push	{r4, r5, r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80034c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int p = page * 3;
 80034c4:	4b34      	ldr	r3, [pc, #208]	; (8003598 <ShowInfo+0xe4>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
    clear();
 80034d0:	f7fd fdc0 	bl	8001054 <clear>
	char temp[20] = "                   ";
 80034d4:	4b31      	ldr	r3, [pc, #196]	; (800359c <ShowInfo+0xe8>)
 80034d6:	463c      	mov	r4, r7
 80034d8:	461d      	mov	r5, r3
 80034da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034de:	682b      	ldr	r3, [r5, #0]
 80034e0:	6023      	str	r3, [r4, #0]
    setCursor(0,0);
 80034e2:	2100      	movs	r1, #0
 80034e4:	2000      	movs	r0, #0
 80034e6:	f7fd fdbf 	bl	8001068 <setCursor>
    print(info.content);
 80034ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd fe18 	bl	8001124 <print>
    setCursor(0,1);
 80034f4:	2101      	movs	r1, #1
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7fd fdb6 	bl	8001068 <setCursor>
    print(info.menuItems[p]);
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	3308      	adds	r3, #8
 8003508:	3328      	adds	r3, #40	; 0x28
 800350a:	443b      	add	r3, r7
 800350c:	3304      	adds	r3, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd fe08 	bl	8001124 <print>
    setCursor(0,2);
 8003514:	2102      	movs	r1, #2
 8003516:	2000      	movs	r0, #0
 8003518:	f7fd fda6 	bl	8001068 <setCursor>
    if(p+1 >= MenuoptionCounts)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	4b1f      	ldr	r3, [pc, #124]	; (80035a0 <ShowInfo+0xec>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	db04      	blt.n	8003532 <ShowInfo+0x7e>
        print(temp);
 8003528:	463b      	mov	r3, r7
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fdfa 	bl	8001124 <print>
 8003530:	e00c      	b.n	800354c <ShowInfo+0x98>
	else
		print(info.menuItems[p+1]);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	3308      	adds	r3, #8
 8003540:	3328      	adds	r3, #40	; 0x28
 8003542:	443b      	add	r3, r7
 8003544:	3304      	adds	r3, #4
 8003546:	4618      	mov	r0, r3
 8003548:	f7fd fdec 	bl	8001124 <print>
    setCursor(0,3);
 800354c:	2103      	movs	r1, #3
 800354e:	2000      	movs	r0, #0
 8003550:	f7fd fd8a 	bl	8001068 <setCursor>
    if(p+2 >= MenuoptionCounts)
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	1c9a      	adds	r2, r3, #2
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <ShowInfo+0xec>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	db04      	blt.n	800356a <ShowInfo+0xb6>
        print(temp);
 8003560:	463b      	mov	r3, r7
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd fdde 	bl	8001124 <print>
 8003568:	e00c      	b.n	8003584 <ShowInfo+0xd0>
	else
		print(info.menuItems[p+2]);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	1c9a      	adds	r2, r3, #2
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	3308      	adds	r3, #8
 8003578:	3328      	adds	r3, #40	; 0x28
 800357a:	443b      	add	r3, r7
 800357c:	3304      	adds	r3, #4
 800357e:	4618      	mov	r0, r3
 8003580:	f7fd fdd0 	bl	8001124 <print>
    display();
 8003584:	f7fd fdb8 	bl	80010f8 <display>
}
 8003588:	bf00      	nop
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003592:	b004      	add	sp, #16
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000868 	.word	0x20000868
 800359c:	0800d8f0 	.word	0x0800d8f0
 80035a0:	20000864 	.word	0x20000864

080035a4 <changeOption>:
void changeOption(int down){
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b08d      	sub	sp, #52	; 0x34
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
	char newStr[20] = ">";
 80035ac:	233e      	movs	r3, #62	; 0x3e
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	f107 0310 	add.w	r3, r7, #16
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
	strcat(newStr,currentMenu[CurrentMenuOption]);
 80035be:	4b58      	ldr	r3, [pc, #352]	; (8003720 <changeOption+0x17c>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4a56      	ldr	r2, [pc, #344]	; (8003724 <changeOption+0x180>)
 80035cc:	441a      	add	r2, r3
 80035ce:	f107 030c 	add.w	r3, r7, #12
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f008 fa45 	bl	800ba64 <strcat>
	strcpy(currentMenu[CurrentMenuOption],newStr);
 80035da:	4b51      	ldr	r3, [pc, #324]	; (8003720 <changeOption+0x17c>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4a4f      	ldr	r2, [pc, #316]	; (8003724 <changeOption+0x180>)
 80035e8:	4413      	add	r3, r2
 80035ea:	f107 020c 	add.w	r2, r7, #12
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f008 fa46 	bl	800ba82 <strcpy>
	if(down == 1){
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d145      	bne.n	8003688 <changeOption+0xe4>
		if(CurrentMenuOption > 0){
 80035fc:	4b48      	ldr	r3, [pc, #288]	; (8003720 <changeOption+0x17c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f340 8087 	ble.w	8003714 <changeOption+0x170>
			int length  = strlen(currentMenu[CurrentMenuOption - 1]) - 1;
 8003606:	4b46      	ldr	r3, [pc, #280]	; (8003720 <changeOption+0x17c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	1e5a      	subs	r2, r3, #1
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4a43      	ldr	r2, [pc, #268]	; (8003724 <changeOption+0x180>)
 8003616:	4413      	add	r3, r2
 8003618:	4618      	mov	r0, r3
 800361a:	f7fc fde3 	bl	80001e4 <strlen>
 800361e:	4603      	mov	r3, r0
 8003620:	3b01      	subs	r3, #1
 8003622:	623b      	str	r3, [r7, #32]
			for (int i = 0; i< length ;i++)
 8003624:	2300      	movs	r3, #0
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003628:	e01c      	b.n	8003664 <changeOption+0xc0>
			{
				currentMenu[CurrentMenuOption - 1][i] = currentMenu[CurrentMenuOption - 1][i+1];
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <changeOption+0x17c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	1e59      	subs	r1, r3, #1
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	1c58      	adds	r0, r3, #1
 8003634:	4b3a      	ldr	r3, [pc, #232]	; (8003720 <changeOption+0x17c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	1e5a      	subs	r2, r3, #1
 800363a:	4c3a      	ldr	r4, [pc, #232]	; (8003724 <changeOption+0x180>)
 800363c:	460b      	mov	r3, r1
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4423      	add	r3, r4
 8003646:	4403      	add	r3, r0
 8003648:	7818      	ldrb	r0, [r3, #0]
 800364a:	4936      	ldr	r1, [pc, #216]	; (8003724 <changeOption+0x180>)
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	18ca      	adds	r2, r1, r3
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	4413      	add	r3, r2
 800365a:	4602      	mov	r2, r0
 800365c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i< length ;i++)
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	3301      	adds	r3, #1
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	429a      	cmp	r2, r3
 800366a:	dbde      	blt.n	800362a <changeOption+0x86>
			}
			currentMenu[CurrentMenuOption - 1][length] = '\0';
 800366c:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <changeOption+0x17c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	1e5a      	subs	r2, r3, #1
 8003672:	492c      	ldr	r1, [pc, #176]	; (8003724 <changeOption+0x180>)
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	18ca      	adds	r2, r1, r3
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	4413      	add	r3, r2
 8003682:	2200      	movs	r2, #0
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e045      	b.n	8003714 <changeOption+0x170>
		}
	}
	else{
		if(CurrentMenuOption < MenuoptionCounts){
 8003688:	4b25      	ldr	r3, [pc, #148]	; (8003720 <changeOption+0x17c>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b26      	ldr	r3, [pc, #152]	; (8003728 <changeOption+0x184>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	da3f      	bge.n	8003714 <changeOption+0x170>
			int length  = strlen(currentMenu[CurrentMenuOption + 1]) - 1;
 8003694:	4b22      	ldr	r3, [pc, #136]	; (8003720 <changeOption+0x17c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4a20      	ldr	r2, [pc, #128]	; (8003724 <changeOption+0x180>)
 80036a4:	4413      	add	r3, r2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fc fd9c 	bl	80001e4 <strlen>
 80036ac:	4603      	mov	r3, r0
 80036ae:	3b01      	subs	r3, #1
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
			for (int i = 0; i< length ;i++)
 80036b2:	2300      	movs	r3, #0
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b6:	e01c      	b.n	80036f2 <changeOption+0x14e>
			{
				currentMenu[CurrentMenuOption + 1][i] = currentMenu[CurrentMenuOption + 1][i+1];
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <changeOption+0x17c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	1c59      	adds	r1, r3, #1
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	1c58      	adds	r0, r3, #1
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <changeOption+0x17c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	4c16      	ldr	r4, [pc, #88]	; (8003724 <changeOption+0x180>)
 80036ca:	460b      	mov	r3, r1
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4423      	add	r3, r4
 80036d4:	4403      	add	r3, r0
 80036d6:	7818      	ldrb	r0, [r3, #0]
 80036d8:	4912      	ldr	r1, [pc, #72]	; (8003724 <changeOption+0x180>)
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	18ca      	adds	r2, r1, r3
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	4413      	add	r3, r2
 80036e8:	4602      	mov	r2, r0
 80036ea:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i< length ;i++)
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	3301      	adds	r3, #1
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	429a      	cmp	r2, r3
 80036f8:	dbde      	blt.n	80036b8 <changeOption+0x114>
			}
			currentMenu[CurrentMenuOption + 1][length] = '\0';
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <changeOption+0x17c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	4908      	ldr	r1, [pc, #32]	; (8003724 <changeOption+0x180>)
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	18ca      	adds	r2, r1, r3
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	4413      	add	r3, r2
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]
		}
	}
	ShowMenu();
 8003714:	f7ff fe56 	bl	80033c4 <ShowMenu>
}
 8003718:	bf00      	nop
 800371a:	3734      	adds	r7, #52	; 0x34
 800371c:	46bd      	mov	sp, r7
 800371e:	bd90      	pop	{r4, r7, pc}
 8003720:	20000860 	.word	0x20000860
 8003724:	2000003c 	.word	0x2000003c
 8003728:	20000864 	.word	0x20000864

0800372c <SetMenu>:
void SetMenu(char MenuItems[][20]){
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 12 ; i++){
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	e00b      	b.n	8003752 <SetMenu+0x26>
	    strcpy(currentMenu[i],"");
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4a15      	ldr	r2, [pc, #84]	; (800379c <SetMenu+0x70>)
 8003746:	4413      	add	r3, r2
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 12 ; i++){
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3301      	adds	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b0b      	cmp	r3, #11
 8003756:	ddf0      	ble.n	800373a <SetMenu+0xe>
	}
	for(int i = 0; i < MenuoptionCounts; i++){
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	e014      	b.n	8003788 <SetMenu+0x5c>
	    strcpy(currentMenu[i],MenuItems[i]);
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4a0c      	ldr	r2, [pc, #48]	; (800379c <SetMenu+0x70>)
 800376a:	1898      	adds	r0, r3, r2
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	461a      	mov	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4413      	add	r3, r2
 800377c:	4619      	mov	r1, r3
 800377e:	f008 f980 	bl	800ba82 <strcpy>
	for(int i = 0; i < MenuoptionCounts; i++){
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	3301      	adds	r3, #1
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <SetMenu+0x74>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	429a      	cmp	r2, r3
 8003790:	dbe5      	blt.n	800375e <SetMenu+0x32>
	}
}
 8003792:	bf00      	nop
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	2000003c 	.word	0x2000003c
 80037a0:	20000864 	.word	0x20000864

080037a4 <messageSetter>:
void messageSetter(struct TreeNode* node, char* newChar){
 80037a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
	if(strcmp(newChar,"null") != 0 && strcmp(newChar,"dell") != 0){
 80037b0:	4933      	ldr	r1, [pc, #204]	; (8003880 <messageSetter+0xdc>)
 80037b2:	6838      	ldr	r0, [r7, #0]
 80037b4:	f7fc fd0c 	bl	80001d0 <strcmp>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d03d      	beq.n	800383a <messageSetter+0x96>
 80037be:	4931      	ldr	r1, [pc, #196]	; (8003884 <messageSetter+0xe0>)
 80037c0:	6838      	ldr	r0, [r7, #0]
 80037c2:	f7fc fd05 	bl	80001d0 <strcmp>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d036      	beq.n	800383a <messageSetter+0x96>
		int len = strlen(node->screen.content);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	33d0      	adds	r3, #208	; 0xd0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fc fd07 	bl	80001e4 <strlen>
 80037d6:	4603      	mov	r3, r0
 80037d8:	60fb      	str	r3, [r7, #12]
		if(HAL_GetTick()- lastPress < 800  && sameKeyPressed){
 80037da:	f002 f895 	bl	8005908 <HAL_GetTick>
 80037de:	4603      	mov	r3, r0
 80037e0:	2200      	movs	r2, #0
 80037e2:	4698      	mov	r8, r3
 80037e4:	4691      	mov	r9, r2
 80037e6:	4b28      	ldr	r3, [pc, #160]	; (8003888 <messageSetter+0xe4>)
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	ebb8 0402 	subs.w	r4, r8, r2
 80037f0:	eb69 0503 	sbc.w	r5, r9, r3
 80037f4:	f5b4 7f48 	cmp.w	r4, #800	; 0x320
 80037f8:	f175 0300 	sbcs.w	r3, r5, #0
 80037fc:	d20d      	bcs.n	800381a <messageSetter+0x76>
 80037fe:	4b23      	ldr	r3, [pc, #140]	; (800388c <messageSetter+0xe8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <messageSetter+0x76>
			node->screen.content[len - 1] = newChar[0];
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3b01      	subs	r3, #1
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	7811      	ldrb	r1, [r2, #0]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	460a      	mov	r2, r1
 8003814:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	if(strcmp(newChar,"null") != 0 && strcmp(newChar,"dell") != 0){
 8003818:	e027      	b.n	800386a <messageSetter+0xc6>
		}
		else{
			node->screen.content[len] = newChar[0];
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	7819      	ldrb	r1, [r3, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	33d0      	adds	r3, #208	; 0xd0
 8003826:	460a      	mov	r2, r1
 8003828:	701a      	strb	r2, [r3, #0]
			node->screen.content[len+1] = '\0';
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3301      	adds	r3, #1
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	2200      	movs	r2, #0
 8003834:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	if(strcmp(newChar,"null") != 0 && strcmp(newChar,"dell") != 0){
 8003838:	e017      	b.n	800386a <messageSetter+0xc6>
		}
	}
	else if(strcmp(newChar,"dell") == 0){
 800383a:	4912      	ldr	r1, [pc, #72]	; (8003884 <messageSetter+0xe0>)
 800383c:	6838      	ldr	r0, [r7, #0]
 800383e:	f7fc fcc7 	bl	80001d0 <strcmp>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d110      	bne.n	800386a <messageSetter+0xc6>
		int len = strlen(node->screen.content);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	33d0      	adds	r3, #208	; 0xd0
 800384c:	4618      	mov	r0, r3
 800384e:	f7fc fcc9 	bl	80001e4 <strlen>
 8003852:	4603      	mov	r3, r0
 8003854:	60bb      	str	r3, [r7, #8]
		if(len >0){
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	dd06      	ble.n	800386a <messageSetter+0xc6>
			node->screen.content[len - 1] = '\0';
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	3b01      	subs	r3, #1
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4413      	add	r3, r2
 8003864:	2200      	movs	r2, #0
 8003866:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
		}
	}
	strcpy(startMassage,node->screen.content);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	33d0      	adds	r3, #208	; 0xd0
 800386e:	4619      	mov	r1, r3
 8003870:	4807      	ldr	r0, [pc, #28]	; (8003890 <messageSetter+0xec>)
 8003872:	f008 f906 	bl	800ba82 <strcpy>
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003880:	0800d904 	.word	0x0800d904
 8003884:	0800d90c 	.word	0x0800d90c
 8003888:	20000858 	.word	0x20000858
 800388c:	20000874 	.word	0x20000874
 8003890:	20000830 	.word	0x20000830

08003894 <setOn>:
void setOn(struct menuScreen* screen){
 8003894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003896:	b08b      	sub	sp, #44	; 0x2c
 8003898:	af04      	add	r7, sp, #16
 800389a:	60f8      	str	r0, [r7, #12]
	if(strcmp(screen->content,"<  on  >") != 0 ){
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	33ac      	adds	r3, #172	; 0xac
 80038a0:	4979      	ldr	r1, [pc, #484]	; (8003a88 <setOn+0x1f4>)
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fc fc94 	bl	80001d0 <strcmp>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80a8 	beq.w	8003a00 <setOn+0x16c>
		strcpy(screen->content,"<  on  >");
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	33ac      	adds	r3, #172	; 0xac
 80038b4:	4974      	ldr	r1, [pc, #464]	; (8003a88 <setOn+0x1f4>)
 80038b6:	461a      	mov	r2, r3
 80038b8:	460b      	mov	r3, r1
 80038ba:	cb03      	ldmia	r3!, {r0, r1}
 80038bc:	6010      	str	r0, [r2, #0]
 80038be:	6051      	str	r1, [r2, #4]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	7213      	strb	r3, [r2, #8]
		if(screen->id > lastPagesId){
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b70      	ldr	r3, [pc, #448]	; (8003a8c <setOn+0x1f8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	dd43      	ble.n	8003958 <setOn+0xc4>
			int index = screen->id - lastPagesId - 1;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b6d      	ldr	r3, [pc, #436]	; (8003a8c <setOn+0x1f8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	617b      	str	r3, [r7, #20]
			setScenario(addedScenarios[index][0], addedScenarios[index][1], addedScenarios[index][2], addedScenarios[index][3], addedScenarios[index][4], addedScenarios[index][5], addedScenarios[index][6], addedScenarios[index][7]);
 80038de:	4a6c      	ldr	r2, [pc, #432]	; (8003a90 <setOn+0x1fc>)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	015b      	lsls	r3, r3, #5
 80038e4:	4413      	add	r3, r2
 80038e6:	681c      	ldr	r4, [r3, #0]
 80038e8:	4a69      	ldr	r2, [pc, #420]	; (8003a90 <setOn+0x1fc>)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	015b      	lsls	r3, r3, #5
 80038ee:	4413      	add	r3, r2
 80038f0:	3304      	adds	r3, #4
 80038f2:	681d      	ldr	r5, [r3, #0]
 80038f4:	4a66      	ldr	r2, [pc, #408]	; (8003a90 <setOn+0x1fc>)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	015b      	lsls	r3, r3, #5
 80038fa:	4413      	add	r3, r2
 80038fc:	3308      	adds	r3, #8
 80038fe:	681e      	ldr	r6, [r3, #0]
 8003900:	4a63      	ldr	r2, [pc, #396]	; (8003a90 <setOn+0x1fc>)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	015b      	lsls	r3, r3, #5
 8003906:	4413      	add	r3, r2
 8003908:	330c      	adds	r3, #12
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	4a60      	ldr	r2, [pc, #384]	; (8003a90 <setOn+0x1fc>)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	015b      	lsls	r3, r3, #5
 8003914:	4413      	add	r3, r2
 8003916:	3310      	adds	r3, #16
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	495d      	ldr	r1, [pc, #372]	; (8003a90 <setOn+0x1fc>)
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	0152      	lsls	r2, r2, #5
 8003920:	440a      	add	r2, r1
 8003922:	3214      	adds	r2, #20
 8003924:	6812      	ldr	r2, [r2, #0]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	4859      	ldr	r0, [pc, #356]	; (8003a90 <setOn+0x1fc>)
 800392a:	6979      	ldr	r1, [r7, #20]
 800392c:	0149      	lsls	r1, r1, #5
 800392e:	4401      	add	r1, r0
 8003930:	3118      	adds	r1, #24
 8003932:	6809      	ldr	r1, [r1, #0]
 8003934:	4856      	ldr	r0, [pc, #344]	; (8003a90 <setOn+0x1fc>)
 8003936:	4602      	mov	r2, r0
 8003938:	6978      	ldr	r0, [r7, #20]
 800393a:	0140      	lsls	r0, r0, #5
 800393c:	4410      	add	r0, r2
 800393e:	301c      	adds	r0, #28
 8003940:	6800      	ldr	r0, [r0, #0]
 8003942:	9003      	str	r0, [sp, #12]
 8003944:	9102      	str	r1, [sp, #8]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	9201      	str	r2, [sp, #4]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4632      	mov	r2, r6
 8003950:	4629      	mov	r1, r5
 8003952:	4620      	mov	r0, r4
 8003954:	f000 fa08 	bl	8003d68 <setScenario>
		}
		switch(screen->id){
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3b08      	subs	r3, #8
 800395e:	2b09      	cmp	r3, #9
 8003960:	f200 808d 	bhi.w	8003a7e <setOn+0x1ea>
 8003964:	a201      	add	r2, pc, #4	; (adr r2, 800396c <setOn+0xd8>)
 8003966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396a:	bf00      	nop
 800396c:	08003995 	.word	0x08003995
 8003970:	0800399d 	.word	0x0800399d
 8003974:	080039a5 	.word	0x080039a5
 8003978:	080039ad 	.word	0x080039ad
 800397c:	080039cb 	.word	0x080039cb
 8003980:	08003a7f 	.word	0x08003a7f
 8003984:	08003a7f 	.word	0x08003a7f
 8003988:	080039e9 	.word	0x080039e9
 800398c:	080039f1 	.word	0x080039f1
 8003990:	080039f9 	.word	0x080039f9
			case 8:
				temAlarm = 1;
 8003994:	4b3f      	ldr	r3, [pc, #252]	; (8003a94 <setOn+0x200>)
 8003996:	2201      	movs	r2, #1
 8003998:	601a      	str	r2, [r3, #0]
				break;
 800399a:	e070      	b.n	8003a7e <setOn+0x1ea>
			case 9:
				securityAlert = 1;
 800399c:	4b3e      	ldr	r3, [pc, #248]	; (8003a98 <setOn+0x204>)
 800399e:	2201      	movs	r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
				break;
 80039a2:	e06c      	b.n	8003a7e <setOn+0x1ea>
			case 10:
				securityAlarm = 1;
 80039a4:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <setOn+0x208>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
				break;
 80039aa:	e068      	b.n	8003a7e <setOn+0x1ea>
			case 11: // scenario 1: entering the house
				setScenario(22, 1, 0, 1, 1, 1, 0, 0);
 80039ac:	2300      	movs	r3, #0
 80039ae:	9303      	str	r3, [sp, #12]
 80039b0:	2300      	movs	r3, #0
 80039b2:	9302      	str	r3, [sp, #8]
 80039b4:	2301      	movs	r3, #1
 80039b6:	9301      	str	r3, [sp, #4]
 80039b8:	2301      	movs	r3, #1
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	2301      	movs	r3, #1
 80039be:	2200      	movs	r2, #0
 80039c0:	2101      	movs	r1, #1
 80039c2:	2016      	movs	r0, #22
 80039c4:	f000 f9d0 	bl	8003d68 <setScenario>
				break;
 80039c8:	e059      	b.n	8003a7e <setOn+0x1ea>
			case 12:// scenario 2: leaving the house
				setScenario(35, 1, 1, 1, 0, 0, 0, 0);
 80039ca:	2300      	movs	r3, #0
 80039cc:	9303      	str	r3, [sp, #12]
 80039ce:	2300      	movs	r3, #0
 80039d0:	9302      	str	r3, [sp, #8]
 80039d2:	2300      	movs	r3, #0
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	2300      	movs	r3, #0
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2301      	movs	r3, #1
 80039dc:	2201      	movs	r2, #1
 80039de:	2101      	movs	r1, #1
 80039e0:	2023      	movs	r0, #35	; 0x23
 80039e2:	f000 f9c1 	bl	8003d68 <setScenario>
				break;
 80039e6:	e04a      	b.n	8003a7e <setOn+0x1ea>
			case 15:
				newSceneTemAlarm = 1;
 80039e8:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <setOn+0x20c>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
				break;
 80039ee:	e046      	b.n	8003a7e <setOn+0x1ea>
			case 16:
				newScenesecurityAlarm = 1;
 80039f0:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <setOn+0x210>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
				break;
 80039f6:	e042      	b.n	8003a7e <setOn+0x1ea>
			case 17:
				newSceneSecurityAlert = 1;
 80039f8:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <setOn+0x214>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
				break;
 80039fe:	e03e      	b.n	8003a7e <setOn+0x1ea>
		}

	}
	else{
		strcpy(screen->content,"<  off  >");
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	33ac      	adds	r3, #172	; 0xac
 8003a04:	4929      	ldr	r1, [pc, #164]	; (8003aac <setOn+0x218>)
 8003a06:	461a      	mov	r2, r3
 8003a08:	460b      	mov	r3, r1
 8003a0a:	cb03      	ldmia	r3!, {r0, r1}
 8003a0c:	6010      	str	r0, [r2, #0]
 8003a0e:	6051      	str	r1, [r2, #4]
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	8113      	strh	r3, [r2, #8]
		switch(screen->id){
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3b08      	subs	r3, #8
 8003a1a:	2b09      	cmp	r3, #9
 8003a1c:	d82f      	bhi.n	8003a7e <setOn+0x1ea>
 8003a1e:	a201      	add	r2, pc, #4	; (adr r2, 8003a24 <setOn+0x190>)
 8003a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a24:	08003a4d 	.word	0x08003a4d
 8003a28:	08003a55 	.word	0x08003a55
 8003a2c:	08003a5d 	.word	0x08003a5d
 8003a30:	08003a7d 	.word	0x08003a7d
 8003a34:	08003a7d 	.word	0x08003a7d
 8003a38:	08003a7f 	.word	0x08003a7f
 8003a3c:	08003a7f 	.word	0x08003a7f
 8003a40:	08003a65 	.word	0x08003a65
 8003a44:	08003a6d 	.word	0x08003a6d
 8003a48:	08003a75 	.word	0x08003a75
			case 8:
				temAlarm = 0;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <setOn+0x200>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
				break;
 8003a52:	e014      	b.n	8003a7e <setOn+0x1ea>
			case 9:
				securityAlert = 0;
 8003a54:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <setOn+0x204>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
				break;
 8003a5a:	e010      	b.n	8003a7e <setOn+0x1ea>
			case 10:
				securityAlarm = 0;
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <setOn+0x208>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
				break;
 8003a62:	e00c      	b.n	8003a7e <setOn+0x1ea>
			case 11:
				break;
			case 12:
				break;
			case 15:
				newSceneTemAlarm = 0;
 8003a64:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <setOn+0x20c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
				break;
 8003a6a:	e008      	b.n	8003a7e <setOn+0x1ea>
			case 16:
				newScenesecurityAlarm = 0;
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <setOn+0x210>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
				break;
 8003a72:	e004      	b.n	8003a7e <setOn+0x1ea>
			case 17:
				newSceneSecurityAlert = 0;
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <setOn+0x214>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
				break;
 8003a7a:	e000      	b.n	8003a7e <setOn+0x1ea>
				break;
 8003a7c:	bf00      	nop
		}
	}
}
 8003a7e:	bf00      	nop
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a86:	bf00      	nop
 8003a88:	0800d914 	.word	0x0800d914
 8003a8c:	2000087c 	.word	0x2000087c
 8003a90:	200007ac 	.word	0x200007ac
 8003a94:	2000000c 	.word	0x2000000c
 8003a98:	20000014 	.word	0x20000014
 8003a9c:	20000010 	.word	0x20000010
 8003aa0:	2000001c 	.word	0x2000001c
 8003aa4:	20000020 	.word	0x20000020
 8003aa8:	20000024 	.word	0x20000024
 8003aac:	0800d884 	.word	0x0800d884

08003ab0 <setExactOn>:
void setExactOn(struct menuScreen* screen,int value){
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
	if(value == 1){
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d13d      	bne.n	8003b3c <setExactOn+0x8c>
			strcpy(screen->content,"<  on  >");
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	33ac      	adds	r3, #172	; 0xac
 8003ac4:	493f      	ldr	r1, [pc, #252]	; (8003bc4 <setExactOn+0x114>)
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	460b      	mov	r3, r1
 8003aca:	cb03      	ldmia	r3!, {r0, r1}
 8003acc:	6010      	str	r0, [r2, #0]
 8003ace:	6051      	str	r1, [r2, #4]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	7213      	strb	r3, [r2, #8]
			switch(screen->id){
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3b08      	subs	r3, #8
 8003ada:	2b09      	cmp	r3, #9
 8003adc:	d86c      	bhi.n	8003bb8 <setExactOn+0x108>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <setExactOn+0x34>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b0d 	.word	0x08003b0d
 8003ae8:	08003b15 	.word	0x08003b15
 8003aec:	08003b1d 	.word	0x08003b1d
 8003af0:	08003bb9 	.word	0x08003bb9
 8003af4:	08003bb9 	.word	0x08003bb9
 8003af8:	08003bb9 	.word	0x08003bb9
 8003afc:	08003bb9 	.word	0x08003bb9
 8003b00:	08003b25 	.word	0x08003b25
 8003b04:	08003b2d 	.word	0x08003b2d
 8003b08:	08003b35 	.word	0x08003b35
				case 8:
					temAlarm = 1;
 8003b0c:	4b2e      	ldr	r3, [pc, #184]	; (8003bc8 <setExactOn+0x118>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
					break;
 8003b12:	e051      	b.n	8003bb8 <setExactOn+0x108>
				case 9:
					securityAlert = 1;
 8003b14:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <setExactOn+0x11c>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
					break;
 8003b1a:	e04d      	b.n	8003bb8 <setExactOn+0x108>
				case 10:
					securityAlarm = 1;
 8003b1c:	4b2c      	ldr	r3, [pc, #176]	; (8003bd0 <setExactOn+0x120>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
					break;
 8003b22:	e049      	b.n	8003bb8 <setExactOn+0x108>
				case 15:
					newSceneTemAlarm = 1;
 8003b24:	4b2b      	ldr	r3, [pc, #172]	; (8003bd4 <setExactOn+0x124>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]
					break;
 8003b2a:	e045      	b.n	8003bb8 <setExactOn+0x108>
				case 16:
					newScenesecurityAlarm = 1;
 8003b2c:	4b2a      	ldr	r3, [pc, #168]	; (8003bd8 <setExactOn+0x128>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
					break;
 8003b32:	e041      	b.n	8003bb8 <setExactOn+0x108>
				case 17:
					newSceneSecurityAlert = 1;
 8003b34:	4b29      	ldr	r3, [pc, #164]	; (8003bdc <setExactOn+0x12c>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
					break;
 8003b3a:	e03d      	b.n	8003bb8 <setExactOn+0x108>
			}
		}
		else{
			strcpy(screen->content,"<  off  >");
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	33ac      	adds	r3, #172	; 0xac
 8003b40:	4927      	ldr	r1, [pc, #156]	; (8003be0 <setExactOn+0x130>)
 8003b42:	461a      	mov	r2, r3
 8003b44:	460b      	mov	r3, r1
 8003b46:	cb03      	ldmia	r3!, {r0, r1}
 8003b48:	6010      	str	r0, [r2, #0]
 8003b4a:	6051      	str	r1, [r2, #4]
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	8113      	strh	r3, [r2, #8]
			switch(screen->id){
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3b08      	subs	r3, #8
 8003b56:	2b09      	cmp	r3, #9
 8003b58:	d82e      	bhi.n	8003bb8 <setExactOn+0x108>
 8003b5a:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <setExactOn+0xb0>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b89 	.word	0x08003b89
 8003b64:	08003b91 	.word	0x08003b91
 8003b68:	08003b99 	.word	0x08003b99
 8003b6c:	08003bb9 	.word	0x08003bb9
 8003b70:	08003bb9 	.word	0x08003bb9
 8003b74:	08003bb9 	.word	0x08003bb9
 8003b78:	08003bb9 	.word	0x08003bb9
 8003b7c:	08003ba1 	.word	0x08003ba1
 8003b80:	08003ba9 	.word	0x08003ba9
 8003b84:	08003bb1 	.word	0x08003bb1
				case 8:
					temAlarm = 0;
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <setExactOn+0x118>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
					break;
 8003b8e:	e013      	b.n	8003bb8 <setExactOn+0x108>
				case 9:
					securityAlert = 0;
 8003b90:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <setExactOn+0x11c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
					break;
 8003b96:	e00f      	b.n	8003bb8 <setExactOn+0x108>
				case 10:
					securityAlarm = 0;
 8003b98:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <setExactOn+0x120>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
					break;
 8003b9e:	e00b      	b.n	8003bb8 <setExactOn+0x108>
				case 15:
					newSceneTemAlarm = 0;
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <setExactOn+0x124>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
					break;
 8003ba6:	e007      	b.n	8003bb8 <setExactOn+0x108>
				case 16:
					newScenesecurityAlarm = 0;
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <setExactOn+0x128>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
					break;
 8003bae:	e003      	b.n	8003bb8 <setExactOn+0x108>
				case 17:
					newSceneSecurityAlert = 0;
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <setExactOn+0x12c>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
					break;
 8003bb6:	bf00      	nop
			}
		}
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	0800d914 	.word	0x0800d914
 8003bc8:	2000000c 	.word	0x2000000c
 8003bcc:	20000014 	.word	0x20000014
 8003bd0:	20000010 	.word	0x20000010
 8003bd4:	2000001c 	.word	0x2000001c
 8003bd8:	20000020 	.word	0x20000020
 8003bdc:	20000024 	.word	0x20000024
 8003be0:	0800d884 	.word	0x0800d884

08003be4 <setThreshold>:
void setThreshold(struct menuScreen* screen, int increase, int temperId){
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
	if(temperId == 0){
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d11a      	bne.n	8003c2c <setThreshold+0x48>
		if(increase && temThreshold > 0)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <setThreshold+0x2c>
 8003bfc:	4b1c      	ldr	r3, [pc, #112]	; (8003c70 <setThreshold+0x8c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	dd05      	ble.n	8003c10 <setThreshold+0x2c>
			temThreshold++;
 8003c04:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <setThreshold+0x8c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <setThreshold+0x8c>)
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e004      	b.n	8003c1a <setThreshold+0x36>
		else
			temThreshold--;
 8003c10:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <setThreshold+0x8c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <setThreshold+0x8c>)
 8003c18:	6013      	str	r3, [r2, #0]

	    sprintf(screen->content,"<  %d  >", temThreshold);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	33ac      	adds	r3, #172	; 0xac
 8003c1e:	4a14      	ldr	r2, [pc, #80]	; (8003c70 <setThreshold+0x8c>)
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	4914      	ldr	r1, [pc, #80]	; (8003c74 <setThreshold+0x90>)
 8003c24:	4618      	mov	r0, r3
 8003c26:	f007 fefd 	bl	800ba24 <siprintf>
			newSceneTemThreshold--;
	    sprintf(screen->content,"<  %d  >", newSceneTemThreshold);

	}

}
 8003c2a:	e01c      	b.n	8003c66 <setThreshold+0x82>
	else if(temperId == 1){
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d119      	bne.n	8003c66 <setThreshold+0x82>
		if(increase && newSceneTemThreshold > 0)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d009      	beq.n	8003c4c <setThreshold+0x68>
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <setThreshold+0x94>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	dd05      	ble.n	8003c4c <setThreshold+0x68>
			newSceneTemThreshold++;
 8003c40:	4b0d      	ldr	r3, [pc, #52]	; (8003c78 <setThreshold+0x94>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <setThreshold+0x94>)
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e004      	b.n	8003c56 <setThreshold+0x72>
			newSceneTemThreshold--;
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <setThreshold+0x94>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <setThreshold+0x94>)
 8003c54:	6013      	str	r3, [r2, #0]
	    sprintf(screen->content,"<  %d  >", newSceneTemThreshold);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	33ac      	adds	r3, #172	; 0xac
 8003c5a:	4a07      	ldr	r2, [pc, #28]	; (8003c78 <setThreshold+0x94>)
 8003c5c:	6812      	ldr	r2, [r2, #0]
 8003c5e:	4905      	ldr	r1, [pc, #20]	; (8003c74 <setThreshold+0x90>)
 8003c60:	4618      	mov	r0, r3
 8003c62:	f007 fedf 	bl	800ba24 <siprintf>
}
 8003c66:	bf00      	nop
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000008 	.word	0x20000008
 8003c74:	0800d920 	.word	0x0800d920
 8003c78:	20000018 	.word	0x20000018

08003c7c <setExcactThreshold>:
void setExcactThreshold(struct menuScreen* screen, int threshold){
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
	temThreshold = threshold;
 8003c86:	4a07      	ldr	r2, [pc, #28]	; (8003ca4 <setExcactThreshold+0x28>)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6013      	str	r3, [r2, #0]
    sprintf(screen->content,"<  %d  >", temThreshold);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	33ac      	adds	r3, #172	; 0xac
 8003c90:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <setExcactThreshold+0x28>)
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	4904      	ldr	r1, [pc, #16]	; (8003ca8 <setExcactThreshold+0x2c>)
 8003c96:	4618      	mov	r0, r3
 8003c98:	f007 fec4 	bl	800ba24 <siprintf>
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000008 	.word	0x20000008
 8003ca8:	0800d920 	.word	0x0800d920

08003cac <setLigthToggle>:
void setLigthToggle(struct menuScreen* screen, int index,int* lights){
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
	lights[index] = 1 - lights[index];
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	440b      	add	r3, r1
 8003cca:	f1c2 0201 	rsb	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
	if(lights[index] == 1)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d109      	bne.n	8003cf2 <setLigthToggle+0x46>
		screen->content[index * 3] = 'O';
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4413      	add	r3, r2
 8003cea:	224f      	movs	r2, #79	; 0x4f
 8003cec:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	else
		screen->content[index * 3] = 'X';

}
 8003cf0:	e008      	b.n	8003d04 <setLigthToggle+0x58>
		screen->content[index * 3] = 'X';
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	2258      	movs	r2, #88	; 0x58
 8003d00:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <setExactLight>:
void setExactLight(struct menuScreen* screen, int index,int value){
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
	Lights[index] = value;
 8003d1c:	4911      	ldr	r1, [pc, #68]	; (8003d64 <setExactLight+0x54>)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(Lights[index] == 1)
 8003d26:	4a0f      	ldr	r2, [pc, #60]	; (8003d64 <setExactLight+0x54>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d109      	bne.n	8003d46 <setExactLight+0x36>
			screen->content[index * 3] = 'O';
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	4613      	mov	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4413      	add	r3, r2
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	224f      	movs	r2, #79	; 0x4f
 8003d40:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		else
			screen->content[index * 3] = 'X';
}
 8003d44:	e008      	b.n	8003d58 <setExactLight+0x48>
			screen->content[index * 3] = 'X';
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	4413      	add	r3, r2
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4413      	add	r3, r2
 8003d52:	2258      	movs	r2, #88	; 0x58
 8003d54:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	2000079c 	.word	0x2000079c

08003d68 <setScenario>:
void setScenario(int temperatureThreshold, int temperatureAlarm,int secAlarm, int secAlert, int l1,int l2, int l3, int l4){
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
	// calling previous functions
	setExcactThreshold(&(node7->screen),temperatureThreshold);
 8003d76:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <setScenario+0x90>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3324      	adds	r3, #36	; 0x24
 8003d7c:	68f9      	ldr	r1, [r7, #12]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff ff7c 	bl	8003c7c <setExcactThreshold>
	setExactLight(&(node4->screen),0,l1);
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <setScenario+0x94>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3324      	adds	r3, #36	; 0x24
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ffbe 	bl	8003d10 <setExactLight>
	setExactLight(&(node4->screen),1,l2);
 8003d94:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <setScenario+0x94>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3324      	adds	r3, #36	; 0x24
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ffb6 	bl	8003d10 <setExactLight>
	setExactLight(&(node4->screen),2,l3);
 8003da4:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <setScenario+0x94>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3324      	adds	r3, #36	; 0x24
 8003daa:	6a3a      	ldr	r2, [r7, #32]
 8003dac:	2102      	movs	r1, #2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff ffae 	bl	8003d10 <setExactLight>
	setExactLight(&(node4->screen),3,l4);
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <setScenario+0x94>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3324      	adds	r3, #36	; 0x24
 8003dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dbc:	2103      	movs	r1, #3
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff ffa6 	bl	8003d10 <setExactLight>
	setExactOn(&(node8->screen),temperatureAlarm);
 8003dc4:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <setScenario+0x98>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3324      	adds	r3, #36	; 0x24
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fe6f 	bl	8003ab0 <setExactOn>
	setExactOn(&(node10->screen),secAlarm);
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <setScenario+0x9c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3324      	adds	r3, #36	; 0x24
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fe68 	bl	8003ab0 <setExactOn>
	setExactOn(&(node9->screen),secAlert);
 8003de0:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <setScenario+0xa0>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3324      	adds	r3, #36	; 0x24
 8003de6:	6839      	ldr	r1, [r7, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff fe61 	bl	8003ab0 <setExactOn>
}
 8003dee:	bf00      	nop
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	200008ac 	.word	0x200008ac
 8003dfc:	200008a0 	.word	0x200008a0
 8003e00:	200008b0 	.word	0x200008b0
 8003e04:	200008b8 	.word	0x200008b8
 8003e08:	200008b4 	.word	0x200008b4

08003e0c <charSelector>:
char* charSelector(int key, int count) {
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
    switch (key) {
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	2b0d      	cmp	r3, #13
 8003e1c:	f200 810f 	bhi.w	800403e <charSelector+0x232>
 8003e20:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <charSelector+0x1c>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e61 	.word	0x08003e61
 8003e2c:	08003e89 	.word	0x08003e89
 8003e30:	08003eb9 	.word	0x08003eb9
 8003e34:	0800403f 	.word	0x0800403f
 8003e38:	08003ee9 	.word	0x08003ee9
 8003e3c:	08003f19 	.word	0x08003f19
 8003e40:	08003f49 	.word	0x08003f49
 8003e44:	0800403f 	.word	0x0800403f
 8003e48:	08003f79 	.word	0x08003f79
 8003e4c:	08003fb1 	.word	0x08003fb1
 8003e50:	08003fe1 	.word	0x08003fe1
 8003e54:	0800403f 	.word	0x0800403f
 8003e58:	0800403f 	.word	0x0800403f
 8003e5c:	08004019 	.word	0x08004019
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d00e      	beq.n	8003e84 <charSelector+0x78>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	f300 80d7 	bgt.w	800401c <charSelector+0x210>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d003      	beq.n	8003e7c <charSelector+0x70>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d002      	beq.n	8003e80 <charSelector+0x74>
                case 2:
                    return "1";
                case 3:
                    return " ";
            }
            break;
 8003e7a:	e0cf      	b.n	800401c <charSelector+0x210>
                    return "0";
 8003e7c:	4b73      	ldr	r3, [pc, #460]	; (800404c <charSelector+0x240>)
 8003e7e:	e0df      	b.n	8004040 <charSelector+0x234>
                    return "1";
 8003e80:	4b73      	ldr	r3, [pc, #460]	; (8004050 <charSelector+0x244>)
 8003e82:	e0dd      	b.n	8004040 <charSelector+0x234>
                    return " ";
 8003e84:	4b73      	ldr	r3, [pc, #460]	; (8004054 <charSelector+0x248>)
 8003e86:	e0db      	b.n	8004040 <charSelector+0x234>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	f200 80c7 	bhi.w	8004020 <charSelector+0x214>
 8003e92:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <charSelector+0x8c>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003ea9 	.word	0x08003ea9
 8003e9c:	08003ead 	.word	0x08003ead
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003eb5 	.word	0x08003eb5
        case 2:
            switch (count) {
                case 1:
                    return "2";
 8003ea8:	4b6b      	ldr	r3, [pc, #428]	; (8004058 <charSelector+0x24c>)
 8003eaa:	e0c9      	b.n	8004040 <charSelector+0x234>
                case 2:
                    return "a";
 8003eac:	4b6b      	ldr	r3, [pc, #428]	; (800405c <charSelector+0x250>)
 8003eae:	e0c7      	b.n	8004040 <charSelector+0x234>
                case 3:
                    return "b";
 8003eb0:	4b6b      	ldr	r3, [pc, #428]	; (8004060 <charSelector+0x254>)
 8003eb2:	e0c5      	b.n	8004040 <charSelector+0x234>
                case 4:
                    return "c";
 8003eb4:	4b6b      	ldr	r3, [pc, #428]	; (8004064 <charSelector+0x258>)
 8003eb6:	e0c3      	b.n	8004040 <charSelector+0x234>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	f200 80b1 	bhi.w	8004024 <charSelector+0x218>
 8003ec2:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <charSelector+0xbc>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003ed9 	.word	0x08003ed9
 8003ecc:	08003edd 	.word	0x08003edd
 8003ed0:	08003ee1 	.word	0x08003ee1
 8003ed4:	08003ee5 	.word	0x08003ee5
            }
            break;
        case 3:
            switch (count) {
                case 1:
                    return "3";
 8003ed8:	4b63      	ldr	r3, [pc, #396]	; (8004068 <charSelector+0x25c>)
 8003eda:	e0b1      	b.n	8004040 <charSelector+0x234>
                case 2:
                    return "d";
 8003edc:	4b63      	ldr	r3, [pc, #396]	; (800406c <charSelector+0x260>)
 8003ede:	e0af      	b.n	8004040 <charSelector+0x234>
                case 3:
                    return "e";
 8003ee0:	4b63      	ldr	r3, [pc, #396]	; (8004070 <charSelector+0x264>)
 8003ee2:	e0ad      	b.n	8004040 <charSelector+0x234>
                case 4:
                    return "f";
 8003ee4:	4b63      	ldr	r3, [pc, #396]	; (8004074 <charSelector+0x268>)
 8003ee6:	e0ab      	b.n	8004040 <charSelector+0x234>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	f200 809b 	bhi.w	8004028 <charSelector+0x21c>
 8003ef2:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <charSelector+0xec>)
 8003ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef8:	08003f09 	.word	0x08003f09
 8003efc:	08003f0d 	.word	0x08003f0d
 8003f00:	08003f11 	.word	0x08003f11
 8003f04:	08003f15 	.word	0x08003f15
            }
            break;
        case 5:
            switch (count) {
                case 1:
                    return "4";
 8003f08:	4b5b      	ldr	r3, [pc, #364]	; (8004078 <charSelector+0x26c>)
 8003f0a:	e099      	b.n	8004040 <charSelector+0x234>
                case 2:
                    return "g";
 8003f0c:	4b5b      	ldr	r3, [pc, #364]	; (800407c <charSelector+0x270>)
 8003f0e:	e097      	b.n	8004040 <charSelector+0x234>
                case 3:
                    return "h";
 8003f10:	4b5b      	ldr	r3, [pc, #364]	; (8004080 <charSelector+0x274>)
 8003f12:	e095      	b.n	8004040 <charSelector+0x234>
                case 4:
                    return "i";
 8003f14:	4b5b      	ldr	r3, [pc, #364]	; (8004084 <charSelector+0x278>)
 8003f16:	e093      	b.n	8004040 <charSelector+0x234>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	f200 8085 	bhi.w	800402c <charSelector+0x220>
 8003f22:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <charSelector+0x11c>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f39 	.word	0x08003f39
 8003f2c:	08003f3d 	.word	0x08003f3d
 8003f30:	08003f41 	.word	0x08003f41
 8003f34:	08003f45 	.word	0x08003f45
            }
            break;
        case 6:
            switch (count) {
                case 1:
                    return "5";
 8003f38:	4b53      	ldr	r3, [pc, #332]	; (8004088 <charSelector+0x27c>)
 8003f3a:	e081      	b.n	8004040 <charSelector+0x234>
                case 2:
                    return "j";
 8003f3c:	4b53      	ldr	r3, [pc, #332]	; (800408c <charSelector+0x280>)
 8003f3e:	e07f      	b.n	8004040 <charSelector+0x234>
                case 3:
                    return "k";
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <charSelector+0x284>)
 8003f42:	e07d      	b.n	8004040 <charSelector+0x234>
                case 4:
                    return "l";
 8003f44:	4b53      	ldr	r3, [pc, #332]	; (8004094 <charSelector+0x288>)
 8003f46:	e07b      	b.n	8004040 <charSelector+0x234>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d86f      	bhi.n	8004030 <charSelector+0x224>
 8003f50:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <charSelector+0x14c>)
 8003f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f56:	bf00      	nop
 8003f58:	08003f69 	.word	0x08003f69
 8003f5c:	08003f6d 	.word	0x08003f6d
 8003f60:	08003f71 	.word	0x08003f71
 8003f64:	08003f75 	.word	0x08003f75
            }
            break;
        case 7:
            switch (count) {
                case 1:
                    return "6";
 8003f68:	4b4b      	ldr	r3, [pc, #300]	; (8004098 <charSelector+0x28c>)
 8003f6a:	e069      	b.n	8004040 <charSelector+0x234>
                case 2:
                    return "m";
 8003f6c:	4b4b      	ldr	r3, [pc, #300]	; (800409c <charSelector+0x290>)
 8003f6e:	e067      	b.n	8004040 <charSelector+0x234>
                case 3:
                    return "n";
 8003f70:	4b4b      	ldr	r3, [pc, #300]	; (80040a0 <charSelector+0x294>)
 8003f72:	e065      	b.n	8004040 <charSelector+0x234>
                case 4:
                    return "o";
 8003f74:	4b4b      	ldr	r3, [pc, #300]	; (80040a4 <charSelector+0x298>)
 8003f76:	e063      	b.n	8004040 <charSelector+0x234>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d859      	bhi.n	8004034 <charSelector+0x228>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <charSelector+0x17c>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003f9d 	.word	0x08003f9d
 8003f8c:	08003fa1 	.word	0x08003fa1
 8003f90:	08003fa5 	.word	0x08003fa5
 8003f94:	08003fa9 	.word	0x08003fa9
 8003f98:	08003fad 	.word	0x08003fad
            }
            break;
        case 9:
            switch (count) {
                case 1:
                    return "7";
 8003f9c:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <charSelector+0x29c>)
 8003f9e:	e04f      	b.n	8004040 <charSelector+0x234>
                case 2:
                    return "p";
 8003fa0:	4b42      	ldr	r3, [pc, #264]	; (80040ac <charSelector+0x2a0>)
 8003fa2:	e04d      	b.n	8004040 <charSelector+0x234>
                case 3:
                    return "q";
 8003fa4:	4b42      	ldr	r3, [pc, #264]	; (80040b0 <charSelector+0x2a4>)
 8003fa6:	e04b      	b.n	8004040 <charSelector+0x234>
                case 4:
                    return "r";
 8003fa8:	4b42      	ldr	r3, [pc, #264]	; (80040b4 <charSelector+0x2a8>)
 8003faa:	e049      	b.n	8004040 <charSelector+0x234>
                case 5:
                    return "s";
 8003fac:	4b42      	ldr	r3, [pc, #264]	; (80040b8 <charSelector+0x2ac>)
 8003fae:	e047      	b.n	8004040 <charSelector+0x234>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d83f      	bhi.n	8004038 <charSelector+0x22c>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <charSelector+0x1b4>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003fd1 	.word	0x08003fd1
 8003fc4:	08003fd5 	.word	0x08003fd5
 8003fc8:	08003fd9 	.word	0x08003fd9
 8003fcc:	08003fdd 	.word	0x08003fdd
            }
            break;
        case 10:
            switch (count) {
                case 1:
                    return "8";
 8003fd0:	4b3a      	ldr	r3, [pc, #232]	; (80040bc <charSelector+0x2b0>)
 8003fd2:	e035      	b.n	8004040 <charSelector+0x234>
                case 2:
                    return "t";
 8003fd4:	4b3a      	ldr	r3, [pc, #232]	; (80040c0 <charSelector+0x2b4>)
 8003fd6:	e033      	b.n	8004040 <charSelector+0x234>
                case 3:
                    return "u";
 8003fd8:	4b3a      	ldr	r3, [pc, #232]	; (80040c4 <charSelector+0x2b8>)
 8003fda:	e031      	b.n	8004040 <charSelector+0x234>
                case 4:
                    return "v";
 8003fdc:	4b3a      	ldr	r3, [pc, #232]	; (80040c8 <charSelector+0x2bc>)
 8003fde:	e02f      	b.n	8004040 <charSelector+0x234>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d829      	bhi.n	800403c <charSelector+0x230>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <charSelector+0x1e4>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004005 	.word	0x08004005
 8003ff4:	08004009 	.word	0x08004009
 8003ff8:	0800400d 	.word	0x0800400d
 8003ffc:	08004011 	.word	0x08004011
 8004000:	08004015 	.word	0x08004015
            }
            break;
        case 11:
            switch (count) {
                case 1:
                    return "9";
 8004004:	4b31      	ldr	r3, [pc, #196]	; (80040cc <charSelector+0x2c0>)
 8004006:	e01b      	b.n	8004040 <charSelector+0x234>
                case 2:
                    return "w";
 8004008:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <charSelector+0x2c4>)
 800400a:	e019      	b.n	8004040 <charSelector+0x234>
                case 3:
                    return "x";
 800400c:	4b31      	ldr	r3, [pc, #196]	; (80040d4 <charSelector+0x2c8>)
 800400e:	e017      	b.n	8004040 <charSelector+0x234>
                case 4:
                    return "y";
 8004010:	4b31      	ldr	r3, [pc, #196]	; (80040d8 <charSelector+0x2cc>)
 8004012:	e015      	b.n	8004040 <charSelector+0x234>
                case 5:
                    return "z";
 8004014:	4b31      	ldr	r3, [pc, #196]	; (80040dc <charSelector+0x2d0>)
 8004016:	e013      	b.n	8004040 <charSelector+0x234>
            }
            break;
        case 14:
            return "dell";
 8004018:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <charSelector+0x2d4>)
 800401a:	e011      	b.n	8004040 <charSelector+0x234>
            break;
 800401c:	bf00      	nop
 800401e:	e00e      	b.n	800403e <charSelector+0x232>
            break;
 8004020:	bf00      	nop
 8004022:	e00c      	b.n	800403e <charSelector+0x232>
            break;
 8004024:	bf00      	nop
 8004026:	e00a      	b.n	800403e <charSelector+0x232>
            break;
 8004028:	bf00      	nop
 800402a:	e008      	b.n	800403e <charSelector+0x232>
            break;
 800402c:	bf00      	nop
 800402e:	e006      	b.n	800403e <charSelector+0x232>
            break;
 8004030:	bf00      	nop
 8004032:	e004      	b.n	800403e <charSelector+0x232>
            break;
 8004034:	bf00      	nop
 8004036:	e002      	b.n	800403e <charSelector+0x232>
            break;
 8004038:	bf00      	nop
 800403a:	e000      	b.n	800403e <charSelector+0x232>
            break;
 800403c:	bf00      	nop
    }

    return "null";
 800403e:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <charSelector+0x2d8>)
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	0800d92c 	.word	0x0800d92c
 8004050:	0800d930 	.word	0x0800d930
 8004054:	0800d934 	.word	0x0800d934
 8004058:	0800d938 	.word	0x0800d938
 800405c:	0800d93c 	.word	0x0800d93c
 8004060:	0800d940 	.word	0x0800d940
 8004064:	0800d944 	.word	0x0800d944
 8004068:	0800d948 	.word	0x0800d948
 800406c:	0800d94c 	.word	0x0800d94c
 8004070:	0800d950 	.word	0x0800d950
 8004074:	0800d954 	.word	0x0800d954
 8004078:	0800d958 	.word	0x0800d958
 800407c:	0800d95c 	.word	0x0800d95c
 8004080:	0800d960 	.word	0x0800d960
 8004084:	0800d964 	.word	0x0800d964
 8004088:	0800d968 	.word	0x0800d968
 800408c:	0800d96c 	.word	0x0800d96c
 8004090:	0800d970 	.word	0x0800d970
 8004094:	0800d974 	.word	0x0800d974
 8004098:	0800d978 	.word	0x0800d978
 800409c:	0800d97c 	.word	0x0800d97c
 80040a0:	0800d980 	.word	0x0800d980
 80040a4:	0800d984 	.word	0x0800d984
 80040a8:	0800d988 	.word	0x0800d988
 80040ac:	0800d98c 	.word	0x0800d98c
 80040b0:	0800d990 	.word	0x0800d990
 80040b4:	0800d994 	.word	0x0800d994
 80040b8:	0800d998 	.word	0x0800d998
 80040bc:	0800d99c 	.word	0x0800d99c
 80040c0:	0800d9a0 	.word	0x0800d9a0
 80040c4:	0800d9a4 	.word	0x0800d9a4
 80040c8:	0800d9a8 	.word	0x0800d9a8
 80040cc:	0800d9ac 	.word	0x0800d9ac
 80040d0:	0800d9b0 	.word	0x0800d9b0
 80040d4:	0800d9b4 	.word	0x0800d9b4
 80040d8:	0800d9b8 	.word	0x0800d9b8
 80040dc:	0800d9bc 	.word	0x0800d9bc
 80040e0:	0800d90c 	.word	0x0800d90c
 80040e4:	0800d904 	.word	0x0800d904

080040e8 <stateCountsForEachKey>:
int stateCountsForEachKey(int key){
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
		switch(key){
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	2b0a      	cmp	r3, #10
 80040f6:	d82b      	bhi.n	8004150 <stateCountsForEachKey+0x68>
 80040f8:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <stateCountsForEachKey+0x18>)
 80040fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fe:	bf00      	nop
 8004100:	0800412d 	.word	0x0800412d
 8004104:	08004131 	.word	0x08004131
 8004108:	08004135 	.word	0x08004135
 800410c:	08004151 	.word	0x08004151
 8004110:	08004139 	.word	0x08004139
 8004114:	0800413d 	.word	0x0800413d
 8004118:	08004141 	.word	0x08004141
 800411c:	08004151 	.word	0x08004151
 8004120:	08004145 	.word	0x08004145
 8004124:	08004149 	.word	0x08004149
 8004128:	0800414d 	.word	0x0800414d
		case 1:
			return 3;
 800412c:	2303      	movs	r3, #3
 800412e:	e010      	b.n	8004152 <stateCountsForEachKey+0x6a>
		case 2:
			return 4;
 8004130:	2304      	movs	r3, #4
 8004132:	e00e      	b.n	8004152 <stateCountsForEachKey+0x6a>
		case 3:
			return 4;
 8004134:	2304      	movs	r3, #4
 8004136:	e00c      	b.n	8004152 <stateCountsForEachKey+0x6a>
		case 5:
			return 4;
 8004138:	2304      	movs	r3, #4
 800413a:	e00a      	b.n	8004152 <stateCountsForEachKey+0x6a>
		case 6:
			return 4;
 800413c:	2304      	movs	r3, #4
 800413e:	e008      	b.n	8004152 <stateCountsForEachKey+0x6a>
		case 7:
			return 4;
 8004140:	2304      	movs	r3, #4
 8004142:	e006      	b.n	8004152 <stateCountsForEachKey+0x6a>
		case 9:
			return 5;
 8004144:	2305      	movs	r3, #5
 8004146:	e004      	b.n	8004152 <stateCountsForEachKey+0x6a>
		case 10:
			return 4;
 8004148:	2304      	movs	r3, #4
 800414a:	e002      	b.n	8004152 <stateCountsForEachKey+0x6a>
		case 11:
			return 5;
 800414c:	2305      	movs	r3, #5
 800414e:	e000      	b.n	8004152 <stateCountsForEachKey+0x6a>

	}
		return 0;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop

08004160 <nextCurrentNode>:
void nextCurrentNode(){
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
	switch(CurrentMenuOption){
 8004164:	4b26      	ldr	r3, [pc, #152]	; (8004200 <nextCurrentNode+0xa0>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b07      	cmp	r3, #7
 800416a:	d843      	bhi.n	80041f4 <nextCurrentNode+0x94>
 800416c:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <nextCurrentNode+0x14>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	08004195 	.word	0x08004195
 8004178:	080041a1 	.word	0x080041a1
 800417c:	080041ad 	.word	0x080041ad
 8004180:	080041b9 	.word	0x080041b9
 8004184:	080041c5 	.word	0x080041c5
 8004188:	080041d1 	.word	0x080041d1
 800418c:	080041dd 	.word	0x080041dd
 8004190:	080041e9 	.word	0x080041e9
		case 0:
			currentNode = currentNode->child1;
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <nextCurrentNode+0xa4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1a      	ldr	r2, [pc, #104]	; (8004204 <nextCurrentNode+0xa4>)
 800419c:	6013      	str	r3, [r2, #0]
			break;
 800419e:	e029      	b.n	80041f4 <nextCurrentNode+0x94>
		case 1:
			currentNode = currentNode->child2;
 80041a0:	4b18      	ldr	r3, [pc, #96]	; (8004204 <nextCurrentNode+0xa4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4a17      	ldr	r2, [pc, #92]	; (8004204 <nextCurrentNode+0xa4>)
 80041a8:	6013      	str	r3, [r2, #0]
			break;
 80041aa:	e023      	b.n	80041f4 <nextCurrentNode+0x94>
		case 2:
			currentNode = currentNode->child3;
 80041ac:	4b15      	ldr	r3, [pc, #84]	; (8004204 <nextCurrentNode+0xa4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	4a14      	ldr	r2, [pc, #80]	; (8004204 <nextCurrentNode+0xa4>)
 80041b4:	6013      	str	r3, [r2, #0]
			break;
 80041b6:	e01d      	b.n	80041f4 <nextCurrentNode+0x94>
		case 3:
			currentNode = currentNode->child4;
 80041b8:	4b12      	ldr	r3, [pc, #72]	; (8004204 <nextCurrentNode+0xa4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	4a11      	ldr	r2, [pc, #68]	; (8004204 <nextCurrentNode+0xa4>)
 80041c0:	6013      	str	r3, [r2, #0]
			break;
 80041c2:	e017      	b.n	80041f4 <nextCurrentNode+0x94>
		case 4:
			currentNode = currentNode->child5;
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <nextCurrentNode+0xa4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	4a0e      	ldr	r2, [pc, #56]	; (8004204 <nextCurrentNode+0xa4>)
 80041cc:	6013      	str	r3, [r2, #0]
			break;
 80041ce:	e011      	b.n	80041f4 <nextCurrentNode+0x94>
		case 5:
			currentNode = currentNode->child6;
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <nextCurrentNode+0xa4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	4a0b      	ldr	r2, [pc, #44]	; (8004204 <nextCurrentNode+0xa4>)
 80041d8:	6013      	str	r3, [r2, #0]
			break;
 80041da:	e00b      	b.n	80041f4 <nextCurrentNode+0x94>
		case 6:
			currentNode = currentNode->child7;
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <nextCurrentNode+0xa4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	4a08      	ldr	r2, [pc, #32]	; (8004204 <nextCurrentNode+0xa4>)
 80041e4:	6013      	str	r3, [r2, #0]
			break;
 80041e6:	e005      	b.n	80041f4 <nextCurrentNode+0x94>
		case 7:
			currentNode = currentNode->child8;
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <nextCurrentNode+0xa4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	4a05      	ldr	r2, [pc, #20]	; (8004204 <nextCurrentNode+0xa4>)
 80041f0:	6013      	str	r3, [r2, #0]
			break;
 80041f2:	bf00      	nop
	}
}
 80041f4:	bf00      	nop
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20000860 	.word	0x20000860
 8004204:	200008e4 	.word	0x200008e4

08004208 <keyHandler>:
	print("                   ");
	display();
}


void keyHandler(){
 8004208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800420c:	b0c2      	sub	sp, #264	; 0x108
 800420e:	af40      	add	r7, sp, #256	; 0x100
	int key = row * 4 + col +1;
 8004210:	4b8a      	ldr	r3, [pc, #552]	; (800443c <keyHandler+0x234>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	009a      	lsls	r2, r3, #2
 8004216:	4b8a      	ldr	r3, [pc, #552]	; (8004440 <keyHandler+0x238>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4413      	add	r3, r2
 800421c:	3301      	adds	r3, #1
 800421e:	607b      	str	r3, [r7, #4]
	if(startState == 2){
 8004220:	4b88      	ldr	r3, [pc, #544]	; (8004444 <keyHandler+0x23c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b02      	cmp	r3, #2
 8004226:	f040 83c7 	bne.w	80049b8 <keyHandler+0x7b0>
		if(HAL_GetTick()- lastPress<300 ) return;
 800422a:	f001 fb6d 	bl	8005908 <HAL_GetTick>
 800422e:	4603      	mov	r3, r0
 8004230:	2200      	movs	r2, #0
 8004232:	4698      	mov	r8, r3
 8004234:	4691      	mov	r9, r2
 8004236:	4b84      	ldr	r3, [pc, #528]	; (8004448 <keyHandler+0x240>)
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	ebb8 0402 	subs.w	r4, r8, r2
 8004240:	eb69 0503 	sbc.w	r5, r9, r3
 8004244:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 8004248:	f175 0300 	sbcs.w	r3, r5, #0
 800424c:	f0c0 83d6 	bcc.w	80049fc <keyHandler+0x7f4>
		if(!generateMenu){
 8004250:	4b7e      	ldr	r3, [pc, #504]	; (800444c <keyHandler+0x244>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d104      	bne.n	8004262 <keyHandler+0x5a>
			GenerateMenu();
 8004258:	f7fd ff5e 	bl	8002118 <GenerateMenu>
			generateMenu = 1;
 800425c:	4b7b      	ldr	r3, [pc, #492]	; (800444c <keyHandler+0x244>)
 800425e:	2201      	movs	r2, #1
 8004260:	601a      	str	r2, [r3, #0]
		}

		if(currentNode->screen.id == 19){
 8004262:	4b7b      	ldr	r3, [pc, #492]	; (8004450 <keyHandler+0x248>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	2b13      	cmp	r3, #19
 800426a:	d102      	bne.n	8004272 <keyHandler+0x6a>
			createScenario();
 800426c:	f7fe fe8c 	bl	8002f88 <createScenario>
 8004270:	e045      	b.n	80042fe <keyHandler+0xf6>
		}
		else if(currentNode->screen.id == 6){
 8004272:	4b77      	ldr	r3, [pc, #476]	; (8004450 <keyHandler+0x248>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	2b06      	cmp	r3, #6
 800427a:	d140      	bne.n	80042fe <keyHandler+0xf6>
			if(key != lastKeyPressed){
 800427c:	4b75      	ldr	r3, [pc, #468]	; (8004454 <keyHandler+0x24c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	429a      	cmp	r2, r3
 8004284:	d009      	beq.n	800429a <keyHandler+0x92>
				lastKeyPressed = key;
 8004286:	4a73      	ldr	r2, [pc, #460]	; (8004454 <keyHandler+0x24c>)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6013      	str	r3, [r2, #0]
				typingCount = 1;
 800428c:	4b72      	ldr	r3, [pc, #456]	; (8004458 <keyHandler+0x250>)
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]
				sameKeyPressed = 0;
 8004292:	4b72      	ldr	r3, [pc, #456]	; (800445c <keyHandler+0x254>)
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	e015      	b.n	80042c6 <keyHandler+0xbe>
			}
			else{
				sameKeyPressed = 1;
 800429a:	4b70      	ldr	r3, [pc, #448]	; (800445c <keyHandler+0x254>)
 800429c:	2201      	movs	r2, #1
 800429e:	601a      	str	r2, [r3, #0]
				typingCount++;
 80042a0:	4b6d      	ldr	r3, [pc, #436]	; (8004458 <keyHandler+0x250>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3301      	adds	r3, #1
 80042a6:	4a6c      	ldr	r2, [pc, #432]	; (8004458 <keyHandler+0x250>)
 80042a8:	6013      	str	r3, [r2, #0]
				typingCount = typingCount % (stateCountsForEachKey(key)+1);
 80042aa:	4b6b      	ldr	r3, [pc, #428]	; (8004458 <keyHandler+0x250>)
 80042ac:	681c      	ldr	r4, [r3, #0]
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ff1a 	bl	80040e8 <stateCountsForEachKey>
 80042b4:	4603      	mov	r3, r0
 80042b6:	3301      	adds	r3, #1
 80042b8:	fb94 f2f3 	sdiv	r2, r4, r3
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	1ae3      	subs	r3, r4, r3
 80042c2:	4a65      	ldr	r2, [pc, #404]	; (8004458 <keyHandler+0x250>)
 80042c4:	6013      	str	r3, [r2, #0]
			}
			messageSetter(currentNode, charSelector(key, typingCount));
 80042c6:	4b62      	ldr	r3, [pc, #392]	; (8004450 <keyHandler+0x248>)
 80042c8:	681c      	ldr	r4, [r3, #0]
 80042ca:	4b63      	ldr	r3, [pc, #396]	; (8004458 <keyHandler+0x250>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4619      	mov	r1, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff fd9b 	bl	8003e0c <charSelector>
 80042d6:	4603      	mov	r3, r0
 80042d8:	4619      	mov	r1, r3
 80042da:	4620      	mov	r0, r4
 80042dc:	f7ff fa62 	bl	80037a4 <messageSetter>
			ShowInfo(currentNode->screen);
 80042e0:	4b5b      	ldr	r3, [pc, #364]	; (8004450 <keyHandler+0x248>)
 80042e2:	681c      	ldr	r4, [r3, #0]
 80042e4:	4668      	mov	r0, sp
 80042e6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80042ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042ee:	4619      	mov	r1, r3
 80042f0:	f007 fa92 	bl	800b818 <memcpy>
 80042f4:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80042f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042fa:	f7ff f8db 	bl	80034b4 <ShowInfo>
		}
		switch (key) {
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3b02      	subs	r3, #2
 8004302:	2b0e      	cmp	r3, #14
 8004304:	f200 838f 	bhi.w	8004a26 <keyHandler+0x81e>
 8004308:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <keyHandler+0x108>)
 800430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430e:	bf00      	nop
 8004310:	0800434d 	.word	0x0800434d
 8004314:	08004a27 	.word	0x08004a27
 8004318:	080043c5 	.word	0x080043c5
 800431c:	08004475 	.word	0x08004475
 8004320:	08004575 	.word	0x08004575
 8004324:	08004601 	.word	0x08004601
 8004328:	0800471d 	.word	0x0800471d
 800432c:	08004a27 	.word	0x08004a27
 8004330:	08004a27 	.word	0x08004a27
 8004334:	08004a27 	.word	0x08004a27
 8004338:	08004793 	.word	0x08004793
 800433c:	08004809 	.word	0x08004809
 8004340:	08004a27 	.word	0x08004a27
 8004344:	0800488d 	.word	0x0800488d
 8004348:	0800491d 	.word	0x0800491d
			case 2: // up key
				if(inMenu && CurrentMenuOption > 0){
 800434c:	4b44      	ldr	r3, [pc, #272]	; (8004460 <keyHandler+0x258>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d018      	beq.n	8004386 <keyHandler+0x17e>
 8004354:	4b43      	ldr	r3, [pc, #268]	; (8004464 <keyHandler+0x25c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	dd14      	ble.n	8004386 <keyHandler+0x17e>
					if(inMenu && CurrentMenuOption == 4)
 800435c:	4b40      	ldr	r3, [pc, #256]	; (8004460 <keyHandler+0x258>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <keyHandler+0x16e>
 8004364:	4b3f      	ldr	r3, [pc, #252]	; (8004464 <keyHandler+0x25c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b04      	cmp	r3, #4
 800436a:	d104      	bne.n	8004376 <keyHandler+0x16e>
						page--;
 800436c:	4b3e      	ldr	r3, [pc, #248]	; (8004468 <keyHandler+0x260>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3b01      	subs	r3, #1
 8004372:	4a3d      	ldr	r2, [pc, #244]	; (8004468 <keyHandler+0x260>)
 8004374:	6013      	str	r3, [r2, #0]
					CurrentMenuOption--;
 8004376:	4b3b      	ldr	r3, [pc, #236]	; (8004464 <keyHandler+0x25c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3b01      	subs	r3, #1
 800437c:	4a39      	ldr	r2, [pc, #228]	; (8004464 <keyHandler+0x25c>)
 800437e:	6013      	str	r3, [r2, #0]
					changeOption(0);
 8004380:	2000      	movs	r0, #0
 8004382:	f7ff f90f 	bl	80035a4 <changeOption>
				}
				if(!inMenu && page>0){
 8004386:	4b36      	ldr	r3, [pc, #216]	; (8004460 <keyHandler+0x258>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 8338 	bne.w	8004a00 <keyHandler+0x7f8>
 8004390:	4b35      	ldr	r3, [pc, #212]	; (8004468 <keyHandler+0x260>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	f340 8333 	ble.w	8004a00 <keyHandler+0x7f8>
					page--;
 800439a:	4b33      	ldr	r3, [pc, #204]	; (8004468 <keyHandler+0x260>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3b01      	subs	r3, #1
 80043a0:	4a31      	ldr	r2, [pc, #196]	; (8004468 <keyHandler+0x260>)
 80043a2:	6013      	str	r3, [r2, #0]
					ShowInfo(currentNode->screen);
 80043a4:	4b2a      	ldr	r3, [pc, #168]	; (8004450 <keyHandler+0x248>)
 80043a6:	681c      	ldr	r4, [r3, #0]
 80043a8:	4668      	mov	r0, sp
 80043aa:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80043ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043b2:	4619      	mov	r1, r3
 80043b4:	f007 fa30 	bl	800b818 <memcpy>
 80043b8:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80043bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043be:	f7ff f879 	bl	80034b4 <ShowInfo>
				}
				break;
 80043c2:	e31d      	b.n	8004a00 <keyHandler+0x7f8>

			case 4:
				if(currentNode->screen.id == 4 ){
 80043c4:	4b22      	ldr	r3, [pc, #136]	; (8004450 <keyHandler+0x248>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d117      	bne.n	80043fe <keyHandler+0x1f6>
					setLigthToggle(&(currentNode->screen),0,Lights);
 80043ce:	4b20      	ldr	r3, [pc, #128]	; (8004450 <keyHandler+0x248>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3324      	adds	r3, #36	; 0x24
 80043d4:	4a25      	ldr	r2, [pc, #148]	; (800446c <keyHandler+0x264>)
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fc67 	bl	8003cac <setLigthToggle>
					ShowInfo(currentNode->screen);
 80043de:	4b1c      	ldr	r3, [pc, #112]	; (8004450 <keyHandler+0x248>)
 80043e0:	681c      	ldr	r4, [r3, #0]
 80043e2:	4668      	mov	r0, sp
 80043e4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80043e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043ec:	4619      	mov	r1, r3
 80043ee:	f007 fa13 	bl	800b818 <memcpy>
 80043f2:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80043f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043f8:	f7ff f85c 	bl	80034b4 <ShowInfo>
				}
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),0,newScenarioLights);
					ShowInfo(currentNode->screen);
				}
				break;
 80043fc:	e302      	b.n	8004a04 <keyHandler+0x7fc>
				else if(currentNode->screen.id == 18){
 80043fe:	4b14      	ldr	r3, [pc, #80]	; (8004450 <keyHandler+0x248>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	2b12      	cmp	r3, #18
 8004406:	f040 82fd 	bne.w	8004a04 <keyHandler+0x7fc>
					setLigthToggle(&(currentNode->screen),0,newScenarioLights);
 800440a:	4b11      	ldr	r3, [pc, #68]	; (8004450 <keyHandler+0x248>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3324      	adds	r3, #36	; 0x24
 8004410:	4a17      	ldr	r2, [pc, #92]	; (8004470 <keyHandler+0x268>)
 8004412:	2100      	movs	r1, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff fc49 	bl	8003cac <setLigthToggle>
					ShowInfo(currentNode->screen);
 800441a:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <keyHandler+0x248>)
 800441c:	681c      	ldr	r4, [r3, #0]
 800441e:	4668      	mov	r0, sp
 8004420:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004428:	4619      	mov	r1, r3
 800442a:	f007 f9f5 	bl	800b818 <memcpy>
 800442e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004434:	f7ff f83e 	bl	80034b4 <ShowInfo>
				break;
 8004438:	e2e4      	b.n	8004a04 <keyHandler+0x7fc>
 800443a:	bf00      	nop
 800443c:	20000038 	.word	0x20000038
 8004440:	20000034 	.word	0x20000034
 8004444:	20000880 	.word	0x20000880
 8004448:	20000858 	.word	0x20000858
 800444c:	2000086c 	.word	0x2000086c
 8004450:	200008e4 	.word	0x200008e4
 8004454:	20000870 	.word	0x20000870
 8004458:	20000130 	.word	0x20000130
 800445c:	20000874 	.word	0x20000874
 8004460:	2000012c 	.word	0x2000012c
 8004464:	20000860 	.word	0x20000860
 8004468:	20000868 	.word	0x20000868
 800446c:	2000079c 	.word	0x2000079c
 8004470:	20000844 	.word	0x20000844

			case 5: // left key
				if(currentNode->screen.id == 8 ||currentNode->screen.id == 9 || currentNode->screen.id == 10 || currentNode->screen.id == 11 || currentNode->screen.id == 12 || currentNode->screen.id == 15 || currentNode->screen.id == 16 || currentNode->screen.id == 17 ||currentNode->screen.id >lastPagesId){
 8004474:	4b93      	ldr	r3, [pc, #588]	; (80046c4 <keyHandler+0x4bc>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	2b08      	cmp	r3, #8
 800447c:	d029      	beq.n	80044d2 <keyHandler+0x2ca>
 800447e:	4b91      	ldr	r3, [pc, #580]	; (80046c4 <keyHandler+0x4bc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	2b09      	cmp	r3, #9
 8004486:	d024      	beq.n	80044d2 <keyHandler+0x2ca>
 8004488:	4b8e      	ldr	r3, [pc, #568]	; (80046c4 <keyHandler+0x4bc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	2b0a      	cmp	r3, #10
 8004490:	d01f      	beq.n	80044d2 <keyHandler+0x2ca>
 8004492:	4b8c      	ldr	r3, [pc, #560]	; (80046c4 <keyHandler+0x4bc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	2b0b      	cmp	r3, #11
 800449a:	d01a      	beq.n	80044d2 <keyHandler+0x2ca>
 800449c:	4b89      	ldr	r3, [pc, #548]	; (80046c4 <keyHandler+0x4bc>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	2b0c      	cmp	r3, #12
 80044a4:	d015      	beq.n	80044d2 <keyHandler+0x2ca>
 80044a6:	4b87      	ldr	r3, [pc, #540]	; (80046c4 <keyHandler+0x4bc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	2b0f      	cmp	r3, #15
 80044ae:	d010      	beq.n	80044d2 <keyHandler+0x2ca>
 80044b0:	4b84      	ldr	r3, [pc, #528]	; (80046c4 <keyHandler+0x4bc>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d00b      	beq.n	80044d2 <keyHandler+0x2ca>
 80044ba:	4b82      	ldr	r3, [pc, #520]	; (80046c4 <keyHandler+0x4bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	2b11      	cmp	r3, #17
 80044c2:	d006      	beq.n	80044d2 <keyHandler+0x2ca>
 80044c4:	4b7f      	ldr	r3, [pc, #508]	; (80046c4 <keyHandler+0x4bc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ca:	4b7f      	ldr	r3, [pc, #508]	; (80046c8 <keyHandler+0x4c0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	dd15      	ble.n	80044fe <keyHandler+0x2f6>
					setOn(&(currentNode->screen));
 80044d2:	4b7c      	ldr	r3, [pc, #496]	; (80046c4 <keyHandler+0x4bc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3324      	adds	r3, #36	; 0x24
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff f9db 	bl	8003894 <setOn>
					ShowInfo(currentNode->screen);
 80044de:	4b79      	ldr	r3, [pc, #484]	; (80046c4 <keyHandler+0x4bc>)
 80044e0:	681c      	ldr	r4, [r3, #0]
 80044e2:	4668      	mov	r0, sp
 80044e4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80044e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044ec:	4619      	mov	r1, r3
 80044ee:	f007 f993 	bl	800b818 <memcpy>
 80044f2:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80044f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044f8:	f7fe ffdc 	bl	80034b4 <ShowInfo>
				}
				else if(currentNode->screen.id == 14){
					setThreshold(&(currentNode->screen), 0,1);
					ShowInfo(currentNode->screen);
				}
				break;
 80044fc:	e284      	b.n	8004a08 <keyHandler+0x800>
				else if(currentNode->screen.id == 7 ){
 80044fe:	4b71      	ldr	r3, [pc, #452]	; (80046c4 <keyHandler+0x4bc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	2b07      	cmp	r3, #7
 8004506:	d117      	bne.n	8004538 <keyHandler+0x330>
					setThreshold(&(currentNode->screen), 0,0);
 8004508:	4b6e      	ldr	r3, [pc, #440]	; (80046c4 <keyHandler+0x4bc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3324      	adds	r3, #36	; 0x24
 800450e:	2200      	movs	r2, #0
 8004510:	2100      	movs	r1, #0
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fb66 	bl	8003be4 <setThreshold>
					ShowInfo(currentNode->screen);
 8004518:	4b6a      	ldr	r3, [pc, #424]	; (80046c4 <keyHandler+0x4bc>)
 800451a:	681c      	ldr	r4, [r3, #0]
 800451c:	4668      	mov	r0, sp
 800451e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004526:	4619      	mov	r1, r3
 8004528:	f007 f976 	bl	800b818 <memcpy>
 800452c:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004532:	f7fe ffbf 	bl	80034b4 <ShowInfo>
				break;
 8004536:	e267      	b.n	8004a08 <keyHandler+0x800>
				else if(currentNode->screen.id == 14){
 8004538:	4b62      	ldr	r3, [pc, #392]	; (80046c4 <keyHandler+0x4bc>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b0e      	cmp	r3, #14
 8004540:	f040 8262 	bne.w	8004a08 <keyHandler+0x800>
					setThreshold(&(currentNode->screen), 0,1);
 8004544:	4b5f      	ldr	r3, [pc, #380]	; (80046c4 <keyHandler+0x4bc>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3324      	adds	r3, #36	; 0x24
 800454a:	2201      	movs	r2, #1
 800454c:	2100      	movs	r1, #0
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fb48 	bl	8003be4 <setThreshold>
					ShowInfo(currentNode->screen);
 8004554:	4b5b      	ldr	r3, [pc, #364]	; (80046c4 <keyHandler+0x4bc>)
 8004556:	681c      	ldr	r4, [r3, #0]
 8004558:	4668      	mov	r0, sp
 800455a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800455e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004562:	4619      	mov	r1, r3
 8004564:	f007 f958 	bl	800b818 <memcpy>
 8004568:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800456c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800456e:	f7fe ffa1 	bl	80034b4 <ShowInfo>
				break;
 8004572:	e249      	b.n	8004a08 <keyHandler+0x800>
			case 6: // down key
				if(inMenu && CurrentMenuOption < MenuoptionCounts - 1) {
 8004574:	4b55      	ldr	r3, [pc, #340]	; (80046cc <keyHandler+0x4c4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d019      	beq.n	80045b0 <keyHandler+0x3a8>
 800457c:	4b54      	ldr	r3, [pc, #336]	; (80046d0 <keyHandler+0x4c8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	1e5a      	subs	r2, r3, #1
 8004582:	4b54      	ldr	r3, [pc, #336]	; (80046d4 <keyHandler+0x4cc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	dd12      	ble.n	80045b0 <keyHandler+0x3a8>
					if(inMenu && CurrentMenuOption == 3)
 800458a:	4b50      	ldr	r3, [pc, #320]	; (80046cc <keyHandler+0x4c4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <keyHandler+0x398>
 8004592:	4b50      	ldr	r3, [pc, #320]	; (80046d4 <keyHandler+0x4cc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b03      	cmp	r3, #3
 8004598:	d102      	bne.n	80045a0 <keyHandler+0x398>
						page = 1;
 800459a:	4b4f      	ldr	r3, [pc, #316]	; (80046d8 <keyHandler+0x4d0>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]
					CurrentMenuOption++;
 80045a0:	4b4c      	ldr	r3, [pc, #304]	; (80046d4 <keyHandler+0x4cc>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3301      	adds	r3, #1
 80045a6:	4a4b      	ldr	r2, [pc, #300]	; (80046d4 <keyHandler+0x4cc>)
 80045a8:	6013      	str	r3, [r2, #0]
					changeOption(1);
 80045aa:	2001      	movs	r0, #1
 80045ac:	f7fe fffa 	bl	80035a4 <changeOption>
				}
				if(!inMenu && page < (currentNode->screen.optionCount-1) / 3){
 80045b0:	4b46      	ldr	r3, [pc, #280]	; (80046cc <keyHandler+0x4c4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f040 8229 	bne.w	8004a0c <keyHandler+0x804>
 80045ba:	4b42      	ldr	r3, [pc, #264]	; (80046c4 <keyHandler+0x4bc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	3b01      	subs	r3, #1
 80045c2:	4a46      	ldr	r2, [pc, #280]	; (80046dc <keyHandler+0x4d4>)
 80045c4:	fb82 1203 	smull	r1, r2, r2, r3
 80045c8:	17db      	asrs	r3, r3, #31
 80045ca:	1ad2      	subs	r2, r2, r3
 80045cc:	4b42      	ldr	r3, [pc, #264]	; (80046d8 <keyHandler+0x4d0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	f340 821b 	ble.w	8004a0c <keyHandler+0x804>
					page++;
 80045d6:	4b40      	ldr	r3, [pc, #256]	; (80046d8 <keyHandler+0x4d0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3301      	adds	r3, #1
 80045dc:	4a3e      	ldr	r2, [pc, #248]	; (80046d8 <keyHandler+0x4d0>)
 80045de:	6013      	str	r3, [r2, #0]
					ShowInfo(currentNode->screen);
 80045e0:	4b38      	ldr	r3, [pc, #224]	; (80046c4 <keyHandler+0x4bc>)
 80045e2:	681c      	ldr	r4, [r3, #0]
 80045e4:	4668      	mov	r0, sp
 80045e6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80045ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045ee:	4619      	mov	r1, r3
 80045f0:	f007 f912 	bl	800b818 <memcpy>
 80045f4:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80045f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045fa:	f7fe ff5b 	bl	80034b4 <ShowInfo>

				}

				break;
 80045fe:	e205      	b.n	8004a0c <keyHandler+0x804>
			case 7: // right key

				if(currentNode->screen.id == 8 ||currentNode->screen.id == 9 || currentNode->screen.id == 10 || currentNode->screen.id == 11 || currentNode->screen.id == 12 || currentNode->screen.id == 15 || currentNode->screen.id == 16 || currentNode->screen.id == 17 ||currentNode->screen.id >lastPagesId){
 8004600:	4b30      	ldr	r3, [pc, #192]	; (80046c4 <keyHandler+0x4bc>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2b08      	cmp	r3, #8
 8004608:	d029      	beq.n	800465e <keyHandler+0x456>
 800460a:	4b2e      	ldr	r3, [pc, #184]	; (80046c4 <keyHandler+0x4bc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	2b09      	cmp	r3, #9
 8004612:	d024      	beq.n	800465e <keyHandler+0x456>
 8004614:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <keyHandler+0x4bc>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2b0a      	cmp	r3, #10
 800461c:	d01f      	beq.n	800465e <keyHandler+0x456>
 800461e:	4b29      	ldr	r3, [pc, #164]	; (80046c4 <keyHandler+0x4bc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	2b0b      	cmp	r3, #11
 8004626:	d01a      	beq.n	800465e <keyHandler+0x456>
 8004628:	4b26      	ldr	r3, [pc, #152]	; (80046c4 <keyHandler+0x4bc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2b0c      	cmp	r3, #12
 8004630:	d015      	beq.n	800465e <keyHandler+0x456>
 8004632:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <keyHandler+0x4bc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	2b0f      	cmp	r3, #15
 800463a:	d010      	beq.n	800465e <keyHandler+0x456>
 800463c:	4b21      	ldr	r3, [pc, #132]	; (80046c4 <keyHandler+0x4bc>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	2b10      	cmp	r3, #16
 8004644:	d00b      	beq.n	800465e <keyHandler+0x456>
 8004646:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <keyHandler+0x4bc>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	2b11      	cmp	r3, #17
 800464e:	d006      	beq.n	800465e <keyHandler+0x456>
 8004650:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <keyHandler+0x4bc>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004656:	4b1c      	ldr	r3, [pc, #112]	; (80046c8 <keyHandler+0x4c0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	dd15      	ble.n	800468a <keyHandler+0x482>
					setOn(&(currentNode->screen));
 800465e:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <keyHandler+0x4bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3324      	adds	r3, #36	; 0x24
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff f915 	bl	8003894 <setOn>
					ShowInfo(currentNode->screen);
 800466a:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <keyHandler+0x4bc>)
 800466c:	681c      	ldr	r4, [r3, #0]
 800466e:	4668      	mov	r0, sp
 8004670:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004674:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004678:	4619      	mov	r1, r3
 800467a:	f007 f8cd 	bl	800b818 <memcpy>
 800467e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004684:	f7fe ff16 	bl	80034b4 <ShowInfo>
				}
				else if(currentNode->screen.id == 14){
					setThreshold(&(currentNode->screen), 1,1);
					ShowInfo(currentNode->screen);
				}
				break;
 8004688:	e1c2      	b.n	8004a10 <keyHandler+0x808>
				else if(currentNode->screen.id == 7){
 800468a:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <keyHandler+0x4bc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	2b07      	cmp	r3, #7
 8004692:	d125      	bne.n	80046e0 <keyHandler+0x4d8>
					setThreshold(&(currentNode->screen), 1,0);
 8004694:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <keyHandler+0x4bc>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3324      	adds	r3, #36	; 0x24
 800469a:	2200      	movs	r2, #0
 800469c:	2101      	movs	r1, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff faa0 	bl	8003be4 <setThreshold>
					ShowInfo(currentNode->screen);
 80046a4:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <keyHandler+0x4bc>)
 80046a6:	681c      	ldr	r4, [r3, #0]
 80046a8:	4668      	mov	r0, sp
 80046aa:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80046ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046b2:	4619      	mov	r1, r3
 80046b4:	f007 f8b0 	bl	800b818 <memcpy>
 80046b8:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80046bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046be:	f7fe fef9 	bl	80034b4 <ShowInfo>
				break;
 80046c2:	e1a5      	b.n	8004a10 <keyHandler+0x808>
 80046c4:	200008e4 	.word	0x200008e4
 80046c8:	2000087c 	.word	0x2000087c
 80046cc:	2000012c 	.word	0x2000012c
 80046d0:	20000864 	.word	0x20000864
 80046d4:	20000860 	.word	0x20000860
 80046d8:	20000868 	.word	0x20000868
 80046dc:	55555556 	.word	0x55555556
				else if(currentNode->screen.id == 14){
 80046e0:	4bab      	ldr	r3, [pc, #684]	; (8004990 <keyHandler+0x788>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	2b0e      	cmp	r3, #14
 80046e8:	f040 8192 	bne.w	8004a10 <keyHandler+0x808>
					setThreshold(&(currentNode->screen), 1,1);
 80046ec:	4ba8      	ldr	r3, [pc, #672]	; (8004990 <keyHandler+0x788>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3324      	adds	r3, #36	; 0x24
 80046f2:	2201      	movs	r2, #1
 80046f4:	2101      	movs	r1, #1
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fa74 	bl	8003be4 <setThreshold>
					ShowInfo(currentNode->screen);
 80046fc:	4ba4      	ldr	r3, [pc, #656]	; (8004990 <keyHandler+0x788>)
 80046fe:	681c      	ldr	r4, [r3, #0]
 8004700:	4668      	mov	r0, sp
 8004702:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800470a:	4619      	mov	r1, r3
 800470c:	f007 f884 	bl	800b818 <memcpy>
 8004710:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004716:	f7fe fecd 	bl	80034b4 <ShowInfo>
				break;
 800471a:	e179      	b.n	8004a10 <keyHandler+0x808>
			case 8:
				if(currentNode->screen.id == 4){
 800471c:	4b9c      	ldr	r3, [pc, #624]	; (8004990 <keyHandler+0x788>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	2b04      	cmp	r3, #4
 8004724:	d117      	bne.n	8004756 <keyHandler+0x54e>
					setLigthToggle(&(currentNode->screen),1,Lights);
 8004726:	4b9a      	ldr	r3, [pc, #616]	; (8004990 <keyHandler+0x788>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3324      	adds	r3, #36	; 0x24
 800472c:	4a99      	ldr	r2, [pc, #612]	; (8004994 <keyHandler+0x78c>)
 800472e:	2101      	movs	r1, #1
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fabb 	bl	8003cac <setLigthToggle>
					ShowInfo(currentNode->screen);
 8004736:	4b96      	ldr	r3, [pc, #600]	; (8004990 <keyHandler+0x788>)
 8004738:	681c      	ldr	r4, [r3, #0]
 800473a:	4668      	mov	r0, sp
 800473c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004744:	4619      	mov	r1, r3
 8004746:	f007 f867 	bl	800b818 <memcpy>
 800474a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800474e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004750:	f7fe feb0 	bl	80034b4 <ShowInfo>
				}
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),1,newScenarioLights);
					ShowInfo(currentNode->screen);
				}
				break;
 8004754:	e15e      	b.n	8004a14 <keyHandler+0x80c>
				else if(currentNode->screen.id == 18){
 8004756:	4b8e      	ldr	r3, [pc, #568]	; (8004990 <keyHandler+0x788>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	2b12      	cmp	r3, #18
 800475e:	f040 8159 	bne.w	8004a14 <keyHandler+0x80c>
					setLigthToggle(&(currentNode->screen),1,newScenarioLights);
 8004762:	4b8b      	ldr	r3, [pc, #556]	; (8004990 <keyHandler+0x788>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3324      	adds	r3, #36	; 0x24
 8004768:	4a8b      	ldr	r2, [pc, #556]	; (8004998 <keyHandler+0x790>)
 800476a:	2101      	movs	r1, #1
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fa9d 	bl	8003cac <setLigthToggle>
					ShowInfo(currentNode->screen);
 8004772:	4b87      	ldr	r3, [pc, #540]	; (8004990 <keyHandler+0x788>)
 8004774:	681c      	ldr	r4, [r3, #0]
 8004776:	4668      	mov	r0, sp
 8004778:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800477c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004780:	4619      	mov	r1, r3
 8004782:	f007 f849 	bl	800b818 <memcpy>
 8004786:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800478a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800478c:	f7fe fe92 	bl	80034b4 <ShowInfo>
				break;
 8004790:	e140      	b.n	8004a14 <keyHandler+0x80c>
			case 12:
				if(currentNode->screen.id == 4){
 8004792:	4b7f      	ldr	r3, [pc, #508]	; (8004990 <keyHandler+0x788>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	2b04      	cmp	r3, #4
 800479a:	d117      	bne.n	80047cc <keyHandler+0x5c4>
					setLigthToggle(&(currentNode->screen),2,Lights);
 800479c:	4b7c      	ldr	r3, [pc, #496]	; (8004990 <keyHandler+0x788>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3324      	adds	r3, #36	; 0x24
 80047a2:	4a7c      	ldr	r2, [pc, #496]	; (8004994 <keyHandler+0x78c>)
 80047a4:	2102      	movs	r1, #2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fa80 	bl	8003cac <setLigthToggle>
					ShowInfo(currentNode->screen);
 80047ac:	4b78      	ldr	r3, [pc, #480]	; (8004990 <keyHandler+0x788>)
 80047ae:	681c      	ldr	r4, [r3, #0]
 80047b0:	4668      	mov	r0, sp
 80047b2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80047b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ba:	4619      	mov	r1, r3
 80047bc:	f007 f82c 	bl	800b818 <memcpy>
 80047c0:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80047c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047c6:	f7fe fe75 	bl	80034b4 <ShowInfo>
				}
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),2,newScenarioLights);
					ShowInfo(currentNode->screen);
				}
				break;
 80047ca:	e125      	b.n	8004a18 <keyHandler+0x810>
				else if(currentNode->screen.id == 18){
 80047cc:	4b70      	ldr	r3, [pc, #448]	; (8004990 <keyHandler+0x788>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	2b12      	cmp	r3, #18
 80047d4:	f040 8120 	bne.w	8004a18 <keyHandler+0x810>
					setLigthToggle(&(currentNode->screen),2,newScenarioLights);
 80047d8:	4b6d      	ldr	r3, [pc, #436]	; (8004990 <keyHandler+0x788>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3324      	adds	r3, #36	; 0x24
 80047de:	4a6e      	ldr	r2, [pc, #440]	; (8004998 <keyHandler+0x790>)
 80047e0:	2102      	movs	r1, #2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff fa62 	bl	8003cac <setLigthToggle>
					ShowInfo(currentNode->screen);
 80047e8:	4b69      	ldr	r3, [pc, #420]	; (8004990 <keyHandler+0x788>)
 80047ea:	681c      	ldr	r4, [r3, #0]
 80047ec:	4668      	mov	r0, sp
 80047ee:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80047f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047f6:	4619      	mov	r1, r3
 80047f8:	f007 f80e 	bl	800b818 <memcpy>
 80047fc:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004800:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004802:	f7fe fe57 	bl	80034b4 <ShowInfo>
				break;
 8004806:	e107      	b.n	8004a18 <keyHandler+0x810>
			case 13: // back key
				if(currentNode != root){
 8004808:	4b61      	ldr	r3, [pc, #388]	; (8004990 <keyHandler+0x788>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4b63      	ldr	r3, [pc, #396]	; (800499c <keyHandler+0x794>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	f000 8103 	beq.w	8004a1c <keyHandler+0x814>
					clear();
 8004816:	f7fc fc1d 	bl	8001054 <clear>
					page = 0;
 800481a:	4b61      	ldr	r3, [pc, #388]	; (80049a0 <keyHandler+0x798>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
					MenuoptionCounts = currentNode->screen.optionCount;
 8004820:	4b5b      	ldr	r3, [pc, #364]	; (8004990 <keyHandler+0x788>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	4a5f      	ldr	r2, [pc, #380]	; (80049a4 <keyHandler+0x79c>)
 8004828:	6013      	str	r3, [r2, #0]
					currentNode = currentNode->parent;
 800482a:	4b59      	ldr	r3, [pc, #356]	; (8004990 <keyHandler+0x788>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	4a57      	ldr	r2, [pc, #348]	; (8004990 <keyHandler+0x788>)
 8004832:	6013      	str	r3, [r2, #0]
					if(currentNode->screen.isMenu){
 8004834:	4b56      	ldr	r3, [pc, #344]	; (8004990 <keyHandler+0x788>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	2b00      	cmp	r3, #0
 800483c:	d013      	beq.n	8004866 <keyHandler+0x65e>
						CurrentMenuOption = 0;
 800483e:	4b5a      	ldr	r3, [pc, #360]	; (80049a8 <keyHandler+0x7a0>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
						MenuoptionCounts = currentNode->screen.optionCount;
 8004844:	4b52      	ldr	r3, [pc, #328]	; (8004990 <keyHandler+0x788>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	4a56      	ldr	r2, [pc, #344]	; (80049a4 <keyHandler+0x79c>)
 800484c:	6013      	str	r3, [r2, #0]
						SetMenu(currentNode->screen.menuItems);
 800484e:	4b50      	ldr	r3, [pc, #320]	; (8004990 <keyHandler+0x788>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3330      	adds	r3, #48	; 0x30
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe ff69 	bl	800372c <SetMenu>
						ShowMenu();
 800485a:	f7fe fdb3 	bl	80033c4 <ShowMenu>
						inMenu = 1;
 800485e:	4b53      	ldr	r3, [pc, #332]	; (80049ac <keyHandler+0x7a4>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]
						ShowInfo(currentNode->screen);
						inMenu = 0;
					}
				}

				break;
 8004864:	e0da      	b.n	8004a1c <keyHandler+0x814>
						ShowInfo(currentNode->screen);
 8004866:	4b4a      	ldr	r3, [pc, #296]	; (8004990 <keyHandler+0x788>)
 8004868:	681c      	ldr	r4, [r3, #0]
 800486a:	4668      	mov	r0, sp
 800486c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004870:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004874:	4619      	mov	r1, r3
 8004876:	f006 ffcf 	bl	800b818 <memcpy>
 800487a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800487e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004880:	f7fe fe18 	bl	80034b4 <ShowInfo>
						inMenu = 0;
 8004884:	4b49      	ldr	r3, [pc, #292]	; (80049ac <keyHandler+0x7a4>)
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
				break;
 800488a:	e0c7      	b.n	8004a1c <keyHandler+0x814>
			case 15: // okay key
				if(inMenu){
 800488c:	4b47      	ldr	r3, [pc, #284]	; (80049ac <keyHandler+0x7a4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80c5 	beq.w	8004a20 <keyHandler+0x818>
					page = 0;
 8004896:	4b42      	ldr	r3, [pc, #264]	; (80049a0 <keyHandler+0x798>)
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
					nextCurrentNode();
 800489c:	f7ff fc60 	bl	8004160 <nextCurrentNode>
					MenuoptionCounts = currentNode->screen.optionCount;
 80048a0:	4b3b      	ldr	r3, [pc, #236]	; (8004990 <keyHandler+0x788>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	4a3f      	ldr	r2, [pc, #252]	; (80049a4 <keyHandler+0x79c>)
 80048a8:	6013      	str	r3, [r2, #0]
					if(currentNode->screen.isMenu){
 80048aa:	4b39      	ldr	r3, [pc, #228]	; (8004990 <keyHandler+0x788>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00e      	beq.n	80048d2 <keyHandler+0x6ca>
						CurrentMenuOption = 0;
 80048b4:	4b3c      	ldr	r3, [pc, #240]	; (80049a8 <keyHandler+0x7a0>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
						SetMenu(currentNode->screen.menuItems);
 80048ba:	4b35      	ldr	r3, [pc, #212]	; (8004990 <keyHandler+0x788>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3330      	adds	r3, #48	; 0x30
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe ff33 	bl	800372c <SetMenu>
						ShowMenu();
 80048c6:	f7fe fd7d 	bl	80033c4 <ShowMenu>
						inMenu = 1;
 80048ca:	4b38      	ldr	r3, [pc, #224]	; (80049ac <keyHandler+0x7a4>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
							startStateLastTime = HAL_GetTick();
						}
					}

				}
				break;
 80048d0:	e0a6      	b.n	8004a20 <keyHandler+0x818>
						clear();
 80048d2:	f7fc fbbf 	bl	8001054 <clear>
						ShowInfo(currentNode->screen);
 80048d6:	4b2e      	ldr	r3, [pc, #184]	; (8004990 <keyHandler+0x788>)
 80048d8:	681c      	ldr	r4, [r3, #0]
 80048da:	4668      	mov	r0, sp
 80048dc:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80048e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048e4:	4619      	mov	r1, r3
 80048e6:	f006 ff97 	bl	800b818 <memcpy>
 80048ea:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80048ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048f0:	f7fe fde0 	bl	80034b4 <ShowInfo>
						inMenu = 0;
 80048f4:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <keyHandler+0x7a4>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
						if(currentNode->screen.id == -1){
 80048fa:	4b25      	ldr	r3, [pc, #148]	; (8004990 <keyHandler+0x788>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	f040 808c 	bne.w	8004a20 <keyHandler+0x818>
							startState = 3;
 8004908:	4b29      	ldr	r3, [pc, #164]	; (80049b0 <keyHandler+0x7a8>)
 800490a:	2203      	movs	r2, #3
 800490c:	601a      	str	r2, [r3, #0]
							startStateLastTime = HAL_GetTick();
 800490e:	f000 fffb 	bl	8005908 <HAL_GetTick>
 8004912:	4603      	mov	r3, r0
 8004914:	461a      	mov	r2, r3
 8004916:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <keyHandler+0x7ac>)
 8004918:	601a      	str	r2, [r3, #0]
				break;
 800491a:	e081      	b.n	8004a20 <keyHandler+0x818>
			case 16:
				if(currentNode->screen.id == 4){
 800491c:	4b1c      	ldr	r3, [pc, #112]	; (8004990 <keyHandler+0x788>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	2b04      	cmp	r3, #4
 8004924:	d117      	bne.n	8004956 <keyHandler+0x74e>
					setLigthToggle(&(currentNode->screen),3,Lights);
 8004926:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <keyHandler+0x788>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3324      	adds	r3, #36	; 0x24
 800492c:	4a19      	ldr	r2, [pc, #100]	; (8004994 <keyHandler+0x78c>)
 800492e:	2103      	movs	r1, #3
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff f9bb 	bl	8003cac <setLigthToggle>
					ShowInfo(currentNode->screen);
 8004936:	4b16      	ldr	r3, [pc, #88]	; (8004990 <keyHandler+0x788>)
 8004938:	681c      	ldr	r4, [r3, #0]
 800493a:	4668      	mov	r0, sp
 800493c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004944:	4619      	mov	r1, r3
 8004946:	f006 ff67 	bl	800b818 <memcpy>
 800494a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800494e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004950:	f7fe fdb0 	bl	80034b4 <ShowInfo>
				else if(currentNode->screen.id == 18){
					setLigthToggle(&(currentNode->screen),3,newScenarioLights);
					ShowInfo(currentNode->screen);
				}

			break;
 8004954:	e066      	b.n	8004a24 <keyHandler+0x81c>
				else if(currentNode->screen.id == 18){
 8004956:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <keyHandler+0x788>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	2b12      	cmp	r3, #18
 800495e:	d161      	bne.n	8004a24 <keyHandler+0x81c>
					setLigthToggle(&(currentNode->screen),3,newScenarioLights);
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <keyHandler+0x788>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3324      	adds	r3, #36	; 0x24
 8004966:	4a0c      	ldr	r2, [pc, #48]	; (8004998 <keyHandler+0x790>)
 8004968:	2103      	movs	r1, #3
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff f99e 	bl	8003cac <setLigthToggle>
					ShowInfo(currentNode->screen);
 8004970:	4b07      	ldr	r3, [pc, #28]	; (8004990 <keyHandler+0x788>)
 8004972:	681c      	ldr	r4, [r3, #0]
 8004974:	4668      	mov	r0, sp
 8004976:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800497a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800497e:	4619      	mov	r1, r3
 8004980:	f006 ff4a 	bl	800b818 <memcpy>
 8004984:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004988:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800498a:	f7fe fd93 	bl	80034b4 <ShowInfo>
			break;
 800498e:	e049      	b.n	8004a24 <keyHandler+0x81c>
 8004990:	200008e4 	.word	0x200008e4
 8004994:	2000079c 	.word	0x2000079c
 8004998:	20000844 	.word	0x20000844
 800499c:	20000890 	.word	0x20000890
 80049a0:	20000868 	.word	0x20000868
 80049a4:	20000864 	.word	0x20000864
 80049a8:	20000860 	.word	0x20000860
 80049ac:	2000012c 	.word	0x2000012c
 80049b0:	20000880 	.word	0x20000880
 80049b4:	20000884 	.word	0x20000884

		}
	}else if(startState == 0 && key == 16){ // blue push button action
 80049b8:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <keyHandler+0x828>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d132      	bne.n	8004a26 <keyHandler+0x81e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d12f      	bne.n	8004a26 <keyHandler+0x81e>
		setCursor(0,0);
 80049c6:	2100      	movs	r1, #0
 80049c8:	2000      	movs	r0, #0
 80049ca:	f7fc fb4d 	bl	8001068 <setCursor>
		if(strlen(startMassage) > 0)
 80049ce:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <keyHandler+0x82c>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <keyHandler+0x7d6>
			print(startMassage);
 80049d6:	4817      	ldr	r0, [pc, #92]	; (8004a34 <keyHandler+0x82c>)
 80049d8:	f7fc fba4 	bl	8001124 <print>
 80049dc:	e002      	b.n	80049e4 <keyHandler+0x7dc>
		else
			print("WELLCOME       ");
 80049de:	4816      	ldr	r0, [pc, #88]	; (8004a38 <keyHandler+0x830>)
 80049e0:	f7fc fba0 	bl	8001124 <print>
		display();
 80049e4:	f7fc fb88 	bl	80010f8 <display>
		startState = 1;
 80049e8:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <keyHandler+0x828>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
		startStateLastTime = HAL_GetTick();
 80049ee:	f000 ff8b 	bl	8005908 <HAL_GetTick>
 80049f2:	4603      	mov	r3, r0
 80049f4:	461a      	mov	r2, r3
 80049f6:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <keyHandler+0x834>)
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	e014      	b.n	8004a26 <keyHandler+0x81e>
		if(HAL_GetTick()- lastPress<300 ) return;
 80049fc:	bf00      	nop
 80049fe:	e012      	b.n	8004a26 <keyHandler+0x81e>
				break;
 8004a00:	bf00      	nop
 8004a02:	e010      	b.n	8004a26 <keyHandler+0x81e>
				break;
 8004a04:	bf00      	nop
 8004a06:	e00e      	b.n	8004a26 <keyHandler+0x81e>
				break;
 8004a08:	bf00      	nop
 8004a0a:	e00c      	b.n	8004a26 <keyHandler+0x81e>
				break;
 8004a0c:	bf00      	nop
 8004a0e:	e00a      	b.n	8004a26 <keyHandler+0x81e>
				break;
 8004a10:	bf00      	nop
 8004a12:	e008      	b.n	8004a26 <keyHandler+0x81e>
				break;
 8004a14:	bf00      	nop
 8004a16:	e006      	b.n	8004a26 <keyHandler+0x81e>
				break;
 8004a18:	bf00      	nop
 8004a1a:	e004      	b.n	8004a26 <keyHandler+0x81e>
				break;
 8004a1c:	bf00      	nop
 8004a1e:	e002      	b.n	8004a26 <keyHandler+0x81e>
				break;
 8004a20:	bf00      	nop
 8004a22:	e000      	b.n	8004a26 <keyHandler+0x81e>
			break;
 8004a24:	bf00      	nop
	}

}
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000880 	.word	0x20000880
 8004a34:	20000830 	.word	0x20000830
 8004a38:	0800d9c0 	.word	0x0800d9c0
 8004a3c:	20000884 	.word	0x20000884

08004a40 <buzzerChangeTone>:

extern TIM_HandleTypeDef *buzzerPwmTimer;
extern uint32_t buzzerPwmChannel;
extern TIM_HandleTypeDef htim2;
void buzzerChangeTone(uint16_t freq, uint16_t volume) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	460a      	mov	r2, r1
 8004a4a:	80fb      	strh	r3, [r7, #6]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	80bb      	strh	r3, [r7, #4]
    if (freq == 0 || freq > 20000) {
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d004      	beq.n	8004a60 <buzzerChangeTone+0x20>
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d937      	bls.n	8004ad0 <buzzerChangeTone+0x90>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, 0);
 8004a60:	4b52      	ldr	r3, [pc, #328]	; (8004bac <buzzerChangeTone+0x16c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d105      	bne.n	8004a74 <buzzerChangeTone+0x34>
 8004a68:	4b51      	ldr	r3, [pc, #324]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	635a      	str	r2, [r3, #52]	; 0x34
 8004a72:	e096      	b.n	8004ba2 <buzzerChangeTone+0x162>
 8004a74:	4b4d      	ldr	r3, [pc, #308]	; (8004bac <buzzerChangeTone+0x16c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d105      	bne.n	8004a88 <buzzerChangeTone+0x48>
 8004a7c:	4b4c      	ldr	r3, [pc, #304]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	2300      	movs	r3, #0
 8004a84:	6393      	str	r3, [r2, #56]	; 0x38
 8004a86:	e08c      	b.n	8004ba2 <buzzerChangeTone+0x162>
 8004a88:	4b48      	ldr	r3, [pc, #288]	; (8004bac <buzzerChangeTone+0x16c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d105      	bne.n	8004a9c <buzzerChangeTone+0x5c>
 8004a90:	4b47      	ldr	r3, [pc, #284]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	2300      	movs	r3, #0
 8004a98:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004a9a:	e082      	b.n	8004ba2 <buzzerChangeTone+0x162>
 8004a9c:	4b43      	ldr	r3, [pc, #268]	; (8004bac <buzzerChangeTone+0x16c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b0c      	cmp	r3, #12
 8004aa2:	d105      	bne.n	8004ab0 <buzzerChangeTone+0x70>
 8004aa4:	4b42      	ldr	r3, [pc, #264]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	6413      	str	r3, [r2, #64]	; 0x40
 8004aae:	e078      	b.n	8004ba2 <buzzerChangeTone+0x162>
 8004ab0:	4b3e      	ldr	r3, [pc, #248]	; (8004bac <buzzerChangeTone+0x16c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d105      	bne.n	8004ac4 <buzzerChangeTone+0x84>
 8004ab8:	4b3d      	ldr	r3, [pc, #244]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ac2:	e06e      	b.n	8004ba2 <buzzerChangeTone+0x162>
 8004ac4:	4b3a      	ldr	r3, [pc, #232]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	2300      	movs	r3, #0
 8004acc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004ace:	e068      	b.n	8004ba2 <buzzerChangeTone+0x162>
    } else {
        const uint32_t internalClockFreq = HAL_RCC_GetSysClockFreq();
 8004ad0:	f004 f98a 	bl	8008de8 <HAL_RCC_GetSysClockFreq>
 8004ad4:	61f8      	str	r0, [r7, #28]
        const uint32_t prescaler = 1 + internalClockFreq / freq / 60000;
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ade:	4a35      	ldr	r2, [pc, #212]	; (8004bb4 <buzzerChangeTone+0x174>)
 8004ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae4:	0b9b      	lsrs	r3, r3, #14
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	61bb      	str	r3, [r7, #24]
        const uint32_t timerClock = internalClockFreq / prescaler;
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	617b      	str	r3, [r7, #20]
        const uint32_t periodCycles = timerClock / freq;
 8004af4:	88fb      	ldrh	r3, [r7, #6]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	613b      	str	r3, [r7, #16]
        const uint32_t pulseWidth = volume * periodCycles / 1000 / 2;
 8004afe:	88bb      	ldrh	r3, [r7, #4]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	4a2c      	ldr	r2, [pc, #176]	; (8004bb8 <buzzerChangeTone+0x178>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	09db      	lsrs	r3, r3, #7
 8004b0e:	60fb      	str	r3, [r7, #12]

        buzzerPwmTimer->Instance->PSC = prescaler - 1;
 8004b10:	4b27      	ldr	r3, [pc, #156]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	3a01      	subs	r2, #1
 8004b1a:	629a      	str	r2, [r3, #40]	; 0x28
        buzzerPwmTimer->Instance->ARR = periodCycles - 1;
 8004b1c:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	3a01      	subs	r2, #1
 8004b26:	62da      	str	r2, [r3, #44]	; 0x2c
        buzzerPwmTimer->Instance->EGR = TIM_EGR_UG;
 8004b28:	4b21      	ldr	r3, [pc, #132]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	615a      	str	r2, [r3, #20]

        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8004b32:	4b1e      	ldr	r3, [pc, #120]	; (8004bac <buzzerChangeTone+0x16c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d105      	bne.n	8004b46 <buzzerChangeTone+0x106>
 8004b3a:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 8004b44:	e02d      	b.n	8004ba2 <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8004b46:	4b19      	ldr	r3, [pc, #100]	; (8004bac <buzzerChangeTone+0x16c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d105      	bne.n	8004b5a <buzzerChangeTone+0x11a>
 8004b4e:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004b58:	e023      	b.n	8004ba2 <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8004b5a:	4b14      	ldr	r3, [pc, #80]	; (8004bac <buzzerChangeTone+0x16c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d105      	bne.n	8004b6e <buzzerChangeTone+0x12e>
 8004b62:	4b13      	ldr	r3, [pc, #76]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8004b6c:	e019      	b.n	8004ba2 <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8004b6e:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <buzzerChangeTone+0x16c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b0c      	cmp	r3, #12
 8004b74:	d105      	bne.n	8004b82 <buzzerChangeTone+0x142>
 8004b76:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004b80:	e00f      	b.n	8004ba2 <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8004b82:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <buzzerChangeTone+0x16c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b10      	cmp	r3, #16
 8004b88:	d105      	bne.n	8004b96 <buzzerChangeTone+0x156>
 8004b8a:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6593      	str	r3, [r2, #88]	; 0x58
}
 8004b94:	e005      	b.n	8004ba2 <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <buzzerChangeTone+0x170>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8004ba0:	e7ff      	b.n	8004ba2 <buzzerChangeTone+0x162>
 8004ba2:	bf00      	nop
 8004ba4:	3720      	adds	r7, #32
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000790 	.word	0x20000790
 8004bb0:	2000078c 	.word	0x2000078c
 8004bb4:	45e7b273 	.word	0x45e7b273
 8004bb8:	10624dd3 	.word	0x10624dd3
 8004bbc:	00000000 	.word	0x00000000

08004bc0 <alarm>:
void alarm(int position ){
 8004bc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
    static int time = 0 ;
    int frequency;
    int period = 1001;
 8004bca:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8004bce:	60bb      	str	r3, [r7, #8]
    switch(position){
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	f200 80ab 	bhi.w	8004d2e <alarm+0x16e>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <alarm+0x20>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004bf1 	.word	0x08004bf1
 8004be4:	08004bf7 	.word	0x08004bf7
 8004be8:	08004cc1 	.word	0x08004cc1
 8004bec:	08004ce3 	.word	0x08004ce3
        case 0:
            frequency = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
            break;
 8004bf4:	e09b      	b.n	8004d2e <alarm+0x16e>
        case 1: frequency =(int)((maxFrequency-minFrequency)*((sin(2*3.14*((float)(time))/(float)(period))+1)/2)+minFrequency);
 8004bf6:	4b5e      	ldr	r3, [pc, #376]	; (8004d70 <alarm+0x1b0>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4b5e      	ldr	r3, [pc, #376]	; (8004d74 <alarm+0x1b4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fb fc9f 	bl	8000544 <__aeabi_i2d>
 8004c06:	4604      	mov	r4, r0
 8004c08:	460d      	mov	r5, r1
 8004c0a:	4b5b      	ldr	r3, [pc, #364]	; (8004d78 <alarm+0x1b8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c16:	ee17 0a90 	vmov	r0, s15
 8004c1a:	f7fb fca5 	bl	8000568 <__aeabi_f2d>
 8004c1e:	a352      	add	r3, pc, #328	; (adr r3, 8004d68 <alarm+0x1a8>)
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	f7fb fcf8 	bl	8000618 <__aeabi_dmul>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4690      	mov	r8, r2
 8004c2e:	4699      	mov	r9, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c3a:	ee17 0a90 	vmov	r0, s15
 8004c3e:	f7fb fc93 	bl	8000568 <__aeabi_f2d>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4640      	mov	r0, r8
 8004c48:	4649      	mov	r1, r9
 8004c4a:	f7fb fe0f 	bl	800086c <__aeabi_ddiv>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	ec43 2b17 	vmov	d7, r2, r3
 8004c56:	eeb0 0a47 	vmov.f32	s0, s14
 8004c5a:	eef0 0a67 	vmov.f32	s1, s15
 8004c5e:	f007 fa6b 	bl	800c138 <sin>
 8004c62:	ec51 0b10 	vmov	r0, r1, d0
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	4b44      	ldr	r3, [pc, #272]	; (8004d7c <alarm+0x1bc>)
 8004c6c:	f7fb fb1e 	bl	80002ac <__adddf3>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4610      	mov	r0, r2
 8004c76:	4619      	mov	r1, r3
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c80:	f7fb fdf4 	bl	800086c <__aeabi_ddiv>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4620      	mov	r0, r4
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	f7fb fcc4 	bl	8000618 <__aeabi_dmul>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4614      	mov	r4, r2
 8004c96:	461d      	mov	r5, r3
 8004c98:	4b36      	ldr	r3, [pc, #216]	; (8004d74 <alarm+0x1b4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fb fc51 	bl	8000544 <__aeabi_i2d>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	4629      	mov	r1, r5
 8004caa:	f7fb faff 	bl	80002ac <__adddf3>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f7fb ff49 	bl	8000b4c <__aeabi_d2iz>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	60fb      	str	r3, [r7, #12]
            break;
 8004cbe:	e036      	b.n	8004d2e <alarm+0x16e>
        case 2://sqr
            if(time <period/2){
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	0fda      	lsrs	r2, r3, #31
 8004cc4:	4413      	add	r3, r2
 8004cc6:	105b      	asrs	r3, r3, #1
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <alarm+0x1b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	dd03      	ble.n	8004cda <alarm+0x11a>
                frequency = maxFrequency;
 8004cd2:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <alarm+0x1b0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]
            } else{
                frequency = minFrequency;
            }
            break;
 8004cd8:	e029      	b.n	8004d2e <alarm+0x16e>
                frequency = minFrequency;
 8004cda:	4b26      	ldr	r3, [pc, #152]	; (8004d74 <alarm+0x1b4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60fb      	str	r3, [r7, #12]
            break;
 8004ce0:	e025      	b.n	8004d2e <alarm+0x16e>
        case 3://triangie
            frequency =(int) (minFrequency + (((maxFrequency - minFrequency)*((float )time )/ (float )period)));
 8004ce2:	4b24      	ldr	r3, [pc, #144]	; (8004d74 <alarm+0x1b4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cee:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <alarm+0x1b0>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4b20      	ldr	r3, [pc, #128]	; (8004d74 <alarm+0x1b4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	ee07 3a90 	vmov	s15, r3
 8004cfc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d00:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <alarm+0x1b8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	ee07 3a90 	vmov	s15, r3
 8004d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d0c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d1a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d26:	ee17 3a90 	vmov	r3, s15
 8004d2a:	60fb      	str	r3, [r7, #12]
            break;
 8004d2c:	bf00      	nop
    }
    buzzerChangeTone(frequency,vol);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	4a13      	ldr	r2, [pc, #76]	; (8004d80 <alarm+0x1c0>)
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	b292      	uxth	r2, r2
 8004d38:	4611      	mov	r1, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff fe80 	bl	8004a40 <buzzerChangeTone>


    time ++;
 8004d40:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <alarm+0x1b8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3301      	adds	r3, #1
 8004d46:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <alarm+0x1b8>)
 8004d48:	6013      	str	r3, [r2, #0]
    if (time >= period)time = 0 ;
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <alarm+0x1b8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	dc02      	bgt.n	8004d5a <alarm+0x19a>
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <alarm+0x1b8>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]

}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d64:	f3af 8000 	nop.w
 8004d68:	51eb851f 	.word	0x51eb851f
 8004d6c:	40191eb8 	.word	0x40191eb8
 8004d70:	2000002c 	.word	0x2000002c
 8004d74:	20000028 	.word	0x20000028
 8004d78:	200008e8 	.word	0x200008e8
 8004d7c:	3ff00000 	.word	0x3ff00000
 8004d80:	20000030 	.word	0x20000030

08004d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d88:	e7fe      	b.n	8004d88 <NMI_Handler+0x4>

08004d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d8e:	e7fe      	b.n	8004d8e <HardFault_Handler+0x4>

08004d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d94:	e7fe      	b.n	8004d94 <MemManage_Handler+0x4>

08004d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d9a:	e7fe      	b.n	8004d9a <BusFault_Handler+0x4>

08004d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004da0:	e7fe      	b.n	8004da0 <UsageFault_Handler+0x4>

08004da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004da2:	b480      	push	{r7}
 8004da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004da6:	bf00      	nop
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dc2:	bf00      	nop
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dd0:	f000 fd86 	bl	80058e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dd4:	bf00      	nop
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if(HAL_GetTick() - lastPress >200){
 8004de0:	f000 fd92 	bl	8005908 <HAL_GetTick>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2200      	movs	r2, #0
 8004de8:	4698      	mov	r8, r3
 8004dea:	4691      	mov	r9, r2
 8004dec:	4b44      	ldr	r3, [pc, #272]	; (8004f00 <EXTI0_IRQHandler+0x128>)
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	ebb8 0402 	subs.w	r4, r8, r2
 8004df6:	eb69 0503 	sbc.w	r5, r9, r3
 8004dfa:	2cc9      	cmp	r4, #201	; 0xc9
 8004dfc:	f175 0300 	sbcs.w	r3, r5, #0
 8004e00:	d375      	bcc.n	8004eee <EXTI0_IRQHandler+0x116>

				col =0;
 8004e02:	4b40      	ldr	r3, [pc, #256]	; (8004f04 <EXTI0_IRQHandler+0x12c>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]
				for (int i = 0 ; i < 4 ; i++ ){
 8004e08:	2300      	movs	r3, #0
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	e05c      	b.n	8004ec8 <EXTI0_IRQHandler+0xf0>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,GPIO_PIN_RESET);
 8004e0e:	2200      	movs	r2, #0
 8004e10:	210f      	movs	r1, #15
 8004e12:	483d      	ldr	r0, [pc, #244]	; (8004f08 <EXTI0_IRQHandler+0x130>)
 8004e14:	f002 fbee 	bl	80075f4 <HAL_GPIO_WritePin>
					switch (i) {
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d851      	bhi.n	8004ec2 <EXTI0_IRQHandler+0xea>
 8004e1e:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <EXTI0_IRQHandler+0x4c>)
 8004e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e24:	08004e35 	.word	0x08004e35
 8004e28:	08004e55 	.word	0x08004e55
 8004e2c:	08004e75 	.word	0x08004e75
 8004e30:	08004e95 	.word	0x08004e95
						case 0:
							   HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,GPIO_PIN_SET);
 8004e34:	2201      	movs	r2, #1
 8004e36:	2101      	movs	r1, #1
 8004e38:	4833      	ldr	r0, [pc, #204]	; (8004f08 <EXTI0_IRQHandler+0x130>)
 8004e3a:	f002 fbdb 	bl	80075f4 <HAL_GPIO_WritePin>
							if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 0 ;
 8004e3e:	2101      	movs	r1, #1
 8004e40:	4832      	ldr	r0, [pc, #200]	; (8004f0c <EXTI0_IRQHandler+0x134>)
 8004e42:	f002 fbbf 	bl	80075c4 <HAL_GPIO_ReadPin>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d033      	beq.n	8004eb4 <EXTI0_IRQHandler+0xdc>
 8004e4c:	4b30      	ldr	r3, [pc, #192]	; (8004f10 <EXTI0_IRQHandler+0x138>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
							break;
 8004e52:	e02f      	b.n	8004eb4 <EXTI0_IRQHandler+0xdc>
						case 1:
							HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,GPIO_PIN_SET);
 8004e54:	2201      	movs	r2, #1
 8004e56:	2102      	movs	r1, #2
 8004e58:	482b      	ldr	r0, [pc, #172]	; (8004f08 <EXTI0_IRQHandler+0x130>)
 8004e5a:	f002 fbcb 	bl	80075f4 <HAL_GPIO_WritePin>
							if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 1 ;
 8004e5e:	2101      	movs	r1, #1
 8004e60:	482a      	ldr	r0, [pc, #168]	; (8004f0c <EXTI0_IRQHandler+0x134>)
 8004e62:	f002 fbaf 	bl	80075c4 <HAL_GPIO_ReadPin>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d025      	beq.n	8004eb8 <EXTI0_IRQHandler+0xe0>
 8004e6c:	4b28      	ldr	r3, [pc, #160]	; (8004f10 <EXTI0_IRQHandler+0x138>)
 8004e6e:	2201      	movs	r2, #1
 8004e70:	601a      	str	r2, [r3, #0]
							break;
 8004e72:	e021      	b.n	8004eb8 <EXTI0_IRQHandler+0xe0>
						case 2:
							HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_SET);
 8004e74:	2201      	movs	r2, #1
 8004e76:	2104      	movs	r1, #4
 8004e78:	4823      	ldr	r0, [pc, #140]	; (8004f08 <EXTI0_IRQHandler+0x130>)
 8004e7a:	f002 fbbb 	bl	80075f4 <HAL_GPIO_WritePin>
							if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 2 ;
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4822      	ldr	r0, [pc, #136]	; (8004f0c <EXTI0_IRQHandler+0x134>)
 8004e82:	f002 fb9f 	bl	80075c4 <HAL_GPIO_ReadPin>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d017      	beq.n	8004ebc <EXTI0_IRQHandler+0xe4>
 8004e8c:	4b20      	ldr	r3, [pc, #128]	; (8004f10 <EXTI0_IRQHandler+0x138>)
 8004e8e:	2202      	movs	r2, #2
 8004e90:	601a      	str	r2, [r3, #0]
							break;
 8004e92:	e013      	b.n	8004ebc <EXTI0_IRQHandler+0xe4>
						case 3:
							HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,GPIO_PIN_SET);
 8004e94:	2201      	movs	r2, #1
 8004e96:	2108      	movs	r1, #8
 8004e98:	481b      	ldr	r0, [pc, #108]	; (8004f08 <EXTI0_IRQHandler+0x130>)
 8004e9a:	f002 fbab 	bl	80075f4 <HAL_GPIO_WritePin>
							if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)) row = 3 ;
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	481a      	ldr	r0, [pc, #104]	; (8004f0c <EXTI0_IRQHandler+0x134>)
 8004ea2:	f002 fb8f 	bl	80075c4 <HAL_GPIO_ReadPin>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d009      	beq.n	8004ec0 <EXTI0_IRQHandler+0xe8>
 8004eac:	4b18      	ldr	r3, [pc, #96]	; (8004f10 <EXTI0_IRQHandler+0x138>)
 8004eae:	2203      	movs	r2, #3
 8004eb0:	601a      	str	r2, [r3, #0]
							break;
 8004eb2:	e005      	b.n	8004ec0 <EXTI0_IRQHandler+0xe8>
							break;
 8004eb4:	bf00      	nop
 8004eb6:	e004      	b.n	8004ec2 <EXTI0_IRQHandler+0xea>
							break;
 8004eb8:	bf00      	nop
 8004eba:	e002      	b.n	8004ec2 <EXTI0_IRQHandler+0xea>
							break;
 8004ebc:	bf00      	nop
 8004ebe:	e000      	b.n	8004ec2 <EXTI0_IRQHandler+0xea>
							break;
 8004ec0:	bf00      	nop
				for (int i = 0 ; i < 4 ; i++ ){
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	607b      	str	r3, [r7, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	dd9f      	ble.n	8004e0e <EXTI0_IRQHandler+0x36>

					}
				}

				keyHandler();
 8004ece:	f7ff f99b 	bl	8004208 <keyHandler>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,GPIO_PIN_SET);
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	210f      	movs	r1, #15
 8004ed6:	480c      	ldr	r0, [pc, #48]	; (8004f08 <EXTI0_IRQHandler+0x130>)
 8004ed8:	f002 fb8c 	bl	80075f4 <HAL_GPIO_WritePin>

				lastPress = HAL_GetTick();
 8004edc:	f000 fd14 	bl	8005908 <HAL_GetTick>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	469a      	mov	sl, r3
 8004ee6:	4693      	mov	fp, r2
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <EXTI0_IRQHandler+0x128>)
 8004eea:	e9c3 ab00 	strd	sl, fp, [r3]

			}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(keyPad_Pin);
 8004eee:	2001      	movs	r0, #1
 8004ef0:	f002 fb98 	bl	8007624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004efe:	bf00      	nop
 8004f00:	20000858 	.word	0x20000858
 8004f04:	20000034 	.word	0x20000034
 8004f08:	48000c00 	.word	0x48000c00
 8004f0c:	48000800 	.word	0x48000800
 8004f10:	20000038 	.word	0x20000038

08004f14 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
    if (HAL_GetTick() - lastPress > 200) {
 8004f1c:	f000 fcf4 	bl	8005908 <HAL_GetTick>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2200      	movs	r2, #0
 8004f24:	4698      	mov	r8, r3
 8004f26:	4691      	mov	r9, r2
 8004f28:	4b48      	ldr	r3, [pc, #288]	; (800504c <EXTI1_IRQHandler+0x138>)
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	ebb8 0402 	subs.w	r4, r8, r2
 8004f32:	eb69 0503 	sbc.w	r5, r9, r3
 8004f36:	2cc9      	cmp	r4, #201	; 0xc9
 8004f38:	f175 0300 	sbcs.w	r3, r5, #0
 8004f3c:	d375      	bcc.n	800502a <EXTI1_IRQHandler+0x116>

        col = 1;
 8004f3e:	4b44      	ldr	r3, [pc, #272]	; (8005050 <EXTI1_IRQHandler+0x13c>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < 4; i++) {
 8004f44:	2300      	movs	r3, #0
 8004f46:	607b      	str	r3, [r7, #4]
 8004f48:	e05c      	b.n	8005004 <EXTI1_IRQHandler+0xf0>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	210f      	movs	r1, #15
 8004f4e:	4841      	ldr	r0, [pc, #260]	; (8005054 <EXTI1_IRQHandler+0x140>)
 8004f50:	f002 fb50 	bl	80075f4 <HAL_GPIO_WritePin>
            switch (i) {
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d851      	bhi.n	8004ffe <EXTI1_IRQHandler+0xea>
 8004f5a:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <EXTI1_IRQHandler+0x4c>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08004f71 	.word	0x08004f71
 8004f64:	08004f91 	.word	0x08004f91
 8004f68:	08004fb1 	.word	0x08004fb1
 8004f6c:	08004fd1 	.word	0x08004fd1
                case 0:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8004f70:	2201      	movs	r2, #1
 8004f72:	2101      	movs	r1, #1
 8004f74:	4837      	ldr	r0, [pc, #220]	; (8005054 <EXTI1_IRQHandler+0x140>)
 8004f76:	f002 fb3d 	bl	80075f4 <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 0;
 8004f7a:	2102      	movs	r1, #2
 8004f7c:	4836      	ldr	r0, [pc, #216]	; (8005058 <EXTI1_IRQHandler+0x144>)
 8004f7e:	f002 fb21 	bl	80075c4 <HAL_GPIO_ReadPin>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d033      	beq.n	8004ff0 <EXTI1_IRQHandler+0xdc>
 8004f88:	4b34      	ldr	r3, [pc, #208]	; (800505c <EXTI1_IRQHandler+0x148>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
                    break;
 8004f8e:	e02f      	b.n	8004ff0 <EXTI1_IRQHandler+0xdc>
                case 1:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8004f90:	2201      	movs	r2, #1
 8004f92:	2102      	movs	r1, #2
 8004f94:	482f      	ldr	r0, [pc, #188]	; (8005054 <EXTI1_IRQHandler+0x140>)
 8004f96:	f002 fb2d 	bl	80075f4 <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 1;
 8004f9a:	2102      	movs	r1, #2
 8004f9c:	482e      	ldr	r0, [pc, #184]	; (8005058 <EXTI1_IRQHandler+0x144>)
 8004f9e:	f002 fb11 	bl	80075c4 <HAL_GPIO_ReadPin>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d025      	beq.n	8004ff4 <EXTI1_IRQHandler+0xe0>
 8004fa8:	4b2c      	ldr	r3, [pc, #176]	; (800505c <EXTI1_IRQHandler+0x148>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
                    break;
 8004fae:	e021      	b.n	8004ff4 <EXTI1_IRQHandler+0xe0>
                case 2:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	2104      	movs	r1, #4
 8004fb4:	4827      	ldr	r0, [pc, #156]	; (8005054 <EXTI1_IRQHandler+0x140>)
 8004fb6:	f002 fb1d 	bl	80075f4 <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 2;
 8004fba:	2102      	movs	r1, #2
 8004fbc:	4826      	ldr	r0, [pc, #152]	; (8005058 <EXTI1_IRQHandler+0x144>)
 8004fbe:	f002 fb01 	bl	80075c4 <HAL_GPIO_ReadPin>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d017      	beq.n	8004ff8 <EXTI1_IRQHandler+0xe4>
 8004fc8:	4b24      	ldr	r3, [pc, #144]	; (800505c <EXTI1_IRQHandler+0x148>)
 8004fca:	2202      	movs	r2, #2
 8004fcc:	601a      	str	r2, [r3, #0]
                    break;
 8004fce:	e013      	b.n	8004ff8 <EXTI1_IRQHandler+0xe4>
                case 3:
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	2108      	movs	r1, #8
 8004fd4:	481f      	ldr	r0, [pc, #124]	; (8005054 <EXTI1_IRQHandler+0x140>)
 8004fd6:	f002 fb0d 	bl	80075f4 <HAL_GPIO_WritePin>
                    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) row = 3;
 8004fda:	2102      	movs	r1, #2
 8004fdc:	481e      	ldr	r0, [pc, #120]	; (8005058 <EXTI1_IRQHandler+0x144>)
 8004fde:	f002 faf1 	bl	80075c4 <HAL_GPIO_ReadPin>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d009      	beq.n	8004ffc <EXTI1_IRQHandler+0xe8>
 8004fe8:	4b1c      	ldr	r3, [pc, #112]	; (800505c <EXTI1_IRQHandler+0x148>)
 8004fea:	2203      	movs	r2, #3
 8004fec:	601a      	str	r2, [r3, #0]
                    break;
 8004fee:	e005      	b.n	8004ffc <EXTI1_IRQHandler+0xe8>
                    break;
 8004ff0:	bf00      	nop
 8004ff2:	e004      	b.n	8004ffe <EXTI1_IRQHandler+0xea>
                    break;
 8004ff4:	bf00      	nop
 8004ff6:	e002      	b.n	8004ffe <EXTI1_IRQHandler+0xea>
                    break;
 8004ff8:	bf00      	nop
 8004ffa:	e000      	b.n	8004ffe <EXTI1_IRQHandler+0xea>
                    break;
 8004ffc:	bf00      	nop
        for (int i = 0; i < 4; i++) {
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3301      	adds	r3, #1
 8005002:	607b      	str	r3, [r7, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b03      	cmp	r3, #3
 8005008:	dd9f      	ble.n	8004f4a <EXTI1_IRQHandler+0x36>

            }
        }

        keyHandler();
 800500a:	f7ff f8fd 	bl	8004208 <keyHandler>
        lastPress = HAL_GetTick();
 800500e:	f000 fc7b 	bl	8005908 <HAL_GetTick>
 8005012:	4603      	mov	r3, r0
 8005014:	2200      	movs	r2, #0
 8005016:	469a      	mov	sl, r3
 8005018:	4693      	mov	fp, r2
 800501a:	4b0c      	ldr	r3, [pc, #48]	; (800504c <EXTI1_IRQHandler+0x138>)
 800501c:	e9c3 ab00 	strd	sl, fp, [r3]
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 8005020:	2201      	movs	r2, #1
 8005022:	210f      	movs	r1, #15
 8005024:	480b      	ldr	r0, [pc, #44]	; (8005054 <EXTI1_IRQHandler+0x140>)
 8005026:	f002 fae5 	bl	80075f4 <HAL_GPIO_WritePin>
    }
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1));
 800502a:	bf00      	nop
 800502c:	2102      	movs	r1, #2
 800502e:	480a      	ldr	r0, [pc, #40]	; (8005058 <EXTI1_IRQHandler+0x144>)
 8005030:	f002 fac8 	bl	80075c4 <HAL_GPIO_ReadPin>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f8      	bne.n	800502c <EXTI1_IRQHandler+0x118>

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800503a:	2002      	movs	r0, #2
 800503c:	f002 faf2 	bl	8007624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504a:	bf00      	nop
 800504c:	20000858 	.word	0x20000858
 8005050:	20000034 	.word	0x20000034
 8005054:	48000c00 	.word	0x48000c00
 8005058:	48000800 	.word	0x48000800
 800505c:	20000038 	.word	0x20000038

08005060 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8005060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */
		if (HAL_GetTick() - lastPress > 200) {
 8005068:	f000 fc4e 	bl	8005908 <HAL_GetTick>
 800506c:	4603      	mov	r3, r0
 800506e:	2200      	movs	r2, #0
 8005070:	4698      	mov	r8, r3
 8005072:	4691      	mov	r9, r2
 8005074:	4b48      	ldr	r3, [pc, #288]	; (8005198 <EXTI2_TSC_IRQHandler+0x138>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	ebb8 0402 	subs.w	r4, r8, r2
 800507e:	eb69 0503 	sbc.w	r5, r9, r3
 8005082:	2cc9      	cmp	r4, #201	; 0xc9
 8005084:	f175 0300 	sbcs.w	r3, r5, #0
 8005088:	d375      	bcc.n	8005176 <EXTI2_TSC_IRQHandler+0x116>

			col = 2;
 800508a:	4b44      	ldr	r3, [pc, #272]	; (800519c <EXTI2_TSC_IRQHandler+0x13c>)
 800508c:	2202      	movs	r2, #2
 800508e:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8005090:	2300      	movs	r3, #0
 8005092:	607b      	str	r3, [r7, #4]
 8005094:	e05c      	b.n	8005150 <EXTI2_TSC_IRQHandler+0xf0>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 8005096:	2200      	movs	r2, #0
 8005098:	210f      	movs	r1, #15
 800509a:	4841      	ldr	r0, [pc, #260]	; (80051a0 <EXTI2_TSC_IRQHandler+0x140>)
 800509c:	f002 faaa 	bl	80075f4 <HAL_GPIO_WritePin>
				switch (i) {
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d851      	bhi.n	800514a <EXTI2_TSC_IRQHandler+0xea>
 80050a6:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <EXTI2_TSC_IRQHandler+0x4c>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050bd 	.word	0x080050bd
 80050b0:	080050dd 	.word	0x080050dd
 80050b4:	080050fd 	.word	0x080050fd
 80050b8:	0800511d 	.word	0x0800511d
					case 0:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 80050bc:	2201      	movs	r2, #1
 80050be:	2101      	movs	r1, #1
 80050c0:	4837      	ldr	r0, [pc, #220]	; (80051a0 <EXTI2_TSC_IRQHandler+0x140>)
 80050c2:	f002 fa97 	bl	80075f4 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 0;
 80050c6:	2104      	movs	r1, #4
 80050c8:	4836      	ldr	r0, [pc, #216]	; (80051a4 <EXTI2_TSC_IRQHandler+0x144>)
 80050ca:	f002 fa7b 	bl	80075c4 <HAL_GPIO_ReadPin>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d033      	beq.n	800513c <EXTI2_TSC_IRQHandler+0xdc>
 80050d4:	4b34      	ldr	r3, [pc, #208]	; (80051a8 <EXTI2_TSC_IRQHandler+0x148>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]
						break;
 80050da:	e02f      	b.n	800513c <EXTI2_TSC_IRQHandler+0xdc>
					case 1:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 80050dc:	2201      	movs	r2, #1
 80050de:	2102      	movs	r1, #2
 80050e0:	482f      	ldr	r0, [pc, #188]	; (80051a0 <EXTI2_TSC_IRQHandler+0x140>)
 80050e2:	f002 fa87 	bl	80075f4 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 1;
 80050e6:	2104      	movs	r1, #4
 80050e8:	482e      	ldr	r0, [pc, #184]	; (80051a4 <EXTI2_TSC_IRQHandler+0x144>)
 80050ea:	f002 fa6b 	bl	80075c4 <HAL_GPIO_ReadPin>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d025      	beq.n	8005140 <EXTI2_TSC_IRQHandler+0xe0>
 80050f4:	4b2c      	ldr	r3, [pc, #176]	; (80051a8 <EXTI2_TSC_IRQHandler+0x148>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
						break;
 80050fa:	e021      	b.n	8005140 <EXTI2_TSC_IRQHandler+0xe0>
					case 2:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80050fc:	2201      	movs	r2, #1
 80050fe:	2104      	movs	r1, #4
 8005100:	4827      	ldr	r0, [pc, #156]	; (80051a0 <EXTI2_TSC_IRQHandler+0x140>)
 8005102:	f002 fa77 	bl	80075f4 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 2;
 8005106:	2104      	movs	r1, #4
 8005108:	4826      	ldr	r0, [pc, #152]	; (80051a4 <EXTI2_TSC_IRQHandler+0x144>)
 800510a:	f002 fa5b 	bl	80075c4 <HAL_GPIO_ReadPin>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d017      	beq.n	8005144 <EXTI2_TSC_IRQHandler+0xe4>
 8005114:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <EXTI2_TSC_IRQHandler+0x148>)
 8005116:	2202      	movs	r2, #2
 8005118:	601a      	str	r2, [r3, #0]
						break;
 800511a:	e013      	b.n	8005144 <EXTI2_TSC_IRQHandler+0xe4>
					case 3:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 800511c:	2201      	movs	r2, #1
 800511e:	2108      	movs	r1, #8
 8005120:	481f      	ldr	r0, [pc, #124]	; (80051a0 <EXTI2_TSC_IRQHandler+0x140>)
 8005122:	f002 fa67 	bl	80075f4 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) row = 3;
 8005126:	2104      	movs	r1, #4
 8005128:	481e      	ldr	r0, [pc, #120]	; (80051a4 <EXTI2_TSC_IRQHandler+0x144>)
 800512a:	f002 fa4b 	bl	80075c4 <HAL_GPIO_ReadPin>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d009      	beq.n	8005148 <EXTI2_TSC_IRQHandler+0xe8>
 8005134:	4b1c      	ldr	r3, [pc, #112]	; (80051a8 <EXTI2_TSC_IRQHandler+0x148>)
 8005136:	2203      	movs	r2, #3
 8005138:	601a      	str	r2, [r3, #0]
						break;
 800513a:	e005      	b.n	8005148 <EXTI2_TSC_IRQHandler+0xe8>
						break;
 800513c:	bf00      	nop
 800513e:	e004      	b.n	800514a <EXTI2_TSC_IRQHandler+0xea>
						break;
 8005140:	bf00      	nop
 8005142:	e002      	b.n	800514a <EXTI2_TSC_IRQHandler+0xea>
						break;
 8005144:	bf00      	nop
 8005146:	e000      	b.n	800514a <EXTI2_TSC_IRQHandler+0xea>
						break;
 8005148:	bf00      	nop
			for (int i = 0; i < 4; i++) {
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3301      	adds	r3, #1
 800514e:	607b      	str	r3, [r7, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b03      	cmp	r3, #3
 8005154:	dd9f      	ble.n	8005096 <EXTI2_TSC_IRQHandler+0x36>

				}
			}

			keyHandler();
 8005156:	f7ff f857 	bl	8004208 <keyHandler>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 800515a:	2201      	movs	r2, #1
 800515c:	210f      	movs	r1, #15
 800515e:	4810      	ldr	r0, [pc, #64]	; (80051a0 <EXTI2_TSC_IRQHandler+0x140>)
 8005160:	f002 fa48 	bl	80075f4 <HAL_GPIO_WritePin>

			lastPress = HAL_GetTick();
 8005164:	f000 fbd0 	bl	8005908 <HAL_GetTick>
 8005168:	4603      	mov	r3, r0
 800516a:	2200      	movs	r2, #0
 800516c:	469a      	mov	sl, r3
 800516e:	4693      	mov	fp, r2
 8005170:	4b09      	ldr	r3, [pc, #36]	; (8005198 <EXTI2_TSC_IRQHandler+0x138>)
 8005172:	e9c3 ab00 	strd	sl, fp, [r3]

		}
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2));
 8005176:	bf00      	nop
 8005178:	2104      	movs	r1, #4
 800517a:	480a      	ldr	r0, [pc, #40]	; (80051a4 <EXTI2_TSC_IRQHandler+0x144>)
 800517c:	f002 fa22 	bl	80075c4 <HAL_GPIO_ReadPin>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1f8      	bne.n	8005178 <EXTI2_TSC_IRQHandler+0x118>

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005186:	2004      	movs	r0, #4
 8005188:	f002 fa4c 	bl	8007624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005196:	bf00      	nop
 8005198:	20000858 	.word	0x20000858
 800519c:	20000034 	.word	0x20000034
 80051a0:	48000c00 	.word	0x48000c00
 80051a4:	48000800 	.word	0x48000800
 80051a8:	20000038 	.word	0x20000038

080051ac <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80051ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
        if (HAL_GetTick() - lastPress > 200) {
 80051b4:	f000 fba8 	bl	8005908 <HAL_GetTick>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2200      	movs	r2, #0
 80051bc:	4698      	mov	r8, r3
 80051be:	4691      	mov	r9, r2
 80051c0:	4b48      	ldr	r3, [pc, #288]	; (80052e4 <EXTI3_IRQHandler+0x138>)
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	ebb8 0402 	subs.w	r4, r8, r2
 80051ca:	eb69 0503 	sbc.w	r5, r9, r3
 80051ce:	2cc9      	cmp	r4, #201	; 0xc9
 80051d0:	f175 0300 	sbcs.w	r3, r5, #0
 80051d4:	d375      	bcc.n	80052c2 <EXTI3_IRQHandler+0x116>

            col = 3;
 80051d6:	4b44      	ldr	r3, [pc, #272]	; (80052e8 <EXTI3_IRQHandler+0x13c>)
 80051d8:	2203      	movs	r2, #3
 80051da:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 80051dc:	2300      	movs	r3, #0
 80051de:	607b      	str	r3, [r7, #4]
 80051e0:	e05c      	b.n	800529c <EXTI3_IRQHandler+0xf0>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 80051e2:	2200      	movs	r2, #0
 80051e4:	210f      	movs	r1, #15
 80051e6:	4841      	ldr	r0, [pc, #260]	; (80052ec <EXTI3_IRQHandler+0x140>)
 80051e8:	f002 fa04 	bl	80075f4 <HAL_GPIO_WritePin>
                switch (i) {
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d851      	bhi.n	8005296 <EXTI3_IRQHandler+0xea>
 80051f2:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <EXTI3_IRQHandler+0x4c>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	08005209 	.word	0x08005209
 80051fc:	08005229 	.word	0x08005229
 8005200:	08005249 	.word	0x08005249
 8005204:	08005269 	.word	0x08005269
                    case 0:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8005208:	2201      	movs	r2, #1
 800520a:	2101      	movs	r1, #1
 800520c:	4837      	ldr	r0, [pc, #220]	; (80052ec <EXTI3_IRQHandler+0x140>)
 800520e:	f002 f9f1 	bl	80075f4 <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 0;
 8005212:	2108      	movs	r1, #8
 8005214:	4836      	ldr	r0, [pc, #216]	; (80052f0 <EXTI3_IRQHandler+0x144>)
 8005216:	f002 f9d5 	bl	80075c4 <HAL_GPIO_ReadPin>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d033      	beq.n	8005288 <EXTI3_IRQHandler+0xdc>
 8005220:	4b34      	ldr	r3, [pc, #208]	; (80052f4 <EXTI3_IRQHandler+0x148>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
                        break;
 8005226:	e02f      	b.n	8005288 <EXTI3_IRQHandler+0xdc>
                    case 1:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8005228:	2201      	movs	r2, #1
 800522a:	2102      	movs	r1, #2
 800522c:	482f      	ldr	r0, [pc, #188]	; (80052ec <EXTI3_IRQHandler+0x140>)
 800522e:	f002 f9e1 	bl	80075f4 <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 1;
 8005232:	2108      	movs	r1, #8
 8005234:	482e      	ldr	r0, [pc, #184]	; (80052f0 <EXTI3_IRQHandler+0x144>)
 8005236:	f002 f9c5 	bl	80075c4 <HAL_GPIO_ReadPin>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d025      	beq.n	800528c <EXTI3_IRQHandler+0xe0>
 8005240:	4b2c      	ldr	r3, [pc, #176]	; (80052f4 <EXTI3_IRQHandler+0x148>)
 8005242:	2201      	movs	r2, #1
 8005244:	601a      	str	r2, [r3, #0]
                        break;
 8005246:	e021      	b.n	800528c <EXTI3_IRQHandler+0xe0>
                    case 2:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8005248:	2201      	movs	r2, #1
 800524a:	2104      	movs	r1, #4
 800524c:	4827      	ldr	r0, [pc, #156]	; (80052ec <EXTI3_IRQHandler+0x140>)
 800524e:	f002 f9d1 	bl	80075f4 <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 2;
 8005252:	2108      	movs	r1, #8
 8005254:	4826      	ldr	r0, [pc, #152]	; (80052f0 <EXTI3_IRQHandler+0x144>)
 8005256:	f002 f9b5 	bl	80075c4 <HAL_GPIO_ReadPin>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d017      	beq.n	8005290 <EXTI3_IRQHandler+0xe4>
 8005260:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <EXTI3_IRQHandler+0x148>)
 8005262:	2202      	movs	r2, #2
 8005264:	601a      	str	r2, [r3, #0]
                        break;
 8005266:	e013      	b.n	8005290 <EXTI3_IRQHandler+0xe4>
                    case 3:
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8005268:	2201      	movs	r2, #1
 800526a:	2108      	movs	r1, #8
 800526c:	481f      	ldr	r0, [pc, #124]	; (80052ec <EXTI3_IRQHandler+0x140>)
 800526e:	f002 f9c1 	bl	80075f4 <HAL_GPIO_WritePin>
                        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)) row = 3;
 8005272:	2108      	movs	r1, #8
 8005274:	481e      	ldr	r0, [pc, #120]	; (80052f0 <EXTI3_IRQHandler+0x144>)
 8005276:	f002 f9a5 	bl	80075c4 <HAL_GPIO_ReadPin>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d009      	beq.n	8005294 <EXTI3_IRQHandler+0xe8>
 8005280:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <EXTI3_IRQHandler+0x148>)
 8005282:	2203      	movs	r2, #3
 8005284:	601a      	str	r2, [r3, #0]
                        break;
 8005286:	e005      	b.n	8005294 <EXTI3_IRQHandler+0xe8>
                        break;
 8005288:	bf00      	nop
 800528a:	e004      	b.n	8005296 <EXTI3_IRQHandler+0xea>
                        break;
 800528c:	bf00      	nop
 800528e:	e002      	b.n	8005296 <EXTI3_IRQHandler+0xea>
                        break;
 8005290:	bf00      	nop
 8005292:	e000      	b.n	8005296 <EXTI3_IRQHandler+0xea>
                        break;
 8005294:	bf00      	nop
            for (int i = 0; i < 4; i++) {
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3301      	adds	r3, #1
 800529a:	607b      	str	r3, [r7, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b03      	cmp	r3, #3
 80052a0:	dd9f      	ble.n	80051e2 <EXTI3_IRQHandler+0x36>

                }
            }

            keyHandler();
 80052a2:	f7fe ffb1 	bl	8004208 <keyHandler>
            lastPress = HAL_GetTick();
 80052a6:	f000 fb2f 	bl	8005908 <HAL_GetTick>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2200      	movs	r2, #0
 80052ae:	469a      	mov	sl, r3
 80052b0:	4693      	mov	fp, r2
 80052b2:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <EXTI3_IRQHandler+0x138>)
 80052b4:	e9c3 ab00 	strd	sl, fp, [r3]
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 80052b8:	2201      	movs	r2, #1
 80052ba:	210f      	movs	r1, #15
 80052bc:	480b      	ldr	r0, [pc, #44]	; (80052ec <EXTI3_IRQHandler+0x140>)
 80052be:	f002 f999 	bl	80075f4 <HAL_GPIO_WritePin>


        }
        while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3));
 80052c2:	bf00      	nop
 80052c4:	2108      	movs	r1, #8
 80052c6:	480a      	ldr	r0, [pc, #40]	; (80052f0 <EXTI3_IRQHandler+0x144>)
 80052c8:	f002 f97c 	bl	80075c4 <HAL_GPIO_ReadPin>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f8      	bne.n	80052c4 <EXTI3_IRQHandler+0x118>

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80052d2:	2008      	movs	r0, #8
 80052d4:	f002 f9a6 	bl	8007624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80052d8:	bf00      	nop
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052e2:	bf00      	nop
 80052e4:	20000858 	.word	0x20000858
 80052e8:	20000034 	.word	0x20000034
 80052ec:	48000c00 	.word	0x48000c00
 80052f0:	48000800 	.word	0x48000800
 80052f4:	20000038 	.word	0x20000038

080052f8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
someOneClose = 1;
 80052fc:	4b08      	ldr	r3, [pc, #32]	; (8005320 <EXTI4_IRQHandler+0x28>)
 80052fe:	2201      	movs	r2, #1
 8005300:	601a      	str	r2, [r3, #0]
mSecond = 0;
 8005302:	4b08      	ldr	r3, [pc, #32]	; (8005324 <EXTI4_IRQHandler+0x2c>)
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8005308:	2201      	movs	r2, #1
 800530a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800530e:	4806      	ldr	r0, [pc, #24]	; (8005328 <EXTI4_IRQHandler+0x30>)
 8005310:	f002 f970 	bl	80075f4 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_Pin);
 8005314:	2010      	movs	r0, #16
 8005316:	f002 f985 	bl	8007624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800531a:	bf00      	nop
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20000798 	.word	0x20000798
 8005324:	20000888 	.word	0x20000888
 8005328:	48001000 	.word	0x48001000

0800532c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
    static int counter  =  0 ;
    static int temSum = 0;
//    static int lumSum = 0 ;
    counter ++;
 8005332:	4b31      	ldr	r3, [pc, #196]	; (80053f8 <ADC1_2_IRQHandler+0xcc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	4a2f      	ldr	r2, [pc, #188]	; (80053f8 <ADC1_2_IRQHandler+0xcc>)
 800533a:	6013      	str	r3, [r2, #0]
    if(counter %100== 0){
 800533c:	4b2e      	ldr	r3, [pc, #184]	; (80053f8 <ADC1_2_IRQHandler+0xcc>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b2e      	ldr	r3, [pc, #184]	; (80053fc <ADC1_2_IRQHandler+0xd0>)
 8005342:	fb83 1302 	smull	r1, r3, r3, r2
 8005346:	1159      	asrs	r1, r3, #5
 8005348:	17d3      	asrs	r3, r2, #31
 800534a:	1acb      	subs	r3, r1, r3
 800534c:	2164      	movs	r1, #100	; 0x64
 800534e:	fb01 f303 	mul.w	r3, r1, r3
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d13f      	bne.n	80053d8 <ADC1_2_IRQHandler+0xac>

//        lumSum +=  (int) ((HAL_ADC_GetValue(&hadc1) * 99) / 1000);
        int Voltage_mv = (int)(HAL_ADC_GetValue(&hadc2) * 3300 / 4095);
 8005358:	4829      	ldr	r0, [pc, #164]	; (8005400 <ADC1_2_IRQHandler+0xd4>)
 800535a:	f000 fe43 	bl	8005fe4 <HAL_ADC_GetValue>
 800535e:	4603      	mov	r3, r0
 8005360:	f640 42e4 	movw	r2, #3300	; 0xce4
 8005364:	fb03 f202 	mul.w	r2, r3, r2
 8005368:	4b26      	ldr	r3, [pc, #152]	; (8005404 <ADC1_2_IRQHandler+0xd8>)
 800536a:	fba3 1302 	umull	r1, r3, r3, r2
 800536e:	1ad2      	subs	r2, r2, r3
 8005370:	0852      	lsrs	r2, r2, #1
 8005372:	4413      	add	r3, r2
 8005374:	0adb      	lsrs	r3, r3, #11
 8005376:	607b      	str	r3, [r7, #4]
        temSum += Voltage_mv / 10;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a23      	ldr	r2, [pc, #140]	; (8005408 <ADC1_2_IRQHandler+0xdc>)
 800537c:	fb82 1203 	smull	r1, r2, r2, r3
 8005380:	1092      	asrs	r2, r2, #2
 8005382:	17db      	asrs	r3, r3, #31
 8005384:	1ad2      	subs	r2, r2, r3
 8005386:	4b21      	ldr	r3, [pc, #132]	; (800540c <ADC1_2_IRQHandler+0xe0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4413      	add	r3, r2
 800538c:	4a1f      	ldr	r2, [pc, #124]	; (800540c <ADC1_2_IRQHandler+0xe0>)
 800538e:	6013      	str	r3, [r2, #0]

        if(counter == 900){
 8005390:	4b19      	ldr	r3, [pc, #100]	; (80053f8 <ADC1_2_IRQHandler+0xcc>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8005398:	d11e      	bne.n	80053d8 <ADC1_2_IRQHandler+0xac>

//            int lumCopy = lum;
            int temCopy = temperature;
 800539a:	4b1d      	ldr	r3, [pc, #116]	; (8005410 <ADC1_2_IRQHandler+0xe4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	603b      	str	r3, [r7, #0]
//            lum = lumSum/10;
            temperature = temSum / 100;
 80053a0:	4b1a      	ldr	r3, [pc, #104]	; (800540c <ADC1_2_IRQHandler+0xe0>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a15      	ldr	r2, [pc, #84]	; (80053fc <ADC1_2_IRQHandler+0xd0>)
 80053a6:	fb82 1203 	smull	r1, r2, r2, r3
 80053aa:	1152      	asrs	r2, r2, #5
 80053ac:	17db      	asrs	r3, r3, #31
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	4a17      	ldr	r2, [pc, #92]	; (8005410 <ADC1_2_IRQHandler+0xe4>)
 80053b2:	6013      	str	r3, [r2, #0]
            counter = 0 ;
 80053b4:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <ADC1_2_IRQHandler+0xcc>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]
            temSum = 0 ;
 80053ba:	4b14      	ldr	r3, [pc, #80]	; (800540c <ADC1_2_IRQHandler+0xe0>)
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
//            lumSum = 0 ;

//            if(lum < lumCopy)HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
            if(temperature > temSum)HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 80053c0:	4b13      	ldr	r3, [pc, #76]	; (8005410 <ADC1_2_IRQHandler+0xe4>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	4b11      	ldr	r3, [pc, #68]	; (800540c <ADC1_2_IRQHandler+0xe0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	dd05      	ble.n	80053d8 <ADC1_2_IRQHandler+0xac>
 80053cc:	2200      	movs	r2, #0
 80053ce:	2110      	movs	r1, #16
 80053d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053d4:	f002 f90e 	bl	80075f4 <HAL_GPIO_WritePin>
    }




    HAL_ADC_Start_IT(&hadc1);
 80053d8:	480e      	ldr	r0, [pc, #56]	; (8005414 <ADC1_2_IRQHandler+0xe8>)
 80053da:	f000 fcc3 	bl	8005d64 <HAL_ADC_Start_IT>
    HAL_ADC_Start_IT(&hadc2);
 80053de:	4808      	ldr	r0, [pc, #32]	; (8005400 <ADC1_2_IRQHandler+0xd4>)
 80053e0:	f000 fcc0 	bl	8005d64 <HAL_ADC_Start_IT>
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80053e4:	480b      	ldr	r0, [pc, #44]	; (8005414 <ADC1_2_IRQHandler+0xe8>)
 80053e6:	f000 fe0b 	bl	8006000 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80053ea:	4805      	ldr	r0, [pc, #20]	; (8005400 <ADC1_2_IRQHandler+0xd4>)
 80053ec:	f000 fe08 	bl	8006000 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	200008ec 	.word	0x200008ec
 80053fc:	51eb851f 	.word	0x51eb851f
 8005400:	20000238 	.word	0x20000238
 8005404:	00100101 	.word	0x00100101
 8005408:	66666667 	.word	0x66666667
 800540c:	200008f0 	.word	0x200008f0
 8005410:	20000004 	.word	0x20000004
 8005414:	200001e8 	.word	0x200001e8

08005418 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800541c:	2020      	movs	r0, #32
 800541e:	f002 f901 	bl	8007624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005422:	bf00      	nop
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800542c:	4803      	ldr	r0, [pc, #12]	; (800543c <TIM2_IRQHandler+0x14>)
 800542e:	f004 fa13 	bl	8009858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	HAL_TIM_Base_Start_IT(&htim2);
 8005432:	4802      	ldr	r0, [pc, #8]	; (800543c <TIM2_IRQHandler+0x14>)
 8005434:	f004 f844 	bl	80094c0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM2_IRQn 1 */
}
 8005438:	bf00      	nop
 800543a:	bd80      	pop	{r7, pc}
 800543c:	20000338 	.word	0x20000338

08005440 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
//		shown1 = 1;
//
//	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005444:	4803      	ldr	r0, [pc, #12]	; (8005454 <TIM3_IRQHandler+0x14>)
 8005446:	f004 fa07 	bl	8009858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	HAL_TIM_Base_Start_IT(&htim3);
 800544a:	4802      	ldr	r0, [pc, #8]	; (8005454 <TIM3_IRQHandler+0x14>)
 800544c:	f004 f838 	bl	80094c0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_IRQn 1 */
}
 8005450:	bf00      	nop
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20000384 	.word	0x20000384

08005458 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800545c:	4802      	ldr	r0, [pc, #8]	; (8005468 <USART2_IRQHandler+0x10>)
 800545e:	f005 fa3d 	bl	800a8dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005462:	bf00      	nop
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	2000041c 	.word	0x2000041c

0800546c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800546c:	b590      	push	{r4, r7, lr}
 800546e:	b0c3      	sub	sp, #268	; 0x10c
 8005470:	af40      	add	r7, sp, #256	; 0x100
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
static int alarmPosition = 0;
//setCursor(0,0);
char temp2[2] = " ";
 8005472:	2320      	movs	r3, #32
 8005474:	80bb      	strh	r3, [r7, #4]
sprintf(temp2,"%d",temperature);
 8005476:	4b95      	ldr	r3, [pc, #596]	; (80056cc <TIM6_DAC_IRQHandler+0x260>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	1d3b      	adds	r3, r7, #4
 800547c:	4994      	ldr	r1, [pc, #592]	; (80056d0 <TIM6_DAC_IRQHandler+0x264>)
 800547e:	4618      	mov	r0, r3
 8005480:	f006 fad0 	bl	800ba24 <siprintf>
//print(temp2);
		if(startState == 1 && HAL_GetTick() - startStateLastTime >= 1000){
 8005484:	4b93      	ldr	r3, [pc, #588]	; (80056d4 <TIM6_DAC_IRQHandler+0x268>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d121      	bne.n	80054d0 <TIM6_DAC_IRQHandler+0x64>
 800548c:	f000 fa3c 	bl	8005908 <HAL_GetTick>
 8005490:	4603      	mov	r3, r0
 8005492:	4a91      	ldr	r2, [pc, #580]	; (80056d8 <TIM6_DAC_IRQHandler+0x26c>)
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800549c:	d318      	bcc.n	80054d0 <TIM6_DAC_IRQHandler+0x64>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,1);
 800549e:	2201      	movs	r2, #1
 80054a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054a4:	488d      	ldr	r0, [pc, #564]	; (80056dc <TIM6_DAC_IRQHandler+0x270>)
 80054a6:	f002 f8a5 	bl	80075f4 <HAL_GPIO_WritePin>
			clear();
 80054aa:	f7fb fdd3 	bl	8001054 <clear>
			setCursor(0,0);
 80054ae:	2100      	movs	r1, #0
 80054b0:	2000      	movs	r0, #0
 80054b2:	f7fb fdd9 	bl	8001068 <setCursor>
			print(">> ControlPanel  ");
 80054b6:	488a      	ldr	r0, [pc, #552]	; (80056e0 <TIM6_DAC_IRQHandler+0x274>)
 80054b8:	f7fb fe34 	bl	8001124 <print>
			GenerateMenu();
 80054bc:	f7fc fe2c 	bl	8002118 <GenerateMenu>
			generateMenu = 1;
 80054c0:	4b88      	ldr	r3, [pc, #544]	; (80056e4 <TIM6_DAC_IRQHandler+0x278>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
			startState = 2;
 80054c6:	4b83      	ldr	r3, [pc, #524]	; (80056d4 <TIM6_DAC_IRQHandler+0x268>)
 80054c8:	2202      	movs	r2, #2
 80054ca:	601a      	str	r2, [r3, #0]
			display();
 80054cc:	f7fb fe14 	bl	80010f8 <display>
		}
		if(startState == 3 && HAL_GetTick() - startStateLastTime >= 1000){
 80054d0:	4b80      	ldr	r3, [pc, #512]	; (80056d4 <TIM6_DAC_IRQHandler+0x268>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d110      	bne.n	80054fa <TIM6_DAC_IRQHandler+0x8e>
 80054d8:	f000 fa16 	bl	8005908 <HAL_GetTick>
 80054dc:	4603      	mov	r3, r0
 80054de:	4a7e      	ldr	r2, [pc, #504]	; (80056d8 <TIM6_DAC_IRQHandler+0x26c>)
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	1a9b      	subs	r3, r3, r2
 80054e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054e8:	d307      	bcc.n	80054fa <TIM6_DAC_IRQHandler+0x8e>
			startState = 0;
 80054ea:	4b7a      	ldr	r3, [pc, #488]	; (80056d4 <TIM6_DAC_IRQHandler+0x268>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
			generateMenu = 0;
 80054f0:	4b7c      	ldr	r3, [pc, #496]	; (80056e4 <TIM6_DAC_IRQHandler+0x278>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
			clear();
 80054f6:	f7fb fdad 	bl	8001054 <clear>
		}
		if(temperature <= temThreshold && !someOneClose)
 80054fa:	4b74      	ldr	r3, [pc, #464]	; (80056cc <TIM6_DAC_IRQHandler+0x260>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4b7a      	ldr	r3, [pc, #488]	; (80056e8 <TIM6_DAC_IRQHandler+0x27c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	dc06      	bgt.n	8005514 <TIM6_DAC_IRQHandler+0xa8>
 8005506:	4b79      	ldr	r3, [pc, #484]	; (80056ec <TIM6_DAC_IRQHandler+0x280>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <TIM6_DAC_IRQHandler+0xa8>
			alarmPosition = 0;
 800550e:	4b78      	ldr	r3, [pc, #480]	; (80056f0 <TIM6_DAC_IRQHandler+0x284>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
		if(temperature > temThreshold || someOneClose){
 8005514:	4b6d      	ldr	r3, [pc, #436]	; (80056cc <TIM6_DAC_IRQHandler+0x260>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	4b73      	ldr	r3, [pc, #460]	; (80056e8 <TIM6_DAC_IRQHandler+0x27c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	dc04      	bgt.n	800552a <TIM6_DAC_IRQHandler+0xbe>
 8005520:	4b72      	ldr	r3, [pc, #456]	; (80056ec <TIM6_DAC_IRQHandler+0x280>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 80aa 	beq.w	800567e <TIM6_DAC_IRQHandler+0x212>
			if(securityAlarm == 1 && someOneClose &&temAlarm==1 && temperature > temThreshold){
 800552a:	4b72      	ldr	r3, [pc, #456]	; (80056f4 <TIM6_DAC_IRQHandler+0x288>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d111      	bne.n	8005556 <TIM6_DAC_IRQHandler+0xea>
 8005532:	4b6e      	ldr	r3, [pc, #440]	; (80056ec <TIM6_DAC_IRQHandler+0x280>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00d      	beq.n	8005556 <TIM6_DAC_IRQHandler+0xea>
 800553a:	4b6f      	ldr	r3, [pc, #444]	; (80056f8 <TIM6_DAC_IRQHandler+0x28c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d109      	bne.n	8005556 <TIM6_DAC_IRQHandler+0xea>
 8005542:	4b62      	ldr	r3, [pc, #392]	; (80056cc <TIM6_DAC_IRQHandler+0x260>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4b68      	ldr	r3, [pc, #416]	; (80056e8 <TIM6_DAC_IRQHandler+0x27c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	dd03      	ble.n	8005556 <TIM6_DAC_IRQHandler+0xea>
				alarmPosition = 1;
 800554e:	4b68      	ldr	r3, [pc, #416]	; (80056f0 <TIM6_DAC_IRQHandler+0x284>)
 8005550:	2201      	movs	r2, #1
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	e018      	b.n	8005588 <TIM6_DAC_IRQHandler+0x11c>
			}
			else if(securityAlarm == 1 && someOneClose){
 8005556:	4b67      	ldr	r3, [pc, #412]	; (80056f4 <TIM6_DAC_IRQHandler+0x288>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d107      	bne.n	800556e <TIM6_DAC_IRQHandler+0x102>
 800555e:	4b63      	ldr	r3, [pc, #396]	; (80056ec <TIM6_DAC_IRQHandler+0x280>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <TIM6_DAC_IRQHandler+0x102>
				alarmPosition = 2;
 8005566:	4b62      	ldr	r3, [pc, #392]	; (80056f0 <TIM6_DAC_IRQHandler+0x284>)
 8005568:	2202      	movs	r2, #2
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	e00c      	b.n	8005588 <TIM6_DAC_IRQHandler+0x11c>
			}
			else if(temAlarm==1 && temperature > temThreshold){
 800556e:	4b62      	ldr	r3, [pc, #392]	; (80056f8 <TIM6_DAC_IRQHandler+0x28c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d108      	bne.n	8005588 <TIM6_DAC_IRQHandler+0x11c>
 8005576:	4b55      	ldr	r3, [pc, #340]	; (80056cc <TIM6_DAC_IRQHandler+0x260>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	4b5b      	ldr	r3, [pc, #364]	; (80056e8 <TIM6_DAC_IRQHandler+0x27c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	dd02      	ble.n	8005588 <TIM6_DAC_IRQHandler+0x11c>
				alarmPosition = 3;
 8005582:	4b5b      	ldr	r3, [pc, #364]	; (80056f0 <TIM6_DAC_IRQHandler+0x284>)
 8005584:	2203      	movs	r2, #3
 8005586:	601a      	str	r2, [r3, #0]
			}
			// this part can be changed by animation
			char temp[1];
			sprintf(temp,"%d",mSecond);
 8005588:	4b5c      	ldr	r3, [pc, #368]	; (80056fc <TIM6_DAC_IRQHandler+0x290>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	463b      	mov	r3, r7
 800558e:	4950      	ldr	r1, [pc, #320]	; (80056d0 <TIM6_DAC_IRQHandler+0x264>)
 8005590:	4618      	mov	r0, r3
 8005592:	f006 fa47 	bl	800ba24 <siprintf>
			setCursor(17,0);
 8005596:	2100      	movs	r1, #0
 8005598:	2011      	movs	r0, #17
 800559a:	f7fb fd65 	bl	8001068 <setCursor>
			print(temp);
 800559e:	463b      	mov	r3, r7
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fb fdbf 	bl	8001124 <print>
			if(mSecond < 10){
 80055a6:	4b55      	ldr	r3, [pc, #340]	; (80056fc <TIM6_DAC_IRQHandler+0x290>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b09      	cmp	r3, #9
 80055ac:	dc47      	bgt.n	800563e <TIM6_DAC_IRQHandler+0x1d2>
				setCursor(0,0);
 80055ae:	2100      	movs	r1, #0
 80055b0:	2000      	movs	r0, #0
 80055b2:	f7fb fd59 	bl	8001068 <setCursor>
				if(temperature > temThreshold){
 80055b6:	4b45      	ldr	r3, [pc, #276]	; (80056cc <TIM6_DAC_IRQHandler+0x260>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b4b      	ldr	r3, [pc, #300]	; (80056e8 <TIM6_DAC_IRQHandler+0x27c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	dd03      	ble.n	80055ca <TIM6_DAC_IRQHandler+0x15e>
					print("High Temper     ");
 80055c2:	484f      	ldr	r0, [pc, #316]	; (8005700 <TIM6_DAC_IRQHandler+0x294>)
 80055c4:	f7fb fdae 	bl	8001124 <print>
 80055c8:	e002      	b.n	80055d0 <TIM6_DAC_IRQHandler+0x164>
					if(temAlarm){
					// activate temperature alarm
					}
				}else{
					print("                   ");
 80055ca:	484e      	ldr	r0, [pc, #312]	; (8005704 <TIM6_DAC_IRQHandler+0x298>)
 80055cc:	f7fb fdaa 	bl	8001124 <print>
				}
				setCursor(0,1);
 80055d0:	2101      	movs	r1, #1
 80055d2:	2000      	movs	r0, #0
 80055d4:	f7fb fd48 	bl	8001068 <setCursor>
				if(someOneClose && securityAlert){
 80055d8:	4b44      	ldr	r3, [pc, #272]	; (80056ec <TIM6_DAC_IRQHandler+0x280>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d007      	beq.n	80055f0 <TIM6_DAC_IRQHandler+0x184>
 80055e0:	4b49      	ldr	r3, [pc, #292]	; (8005708 <TIM6_DAC_IRQHandler+0x29c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <TIM6_DAC_IRQHandler+0x184>
					print("Some One Near By   ");
 80055e8:	4848      	ldr	r0, [pc, #288]	; (800570c <TIM6_DAC_IRQHandler+0x2a0>)
 80055ea:	f7fb fd9b 	bl	8001124 <print>
					if(securityAlarm){
 80055ee:	e002      	b.n	80055f6 <TIM6_DAC_IRQHandler+0x18a>
					// activate security alarm
					}
				}else{
					print("                   ");
 80055f0:	4844      	ldr	r0, [pc, #272]	; (8005704 <TIM6_DAC_IRQHandler+0x298>)
 80055f2:	f7fb fd97 	bl	8001124 <print>
				}
				setCursor(0,2);
 80055f6:	2102      	movs	r1, #2
 80055f8:	2000      	movs	r0, #0
 80055fa:	f7fb fd35 	bl	8001068 <setCursor>
				print("                   ");
 80055fe:	4841      	ldr	r0, [pc, #260]	; (8005704 <TIM6_DAC_IRQHandler+0x298>)
 8005600:	f7fb fd90 	bl	8001124 <print>
				setCursor(0,3);
 8005604:	2103      	movs	r1, #3
 8005606:	2000      	movs	r0, #0
 8005608:	f7fb fd2e 	bl	8001068 <setCursor>
				print("                   ");
 800560c:	483d      	ldr	r0, [pc, #244]	; (8005704 <TIM6_DAC_IRQHandler+0x298>)
 800560e:	f7fb fd89 	bl	8001124 <print>
				shown = 1;
 8005612:	4b3f      	ldr	r3, [pc, #252]	; (8005710 <TIM6_DAC_IRQHandler+0x2a4>)
 8005614:	2201      	movs	r2, #1
 8005616:	601a      	str	r2, [r3, #0]
				if(mSecond %3 ==0)
 8005618:	4b38      	ldr	r3, [pc, #224]	; (80056fc <TIM6_DAC_IRQHandler+0x290>)
 800561a:	6819      	ldr	r1, [r3, #0]
 800561c:	4b3d      	ldr	r3, [pc, #244]	; (8005714 <TIM6_DAC_IRQHandler+0x2a8>)
 800561e:	fb83 3201 	smull	r3, r2, r3, r1
 8005622:	17cb      	asrs	r3, r1, #31
 8005624:	1ad2      	subs	r2, r2, r3
 8005626:	4613      	mov	r3, r2
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	4413      	add	r3, r2
 800562c:	1aca      	subs	r2, r1, r3
 800562e:	2a00      	cmp	r2, #0
 8005630:	d102      	bne.n	8005638 <TIM6_DAC_IRQHandler+0x1cc>
					noDisplay();
 8005632:	f7fb fd4b 	bl	80010cc <noDisplay>
		if(temperature > temThreshold || someOneClose){
 8005636:	e073      	b.n	8005720 <TIM6_DAC_IRQHandler+0x2b4>
				else
					display();
 8005638:	f7fb fd5e 	bl	80010f8 <display>
		if(temperature > temThreshold || someOneClose){
 800563c:	e070      	b.n	8005720 <TIM6_DAC_IRQHandler+0x2b4>
			}
			else{
				shown = 0;
 800563e:	4b34      	ldr	r3, [pc, #208]	; (8005710 <TIM6_DAC_IRQHandler+0x2a4>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
				clear();
 8005644:	f7fb fd06 	bl	8001054 <clear>
				if(startState == 2){
 8005648:	4b22      	ldr	r3, [pc, #136]	; (80056d4 <TIM6_DAC_IRQHandler+0x268>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d167      	bne.n	8005720 <TIM6_DAC_IRQHandler+0x2b4>
					if(inMenu)
 8005650:	4b31      	ldr	r3, [pc, #196]	; (8005718 <TIM6_DAC_IRQHandler+0x2ac>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <TIM6_DAC_IRQHandler+0x1f2>
						ShowMenu();
 8005658:	f7fd feb4 	bl	80033c4 <ShowMenu>
		if(temperature > temThreshold || someOneClose){
 800565c:	e060      	b.n	8005720 <TIM6_DAC_IRQHandler+0x2b4>
					else
						ShowInfo(currentNode->screen);
 800565e:	4b2f      	ldr	r3, [pc, #188]	; (800571c <TIM6_DAC_IRQHandler+0x2b0>)
 8005660:	681c      	ldr	r4, [r3, #0]
 8005662:	4668      	mov	r0, sp
 8005664:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8005668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800566c:	4619      	mov	r1, r3
 800566e:	f006 f8d3 	bl	800b818 <memcpy>
 8005672:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8005676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005678:	f7fd ff1c 	bl	80034b4 <ShowInfo>
		if(temperature > temThreshold || someOneClose){
 800567c:	e050      	b.n	8005720 <TIM6_DAC_IRQHandler+0x2b4>
				}
			}

		}else if(shown){
 800567e:	4b24      	ldr	r3, [pc, #144]	; (8005710 <TIM6_DAC_IRQHandler+0x2a4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d04d      	beq.n	8005722 <TIM6_DAC_IRQHandler+0x2b6>
			alarmPosition = 0;
 8005686:	4b1a      	ldr	r3, [pc, #104]	; (80056f0 <TIM6_DAC_IRQHandler+0x284>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
			shown = 0;
 800568c:	4b20      	ldr	r3, [pc, #128]	; (8005710 <TIM6_DAC_IRQHandler+0x2a4>)
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
			clear();
 8005692:	f7fb fcdf 	bl	8001054 <clear>
			if(startState == 2){
 8005696:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <TIM6_DAC_IRQHandler+0x268>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d141      	bne.n	8005722 <TIM6_DAC_IRQHandler+0x2b6>
				if(inMenu)
 800569e:	4b1e      	ldr	r3, [pc, #120]	; (8005718 <TIM6_DAC_IRQHandler+0x2ac>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <TIM6_DAC_IRQHandler+0x240>
					ShowMenu();
 80056a6:	f7fd fe8d 	bl	80033c4 <ShowMenu>
 80056aa:	e03a      	b.n	8005722 <TIM6_DAC_IRQHandler+0x2b6>
				else
					ShowInfo(currentNode->screen);
 80056ac:	4b1b      	ldr	r3, [pc, #108]	; (800571c <TIM6_DAC_IRQHandler+0x2b0>)
 80056ae:	681c      	ldr	r4, [r3, #0]
 80056b0:	4668      	mov	r0, sp
 80056b2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80056b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056ba:	4619      	mov	r1, r3
 80056bc:	f006 f8ac 	bl	800b818 <memcpy>
 80056c0:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80056c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056c6:	f7fd fef5 	bl	80034b4 <ShowInfo>
 80056ca:	e02a      	b.n	8005722 <TIM6_DAC_IRQHandler+0x2b6>
 80056cc:	20000004 	.word	0x20000004
 80056d0:	0800d9d0 	.word	0x0800d9d0
 80056d4:	20000880 	.word	0x20000880
 80056d8:	20000884 	.word	0x20000884
 80056dc:	48001000 	.word	0x48001000
 80056e0:	0800d9d4 	.word	0x0800d9d4
 80056e4:	2000086c 	.word	0x2000086c
 80056e8:	20000008 	.word	0x20000008
 80056ec:	20000798 	.word	0x20000798
 80056f0:	200008f4 	.word	0x200008f4
 80056f4:	20000010 	.word	0x20000010
 80056f8:	2000000c 	.word	0x2000000c
 80056fc:	20000888 	.word	0x20000888
 8005700:	0800d9e8 	.word	0x0800d9e8
 8005704:	0800d8f0 	.word	0x0800d8f0
 8005708:	20000014 	.word	0x20000014
 800570c:	0800d9fc 	.word	0x0800d9fc
 8005710:	2000088c 	.word	0x2000088c
 8005714:	55555556 	.word	0x55555556
 8005718:	2000012c 	.word	0x2000012c
 800571c:	200008e4 	.word	0x200008e4
		if(temperature > temThreshold || someOneClose){
 8005720:	bf00      	nop
			}
		}
		mSecond++;
 8005722:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <TIM6_DAC_IRQHandler+0x2f4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3301      	adds	r3, #1
 8005728:	4a0d      	ldr	r2, [pc, #52]	; (8005760 <TIM6_DAC_IRQHandler+0x2f4>)
 800572a:	6013      	str	r3, [r2, #0]
		if(mSecond>=20)
 800572c:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <TIM6_DAC_IRQHandler+0x2f4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b13      	cmp	r3, #19
 8005732:	dd05      	ble.n	8005740 <TIM6_DAC_IRQHandler+0x2d4>
		{
			mSecond =0;
 8005734:	4b0a      	ldr	r3, [pc, #40]	; (8005760 <TIM6_DAC_IRQHandler+0x2f4>)
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]
			someOneClose = 0;
 800573a:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <TIM6_DAC_IRQHandler+0x2f8>)
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
		}
  alarm(alarmPosition);
 8005740:	4b09      	ldr	r3, [pc, #36]	; (8005768 <TIM6_DAC_IRQHandler+0x2fc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff fa3b 	bl	8004bc0 <alarm>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800574a:	4808      	ldr	r0, [pc, #32]	; (800576c <TIM6_DAC_IRQHandler+0x300>)
 800574c:	f004 f884 	bl	8009858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
	HAL_TIM_Base_Start_IT(&htim6);
 8005750:	4806      	ldr	r0, [pc, #24]	; (800576c <TIM6_DAC_IRQHandler+0x300>)
 8005752:	f003 feb5 	bl	80094c0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	bd90      	pop	{r4, r7, pc}
 800575e:	bf00      	nop
 8005760:	20000888 	.word	0x20000888
 8005764:	20000798 	.word	0x20000798
 8005768:	200008f4 	.word	0x200008f4
 800576c:	200003d0 	.word	0x200003d0

08005770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005778:	4a14      	ldr	r2, [pc, #80]	; (80057cc <_sbrk+0x5c>)
 800577a:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <_sbrk+0x60>)
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005784:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <_sbrk+0x64>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d102      	bne.n	8005792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800578c:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <_sbrk+0x64>)
 800578e:	4a12      	ldr	r2, [pc, #72]	; (80057d8 <_sbrk+0x68>)
 8005790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <_sbrk+0x64>)
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4413      	add	r3, r2
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	429a      	cmp	r2, r3
 800579e:	d207      	bcs.n	80057b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80057a0:	f006 f808 	bl	800b7b4 <__errno>
 80057a4:	4603      	mov	r3, r0
 80057a6:	220c      	movs	r2, #12
 80057a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80057aa:	f04f 33ff 	mov.w	r3, #4294967295
 80057ae:	e009      	b.n	80057c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80057b0:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <_sbrk+0x64>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80057b6:	4b07      	ldr	r3, [pc, #28]	; (80057d4 <_sbrk+0x64>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4413      	add	r3, r2
 80057be:	4a05      	ldr	r2, [pc, #20]	; (80057d4 <_sbrk+0x64>)
 80057c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80057c2:	68fb      	ldr	r3, [r7, #12]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	2000a000 	.word	0x2000a000
 80057d0:	00000400 	.word	0x00000400
 80057d4:	200008f8 	.word	0x200008f8
 80057d8:	20000910 	.word	0x20000910

080057dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80057e0:	4b06      	ldr	r3, [pc, #24]	; (80057fc <SystemInit+0x20>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e6:	4a05      	ldr	r2, [pc, #20]	; (80057fc <SystemInit+0x20>)
 80057e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80057f0:	bf00      	nop
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	e000ed00 	.word	0xe000ed00

08005800 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005838 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005804:	480d      	ldr	r0, [pc, #52]	; (800583c <LoopForever+0x6>)
  ldr r1, =_edata
 8005806:	490e      	ldr	r1, [pc, #56]	; (8005840 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005808:	4a0e      	ldr	r2, [pc, #56]	; (8005844 <LoopForever+0xe>)
  movs r3, #0
 800580a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800580c:	e002      	b.n	8005814 <LoopCopyDataInit>

0800580e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800580e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005812:	3304      	adds	r3, #4

08005814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005818:	d3f9      	bcc.n	800580e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800581a:	4a0b      	ldr	r2, [pc, #44]	; (8005848 <LoopForever+0x12>)
  ldr r4, =_ebss
 800581c:	4c0b      	ldr	r4, [pc, #44]	; (800584c <LoopForever+0x16>)
  movs r3, #0
 800581e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005820:	e001      	b.n	8005826 <LoopFillZerobss>

08005822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005824:	3204      	adds	r2, #4

08005826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005828:	d3fb      	bcc.n	8005822 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800582a:	f7ff ffd7 	bl	80057dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800582e:	f005 ffc7 	bl	800b7c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005832:	f7fb fd93 	bl	800135c <main>

08005836 <LoopForever>:

LoopForever:
    b LoopForever
 8005836:	e7fe      	b.n	8005836 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005838:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800583c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005840:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8005844:	0800dc60 	.word	0x0800dc60
  ldr r2, =_sbss
 8005848:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 800584c:	20000910 	.word	0x20000910

08005850 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005850:	e7fe      	b.n	8005850 <ADC3_IRQHandler>
	...

08005854 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005858:	4b08      	ldr	r3, [pc, #32]	; (800587c <HAL_Init+0x28>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a07      	ldr	r2, [pc, #28]	; (800587c <HAL_Init+0x28>)
 800585e:	f043 0310 	orr.w	r3, r3, #16
 8005862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005864:	2003      	movs	r0, #3
 8005866:	f001 fc7b 	bl	8007160 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800586a:	2000      	movs	r0, #0
 800586c:	f000 f808 	bl	8005880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005870:	f7fc f9be 	bl	8001bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40022000 	.word	0x40022000

08005880 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005888:	4b12      	ldr	r3, [pc, #72]	; (80058d4 <HAL_InitTick+0x54>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	4b12      	ldr	r3, [pc, #72]	; (80058d8 <HAL_InitTick+0x58>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	4619      	mov	r1, r3
 8005892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005896:	fbb3 f3f1 	udiv	r3, r3, r1
 800589a:	fbb2 f3f3 	udiv	r3, r2, r3
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 fc93 	bl	80071ca <HAL_SYSTICK_Config>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e00e      	b.n	80058cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b0f      	cmp	r3, #15
 80058b2:	d80a      	bhi.n	80058ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058b4:	2200      	movs	r2, #0
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	f04f 30ff 	mov.w	r0, #4294967295
 80058bc:	f001 fc5b 	bl	8007176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058c0:	4a06      	ldr	r2, [pc, #24]	; (80058dc <HAL_InitTick+0x5c>)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e000      	b.n	80058cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	20000134 	.word	0x20000134
 80058d8:	2000013c 	.word	0x2000013c
 80058dc:	20000138 	.word	0x20000138

080058e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058e4:	4b06      	ldr	r3, [pc, #24]	; (8005900 <HAL_IncTick+0x20>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <HAL_IncTick+0x24>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4413      	add	r3, r2
 80058f0:	4a04      	ldr	r2, [pc, #16]	; (8005904 <HAL_IncTick+0x24>)
 80058f2:	6013      	str	r3, [r2, #0]
}
 80058f4:	bf00      	nop
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	2000013c 	.word	0x2000013c
 8005904:	200008fc 	.word	0x200008fc

08005908 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  return uwTick;  
 800590c:	4b03      	ldr	r3, [pc, #12]	; (800591c <HAL_GetTick+0x14>)
 800590e:	681b      	ldr	r3, [r3, #0]
}
 8005910:	4618      	mov	r0, r3
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	200008fc 	.word	0x200008fc

08005920 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005928:	f7ff ffee 	bl	8005908 <HAL_GetTick>
 800592c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005938:	d005      	beq.n	8005946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800593a:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <HAL_Delay+0x44>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005946:	bf00      	nop
 8005948:	f7ff ffde 	bl	8005908 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	429a      	cmp	r2, r3
 8005956:	d8f7      	bhi.n	8005948 <HAL_Delay+0x28>
  {
  }
}
 8005958:	bf00      	nop
 800595a:	bf00      	nop
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	2000013c 	.word	0x2000013c

08005968 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b09a      	sub	sp, #104	; 0x68
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e1c9      	b.n	8005d58 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d176      	bne.n	8005ac4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d152      	bne.n	8005a84 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7fc f91d 	bl	8001c38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d13b      	bne.n	8005a84 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f001 fa71 	bl	8006ef4 <ADC_Disable>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d12f      	bne.n	8005a84 <HAL_ADC_Init+0xe0>
 8005a24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d12b      	bne.n	8005a84 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a34:	f023 0302 	bic.w	r3, r3, #2
 8005a38:	f043 0202 	orr.w	r2, r3, #2
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a4e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a5e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005a60:	4b86      	ldr	r3, [pc, #536]	; (8005c7c <HAL_ADC_Init+0x2d8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a86      	ldr	r2, [pc, #536]	; (8005c80 <HAL_ADC_Init+0x2dc>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	0c9a      	lsrs	r2, r3, #18
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005a76:	e002      	b.n	8005a7e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f9      	bne.n	8005a78 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d007      	beq.n	8005aa2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aa0:	d110      	bne.n	8005ac4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	f023 0312 	bic.w	r3, r3, #18
 8005aaa:	f043 0210 	orr.w	r2, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab6:	f043 0201 	orr.w	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	f003 0310 	and.w	r3, r3, #16
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f040 8136 	bne.w	8005d3e <HAL_ADC_Init+0x39a>
 8005ad2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f040 8131 	bne.w	8005d3e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f040 8129 	bne.w	8005d3e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005af4:	f043 0202 	orr.w	r2, r3, #2
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b04:	d004      	beq.n	8005b10 <HAL_ADC_Init+0x16c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a5e      	ldr	r2, [pc, #376]	; (8005c84 <HAL_ADC_Init+0x2e0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d101      	bne.n	8005b14 <HAL_ADC_Init+0x170>
 8005b10:	4b5d      	ldr	r3, [pc, #372]	; (8005c88 <HAL_ADC_Init+0x2e4>)
 8005b12:	e000      	b.n	8005b16 <HAL_ADC_Init+0x172>
 8005b14:	4b5d      	ldr	r3, [pc, #372]	; (8005c8c <HAL_ADC_Init+0x2e8>)
 8005b16:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b20:	d102      	bne.n	8005b28 <HAL_ADC_Init+0x184>
 8005b22:	4b58      	ldr	r3, [pc, #352]	; (8005c84 <HAL_ADC_Init+0x2e0>)
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	e01a      	b.n	8005b5e <HAL_ADC_Init+0x1ba>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a55      	ldr	r2, [pc, #340]	; (8005c84 <HAL_ADC_Init+0x2e0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d103      	bne.n	8005b3a <HAL_ADC_Init+0x196>
 8005b32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	e011      	b.n	8005b5e <HAL_ADC_Init+0x1ba>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a54      	ldr	r2, [pc, #336]	; (8005c90 <HAL_ADC_Init+0x2ec>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d102      	bne.n	8005b4a <HAL_ADC_Init+0x1a6>
 8005b44:	4b53      	ldr	r3, [pc, #332]	; (8005c94 <HAL_ADC_Init+0x2f0>)
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	e009      	b.n	8005b5e <HAL_ADC_Init+0x1ba>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a51      	ldr	r2, [pc, #324]	; (8005c94 <HAL_ADC_Init+0x2f0>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d102      	bne.n	8005b5a <HAL_ADC_Init+0x1b6>
 8005b54:	4b4e      	ldr	r3, [pc, #312]	; (8005c90 <HAL_ADC_Init+0x2ec>)
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	e001      	b.n	8005b5e <HAL_ADC_Init+0x1ba>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d108      	bne.n	8005b7e <HAL_ADC_Init+0x1da>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_ADC_Init+0x1da>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <HAL_ADC_Init+0x1dc>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d11c      	bne.n	8005bbe <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005b84:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d010      	beq.n	8005bac <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d107      	bne.n	8005ba6 <HAL_ADC_Init+0x202>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_ADC_Init+0x202>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <HAL_ADC_Init+0x204>
 8005ba6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d108      	bne.n	8005bbe <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8005bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bbc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	7e5b      	ldrb	r3, [r3, #25]
 8005bc2:	035b      	lsls	r3, r3, #13
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bc8:	2a01      	cmp	r2, #1
 8005bca:	d002      	beq.n	8005bd2 <HAL_ADC_Init+0x22e>
 8005bcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bd0:	e000      	b.n	8005bd4 <HAL_ADC_Init+0x230>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005be4:	4313      	orrs	r3, r2
 8005be6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d11b      	bne.n	8005c2a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	7e5b      	ldrb	r3, [r3, #25]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d109      	bne.n	8005c0e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	045a      	lsls	r2, r3, #17
 8005c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c0c:	e00d      	b.n	8005c2a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c16:	f043 0220 	orr.w	r2, r3, #32
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c22:	f043 0201 	orr.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d03a      	beq.n	8005ca8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a16      	ldr	r2, [pc, #88]	; (8005c90 <HAL_ADC_Init+0x2ec>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d004      	beq.n	8005c46 <HAL_ADC_Init+0x2a2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a14      	ldr	r2, [pc, #80]	; (8005c94 <HAL_ADC_Init+0x2f0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d128      	bne.n	8005c98 <HAL_ADC_Init+0x2f4>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8005c4e:	d012      	beq.n	8005c76 <HAL_ADC_Init+0x2d2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c58:	d00a      	beq.n	8005c70 <HAL_ADC_Init+0x2cc>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8005c62:	d002      	beq.n	8005c6a <HAL_ADC_Init+0x2c6>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	e018      	b.n	8005c9c <HAL_ADC_Init+0x2f8>
 8005c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c6e:	e015      	b.n	8005c9c <HAL_ADC_Init+0x2f8>
 8005c70:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8005c74:	e012      	b.n	8005c9c <HAL_ADC_Init+0x2f8>
 8005c76:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005c7a:	e00f      	b.n	8005c9c <HAL_ADC_Init+0x2f8>
 8005c7c:	20000134 	.word	0x20000134
 8005c80:	431bde83 	.word	0x431bde83
 8005c84:	50000100 	.word	0x50000100
 8005c88:	50000300 	.word	0x50000300
 8005c8c:	50000700 	.word	0x50000700
 8005c90:	50000400 	.word	0x50000400
 8005c94:	50000500 	.word	0x50000500
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 030c 	and.w	r3, r3, #12
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d114      	bne.n	8005ce0 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6812      	ldr	r2, [r2, #0]
 8005cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc4:	f023 0302 	bic.w	r3, r3, #2
 8005cc8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	7e1b      	ldrb	r3, [r3, #24]
 8005cce:	039a      	lsls	r2, r3, #14
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	4b1e      	ldr	r3, [pc, #120]	; (8005d60 <HAL_ADC_Init+0x3bc>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d10c      	bne.n	8005d16 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	f023 010f 	bic.w	r1, r3, #15
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	1e5a      	subs	r2, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
 8005d14:	e007      	b.n	8005d26 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 020f 	bic.w	r2, r2, #15
 8005d24:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	f023 0303 	bic.w	r3, r3, #3
 8005d34:	f043 0201 	orr.w	r2, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	641a      	str	r2, [r3, #64]	; 0x40
 8005d3c:	e00a      	b.n	8005d54 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f023 0312 	bic.w	r3, r3, #18
 8005d46:	f043 0210 	orr.w	r2, r3, #16
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8005d4e:	2301      	movs	r3, #1
 8005d50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8005d54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3768      	adds	r7, #104	; 0x68
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	fff0c007 	.word	0xfff0c007

08005d64 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f040 8123 	bne.w	8005fc6 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_ADC_Start_IT+0x2a>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e11e      	b.n	8005fcc <HAL_ADC_Start_IT+0x268>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f001 f848 	bl	8006e2c <ADC_Enable>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f040 810a 	bne.w	8005fbc <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dc4:	d004      	beq.n	8005dd0 <HAL_ADC_Start_IT+0x6c>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a82      	ldr	r2, [pc, #520]	; (8005fd4 <HAL_ADC_Start_IT+0x270>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d106      	bne.n	8005dde <HAL_ADC_Start_IT+0x7a>
 8005dd0:	4b81      	ldr	r3, [pc, #516]	; (8005fd8 <HAL_ADC_Start_IT+0x274>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 031f 	and.w	r3, r3, #31
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d010      	beq.n	8005dfe <HAL_ADC_Start_IT+0x9a>
 8005ddc:	e005      	b.n	8005dea <HAL_ADC_Start_IT+0x86>
 8005dde:	4b7f      	ldr	r3, [pc, #508]	; (8005fdc <HAL_ADC_Start_IT+0x278>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <HAL_ADC_Start_IT+0x9a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005df2:	d004      	beq.n	8005dfe <HAL_ADC_Start_IT+0x9a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a79      	ldr	r2, [pc, #484]	; (8005fe0 <HAL_ADC_Start_IT+0x27c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d115      	bne.n	8005e2a <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d036      	beq.n	8005e86 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005e28:	e02d      	b.n	8005e86 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e3e:	d004      	beq.n	8005e4a <HAL_ADC_Start_IT+0xe6>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a63      	ldr	r2, [pc, #396]	; (8005fd4 <HAL_ADC_Start_IT+0x270>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d10a      	bne.n	8005e60 <HAL_ADC_Start_IT+0xfc>
 8005e4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	bf14      	ite	ne
 8005e58:	2301      	movne	r3, #1
 8005e5a:	2300      	moveq	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	e008      	b.n	8005e72 <HAL_ADC_Start_IT+0x10e>
 8005e60:	4b5f      	ldr	r3, [pc, #380]	; (8005fe0 <HAL_ADC_Start_IT+0x27c>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	bf14      	ite	ne
 8005e6c:	2301      	movne	r3, #1
 8005e6e:	2300      	moveq	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e92:	d106      	bne.n	8005ea2 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e98:	f023 0206 	bic.w	r2, r3, #6
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	645a      	str	r2, [r3, #68]	; 0x44
 8005ea0:	e002      	b.n	8005ea8 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	221c      	movs	r2, #28
 8005eb6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d110      	bne.n	8005ee2 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0204 	bic.w	r2, r2, #4
 8005ece:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0208 	orr.w	r2, r2, #8
 8005ede:	605a      	str	r2, [r3, #4]
          break;
 8005ee0:	e008      	b.n	8005ef4 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 020c 	orr.w	r2, r2, #12
 8005ef0:	605a      	str	r2, [r3, #4]
          break;
 8005ef2:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d107      	bne.n	8005f0c <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0210 	bic.w	r2, r2, #16
 8005f0a:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f14:	d004      	beq.n	8005f20 <HAL_ADC_Start_IT+0x1bc>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a2e      	ldr	r2, [pc, #184]	; (8005fd4 <HAL_ADC_Start_IT+0x270>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d106      	bne.n	8005f2e <HAL_ADC_Start_IT+0x1ca>
 8005f20:	4b2d      	ldr	r3, [pc, #180]	; (8005fd8 <HAL_ADC_Start_IT+0x274>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 031f 	and.w	r3, r3, #31
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d03e      	beq.n	8005faa <HAL_ADC_Start_IT+0x246>
 8005f2c:	e005      	b.n	8005f3a <HAL_ADC_Start_IT+0x1d6>
 8005f2e:	4b2b      	ldr	r3, [pc, #172]	; (8005fdc <HAL_ADC_Start_IT+0x278>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d037      	beq.n	8005faa <HAL_ADC_Start_IT+0x246>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f42:	d004      	beq.n	8005f4e <HAL_ADC_Start_IT+0x1ea>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a22      	ldr	r2, [pc, #136]	; (8005fd4 <HAL_ADC_Start_IT+0x270>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d106      	bne.n	8005f5c <HAL_ADC_Start_IT+0x1f8>
 8005f4e:	4b22      	ldr	r3, [pc, #136]	; (8005fd8 <HAL_ADC_Start_IT+0x274>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 031f 	and.w	r3, r3, #31
 8005f56:	2b05      	cmp	r3, #5
 8005f58:	d027      	beq.n	8005faa <HAL_ADC_Start_IT+0x246>
 8005f5a:	e005      	b.n	8005f68 <HAL_ADC_Start_IT+0x204>
 8005f5c:	4b1f      	ldr	r3, [pc, #124]	; (8005fdc <HAL_ADC_Start_IT+0x278>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f003 031f 	and.w	r3, r3, #31
 8005f64:	2b05      	cmp	r3, #5
 8005f66:	d020      	beq.n	8005faa <HAL_ADC_Start_IT+0x246>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f70:	d004      	beq.n	8005f7c <HAL_ADC_Start_IT+0x218>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a17      	ldr	r2, [pc, #92]	; (8005fd4 <HAL_ADC_Start_IT+0x270>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d106      	bne.n	8005f8a <HAL_ADC_Start_IT+0x226>
 8005f7c:	4b16      	ldr	r3, [pc, #88]	; (8005fd8 <HAL_ADC_Start_IT+0x274>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f003 031f 	and.w	r3, r3, #31
 8005f84:	2b09      	cmp	r3, #9
 8005f86:	d010      	beq.n	8005faa <HAL_ADC_Start_IT+0x246>
 8005f88:	e005      	b.n	8005f96 <HAL_ADC_Start_IT+0x232>
 8005f8a:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <HAL_ADC_Start_IT+0x278>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 031f 	and.w	r3, r3, #31
 8005f92:	2b09      	cmp	r3, #9
 8005f94:	d009      	beq.n	8005faa <HAL_ADC_Start_IT+0x246>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f9e:	d004      	beq.n	8005faa <HAL_ADC_Start_IT+0x246>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a0e      	ldr	r2, [pc, #56]	; (8005fe0 <HAL_ADC_Start_IT+0x27c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d10f      	bne.n	8005fca <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0204 	orr.w	r2, r2, #4
 8005fb8:	609a      	str	r2, [r3, #8]
 8005fba:	e006      	b.n	8005fca <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005fc4:	e001      	b.n	8005fca <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	50000100 	.word	0x50000100
 8005fd8:	50000300 	.word	0x50000300
 8005fdc:	50000700 	.word	0x50000700
 8005fe0:	50000400 	.word	0x50000400

08005fe4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
	...

08006000 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b04      	cmp	r3, #4
 8006020:	d106      	bne.n	8006030 <HAL_ADC_IRQHandler+0x30>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b04      	cmp	r3, #4
 800602e:	d00f      	beq.n	8006050 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800603a:	2b08      	cmp	r3, #8
 800603c:	f040 80c0 	bne.w	80061c0 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b08      	cmp	r3, #8
 800604c:	f040 80b8 	bne.w	80061c0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b00      	cmp	r3, #0
 800605a:	d105      	bne.n	8006068 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006070:	d004      	beq.n	800607c <HAL_ADC_IRQHandler+0x7c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a8e      	ldr	r2, [pc, #568]	; (80062b0 <HAL_ADC_IRQHandler+0x2b0>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d106      	bne.n	800608a <HAL_ADC_IRQHandler+0x8a>
 800607c:	4b8d      	ldr	r3, [pc, #564]	; (80062b4 <HAL_ADC_IRQHandler+0x2b4>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	2b00      	cmp	r3, #0
 8006086:	d03e      	beq.n	8006106 <HAL_ADC_IRQHandler+0x106>
 8006088:	e005      	b.n	8006096 <HAL_ADC_IRQHandler+0x96>
 800608a:	4b8b      	ldr	r3, [pc, #556]	; (80062b8 <HAL_ADC_IRQHandler+0x2b8>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	2b00      	cmp	r3, #0
 8006094:	d037      	beq.n	8006106 <HAL_ADC_IRQHandler+0x106>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800609e:	d004      	beq.n	80060aa <HAL_ADC_IRQHandler+0xaa>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a82      	ldr	r2, [pc, #520]	; (80062b0 <HAL_ADC_IRQHandler+0x2b0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d106      	bne.n	80060b8 <HAL_ADC_IRQHandler+0xb8>
 80060aa:	4b82      	ldr	r3, [pc, #520]	; (80062b4 <HAL_ADC_IRQHandler+0x2b4>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	2b05      	cmp	r3, #5
 80060b4:	d027      	beq.n	8006106 <HAL_ADC_IRQHandler+0x106>
 80060b6:	e005      	b.n	80060c4 <HAL_ADC_IRQHandler+0xc4>
 80060b8:	4b7f      	ldr	r3, [pc, #508]	; (80062b8 <HAL_ADC_IRQHandler+0x2b8>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	2b05      	cmp	r3, #5
 80060c2:	d020      	beq.n	8006106 <HAL_ADC_IRQHandler+0x106>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060cc:	d004      	beq.n	80060d8 <HAL_ADC_IRQHandler+0xd8>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a77      	ldr	r2, [pc, #476]	; (80062b0 <HAL_ADC_IRQHandler+0x2b0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d106      	bne.n	80060e6 <HAL_ADC_IRQHandler+0xe6>
 80060d8:	4b76      	ldr	r3, [pc, #472]	; (80062b4 <HAL_ADC_IRQHandler+0x2b4>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	2b09      	cmp	r3, #9
 80060e2:	d010      	beq.n	8006106 <HAL_ADC_IRQHandler+0x106>
 80060e4:	e005      	b.n	80060f2 <HAL_ADC_IRQHandler+0xf2>
 80060e6:	4b74      	ldr	r3, [pc, #464]	; (80062b8 <HAL_ADC_IRQHandler+0x2b8>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 031f 	and.w	r3, r3, #31
 80060ee:	2b09      	cmp	r3, #9
 80060f0:	d009      	beq.n	8006106 <HAL_ADC_IRQHandler+0x106>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060fa:	d004      	beq.n	8006106 <HAL_ADC_IRQHandler+0x106>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a6e      	ldr	r2, [pc, #440]	; (80062bc <HAL_ADC_IRQHandler+0x2bc>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d104      	bne.n	8006110 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	e00f      	b.n	8006130 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006118:	d004      	beq.n	8006124 <HAL_ADC_IRQHandler+0x124>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a64      	ldr	r2, [pc, #400]	; (80062b0 <HAL_ADC_IRQHandler+0x2b0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d102      	bne.n	800612a <HAL_ADC_IRQHandler+0x12a>
 8006124:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006128:	e000      	b.n	800612c <HAL_ADC_IRQHandler+0x12c>
 800612a:	4b64      	ldr	r3, [pc, #400]	; (80062bc <HAL_ADC_IRQHandler+0x2bc>)
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800613a:	2b00      	cmp	r3, #0
 800613c:	d139      	bne.n	80061b2 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8006144:	2b00      	cmp	r3, #0
 8006146:	d134      	bne.n	80061b2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b08      	cmp	r3, #8
 8006154:	d12d      	bne.n	80061b2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d11a      	bne.n	800619a <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 020c 	bic.w	r2, r2, #12
 8006172:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d112      	bne.n	80061b2 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	f043 0201 	orr.w	r2, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	641a      	str	r2, [r3, #64]	; 0x40
 8006198:	e00b      	b.n	80061b2 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f043 0210 	orr.w	r2, r3, #16
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061aa:	f043 0201 	orr.w	r2, r3, #1
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fbd8 	bl	8005968 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	220c      	movs	r2, #12
 80061be:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d106      	bne.n	80061dc <HAL_ADC_IRQHandler+0x1dc>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f003 0320 	and.w	r3, r3, #32
 80061d8:	2b20      	cmp	r3, #32
 80061da:	d00f      	beq.n	80061fc <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80061e6:	2b40      	cmp	r3, #64	; 0x40
 80061e8:	f040 8143 	bne.w	8006472 <HAL_ADC_IRQHandler+0x472>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f6:	2b40      	cmp	r3, #64	; 0x40
 80061f8:	f040 813b 	bne.w	8006472 <HAL_ADC_IRQHandler+0x472>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006210:	d004      	beq.n	800621c <HAL_ADC_IRQHandler+0x21c>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a26      	ldr	r2, [pc, #152]	; (80062b0 <HAL_ADC_IRQHandler+0x2b0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d106      	bne.n	800622a <HAL_ADC_IRQHandler+0x22a>
 800621c:	4b25      	ldr	r3, [pc, #148]	; (80062b4 <HAL_ADC_IRQHandler+0x2b4>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 031f 	and.w	r3, r3, #31
 8006224:	2b00      	cmp	r3, #0
 8006226:	d03e      	beq.n	80062a6 <HAL_ADC_IRQHandler+0x2a6>
 8006228:	e005      	b.n	8006236 <HAL_ADC_IRQHandler+0x236>
 800622a:	4b23      	ldr	r3, [pc, #140]	; (80062b8 <HAL_ADC_IRQHandler+0x2b8>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	2b00      	cmp	r3, #0
 8006234:	d037      	beq.n	80062a6 <HAL_ADC_IRQHandler+0x2a6>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800623e:	d004      	beq.n	800624a <HAL_ADC_IRQHandler+0x24a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a1a      	ldr	r2, [pc, #104]	; (80062b0 <HAL_ADC_IRQHandler+0x2b0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d106      	bne.n	8006258 <HAL_ADC_IRQHandler+0x258>
 800624a:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <HAL_ADC_IRQHandler+0x2b4>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	2b05      	cmp	r3, #5
 8006254:	d027      	beq.n	80062a6 <HAL_ADC_IRQHandler+0x2a6>
 8006256:	e005      	b.n	8006264 <HAL_ADC_IRQHandler+0x264>
 8006258:	4b17      	ldr	r3, [pc, #92]	; (80062b8 <HAL_ADC_IRQHandler+0x2b8>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 031f 	and.w	r3, r3, #31
 8006260:	2b05      	cmp	r3, #5
 8006262:	d020      	beq.n	80062a6 <HAL_ADC_IRQHandler+0x2a6>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800626c:	d004      	beq.n	8006278 <HAL_ADC_IRQHandler+0x278>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a0f      	ldr	r2, [pc, #60]	; (80062b0 <HAL_ADC_IRQHandler+0x2b0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d106      	bne.n	8006286 <HAL_ADC_IRQHandler+0x286>
 8006278:	4b0e      	ldr	r3, [pc, #56]	; (80062b4 <HAL_ADC_IRQHandler+0x2b4>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f003 031f 	and.w	r3, r3, #31
 8006280:	2b09      	cmp	r3, #9
 8006282:	d010      	beq.n	80062a6 <HAL_ADC_IRQHandler+0x2a6>
 8006284:	e005      	b.n	8006292 <HAL_ADC_IRQHandler+0x292>
 8006286:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <HAL_ADC_IRQHandler+0x2b8>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 031f 	and.w	r3, r3, #31
 800628e:	2b09      	cmp	r3, #9
 8006290:	d009      	beq.n	80062a6 <HAL_ADC_IRQHandler+0x2a6>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800629a:	d004      	beq.n	80062a6 <HAL_ADC_IRQHandler+0x2a6>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a06      	ldr	r2, [pc, #24]	; (80062bc <HAL_ADC_IRQHandler+0x2bc>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d10c      	bne.n	80062c0 <HAL_ADC_IRQHandler+0x2c0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	613b      	str	r3, [r7, #16]
 80062ae:	e017      	b.n	80062e0 <HAL_ADC_IRQHandler+0x2e0>
 80062b0:	50000100 	.word	0x50000100
 80062b4:	50000300 	.word	0x50000300
 80062b8:	50000700 	.word	0x50000700
 80062bc:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062c8:	d004      	beq.n	80062d4 <HAL_ADC_IRQHandler+0x2d4>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a5b      	ldr	r2, [pc, #364]	; (800643c <HAL_ADC_IRQHandler+0x43c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d102      	bne.n	80062da <HAL_ADC_IRQHandler+0x2da>
 80062d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80062d8:	e000      	b.n	80062dc <HAL_ADC_IRQHandler+0x2dc>
 80062da:	4b59      	ldr	r3, [pc, #356]	; (8006440 <HAL_ADC_IRQHandler+0x440>)
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f040 80ba 	bne.w	8006464 <HAL_ADC_IRQHandler+0x464>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00d      	beq.n	8006316 <HAL_ADC_IRQHandler+0x316>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 80ad 	bne.w	8006464 <HAL_ADC_IRQHandler+0x464>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8006310:	2b00      	cmp	r3, #0
 8006312:	f040 80a7 	bne.w	8006464 <HAL_ADC_IRQHandler+0x464>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006320:	2b40      	cmp	r3, #64	; 0x40
 8006322:	f040 809f 	bne.w	8006464 <HAL_ADC_IRQHandler+0x464>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800632e:	d004      	beq.n	800633a <HAL_ADC_IRQHandler+0x33a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a41      	ldr	r2, [pc, #260]	; (800643c <HAL_ADC_IRQHandler+0x43c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d106      	bne.n	8006348 <HAL_ADC_IRQHandler+0x348>
 800633a:	4b42      	ldr	r3, [pc, #264]	; (8006444 <HAL_ADC_IRQHandler+0x444>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	2b00      	cmp	r3, #0
 8006344:	d03e      	beq.n	80063c4 <HAL_ADC_IRQHandler+0x3c4>
 8006346:	e005      	b.n	8006354 <HAL_ADC_IRQHandler+0x354>
 8006348:	4b3f      	ldr	r3, [pc, #252]	; (8006448 <HAL_ADC_IRQHandler+0x448>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 031f 	and.w	r3, r3, #31
 8006350:	2b00      	cmp	r3, #0
 8006352:	d037      	beq.n	80063c4 <HAL_ADC_IRQHandler+0x3c4>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800635c:	d004      	beq.n	8006368 <HAL_ADC_IRQHandler+0x368>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a36      	ldr	r2, [pc, #216]	; (800643c <HAL_ADC_IRQHandler+0x43c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d106      	bne.n	8006376 <HAL_ADC_IRQHandler+0x376>
 8006368:	4b36      	ldr	r3, [pc, #216]	; (8006444 <HAL_ADC_IRQHandler+0x444>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	2b06      	cmp	r3, #6
 8006372:	d027      	beq.n	80063c4 <HAL_ADC_IRQHandler+0x3c4>
 8006374:	e005      	b.n	8006382 <HAL_ADC_IRQHandler+0x382>
 8006376:	4b34      	ldr	r3, [pc, #208]	; (8006448 <HAL_ADC_IRQHandler+0x448>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	2b06      	cmp	r3, #6
 8006380:	d020      	beq.n	80063c4 <HAL_ADC_IRQHandler+0x3c4>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800638a:	d004      	beq.n	8006396 <HAL_ADC_IRQHandler+0x396>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a2a      	ldr	r2, [pc, #168]	; (800643c <HAL_ADC_IRQHandler+0x43c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d106      	bne.n	80063a4 <HAL_ADC_IRQHandler+0x3a4>
 8006396:	4b2b      	ldr	r3, [pc, #172]	; (8006444 <HAL_ADC_IRQHandler+0x444>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 031f 	and.w	r3, r3, #31
 800639e:	2b07      	cmp	r3, #7
 80063a0:	d010      	beq.n	80063c4 <HAL_ADC_IRQHandler+0x3c4>
 80063a2:	e005      	b.n	80063b0 <HAL_ADC_IRQHandler+0x3b0>
 80063a4:	4b28      	ldr	r3, [pc, #160]	; (8006448 <HAL_ADC_IRQHandler+0x448>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f003 031f 	and.w	r3, r3, #31
 80063ac:	2b07      	cmp	r3, #7
 80063ae:	d009      	beq.n	80063c4 <HAL_ADC_IRQHandler+0x3c4>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063b8:	d004      	beq.n	80063c4 <HAL_ADC_IRQHandler+0x3c4>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a20      	ldr	r2, [pc, #128]	; (8006440 <HAL_ADC_IRQHandler+0x440>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d104      	bne.n	80063ce <HAL_ADC_IRQHandler+0x3ce>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	e00f      	b.n	80063ee <HAL_ADC_IRQHandler+0x3ee>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063d6:	d004      	beq.n	80063e2 <HAL_ADC_IRQHandler+0x3e2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a17      	ldr	r2, [pc, #92]	; (800643c <HAL_ADC_IRQHandler+0x43c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d102      	bne.n	80063e8 <HAL_ADC_IRQHandler+0x3e8>
 80063e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80063e6:	e000      	b.n	80063ea <HAL_ADC_IRQHandler+0x3ea>
 80063e8:	4b15      	ldr	r3, [pc, #84]	; (8006440 <HAL_ADC_IRQHandler+0x440>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d135      	bne.n	8006464 <HAL_ADC_IRQHandler+0x464>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 0308 	and.w	r3, r3, #8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d122      	bne.n	800644c <HAL_ADC_IRQHandler+0x44c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006414:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642a:	2b00      	cmp	r3, #0
 800642c:	d11a      	bne.n	8006464 <HAL_ADC_IRQHandler+0x464>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f043 0201 	orr.w	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	641a      	str	r2, [r3, #64]	; 0x40
 800643a:	e013      	b.n	8006464 <HAL_ADC_IRQHandler+0x464>
 800643c:	50000100 	.word	0x50000100
 8006440:	50000400 	.word	0x50000400
 8006444:	50000300 	.word	0x50000300
 8006448:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	f043 0210 	orr.w	r2, r3, #16
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645c:	f043 0201 	orr.w	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f8db 	bl	8006620 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2260      	movs	r2, #96	; 0x60
 8006470:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647c:	2b80      	cmp	r3, #128	; 0x80
 800647e:	d113      	bne.n	80064a8 <HAL_ADC_IRQHandler+0x4a8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648a:	2b80      	cmp	r3, #128	; 0x80
 800648c:	d10c      	bne.n	80064a8 <HAL_ADC_IRQHandler+0x4a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff fa6e 	bl	800597c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2280      	movs	r2, #128	; 0x80
 80064a6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b6:	d115      	bne.n	80064e4 <HAL_ADC_IRQHandler+0x4e4>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c6:	d10d      	bne.n	80064e4 <HAL_ADC_IRQHandler+0x4e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f8b7 	bl	8006648 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064e2:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f2:	d115      	bne.n	8006520 <HAL_ADC_IRQHandler+0x520>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006502:	d10d      	bne.n	8006520 <HAL_ADC_IRQHandler+0x520>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f8a3 	bl	800665c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800651e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0310 	and.w	r3, r3, #16
 800652a:	2b10      	cmp	r3, #16
 800652c:	d149      	bne.n	80065c2 <HAL_ADC_IRQHandler+0x5c2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b10      	cmp	r3, #16
 800653a:	d142      	bne.n	80065c2 <HAL_ADC_IRQHandler+0x5c2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006540:	2b01      	cmp	r3, #1
 8006542:	d102      	bne.n	800654a <HAL_ADC_IRQHandler+0x54a>
    {
      overrun_error = 1U;
 8006544:	2301      	movs	r3, #1
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	e025      	b.n	8006596 <HAL_ADC_IRQHandler+0x596>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006552:	d004      	beq.n	800655e <HAL_ADC_IRQHandler+0x55e>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a2e      	ldr	r2, [pc, #184]	; (8006614 <HAL_ADC_IRQHandler+0x614>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d101      	bne.n	8006562 <HAL_ADC_IRQHandler+0x562>
 800655e:	4b2e      	ldr	r3, [pc, #184]	; (8006618 <HAL_ADC_IRQHandler+0x618>)
 8006560:	e000      	b.n	8006564 <HAL_ADC_IRQHandler+0x564>
 8006562:	4b2e      	ldr	r3, [pc, #184]	; (800661c <HAL_ADC_IRQHandler+0x61c>)
 8006564:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 031f 	and.w	r3, r3, #31
 800656e:	2b00      	cmp	r3, #0
 8006570:	d109      	bne.n	8006586 <HAL_ADC_IRQHandler+0x586>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b01      	cmp	r3, #1
 800657e:	d10a      	bne.n	8006596 <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 8006580:	2301      	movs	r3, #1
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	e007      	b.n	8006596 <HAL_ADC_IRQHandler+0x596>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 8006592:	2301      	movs	r3, #1
 8006594:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d10e      	bne.n	80065ba <HAL_ADC_IRQHandler+0x5ba>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ac:	f043 0202 	orr.w	r2, r3, #2
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff f9eb 	bl	8005990 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2210      	movs	r2, #16
 80065c0:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d0:	d11b      	bne.n	800660a <HAL_ADC_IRQHandler+0x60a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e0:	d113      	bne.n	800660a <HAL_ADC_IRQHandler+0x60a>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f2:	f043 0208 	orr.w	r2, r3, #8
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006602:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f815 	bl	8006634 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800660a:	bf00      	nop
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	50000100 	.word	0x50000100
 8006618:	50000300 	.word	0x50000300
 800661c:	50000700 	.word	0x50000700

08006620 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006670:	b480      	push	{r7}
 8006672:	b09b      	sub	sp, #108	; 0x6c
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800668a:	2b01      	cmp	r3, #1
 800668c:	d101      	bne.n	8006692 <HAL_ADC_ConfigChannel+0x22>
 800668e:	2302      	movs	r3, #2
 8006690:	e2ca      	b.n	8006c28 <HAL_ADC_ConfigChannel+0x5b8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f040 82ae 	bne.w	8006c06 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d81c      	bhi.n	80066ec <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	4613      	mov	r3, r2
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	4413      	add	r3, r2
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	461a      	mov	r2, r3
 80066c6:	231f      	movs	r3, #31
 80066c8:	4093      	lsls	r3, r2
 80066ca:	43db      	mvns	r3, r3
 80066cc:	4019      	ands	r1, r3
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	4613      	mov	r3, r2
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	4413      	add	r3, r2
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	fa00 f203 	lsl.w	r2, r0, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	631a      	str	r2, [r3, #48]	; 0x30
 80066ea:	e063      	b.n	80067b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	2b09      	cmp	r3, #9
 80066f2:	d81e      	bhi.n	8006732 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	4413      	add	r3, r2
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	3b1e      	subs	r3, #30
 8006708:	221f      	movs	r2, #31
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	43db      	mvns	r3, r3
 8006710:	4019      	ands	r1, r3
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	4613      	mov	r3, r2
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	4413      	add	r3, r2
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	3b1e      	subs	r3, #30
 8006724:	fa00 f203 	lsl.w	r2, r0, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	635a      	str	r2, [r3, #52]	; 0x34
 8006730:	e040      	b.n	80067b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2b0e      	cmp	r3, #14
 8006738:	d81e      	bhi.n	8006778 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	4613      	mov	r3, r2
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	4413      	add	r3, r2
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	3b3c      	subs	r3, #60	; 0x3c
 800674e:	221f      	movs	r2, #31
 8006750:	fa02 f303 	lsl.w	r3, r2, r3
 8006754:	43db      	mvns	r3, r3
 8006756:	4019      	ands	r1, r3
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	4613      	mov	r3, r2
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	4413      	add	r3, r2
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	3b3c      	subs	r3, #60	; 0x3c
 800676a:	fa00 f203 	lsl.w	r2, r0, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	639a      	str	r2, [r3, #56]	; 0x38
 8006776:	e01d      	b.n	80067b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	4413      	add	r3, r2
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	3b5a      	subs	r3, #90	; 0x5a
 800678c:	221f      	movs	r2, #31
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	43db      	mvns	r3, r3
 8006794:	4019      	ands	r1, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6818      	ldr	r0, [r3, #0]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	4613      	mov	r3, r2
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	4413      	add	r3, r2
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	3b5a      	subs	r3, #90	; 0x5a
 80067a8:	fa00 f203 	lsl.w	r2, r0, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f003 030c 	and.w	r3, r3, #12
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f040 80e5 	bne.w	800698e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b09      	cmp	r3, #9
 80067ca:	d91c      	bls.n	8006806 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6999      	ldr	r1, [r3, #24]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	4613      	mov	r3, r2
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	4413      	add	r3, r2
 80067dc:	3b1e      	subs	r3, #30
 80067de:	2207      	movs	r2, #7
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	43db      	mvns	r3, r3
 80067e6:	4019      	ands	r1, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	6898      	ldr	r0, [r3, #8]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	4613      	mov	r3, r2
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	4413      	add	r3, r2
 80067f6:	3b1e      	subs	r3, #30
 80067f8:	fa00 f203 	lsl.w	r2, r0, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	619a      	str	r2, [r3, #24]
 8006804:	e019      	b.n	800683a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6959      	ldr	r1, [r3, #20]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	4613      	mov	r3, r2
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	4413      	add	r3, r2
 8006816:	2207      	movs	r2, #7
 8006818:	fa02 f303 	lsl.w	r3, r2, r3
 800681c:	43db      	mvns	r3, r3
 800681e:	4019      	ands	r1, r3
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	6898      	ldr	r0, [r3, #8]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	4413      	add	r3, r2
 800682e:	fa00 f203 	lsl.w	r2, r0, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	695a      	ldr	r2, [r3, #20]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	08db      	lsrs	r3, r3, #3
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	fa02 f303 	lsl.w	r3, r2, r3
 8006850:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	3b01      	subs	r3, #1
 8006858:	2b03      	cmp	r3, #3
 800685a:	d84f      	bhi.n	80068fc <HAL_ADC_ConfigChannel+0x28c>
 800685c:	a201      	add	r2, pc, #4	; (adr r2, 8006864 <HAL_ADC_ConfigChannel+0x1f4>)
 800685e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006862:	bf00      	nop
 8006864:	08006875 	.word	0x08006875
 8006868:	08006897 	.word	0x08006897
 800686c:	080068b9 	.word	0x080068b9
 8006870:	080068db 	.word	0x080068db
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800687a:	4b9a      	ldr	r3, [pc, #616]	; (8006ae4 <HAL_ADC_ConfigChannel+0x474>)
 800687c:	4013      	ands	r3, r2
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	6812      	ldr	r2, [r2, #0]
 8006882:	0691      	lsls	r1, r2, #26
 8006884:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006886:	430a      	orrs	r2, r1
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006892:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8006894:	e07e      	b.n	8006994 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800689c:	4b91      	ldr	r3, [pc, #580]	; (8006ae4 <HAL_ADC_ConfigChannel+0x474>)
 800689e:	4013      	ands	r3, r2
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	0691      	lsls	r1, r2, #26
 80068a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068a8:	430a      	orrs	r2, r1
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80068b4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80068b6:	e06d      	b.n	8006994 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80068be:	4b89      	ldr	r3, [pc, #548]	; (8006ae4 <HAL_ADC_ConfigChannel+0x474>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	0691      	lsls	r1, r2, #26
 80068c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068ca:	430a      	orrs	r2, r1
 80068cc:	431a      	orrs	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80068d6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80068d8:	e05c      	b.n	8006994 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80068e0:	4b80      	ldr	r3, [pc, #512]	; (8006ae4 <HAL_ADC_ConfigChannel+0x474>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	0691      	lsls	r1, r2, #26
 80068ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068ec:	430a      	orrs	r2, r1
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80068f8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80068fa:	e04b      	b.n	8006994 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006902:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	069b      	lsls	r3, r3, #26
 800690c:	429a      	cmp	r2, r3
 800690e:	d107      	bne.n	8006920 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800691e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	069b      	lsls	r3, r3, #26
 8006930:	429a      	cmp	r2, r3
 8006932:	d107      	bne.n	8006944 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006942:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800694a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	069b      	lsls	r3, r3, #26
 8006954:	429a      	cmp	r2, r3
 8006956:	d107      	bne.n	8006968 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006966:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800696e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	069b      	lsls	r3, r3, #26
 8006978:	429a      	cmp	r2, r3
 800697a:	d10a      	bne.n	8006992 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800698a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800698c:	e001      	b.n	8006992 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800698e:	bf00      	nop
 8006990:	e000      	b.n	8006994 <HAL_ADC_ConfigChannel+0x324>
      break;
 8006992:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d108      	bne.n	80069b4 <HAL_ADC_ConfigChannel+0x344>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_ADC_ConfigChannel+0x344>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <HAL_ADC_ConfigChannel+0x346>
 80069b4:	2300      	movs	r3, #0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f040 8130 	bne.w	8006c1c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d00f      	beq.n	80069e4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2201      	movs	r2, #1
 80069d2:	fa02 f303 	lsl.w	r3, r2, r3
 80069d6:	43da      	mvns	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	400a      	ands	r2, r1
 80069de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80069e2:	e049      	b.n	8006a78 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2201      	movs	r2, #1
 80069f2:	409a      	lsls	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b09      	cmp	r3, #9
 8006a04:	d91c      	bls.n	8006a40 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6999      	ldr	r1, [r3, #24]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	4613      	mov	r3, r2
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	4413      	add	r3, r2
 8006a16:	3b1b      	subs	r3, #27
 8006a18:	2207      	movs	r2, #7
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	4019      	ands	r1, r3
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	6898      	ldr	r0, [r3, #8]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	4413      	add	r3, r2
 8006a30:	3b1b      	subs	r3, #27
 8006a32:	fa00 f203 	lsl.w	r2, r0, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	619a      	str	r2, [r3, #24]
 8006a3e:	e01b      	b.n	8006a78 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6959      	ldr	r1, [r3, #20]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	4413      	add	r3, r2
 8006a52:	2207      	movs	r2, #7
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	4019      	ands	r1, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	6898      	ldr	r0, [r3, #8]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	4613      	mov	r3, r2
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	4413      	add	r3, r2
 8006a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a80:	d004      	beq.n	8006a8c <HAL_ADC_ConfigChannel+0x41c>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a18      	ldr	r2, [pc, #96]	; (8006ae8 <HAL_ADC_ConfigChannel+0x478>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d101      	bne.n	8006a90 <HAL_ADC_ConfigChannel+0x420>
 8006a8c:	4b17      	ldr	r3, [pc, #92]	; (8006aec <HAL_ADC_ConfigChannel+0x47c>)
 8006a8e:	e000      	b.n	8006a92 <HAL_ADC_ConfigChannel+0x422>
 8006a90:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <HAL_ADC_ConfigChannel+0x480>)
 8006a92:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b10      	cmp	r3, #16
 8006a9a:	d105      	bne.n	8006aa8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d015      	beq.n	8006ad4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006aac:	2b11      	cmp	r3, #17
 8006aae:	d105      	bne.n	8006abc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00b      	beq.n	8006ad4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006ac0:	2b12      	cmp	r3, #18
 8006ac2:	f040 80ab 	bne.w	8006c1c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8006ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 80a4 	bne.w	8006c1c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006adc:	d10a      	bne.n	8006af4 <HAL_ADC_ConfigChannel+0x484>
 8006ade:	4b02      	ldr	r3, [pc, #8]	; (8006ae8 <HAL_ADC_ConfigChannel+0x478>)
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	e022      	b.n	8006b2a <HAL_ADC_ConfigChannel+0x4ba>
 8006ae4:	83fff000 	.word	0x83fff000
 8006ae8:	50000100 	.word	0x50000100
 8006aec:	50000300 	.word	0x50000300
 8006af0:	50000700 	.word	0x50000700
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a4e      	ldr	r2, [pc, #312]	; (8006c34 <HAL_ADC_ConfigChannel+0x5c4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d103      	bne.n	8006b06 <HAL_ADC_ConfigChannel+0x496>
 8006afe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	e011      	b.n	8006b2a <HAL_ADC_ConfigChannel+0x4ba>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a4b      	ldr	r2, [pc, #300]	; (8006c38 <HAL_ADC_ConfigChannel+0x5c8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d102      	bne.n	8006b16 <HAL_ADC_ConfigChannel+0x4a6>
 8006b10:	4b4a      	ldr	r3, [pc, #296]	; (8006c3c <HAL_ADC_ConfigChannel+0x5cc>)
 8006b12:	60fb      	str	r3, [r7, #12]
 8006b14:	e009      	b.n	8006b2a <HAL_ADC_ConfigChannel+0x4ba>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a48      	ldr	r2, [pc, #288]	; (8006c3c <HAL_ADC_ConfigChannel+0x5cc>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d102      	bne.n	8006b26 <HAL_ADC_ConfigChannel+0x4b6>
 8006b20:	4b45      	ldr	r3, [pc, #276]	; (8006c38 <HAL_ADC_ConfigChannel+0x5c8>)
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e001      	b.n	8006b2a <HAL_ADC_ConfigChannel+0x4ba>
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d108      	bne.n	8006b4a <HAL_ADC_ConfigChannel+0x4da>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <HAL_ADC_ConfigChannel+0x4da>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <HAL_ADC_ConfigChannel+0x4dc>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d150      	bne.n	8006bf2 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006b50:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d010      	beq.n	8006b78 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d107      	bne.n	8006b72 <HAL_ADC_ConfigChannel+0x502>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_ADC_ConfigChannel+0x502>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <HAL_ADC_ConfigChannel+0x504>
 8006b72:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d13c      	bne.n	8006bf2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b10      	cmp	r3, #16
 8006b7e:	d11d      	bne.n	8006bbc <HAL_ADC_ConfigChannel+0x54c>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b88:	d118      	bne.n	8006bbc <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8006b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b94:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006b96:	4b2a      	ldr	r3, [pc, #168]	; (8006c40 <HAL_ADC_ConfigChannel+0x5d0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a2a      	ldr	r2, [pc, #168]	; (8006c44 <HAL_ADC_ConfigChannel+0x5d4>)
 8006b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba0:	0c9a      	lsrs	r2, r3, #18
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006bac:	e002      	b.n	8006bb4 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1f9      	bne.n	8006bae <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006bba:	e02e      	b.n	8006c1a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b11      	cmp	r3, #17
 8006bc2:	d10b      	bne.n	8006bdc <HAL_ADC_ConfigChannel+0x56c>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bcc:	d106      	bne.n	8006bdc <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006bda:	e01e      	b.n	8006c1a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b12      	cmp	r3, #18
 8006be2:	d11a      	bne.n	8006c1a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8006be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bee:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006bf0:	e013      	b.n	8006c1a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	f043 0220 	orr.w	r2, r3, #32
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006c04:	e00a      	b.n	8006c1c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	f043 0220 	orr.w	r2, r3, #32
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006c18:	e000      	b.n	8006c1c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006c1a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006c24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	376c      	adds	r7, #108	; 0x6c
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	50000100 	.word	0x50000100
 8006c38:	50000400 	.word	0x50000400
 8006c3c:	50000500 	.word	0x50000500
 8006c40:	20000134 	.word	0x20000134
 8006c44:	431bde83 	.word	0x431bde83

08006c48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b099      	sub	sp, #100	; 0x64
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c60:	d102      	bne.n	8006c68 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8006c62:	4b6d      	ldr	r3, [pc, #436]	; (8006e18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006c64:	60bb      	str	r3, [r7, #8]
 8006c66:	e01a      	b.n	8006c9e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a6a      	ldr	r2, [pc, #424]	; (8006e18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d103      	bne.n	8006c7a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8006c72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c76:	60bb      	str	r3, [r7, #8]
 8006c78:	e011      	b.n	8006c9e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a67      	ldr	r2, [pc, #412]	; (8006e1c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d102      	bne.n	8006c8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006c84:	4b66      	ldr	r3, [pc, #408]	; (8006e20 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006c86:	60bb      	str	r3, [r7, #8]
 8006c88:	e009      	b.n	8006c9e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a64      	ldr	r2, [pc, #400]	; (8006e20 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d102      	bne.n	8006c9a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006c94:	4b61      	ldr	r3, [pc, #388]	; (8006e1c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006c96:	60bb      	str	r3, [r7, #8]
 8006c98:	e001      	b.n	8006c9e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e0b0      	b.n	8006e0a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d101      	bne.n	8006cb6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e0a9      	b.n	8006e0a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f040 808d 	bne.w	8006de8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f040 8086 	bne.w	8006de8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ce4:	d004      	beq.n	8006cf0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a4b      	ldr	r2, [pc, #300]	; (8006e18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d101      	bne.n	8006cf4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006cf0:	4b4c      	ldr	r3, [pc, #304]	; (8006e24 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8006cf2:	e000      	b.n	8006cf6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006cf4:	4b4c      	ldr	r3, [pc, #304]	; (8006e28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8006cf6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d040      	beq.n	8006d82 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	6859      	ldr	r1, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d12:	035b      	lsls	r3, r3, #13
 8006d14:	430b      	orrs	r3, r1
 8006d16:	431a      	orrs	r2, r3
 8006d18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d1a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d108      	bne.n	8006d3c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d15c      	bne.n	8006dfc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d107      	bne.n	8006d5e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d101      	bne.n	8006d5e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8006d5e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d14b      	bne.n	8006dfc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006d64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006d6c:	f023 030f 	bic.w	r3, r3, #15
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	6811      	ldr	r1, [r2, #0]
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	6892      	ldr	r2, [r2, #8]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d7e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006d80:	e03c      	b.n	8006dfc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d8c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f003 0303 	and.w	r3, r3, #3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d108      	bne.n	8006dae <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006dae:	2300      	movs	r3, #0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d123      	bne.n	8006dfc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f003 0303 	and.w	r3, r3, #3
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d107      	bne.n	8006dd0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d101      	bne.n	8006dd0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e000      	b.n	8006dd2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8006dd0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d112      	bne.n	8006dfc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8006dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006dde:	f023 030f 	bic.w	r3, r3, #15
 8006de2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006de4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006de6:	e009      	b.n	8006dfc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dec:	f043 0220 	orr.w	r2, r3, #32
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006dfa:	e000      	b.n	8006dfe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006dfc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006e06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3764      	adds	r7, #100	; 0x64
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	50000100 	.word	0x50000100
 8006e1c:	50000400 	.word	0x50000400
 8006e20:	50000500 	.word	0x50000500
 8006e24:	50000300 	.word	0x50000300
 8006e28:	50000700 	.word	0x50000700

08006e2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d108      	bne.n	8006e58 <ADC_Enable+0x2c>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <ADC_Enable+0x2c>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e000      	b.n	8006e5a <ADC_Enable+0x2e>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d143      	bne.n	8006ee6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	4b22      	ldr	r3, [pc, #136]	; (8006ef0 <ADC_Enable+0xc4>)
 8006e66:	4013      	ands	r3, r2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00d      	beq.n	8006e88 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	f043 0210 	orr.w	r2, r3, #16
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7c:	f043 0201 	orr.w	r2, r3, #1
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e02f      	b.n	8006ee8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0201 	orr.w	r2, r2, #1
 8006e96:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8006e98:	f7fe fd36 	bl	8005908 <HAL_GetTick>
 8006e9c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006e9e:	e01b      	b.n	8006ed8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006ea0:	f7fe fd32 	bl	8005908 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d914      	bls.n	8006ed8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d00d      	beq.n	8006ed8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec0:	f043 0210 	orr.w	r2, r3, #16
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ecc:	f043 0201 	orr.w	r2, r3, #1
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e007      	b.n	8006ee8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d1dc      	bne.n	8006ea0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	8000003f 	.word	0x8000003f

08006ef4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d108      	bne.n	8006f20 <ADC_Disable+0x2c>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <ADC_Disable+0x2c>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e000      	b.n	8006f22 <ADC_Disable+0x2e>
 8006f20:	2300      	movs	r3, #0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d047      	beq.n	8006fb6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 030d 	and.w	r3, r3, #13
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d10f      	bne.n	8006f54 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0202 	orr.w	r2, r2, #2
 8006f42:	609a      	str	r2, [r3, #8]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2203      	movs	r2, #3
 8006f4a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8006f4c:	f7fe fcdc 	bl	8005908 <HAL_GetTick>
 8006f50:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006f52:	e029      	b.n	8006fa8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	f043 0210 	orr.w	r2, r3, #16
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f64:	f043 0201 	orr.w	r2, r3, #1
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e023      	b.n	8006fb8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006f70:	f7fe fcca 	bl	8005908 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d914      	bls.n	8006fa8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d10d      	bne.n	8006fa8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	f043 0210 	orr.w	r2, r3, #16
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9c:	f043 0201 	orr.w	r2, r3, #1
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e007      	b.n	8006fb8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d0dc      	beq.n	8006f70 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fd0:	4b0c      	ldr	r3, [pc, #48]	; (8007004 <__NVIC_SetPriorityGrouping+0x44>)
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fdc:	4013      	ands	r3, r2
 8006fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ff2:	4a04      	ldr	r2, [pc, #16]	; (8007004 <__NVIC_SetPriorityGrouping+0x44>)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	60d3      	str	r3, [r2, #12]
}
 8006ff8:	bf00      	nop
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	e000ed00 	.word	0xe000ed00

08007008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800700c:	4b04      	ldr	r3, [pc, #16]	; (8007020 <__NVIC_GetPriorityGrouping+0x18>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	0a1b      	lsrs	r3, r3, #8
 8007012:	f003 0307 	and.w	r3, r3, #7
}
 8007016:	4618      	mov	r0, r3
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	e000ed00 	.word	0xe000ed00

08007024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800702e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007032:	2b00      	cmp	r3, #0
 8007034:	db0b      	blt.n	800704e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007036:	79fb      	ldrb	r3, [r7, #7]
 8007038:	f003 021f 	and.w	r2, r3, #31
 800703c:	4907      	ldr	r1, [pc, #28]	; (800705c <__NVIC_EnableIRQ+0x38>)
 800703e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007042:	095b      	lsrs	r3, r3, #5
 8007044:	2001      	movs	r0, #1
 8007046:	fa00 f202 	lsl.w	r2, r0, r2
 800704a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	e000e100 	.word	0xe000e100

08007060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800706c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007070:	2b00      	cmp	r3, #0
 8007072:	db0a      	blt.n	800708a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	b2da      	uxtb	r2, r3
 8007078:	490c      	ldr	r1, [pc, #48]	; (80070ac <__NVIC_SetPriority+0x4c>)
 800707a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800707e:	0112      	lsls	r2, r2, #4
 8007080:	b2d2      	uxtb	r2, r2
 8007082:	440b      	add	r3, r1
 8007084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007088:	e00a      	b.n	80070a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	b2da      	uxtb	r2, r3
 800708e:	4908      	ldr	r1, [pc, #32]	; (80070b0 <__NVIC_SetPriority+0x50>)
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	3b04      	subs	r3, #4
 8007098:	0112      	lsls	r2, r2, #4
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	440b      	add	r3, r1
 800709e:	761a      	strb	r2, [r3, #24]
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	e000e100 	.word	0xe000e100
 80070b0:	e000ed00 	.word	0xe000ed00

080070b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b089      	sub	sp, #36	; 0x24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	f1c3 0307 	rsb	r3, r3, #7
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	bf28      	it	cs
 80070d2:	2304      	movcs	r3, #4
 80070d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	3304      	adds	r3, #4
 80070da:	2b06      	cmp	r3, #6
 80070dc:	d902      	bls.n	80070e4 <NVIC_EncodePriority+0x30>
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	3b03      	subs	r3, #3
 80070e2:	e000      	b.n	80070e6 <NVIC_EncodePriority+0x32>
 80070e4:	2300      	movs	r3, #0
 80070e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070e8:	f04f 32ff 	mov.w	r2, #4294967295
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	fa02 f303 	lsl.w	r3, r2, r3
 80070f2:	43da      	mvns	r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	401a      	ands	r2, r3
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070fc:	f04f 31ff 	mov.w	r1, #4294967295
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	fa01 f303 	lsl.w	r3, r1, r3
 8007106:	43d9      	mvns	r1, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800710c:	4313      	orrs	r3, r2
         );
}
 800710e:	4618      	mov	r0, r3
 8007110:	3724      	adds	r7, #36	; 0x24
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3b01      	subs	r3, #1
 8007128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800712c:	d301      	bcc.n	8007132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800712e:	2301      	movs	r3, #1
 8007130:	e00f      	b.n	8007152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007132:	4a0a      	ldr	r2, [pc, #40]	; (800715c <SysTick_Config+0x40>)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3b01      	subs	r3, #1
 8007138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800713a:	210f      	movs	r1, #15
 800713c:	f04f 30ff 	mov.w	r0, #4294967295
 8007140:	f7ff ff8e 	bl	8007060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007144:	4b05      	ldr	r3, [pc, #20]	; (800715c <SysTick_Config+0x40>)
 8007146:	2200      	movs	r2, #0
 8007148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800714a:	4b04      	ldr	r3, [pc, #16]	; (800715c <SysTick_Config+0x40>)
 800714c:	2207      	movs	r2, #7
 800714e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	e000e010 	.word	0xe000e010

08007160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff ff29 	bl	8006fc0 <__NVIC_SetPriorityGrouping>
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	4603      	mov	r3, r0
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007184:	2300      	movs	r3, #0
 8007186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007188:	f7ff ff3e 	bl	8007008 <__NVIC_GetPriorityGrouping>
 800718c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	68b9      	ldr	r1, [r7, #8]
 8007192:	6978      	ldr	r0, [r7, #20]
 8007194:	f7ff ff8e 	bl	80070b4 <NVIC_EncodePriority>
 8007198:	4602      	mov	r2, r0
 800719a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800719e:	4611      	mov	r1, r2
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff ff5d 	bl	8007060 <__NVIC_SetPriority>
}
 80071a6:	bf00      	nop
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	4603      	mov	r3, r0
 80071b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff ff31 	bl	8007024 <__NVIC_EnableIRQ>
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff ffa2 	bl	800711c <SysTick_Config>
 80071d8:	4603      	mov	r3, r0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d008      	beq.n	8007206 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2204      	movs	r2, #4
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e020      	b.n	8007248 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 020e 	bic.w	r2, r2, #14
 8007214:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0201 	bic.w	r2, r2, #1
 8007224:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722e:	2101      	movs	r1, #1
 8007230:	fa01 f202 	lsl.w	r2, r1, r2
 8007234:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007266:	2b02      	cmp	r3, #2
 8007268:	d005      	beq.n	8007276 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2204      	movs	r2, #4
 800726e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	73fb      	strb	r3, [r7, #15]
 8007274:	e027      	b.n	80072c6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 020e 	bic.w	r2, r2, #14
 8007284:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0201 	bic.w	r2, r2, #1
 8007294:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729e:	2101      	movs	r1, #1
 80072a0:	fa01 f202 	lsl.w	r2, r1, r2
 80072a4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
    } 
  }
  return status;
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80072da:	2300      	movs	r3, #0
 80072dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072de:	e154      	b.n	800758a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	2101      	movs	r1, #1
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	fa01 f303 	lsl.w	r3, r1, r3
 80072ec:	4013      	ands	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 8146 	beq.w	8007584 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f003 0303 	and.w	r3, r3, #3
 8007300:	2b01      	cmp	r3, #1
 8007302:	d005      	beq.n	8007310 <HAL_GPIO_Init+0x40>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f003 0303 	and.w	r3, r3, #3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d130      	bne.n	8007372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	2203      	movs	r2, #3
 800731c:	fa02 f303 	lsl.w	r3, r2, r3
 8007320:	43db      	mvns	r3, r3
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4013      	ands	r3, r2
 8007326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	fa02 f303 	lsl.w	r3, r2, r3
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007346:	2201      	movs	r2, #1
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	fa02 f303 	lsl.w	r3, r2, r3
 800734e:	43db      	mvns	r3, r3
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4013      	ands	r3, r2
 8007354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	091b      	lsrs	r3, r3, #4
 800735c:	f003 0201 	and.w	r2, r3, #1
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	fa02 f303 	lsl.w	r3, r2, r3
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b03      	cmp	r3, #3
 800737c:	d017      	beq.n	80073ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	2203      	movs	r2, #3
 800738a:	fa02 f303 	lsl.w	r3, r2, r3
 800738e:	43db      	mvns	r3, r3
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	4013      	ands	r3, r2
 8007394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d123      	bne.n	8007402 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	08da      	lsrs	r2, r3, #3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3208      	adds	r2, #8
 80073c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	220f      	movs	r2, #15
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	43db      	mvns	r3, r3
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4013      	ands	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	691a      	ldr	r2, [r3, #16]
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	fa02 f303 	lsl.w	r3, r2, r3
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	08da      	lsrs	r2, r3, #3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3208      	adds	r2, #8
 80073fc:	6939      	ldr	r1, [r7, #16]
 80073fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	2203      	movs	r2, #3
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	43db      	mvns	r3, r3
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4013      	ands	r3, r2
 8007418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f003 0203 	and.w	r2, r3, #3
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	005b      	lsls	r3, r3, #1
 8007426:	fa02 f303 	lsl.w	r3, r2, r3
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 80a0 	beq.w	8007584 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007444:	4b58      	ldr	r3, [pc, #352]	; (80075a8 <HAL_GPIO_Init+0x2d8>)
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	4a57      	ldr	r2, [pc, #348]	; (80075a8 <HAL_GPIO_Init+0x2d8>)
 800744a:	f043 0301 	orr.w	r3, r3, #1
 800744e:	6193      	str	r3, [r2, #24]
 8007450:	4b55      	ldr	r3, [pc, #340]	; (80075a8 <HAL_GPIO_Init+0x2d8>)
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	60bb      	str	r3, [r7, #8]
 800745a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800745c:	4a53      	ldr	r2, [pc, #332]	; (80075ac <HAL_GPIO_Init+0x2dc>)
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	089b      	lsrs	r3, r3, #2
 8007462:	3302      	adds	r3, #2
 8007464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007468:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	220f      	movs	r2, #15
 8007474:	fa02 f303 	lsl.w	r3, r2, r3
 8007478:	43db      	mvns	r3, r3
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4013      	ands	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007486:	d019      	beq.n	80074bc <HAL_GPIO_Init+0x1ec>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a49      	ldr	r2, [pc, #292]	; (80075b0 <HAL_GPIO_Init+0x2e0>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d013      	beq.n	80074b8 <HAL_GPIO_Init+0x1e8>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a48      	ldr	r2, [pc, #288]	; (80075b4 <HAL_GPIO_Init+0x2e4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00d      	beq.n	80074b4 <HAL_GPIO_Init+0x1e4>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a47      	ldr	r2, [pc, #284]	; (80075b8 <HAL_GPIO_Init+0x2e8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d007      	beq.n	80074b0 <HAL_GPIO_Init+0x1e0>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a46      	ldr	r2, [pc, #280]	; (80075bc <HAL_GPIO_Init+0x2ec>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d101      	bne.n	80074ac <HAL_GPIO_Init+0x1dc>
 80074a8:	2304      	movs	r3, #4
 80074aa:	e008      	b.n	80074be <HAL_GPIO_Init+0x1ee>
 80074ac:	2305      	movs	r3, #5
 80074ae:	e006      	b.n	80074be <HAL_GPIO_Init+0x1ee>
 80074b0:	2303      	movs	r3, #3
 80074b2:	e004      	b.n	80074be <HAL_GPIO_Init+0x1ee>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e002      	b.n	80074be <HAL_GPIO_Init+0x1ee>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e000      	b.n	80074be <HAL_GPIO_Init+0x1ee>
 80074bc:	2300      	movs	r3, #0
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	f002 0203 	and.w	r2, r2, #3
 80074c4:	0092      	lsls	r2, r2, #2
 80074c6:	4093      	lsls	r3, r2
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80074ce:	4937      	ldr	r1, [pc, #220]	; (80075ac <HAL_GPIO_Init+0x2dc>)
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	089b      	lsrs	r3, r3, #2
 80074d4:	3302      	adds	r3, #2
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074dc:	4b38      	ldr	r3, [pc, #224]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	43db      	mvns	r3, r3
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	4013      	ands	r3, r2
 80074ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007500:	4a2f      	ldr	r2, [pc, #188]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007506:	4b2e      	ldr	r3, [pc, #184]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	43db      	mvns	r3, r3
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4013      	ands	r3, r2
 8007514:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800752a:	4a25      	ldr	r2, [pc, #148]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007530:	4b23      	ldr	r3, [pc, #140]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	43db      	mvns	r3, r3
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	4013      	ands	r3, r2
 800753e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4313      	orrs	r3, r2
 8007552:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007554:	4a1a      	ldr	r2, [pc, #104]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800755a:	4b19      	ldr	r3, [pc, #100]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	43db      	mvns	r3, r3
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	4013      	ands	r3, r2
 8007568:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800757e:	4a10      	ldr	r2, [pc, #64]	; (80075c0 <HAL_GPIO_Init+0x2f0>)
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	3301      	adds	r3, #1
 8007588:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	fa22 f303 	lsr.w	r3, r2, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	f47f aea3 	bne.w	80072e0 <HAL_GPIO_Init+0x10>
  }
}
 800759a:	bf00      	nop
 800759c:	bf00      	nop
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	40021000 	.word	0x40021000
 80075ac:	40010000 	.word	0x40010000
 80075b0:	48000400 	.word	0x48000400
 80075b4:	48000800 	.word	0x48000800
 80075b8:	48000c00 	.word	0x48000c00
 80075bc:	48001000 	.word	0x48001000
 80075c0:	40010400 	.word	0x40010400

080075c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691a      	ldr	r2, [r3, #16]
 80075d4:	887b      	ldrh	r3, [r7, #2]
 80075d6:	4013      	ands	r3, r2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075dc:	2301      	movs	r3, #1
 80075de:	73fb      	strb	r3, [r7, #15]
 80075e0:	e001      	b.n	80075e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]
 8007600:	4613      	mov	r3, r2
 8007602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007604:	787b      	ldrb	r3, [r7, #1]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800760a:	887a      	ldrh	r2, [r7, #2]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007610:	e002      	b.n	8007618 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007612:	887a      	ldrh	r2, [r7, #2]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800762e:	4b08      	ldr	r3, [pc, #32]	; (8007650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007630:	695a      	ldr	r2, [r3, #20]
 8007632:	88fb      	ldrh	r3, [r7, #6]
 8007634:	4013      	ands	r3, r2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d006      	beq.n	8007648 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800763a:	4a05      	ldr	r2, [pc, #20]	; (8007650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800763c:	88fb      	ldrh	r3, [r7, #6]
 800763e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	4618      	mov	r0, r3
 8007644:	f000 f806 	bl	8007654 <HAL_GPIO_EXTI_Callback>
  }
}
 8007648:	bf00      	nop
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	40010400 	.word	0x40010400

08007654 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	4603      	mov	r3, r0
 800765c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e081      	b.n	8007780 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d106      	bne.n	8007696 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7fa fb5f 	bl	8001d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2224      	movs	r2, #36	; 0x24
 800769a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0201 	bic.w	r2, r2, #1
 80076ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80076ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689a      	ldr	r2, [r3, #8]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d107      	bne.n	80076e4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076e0:	609a      	str	r2, [r3, #8]
 80076e2:	e006      	b.n	80076f2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80076f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d104      	bne.n	8007704 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007702:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	6812      	ldr	r2, [r2, #0]
 800770e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007716:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007726:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691a      	ldr	r2, [r3, #16]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	430a      	orrs	r2, r1
 8007740:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	69d9      	ldr	r1, [r3, #28]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1a      	ldr	r2, [r3, #32]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0201 	orr.w	r2, r2, #1
 8007760:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2220      	movs	r2, #32
 800776c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b20      	cmp	r3, #32
 800779c:	d138      	bne.n	8007810 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d101      	bne.n	80077ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077a8:	2302      	movs	r3, #2
 80077aa:	e032      	b.n	8007812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2224      	movs	r2, #36	; 0x24
 80077b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0201 	bic.w	r2, r2, #1
 80077ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6819      	ldr	r1, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0201 	orr.w	r2, r2, #1
 80077fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2220      	movs	r2, #32
 8007800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	e000      	b.n	8007812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007810:	2302      	movs	r3, #2
  }
}
 8007812:	4618      	mov	r0, r3
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800781e:	b480      	push	{r7}
 8007820:	b085      	sub	sp, #20
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b20      	cmp	r3, #32
 8007832:	d139      	bne.n	80078a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800783a:	2b01      	cmp	r3, #1
 800783c:	d101      	bne.n	8007842 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800783e:	2302      	movs	r3, #2
 8007840:	e033      	b.n	80078aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2224      	movs	r2, #36	; 0x24
 800784e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0201 	bic.w	r2, r2, #1
 8007860:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007870:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	021b      	lsls	r3, r3, #8
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0201 	orr.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2220      	movs	r2, #32
 8007898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	e000      	b.n	80078aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078a8:	2302      	movs	r3, #2
  }
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80078b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078b8:	b08b      	sub	sp, #44	; 0x2c
 80078ba:	af06      	add	r7, sp, #24
 80078bc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e0d0      	b.n	8007a6a <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d106      	bne.n	80078e2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7fa fb9b 	bl	8002018 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2203      	movs	r2, #3
 80078e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f003 ff24 	bl	800b73c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078f4:	2300      	movs	r3, #0
 80078f6:	73fb      	strb	r3, [r7, #15]
 80078f8:	e04c      	b.n	8007994 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	6879      	ldr	r1, [r7, #4]
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	4613      	mov	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	440b      	add	r3, r1
 800790a:	3301      	adds	r3, #1
 800790c:	2201      	movs	r2, #1
 800790e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	00db      	lsls	r3, r3, #3
 800791e:	440b      	add	r3, r1
 8007920:	7bfa      	ldrb	r2, [r7, #15]
 8007922:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007924:	7bfa      	ldrb	r2, [r7, #15]
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	b298      	uxth	r0, r3
 800792a:	6879      	ldr	r1, [r7, #4]
 800792c:	4613      	mov	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	440b      	add	r3, r1
 8007936:	3336      	adds	r3, #54	; 0x36
 8007938:	4602      	mov	r2, r0
 800793a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	00db      	lsls	r3, r3, #3
 800794a:	440b      	add	r3, r1
 800794c:	3303      	adds	r3, #3
 800794e:	2200      	movs	r2, #0
 8007950:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007952:	7bfa      	ldrb	r2, [r7, #15]
 8007954:	6879      	ldr	r1, [r7, #4]
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	440b      	add	r3, r1
 8007960:	3338      	adds	r3, #56	; 0x38
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007966:	7bfa      	ldrb	r2, [r7, #15]
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	4613      	mov	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	440b      	add	r3, r1
 8007974:	333c      	adds	r3, #60	; 0x3c
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800797a:	7bfa      	ldrb	r2, [r7, #15]
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	440b      	add	r3, r1
 8007988:	3340      	adds	r3, #64	; 0x40
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	3301      	adds	r3, #1
 8007992:	73fb      	strb	r3, [r7, #15]
 8007994:	7bfa      	ldrb	r2, [r7, #15]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	429a      	cmp	r2, r3
 800799c:	d3ad      	bcc.n	80078fa <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]
 80079a2:	e044      	b.n	8007a2e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80079a4:	7bfa      	ldrb	r2, [r7, #15]
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	440b      	add	r3, r1
 80079b2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80079b6:	2200      	movs	r2, #0
 80079b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80079ba:	7bfa      	ldrb	r2, [r7, #15]
 80079bc:	6879      	ldr	r1, [r7, #4]
 80079be:	4613      	mov	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	00db      	lsls	r3, r3, #3
 80079c6:	440b      	add	r3, r1
 80079c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80079cc:	7bfa      	ldrb	r2, [r7, #15]
 80079ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80079d0:	7bfa      	ldrb	r2, [r7, #15]
 80079d2:	6879      	ldr	r1, [r7, #4]
 80079d4:	4613      	mov	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	440b      	add	r3, r1
 80079de:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80079e6:	7bfa      	ldrb	r2, [r7, #15]
 80079e8:	6879      	ldr	r1, [r7, #4]
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	00db      	lsls	r3, r3, #3
 80079f2:	440b      	add	r3, r1
 80079f4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80079fc:	7bfa      	ldrb	r2, [r7, #15]
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	4613      	mov	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	00db      	lsls	r3, r3, #3
 8007a08:	440b      	add	r3, r1
 8007a0a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007a0e:	2200      	movs	r2, #0
 8007a10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007a12:	7bfa      	ldrb	r2, [r7, #15]
 8007a14:	6879      	ldr	r1, [r7, #4]
 8007a16:	4613      	mov	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	00db      	lsls	r3, r3, #3
 8007a1e:	440b      	add	r3, r1
 8007a20:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	73fb      	strb	r3, [r7, #15]
 8007a2e:	7bfa      	ldrb	r2, [r7, #15]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d3b5      	bcc.n	80079a4 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	603b      	str	r3, [r7, #0]
 8007a3e:	687e      	ldr	r6, [r7, #4]
 8007a40:	466d      	mov	r5, sp
 8007a42:	f106 0410 	add.w	r4, r6, #16
 8007a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	602b      	str	r3, [r5, #0]
 8007a4e:	1d33      	adds	r3, r6, #4
 8007a50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a52:	6838      	ldr	r0, [r7, #0]
 8007a54:	f003 fe8d 	bl	800b772 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d102      	bne.n	8007a9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	f001 b823 	b.w	8008ae0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 817d 	beq.w	8007daa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007ab0:	4bbc      	ldr	r3, [pc, #752]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f003 030c 	and.w	r3, r3, #12
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	d00c      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007abc:	4bb9      	ldr	r3, [pc, #740]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f003 030c 	and.w	r3, r3, #12
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d15c      	bne.n	8007b82 <HAL_RCC_OscConfig+0x10e>
 8007ac8:	4bb6      	ldr	r3, [pc, #728]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ad4:	d155      	bne.n	8007b82 <HAL_RCC_OscConfig+0x10e>
 8007ad6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ada:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ade:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007ae2:	fa93 f3a3 	rbit	r3, r3
 8007ae6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007aea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aee:	fab3 f383 	clz	r3, r3
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	095b      	lsrs	r3, r3, #5
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f043 0301 	orr.w	r3, r3, #1
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d102      	bne.n	8007b08 <HAL_RCC_OscConfig+0x94>
 8007b02:	4ba8      	ldr	r3, [pc, #672]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	e015      	b.n	8007b34 <HAL_RCC_OscConfig+0xc0>
 8007b08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b0c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b10:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007b14:	fa93 f3a3 	rbit	r3, r3
 8007b18:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b20:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007b24:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8007b28:	fa93 f3a3 	rbit	r3, r3
 8007b2c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007b30:	4b9c      	ldr	r3, [pc, #624]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007b38:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8007b3c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007b40:	fa92 f2a2 	rbit	r2, r2
 8007b44:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8007b48:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007b4c:	fab2 f282 	clz	r2, r2
 8007b50:	b2d2      	uxtb	r2, r2
 8007b52:	f042 0220 	orr.w	r2, r2, #32
 8007b56:	b2d2      	uxtb	r2, r2
 8007b58:	f002 021f 	and.w	r2, r2, #31
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8007b62:	4013      	ands	r3, r2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 811f 	beq.w	8007da8 <HAL_RCC_OscConfig+0x334>
 8007b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f040 8116 	bne.w	8007da8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	f000 bfaf 	b.w	8008ae0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b92:	d106      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x12e>
 8007b94:	4b83      	ldr	r3, [pc, #524]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a82      	ldr	r2, [pc, #520]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	e036      	b.n	8007c10 <HAL_RCC_OscConfig+0x19c>
 8007ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10c      	bne.n	8007bcc <HAL_RCC_OscConfig+0x158>
 8007bb2:	4b7c      	ldr	r3, [pc, #496]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a7b      	ldr	r2, [pc, #492]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	4b79      	ldr	r3, [pc, #484]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a78      	ldr	r2, [pc, #480]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	e021      	b.n	8007c10 <HAL_RCC_OscConfig+0x19c>
 8007bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bdc:	d10c      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x184>
 8007bde:	4b71      	ldr	r3, [pc, #452]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a70      	ldr	r2, [pc, #448]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	4b6e      	ldr	r3, [pc, #440]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a6d      	ldr	r2, [pc, #436]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	e00b      	b.n	8007c10 <HAL_RCC_OscConfig+0x19c>
 8007bf8:	4b6a      	ldr	r3, [pc, #424]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a69      	ldr	r2, [pc, #420]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	4b67      	ldr	r3, [pc, #412]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a66      	ldr	r2, [pc, #408]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c0e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007c10:	4b64      	ldr	r3, [pc, #400]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	f023 020f 	bic.w	r2, r3, #15
 8007c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	495f      	ldr	r1, [pc, #380]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d059      	beq.n	8007cee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c3a:	f7fd fe65 	bl	8005908 <HAL_GetTick>
 8007c3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c42:	e00a      	b.n	8007c5a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c44:	f7fd fe60 	bl	8005908 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	2b64      	cmp	r3, #100	; 0x64
 8007c52:	d902      	bls.n	8007c5a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	f000 bf43 	b.w	8008ae0 <HAL_RCC_OscConfig+0x106c>
 8007c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c5e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c62:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007c66:	fa93 f3a3 	rbit	r3, r3
 8007c6a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007c6e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c72:	fab3 f383 	clz	r3, r3
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	095b      	lsrs	r3, r3, #5
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	f043 0301 	orr.w	r3, r3, #1
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d102      	bne.n	8007c8c <HAL_RCC_OscConfig+0x218>
 8007c86:	4b47      	ldr	r3, [pc, #284]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	e015      	b.n	8007cb8 <HAL_RCC_OscConfig+0x244>
 8007c8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c90:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c94:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007c98:	fa93 f3a3 	rbit	r3, r3
 8007c9c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ca4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007ca8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007cac:	fa93 f3a3 	rbit	r3, r3
 8007cb0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007cb4:	4b3b      	ldr	r3, [pc, #236]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007cbc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007cc0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007cc4:	fa92 f2a2 	rbit	r2, r2
 8007cc8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007ccc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007cd0:	fab2 f282 	clz	r2, r2
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	f042 0220 	orr.w	r2, r2, #32
 8007cda:	b2d2      	uxtb	r2, r2
 8007cdc:	f002 021f 	and.w	r2, r2, #31
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0ab      	beq.n	8007c44 <HAL_RCC_OscConfig+0x1d0>
 8007cec:	e05d      	b.n	8007daa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cee:	f7fd fe0b 	bl	8005908 <HAL_GetTick>
 8007cf2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cf6:	e00a      	b.n	8007d0e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cf8:	f7fd fe06 	bl	8005908 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	2b64      	cmp	r3, #100	; 0x64
 8007d06:	d902      	bls.n	8007d0e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	f000 bee9 	b.w	8008ae0 <HAL_RCC_OscConfig+0x106c>
 8007d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d12:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d16:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007d1a:	fa93 f3a3 	rbit	r3, r3
 8007d1e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007d22:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d26:	fab3 f383 	clz	r3, r3
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	095b      	lsrs	r3, r3, #5
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	f043 0301 	orr.w	r3, r3, #1
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d102      	bne.n	8007d40 <HAL_RCC_OscConfig+0x2cc>
 8007d3a:	4b1a      	ldr	r3, [pc, #104]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	e015      	b.n	8007d6c <HAL_RCC_OscConfig+0x2f8>
 8007d40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d44:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d48:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007d4c:	fa93 f3a3 	rbit	r3, r3
 8007d50:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d58:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007d5c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007d60:	fa93 f3a3 	rbit	r3, r3
 8007d64:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007d68:	4b0e      	ldr	r3, [pc, #56]	; (8007da4 <HAL_RCC_OscConfig+0x330>)
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007d70:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007d74:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007d78:	fa92 f2a2 	rbit	r2, r2
 8007d7c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007d80:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007d84:	fab2 f282 	clz	r2, r2
 8007d88:	b2d2      	uxtb	r2, r2
 8007d8a:	f042 0220 	orr.w	r2, r2, #32
 8007d8e:	b2d2      	uxtb	r2, r2
 8007d90:	f002 021f 	and.w	r2, r2, #31
 8007d94:	2101      	movs	r1, #1
 8007d96:	fa01 f202 	lsl.w	r2, r1, r2
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1ab      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x284>
 8007da0:	e003      	b.n	8007daa <HAL_RCC_OscConfig+0x336>
 8007da2:	bf00      	nop
 8007da4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 817d 	beq.w	80080ba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007dc0:	4ba6      	ldr	r3, [pc, #664]	; (800805c <HAL_RCC_OscConfig+0x5e8>)
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f003 030c 	and.w	r3, r3, #12
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00b      	beq.n	8007de4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007dcc:	4ba3      	ldr	r3, [pc, #652]	; (800805c <HAL_RCC_OscConfig+0x5e8>)
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f003 030c 	and.w	r3, r3, #12
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d172      	bne.n	8007ebe <HAL_RCC_OscConfig+0x44a>
 8007dd8:	4ba0      	ldr	r3, [pc, #640]	; (800805c <HAL_RCC_OscConfig+0x5e8>)
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d16c      	bne.n	8007ebe <HAL_RCC_OscConfig+0x44a>
 8007de4:	2302      	movs	r3, #2
 8007de6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007dee:	fa93 f3a3 	rbit	r3, r3
 8007df2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007df6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dfa:	fab3 f383 	clz	r3, r3
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	095b      	lsrs	r3, r3, #5
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	f043 0301 	orr.w	r3, r3, #1
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d102      	bne.n	8007e14 <HAL_RCC_OscConfig+0x3a0>
 8007e0e:	4b93      	ldr	r3, [pc, #588]	; (800805c <HAL_RCC_OscConfig+0x5e8>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	e013      	b.n	8007e3c <HAL_RCC_OscConfig+0x3c8>
 8007e14:	2302      	movs	r3, #2
 8007e16:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e1a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007e1e:	fa93 f3a3 	rbit	r3, r3
 8007e22:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007e26:	2302      	movs	r3, #2
 8007e28:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007e2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007e30:	fa93 f3a3 	rbit	r3, r3
 8007e34:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007e38:	4b88      	ldr	r3, [pc, #544]	; (800805c <HAL_RCC_OscConfig+0x5e8>)
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007e42:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007e46:	fa92 f2a2 	rbit	r2, r2
 8007e4a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007e4e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007e52:	fab2 f282 	clz	r2, r2
 8007e56:	b2d2      	uxtb	r2, r2
 8007e58:	f042 0220 	orr.w	r2, r2, #32
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	f002 021f 	and.w	r2, r2, #31
 8007e62:	2101      	movs	r1, #1
 8007e64:	fa01 f202 	lsl.w	r2, r1, r2
 8007e68:	4013      	ands	r3, r2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <HAL_RCC_OscConfig+0x410>
 8007e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d002      	beq.n	8007e84 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	f000 be2e 	b.w	8008ae0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e84:	4b75      	ldr	r3, [pc, #468]	; (800805c <HAL_RCC_OscConfig+0x5e8>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	21f8      	movs	r1, #248	; 0xf8
 8007e9a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e9e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007ea2:	fa91 f1a1 	rbit	r1, r1
 8007ea6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007eaa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007eae:	fab1 f181 	clz	r1, r1
 8007eb2:	b2c9      	uxtb	r1, r1
 8007eb4:	408b      	lsls	r3, r1
 8007eb6:	4969      	ldr	r1, [pc, #420]	; (800805c <HAL_RCC_OscConfig+0x5e8>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ebc:	e0fd      	b.n	80080ba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 8088 	beq.w	8007fe0 <HAL_RCC_OscConfig+0x56c>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ed6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007eda:	fa93 f3a3 	rbit	r3, r3
 8007ede:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007ee2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ee6:	fab3 f383 	clz	r3, r3
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007ef0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	2301      	movs	r3, #1
 8007efa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007efc:	f7fd fd04 	bl	8005908 <HAL_GetTick>
 8007f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f04:	e00a      	b.n	8007f1c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f06:	f7fd fcff 	bl	8005908 <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d902      	bls.n	8007f1c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	f000 bde2 	b.w	8008ae0 <HAL_RCC_OscConfig+0x106c>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f22:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007f26:	fa93 f3a3 	rbit	r3, r3
 8007f2a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007f2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f32:	fab3 f383 	clz	r3, r3
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	095b      	lsrs	r3, r3, #5
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	f043 0301 	orr.w	r3, r3, #1
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d102      	bne.n	8007f4c <HAL_RCC_OscConfig+0x4d8>
 8007f46:	4b45      	ldr	r3, [pc, #276]	; (800805c <HAL_RCC_OscConfig+0x5e8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	e013      	b.n	8007f74 <HAL_RCC_OscConfig+0x500>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f52:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007f56:	fa93 f3a3 	rbit	r3, r3
 8007f5a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007f5e:	2302      	movs	r3, #2
 8007f60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007f64:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007f68:	fa93 f3a3 	rbit	r3, r3
 8007f6c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007f70:	4b3a      	ldr	r3, [pc, #232]	; (800805c <HAL_RCC_OscConfig+0x5e8>)
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	2202      	movs	r2, #2
 8007f76:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007f7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007f7e:	fa92 f2a2 	rbit	r2, r2
 8007f82:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007f86:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007f8a:	fab2 f282 	clz	r2, r2
 8007f8e:	b2d2      	uxtb	r2, r2
 8007f90:	f042 0220 	orr.w	r2, r2, #32
 8007f94:	b2d2      	uxtb	r2, r2
 8007f96:	f002 021f 	and.w	r2, r2, #31
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0af      	beq.n	8007f06 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fa6:	4b2d      	ldr	r3, [pc, #180]	; (800805c <HAL_RCC_OscConfig+0x5e8>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	21f8      	movs	r1, #248	; 0xf8
 8007fbc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fc0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007fc4:	fa91 f1a1 	rbit	r1, r1
 8007fc8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007fcc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007fd0:	fab1 f181 	clz	r1, r1
 8007fd4:	b2c9      	uxtb	r1, r1
 8007fd6:	408b      	lsls	r3, r1
 8007fd8:	4920      	ldr	r1, [pc, #128]	; (800805c <HAL_RCC_OscConfig+0x5e8>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	600b      	str	r3, [r1, #0]
 8007fde:	e06c      	b.n	80080ba <HAL_RCC_OscConfig+0x646>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fe6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007fea:	fa93 f3a3 	rbit	r3, r3
 8007fee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007ff2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ff6:	fab3 f383 	clz	r3, r3
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008000:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	461a      	mov	r2, r3
 8008008:	2300      	movs	r3, #0
 800800a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800800c:	f7fd fc7c 	bl	8005908 <HAL_GetTick>
 8008010:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008014:	e00a      	b.n	800802c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008016:	f7fd fc77 	bl	8005908 <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	2b02      	cmp	r3, #2
 8008024:	d902      	bls.n	800802c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	f000 bd5a 	b.w	8008ae0 <HAL_RCC_OscConfig+0x106c>
 800802c:	2302      	movs	r3, #2
 800802e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008032:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008036:	fa93 f3a3 	rbit	r3, r3
 800803a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800803e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008042:	fab3 f383 	clz	r3, r3
 8008046:	b2db      	uxtb	r3, r3
 8008048:	095b      	lsrs	r3, r3, #5
 800804a:	b2db      	uxtb	r3, r3
 800804c:	f043 0301 	orr.w	r3, r3, #1
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b01      	cmp	r3, #1
 8008054:	d104      	bne.n	8008060 <HAL_RCC_OscConfig+0x5ec>
 8008056:	4b01      	ldr	r3, [pc, #4]	; (800805c <HAL_RCC_OscConfig+0x5e8>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	e015      	b.n	8008088 <HAL_RCC_OscConfig+0x614>
 800805c:	40021000 	.word	0x40021000
 8008060:	2302      	movs	r3, #2
 8008062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008066:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800806a:	fa93 f3a3 	rbit	r3, r3
 800806e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008072:	2302      	movs	r3, #2
 8008074:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008078:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800807c:	fa93 f3a3 	rbit	r3, r3
 8008080:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008084:	4bc8      	ldr	r3, [pc, #800]	; (80083a8 <HAL_RCC_OscConfig+0x934>)
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	2202      	movs	r2, #2
 800808a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800808e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008092:	fa92 f2a2 	rbit	r2, r2
 8008096:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800809a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800809e:	fab2 f282 	clz	r2, r2
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	f042 0220 	orr.w	r2, r2, #32
 80080a8:	b2d2      	uxtb	r2, r2
 80080aa:	f002 021f 	and.w	r2, r2, #31
 80080ae:	2101      	movs	r1, #1
 80080b0:	fa01 f202 	lsl.w	r2, r1, r2
 80080b4:	4013      	ands	r3, r2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1ad      	bne.n	8008016 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0308 	and.w	r3, r3, #8
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 8110 	beq.w	80082f0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d079      	beq.n	80081d4 <HAL_RCC_OscConfig+0x760>
 80080e0:	2301      	movs	r3, #1
 80080e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080ea:	fa93 f3a3 	rbit	r3, r3
 80080ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80080f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080f6:	fab3 f383 	clz	r3, r3
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	461a      	mov	r2, r3
 80080fe:	4bab      	ldr	r3, [pc, #684]	; (80083ac <HAL_RCC_OscConfig+0x938>)
 8008100:	4413      	add	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	461a      	mov	r2, r3
 8008106:	2301      	movs	r3, #1
 8008108:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800810a:	f7fd fbfd 	bl	8005908 <HAL_GetTick>
 800810e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008112:	e00a      	b.n	800812a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008114:	f7fd fbf8 	bl	8005908 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d902      	bls.n	800812a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	f000 bcdb 	b.w	8008ae0 <HAL_RCC_OscConfig+0x106c>
 800812a:	2302      	movs	r3, #2
 800812c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008130:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008134:	fa93 f3a3 	rbit	r3, r3
 8008138:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800813c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008140:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008144:	2202      	movs	r2, #2
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800814c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	fa93 f2a3 	rbit	r2, r3
 8008156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800815a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008168:	2202      	movs	r2, #2
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	fa93 f2a3 	rbit	r2, r3
 800817a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800817e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008182:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008184:	4b88      	ldr	r3, [pc, #544]	; (80083a8 <HAL_RCC_OscConfig+0x934>)
 8008186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800818c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008190:	2102      	movs	r1, #2
 8008192:	6019      	str	r1, [r3, #0]
 8008194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008198:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	fa93 f1a3 	rbit	r1, r3
 80081a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80081aa:	6019      	str	r1, [r3, #0]
  return result;
 80081ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	fab3 f383 	clz	r3, r3
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	f003 031f 	and.w	r3, r3, #31
 80081c6:	2101      	movs	r1, #1
 80081c8:	fa01 f303 	lsl.w	r3, r1, r3
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0a0      	beq.n	8008114 <HAL_RCC_OscConfig+0x6a0>
 80081d2:	e08d      	b.n	80082f0 <HAL_RCC_OscConfig+0x87c>
 80081d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80081dc:	2201      	movs	r2, #1
 80081de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	fa93 f2a3 	rbit	r2, r3
 80081ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80081f6:	601a      	str	r2, [r3, #0]
  return result;
 80081f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008200:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008202:	fab3 f383 	clz	r3, r3
 8008206:	b2db      	uxtb	r3, r3
 8008208:	461a      	mov	r2, r3
 800820a:	4b68      	ldr	r3, [pc, #416]	; (80083ac <HAL_RCC_OscConfig+0x938>)
 800820c:	4413      	add	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	461a      	mov	r2, r3
 8008212:	2300      	movs	r3, #0
 8008214:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008216:	f7fd fb77 	bl	8005908 <HAL_GetTick>
 800821a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800821e:	e00a      	b.n	8008236 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008220:	f7fd fb72 	bl	8005908 <HAL_GetTick>
 8008224:	4602      	mov	r2, r0
 8008226:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d902      	bls.n	8008236 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	f000 bc55 	b.w	8008ae0 <HAL_RCC_OscConfig+0x106c>
 8008236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800823a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800823e:	2202      	movs	r2, #2
 8008240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008246:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	fa93 f2a3 	rbit	r2, r3
 8008250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008254:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800825e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008262:	2202      	movs	r2, #2
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800826a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	fa93 f2a3 	rbit	r2, r3
 8008274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008278:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008286:	2202      	movs	r2, #2
 8008288:	601a      	str	r2, [r3, #0]
 800828a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800828e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	fa93 f2a3 	rbit	r2, r3
 8008298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800829c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80082a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082a2:	4b41      	ldr	r3, [pc, #260]	; (80083a8 <HAL_RCC_OscConfig+0x934>)
 80082a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80082ae:	2102      	movs	r1, #2
 80082b0:	6019      	str	r1, [r3, #0]
 80082b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	fa93 f1a3 	rbit	r1, r3
 80082c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80082c8:	6019      	str	r1, [r3, #0]
  return result;
 80082ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082ce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	fab3 f383 	clz	r3, r3
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	f003 031f 	and.w	r3, r3, #31
 80082e4:	2101      	movs	r1, #1
 80082e6:	fa01 f303 	lsl.w	r3, r1, r3
 80082ea:	4013      	ands	r3, r2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d197      	bne.n	8008220 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 81a1 	beq.w	8008648 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008306:	2300      	movs	r3, #0
 8008308:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800830c:	4b26      	ldr	r3, [pc, #152]	; (80083a8 <HAL_RCC_OscConfig+0x934>)
 800830e:	69db      	ldr	r3, [r3, #28]
 8008310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d116      	bne.n	8008346 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008318:	4b23      	ldr	r3, [pc, #140]	; (80083a8 <HAL_RCC_OscConfig+0x934>)
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	4a22      	ldr	r2, [pc, #136]	; (80083a8 <HAL_RCC_OscConfig+0x934>)
 800831e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008322:	61d3      	str	r3, [r2, #28]
 8008324:	4b20      	ldr	r3, [pc, #128]	; (80083a8 <HAL_RCC_OscConfig+0x934>)
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800832c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008330:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800833a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800833e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8008340:	2301      	movs	r3, #1
 8008342:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008346:	4b1a      	ldr	r3, [pc, #104]	; (80083b0 <HAL_RCC_OscConfig+0x93c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800834e:	2b00      	cmp	r3, #0
 8008350:	d11a      	bne.n	8008388 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008352:	4b17      	ldr	r3, [pc, #92]	; (80083b0 <HAL_RCC_OscConfig+0x93c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a16      	ldr	r2, [pc, #88]	; (80083b0 <HAL_RCC_OscConfig+0x93c>)
 8008358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800835c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800835e:	f7fd fad3 	bl	8005908 <HAL_GetTick>
 8008362:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008366:	e009      	b.n	800837c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008368:	f7fd face 	bl	8005908 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	2b64      	cmp	r3, #100	; 0x64
 8008376:	d901      	bls.n	800837c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e3b1      	b.n	8008ae0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800837c:	4b0c      	ldr	r3, [pc, #48]	; (80083b0 <HAL_RCC_OscConfig+0x93c>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008384:	2b00      	cmp	r3, #0
 8008386:	d0ef      	beq.n	8008368 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800838c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d10d      	bne.n	80083b4 <HAL_RCC_OscConfig+0x940>
 8008398:	4b03      	ldr	r3, [pc, #12]	; (80083a8 <HAL_RCC_OscConfig+0x934>)
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	4a02      	ldr	r2, [pc, #8]	; (80083a8 <HAL_RCC_OscConfig+0x934>)
 800839e:	f043 0301 	orr.w	r3, r3, #1
 80083a2:	6213      	str	r3, [r2, #32]
 80083a4:	e03c      	b.n	8008420 <HAL_RCC_OscConfig+0x9ac>
 80083a6:	bf00      	nop
 80083a8:	40021000 	.word	0x40021000
 80083ac:	10908120 	.word	0x10908120
 80083b0:	40007000 	.word	0x40007000
 80083b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10c      	bne.n	80083de <HAL_RCC_OscConfig+0x96a>
 80083c4:	4bc1      	ldr	r3, [pc, #772]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	4ac0      	ldr	r2, [pc, #768]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 80083ca:	f023 0301 	bic.w	r3, r3, #1
 80083ce:	6213      	str	r3, [r2, #32]
 80083d0:	4bbe      	ldr	r3, [pc, #760]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	4abd      	ldr	r2, [pc, #756]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 80083d6:	f023 0304 	bic.w	r3, r3, #4
 80083da:	6213      	str	r3, [r2, #32]
 80083dc:	e020      	b.n	8008420 <HAL_RCC_OscConfig+0x9ac>
 80083de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	2b05      	cmp	r3, #5
 80083ec:	d10c      	bne.n	8008408 <HAL_RCC_OscConfig+0x994>
 80083ee:	4bb7      	ldr	r3, [pc, #732]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	4ab6      	ldr	r2, [pc, #728]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 80083f4:	f043 0304 	orr.w	r3, r3, #4
 80083f8:	6213      	str	r3, [r2, #32]
 80083fa:	4bb4      	ldr	r3, [pc, #720]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	4ab3      	ldr	r2, [pc, #716]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 8008400:	f043 0301 	orr.w	r3, r3, #1
 8008404:	6213      	str	r3, [r2, #32]
 8008406:	e00b      	b.n	8008420 <HAL_RCC_OscConfig+0x9ac>
 8008408:	4bb0      	ldr	r3, [pc, #704]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	4aaf      	ldr	r2, [pc, #700]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 800840e:	f023 0301 	bic.w	r3, r3, #1
 8008412:	6213      	str	r3, [r2, #32]
 8008414:	4bad      	ldr	r3, [pc, #692]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	4aac      	ldr	r2, [pc, #688]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 800841a:	f023 0304 	bic.w	r3, r3, #4
 800841e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008424:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 8081 	beq.w	8008534 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008432:	f7fd fa69 	bl	8005908 <HAL_GetTick>
 8008436:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800843a:	e00b      	b.n	8008454 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800843c:	f7fd fa64 	bl	8005908 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	f241 3288 	movw	r2, #5000	; 0x1388
 800844c:	4293      	cmp	r3, r2
 800844e:	d901      	bls.n	8008454 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e345      	b.n	8008ae0 <HAL_RCC_OscConfig+0x106c>
 8008454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008458:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800845c:	2202      	movs	r2, #2
 800845e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008464:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	fa93 f2a3 	rbit	r2, r3
 800846e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008472:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800847c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008480:	2202      	movs	r2, #2
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008488:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	fa93 f2a3 	rbit	r2, r3
 8008492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008496:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800849a:	601a      	str	r2, [r3, #0]
  return result;
 800849c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084a0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80084a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084a6:	fab3 f383 	clz	r3, r3
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	095b      	lsrs	r3, r3, #5
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	f043 0302 	orr.w	r3, r3, #2
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d102      	bne.n	80084c0 <HAL_RCC_OscConfig+0xa4c>
 80084ba:	4b84      	ldr	r3, [pc, #528]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	e013      	b.n	80084e8 <HAL_RCC_OscConfig+0xa74>
 80084c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80084c8:	2202      	movs	r2, #2
 80084ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	fa93 f2a3 	rbit	r2, r3
 80084da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	4b79      	ldr	r3, [pc, #484]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80084ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80084f0:	2102      	movs	r1, #2
 80084f2:	6011      	str	r1, [r2, #0]
 80084f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80084f8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80084fc:	6812      	ldr	r2, [r2, #0]
 80084fe:	fa92 f1a2 	rbit	r1, r2
 8008502:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008506:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800850a:	6011      	str	r1, [r2, #0]
  return result;
 800850c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008510:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8008514:	6812      	ldr	r2, [r2, #0]
 8008516:	fab2 f282 	clz	r2, r2
 800851a:	b2d2      	uxtb	r2, r2
 800851c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008520:	b2d2      	uxtb	r2, r2
 8008522:	f002 021f 	and.w	r2, r2, #31
 8008526:	2101      	movs	r1, #1
 8008528:	fa01 f202 	lsl.w	r2, r1, r2
 800852c:	4013      	ands	r3, r2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d084      	beq.n	800843c <HAL_RCC_OscConfig+0x9c8>
 8008532:	e07f      	b.n	8008634 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008534:	f7fd f9e8 	bl	8005908 <HAL_GetTick>
 8008538:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800853c:	e00b      	b.n	8008556 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800853e:	f7fd f9e3 	bl	8005908 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	f241 3288 	movw	r2, #5000	; 0x1388
 800854e:	4293      	cmp	r3, r2
 8008550:	d901      	bls.n	8008556 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e2c4      	b.n	8008ae0 <HAL_RCC_OscConfig+0x106c>
 8008556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800855a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800855e:	2202      	movs	r2, #2
 8008560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008566:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	fa93 f2a3 	rbit	r2, r3
 8008570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008574:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800857e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008582:	2202      	movs	r2, #2
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800858a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	fa93 f2a3 	rbit	r2, r3
 8008594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008598:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800859c:	601a      	str	r2, [r3, #0]
  return result;
 800859e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085a2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80085a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085a8:	fab3 f383 	clz	r3, r3
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	095b      	lsrs	r3, r3, #5
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	f043 0302 	orr.w	r3, r3, #2
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d102      	bne.n	80085c2 <HAL_RCC_OscConfig+0xb4e>
 80085bc:	4b43      	ldr	r3, [pc, #268]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 80085be:	6a1b      	ldr	r3, [r3, #32]
 80085c0:	e013      	b.n	80085ea <HAL_RCC_OscConfig+0xb76>
 80085c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80085ca:	2202      	movs	r2, #2
 80085cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	fa93 f2a3 	rbit	r2, r3
 80085dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	4b39      	ldr	r3, [pc, #228]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 80085e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80085ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80085f2:	2102      	movs	r1, #2
 80085f4:	6011      	str	r1, [r2, #0]
 80085f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80085fa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80085fe:	6812      	ldr	r2, [r2, #0]
 8008600:	fa92 f1a2 	rbit	r1, r2
 8008604:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008608:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800860c:	6011      	str	r1, [r2, #0]
  return result;
 800860e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008612:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008616:	6812      	ldr	r2, [r2, #0]
 8008618:	fab2 f282 	clz	r2, r2
 800861c:	b2d2      	uxtb	r2, r2
 800861e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008622:	b2d2      	uxtb	r2, r2
 8008624:	f002 021f 	and.w	r2, r2, #31
 8008628:	2101      	movs	r1, #1
 800862a:	fa01 f202 	lsl.w	r2, r1, r2
 800862e:	4013      	ands	r3, r2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d184      	bne.n	800853e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008634:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8008638:	2b01      	cmp	r3, #1
 800863a:	d105      	bne.n	8008648 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800863c:	4b23      	ldr	r3, [pc, #140]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	4a22      	ldr	r2, [pc, #136]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 8008642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008646:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800864c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 8242 	beq.w	8008ade <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800865a:	4b1c      	ldr	r3, [pc, #112]	; (80086cc <HAL_RCC_OscConfig+0xc58>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f003 030c 	and.w	r3, r3, #12
 8008662:	2b08      	cmp	r3, #8
 8008664:	f000 8213 	beq.w	8008a8e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800866c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	2b02      	cmp	r3, #2
 8008676:	f040 8162 	bne.w	800893e <HAL_RCC_OscConfig+0xeca>
 800867a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800867e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008682:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800868c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	fa93 f2a3 	rbit	r2, r3
 8008696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800869a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800869e:	601a      	str	r2, [r3, #0]
  return result;
 80086a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086a4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80086a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086aa:	fab3 f383 	clz	r3, r3
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80086b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	461a      	mov	r2, r3
 80086bc:	2300      	movs	r3, #0
 80086be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086c0:	f7fd f922 	bl	8005908 <HAL_GetTick>
 80086c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80086c8:	e00c      	b.n	80086e4 <HAL_RCC_OscConfig+0xc70>
 80086ca:	bf00      	nop
 80086cc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086d0:	f7fd f91a 	bl	8005908 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d901      	bls.n	80086e4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e1fd      	b.n	8008ae0 <HAL_RCC_OscConfig+0x106c>
 80086e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086e8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80086ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80086f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086f6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	fa93 f2a3 	rbit	r2, r3
 8008700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008704:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008708:	601a      	str	r2, [r3, #0]
  return result;
 800870a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800870e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008712:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008714:	fab3 f383 	clz	r3, r3
 8008718:	b2db      	uxtb	r3, r3
 800871a:	095b      	lsrs	r3, r3, #5
 800871c:	b2db      	uxtb	r3, r3
 800871e:	f043 0301 	orr.w	r3, r3, #1
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b01      	cmp	r3, #1
 8008726:	d102      	bne.n	800872e <HAL_RCC_OscConfig+0xcba>
 8008728:	4bb0      	ldr	r3, [pc, #704]	; (80089ec <HAL_RCC_OscConfig+0xf78>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	e027      	b.n	800877e <HAL_RCC_OscConfig+0xd0a>
 800872e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008732:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008736:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800873a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800873c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008740:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	fa93 f2a3 	rbit	r2, r3
 800874a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800874e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008758:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800875c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008766:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	fa93 f2a3 	rbit	r2, r3
 8008770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008774:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8008778:	601a      	str	r2, [r3, #0]
 800877a:	4b9c      	ldr	r3, [pc, #624]	; (80089ec <HAL_RCC_OscConfig+0xf78>)
 800877c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008782:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008786:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800878a:	6011      	str	r1, [r2, #0]
 800878c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008790:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008794:	6812      	ldr	r2, [r2, #0]
 8008796:	fa92 f1a2 	rbit	r1, r2
 800879a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800879e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80087a2:	6011      	str	r1, [r2, #0]
  return result;
 80087a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80087a8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80087ac:	6812      	ldr	r2, [r2, #0]
 80087ae:	fab2 f282 	clz	r2, r2
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	f042 0220 	orr.w	r2, r2, #32
 80087b8:	b2d2      	uxtb	r2, r2
 80087ba:	f002 021f 	and.w	r2, r2, #31
 80087be:	2101      	movs	r1, #1
 80087c0:	fa01 f202 	lsl.w	r2, r1, r2
 80087c4:	4013      	ands	r3, r2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d182      	bne.n	80086d0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087ca:	4b88      	ldr	r3, [pc, #544]	; (80089ec <HAL_RCC_OscConfig+0xf78>)
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80087d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80087de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	430b      	orrs	r3, r1
 80087ec:	497f      	ldr	r1, [pc, #508]	; (80089ec <HAL_RCC_OscConfig+0xf78>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	604b      	str	r3, [r1, #4]
 80087f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087f6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80087fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008804:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	fa93 f2a3 	rbit	r2, r3
 800880e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008812:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008816:	601a      	str	r2, [r3, #0]
  return result;
 8008818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800881c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008820:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008822:	fab3 f383 	clz	r3, r3
 8008826:	b2db      	uxtb	r3, r3
 8008828:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800882c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	461a      	mov	r2, r3
 8008834:	2301      	movs	r3, #1
 8008836:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008838:	f7fd f866 	bl	8005908 <HAL_GetTick>
 800883c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008840:	e009      	b.n	8008856 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008842:	f7fd f861 	bl	8005908 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b02      	cmp	r3, #2
 8008850:	d901      	bls.n	8008856 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e144      	b.n	8008ae0 <HAL_RCC_OscConfig+0x106c>
 8008856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800885a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800885e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008868:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	fa93 f2a3 	rbit	r2, r3
 8008872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008876:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800887a:	601a      	str	r2, [r3, #0]
  return result;
 800887c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008880:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008884:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008886:	fab3 f383 	clz	r3, r3
 800888a:	b2db      	uxtb	r3, r3
 800888c:	095b      	lsrs	r3, r3, #5
 800888e:	b2db      	uxtb	r3, r3
 8008890:	f043 0301 	orr.w	r3, r3, #1
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b01      	cmp	r3, #1
 8008898:	d102      	bne.n	80088a0 <HAL_RCC_OscConfig+0xe2c>
 800889a:	4b54      	ldr	r3, [pc, #336]	; (80089ec <HAL_RCC_OscConfig+0xf78>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	e027      	b.n	80088f0 <HAL_RCC_OscConfig+0xe7c>
 80088a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088a4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80088a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80088ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088b2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	fa93 f2a3 	rbit	r2, r3
 80088bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088c0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088ca:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80088ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088d8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	fa93 f2a3 	rbit	r2, r3
 80088e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088e6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	4b3f      	ldr	r3, [pc, #252]	; (80089ec <HAL_RCC_OscConfig+0xf78>)
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80088f4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80088f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80088fc:	6011      	str	r1, [r2, #0]
 80088fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008902:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8008906:	6812      	ldr	r2, [r2, #0]
 8008908:	fa92 f1a2 	rbit	r1, r2
 800890c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008910:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008914:	6011      	str	r1, [r2, #0]
  return result;
 8008916:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800891a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800891e:	6812      	ldr	r2, [r2, #0]
 8008920:	fab2 f282 	clz	r2, r2
 8008924:	b2d2      	uxtb	r2, r2
 8008926:	f042 0220 	orr.w	r2, r2, #32
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	f002 021f 	and.w	r2, r2, #31
 8008930:	2101      	movs	r1, #1
 8008932:	fa01 f202 	lsl.w	r2, r1, r2
 8008936:	4013      	ands	r3, r2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d082      	beq.n	8008842 <HAL_RCC_OscConfig+0xdce>
 800893c:	e0cf      	b.n	8008ade <HAL_RCC_OscConfig+0x106a>
 800893e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008942:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008946:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800894a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800894c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008950:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	fa93 f2a3 	rbit	r2, r3
 800895a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800895e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008962:	601a      	str	r2, [r3, #0]
  return result;
 8008964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008968:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800896c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800896e:	fab3 f383 	clz	r3, r3
 8008972:	b2db      	uxtb	r3, r3
 8008974:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008978:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	461a      	mov	r2, r3
 8008980:	2300      	movs	r3, #0
 8008982:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008984:	f7fc ffc0 	bl	8005908 <HAL_GetTick>
 8008988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800898c:	e009      	b.n	80089a2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800898e:	f7fc ffbb 	bl	8005908 <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d901      	bls.n	80089a2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e09e      	b.n	8008ae0 <HAL_RCC_OscConfig+0x106c>
 80089a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80089aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80089ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089b4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	fa93 f2a3 	rbit	r2, r3
 80089be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089c2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80089c6:	601a      	str	r2, [r3, #0]
  return result;
 80089c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089cc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80089d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80089d2:	fab3 f383 	clz	r3, r3
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	095b      	lsrs	r3, r3, #5
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	f043 0301 	orr.w	r3, r3, #1
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d104      	bne.n	80089f0 <HAL_RCC_OscConfig+0xf7c>
 80089e6:	4b01      	ldr	r3, [pc, #4]	; (80089ec <HAL_RCC_OscConfig+0xf78>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	e029      	b.n	8008a40 <HAL_RCC_OscConfig+0xfcc>
 80089ec:	40021000 	.word	0x40021000
 80089f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089f4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80089f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80089fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a02:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	fa93 f2a3 	rbit	r2, r3
 8008a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a10:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a1a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a28:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	fa93 f2a3 	rbit	r2, r3
 8008a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a36:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	4b2b      	ldr	r3, [pc, #172]	; (8008aec <HAL_RCC_OscConfig+0x1078>)
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008a44:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008a48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008a4c:	6011      	str	r1, [r2, #0]
 8008a4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008a52:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008a56:	6812      	ldr	r2, [r2, #0]
 8008a58:	fa92 f1a2 	rbit	r1, r2
 8008a5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008a60:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008a64:	6011      	str	r1, [r2, #0]
  return result;
 8008a66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008a6a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008a6e:	6812      	ldr	r2, [r2, #0]
 8008a70:	fab2 f282 	clz	r2, r2
 8008a74:	b2d2      	uxtb	r2, r2
 8008a76:	f042 0220 	orr.w	r2, r2, #32
 8008a7a:	b2d2      	uxtb	r2, r2
 8008a7c:	f002 021f 	and.w	r2, r2, #31
 8008a80:	2101      	movs	r1, #1
 8008a82:	fa01 f202 	lsl.w	r2, r1, r2
 8008a86:	4013      	ands	r3, r2
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d180      	bne.n	800898e <HAL_RCC_OscConfig+0xf1a>
 8008a8c:	e027      	b.n	8008ade <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d101      	bne.n	8008aa2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e01e      	b.n	8008ae0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008aa2:	4b12      	ldr	r3, [pc, #72]	; (8008aec <HAL_RCC_OscConfig+0x1078>)
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008aaa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008aae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ab6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d10b      	bne.n	8008ada <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008ac2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008ac6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d001      	beq.n	8008ade <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e000      	b.n	8008ae0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	40021000 	.word	0x40021000

08008af0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b09e      	sub	sp, #120	; 0x78
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d101      	bne.n	8008b08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e162      	b.n	8008dce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b08:	4b90      	ldr	r3, [pc, #576]	; (8008d4c <HAL_RCC_ClockConfig+0x25c>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0307 	and.w	r3, r3, #7
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d910      	bls.n	8008b38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b16:	4b8d      	ldr	r3, [pc, #564]	; (8008d4c <HAL_RCC_ClockConfig+0x25c>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f023 0207 	bic.w	r2, r3, #7
 8008b1e:	498b      	ldr	r1, [pc, #556]	; (8008d4c <HAL_RCC_ClockConfig+0x25c>)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b26:	4b89      	ldr	r3, [pc, #548]	; (8008d4c <HAL_RCC_ClockConfig+0x25c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d001      	beq.n	8008b38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e14a      	b.n	8008dce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d008      	beq.n	8008b56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b44:	4b82      	ldr	r3, [pc, #520]	; (8008d50 <HAL_RCC_ClockConfig+0x260>)
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	497f      	ldr	r1, [pc, #508]	; (8008d50 <HAL_RCC_ClockConfig+0x260>)
 8008b52:	4313      	orrs	r3, r2
 8008b54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f000 80dc 	beq.w	8008d1c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d13c      	bne.n	8008be6 <HAL_RCC_ClockConfig+0xf6>
 8008b6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b74:	fa93 f3a3 	rbit	r3, r3
 8008b78:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b7c:	fab3 f383 	clz	r3, r3
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	095b      	lsrs	r3, r3, #5
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	f043 0301 	orr.w	r3, r3, #1
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d102      	bne.n	8008b96 <HAL_RCC_ClockConfig+0xa6>
 8008b90:	4b6f      	ldr	r3, [pc, #444]	; (8008d50 <HAL_RCC_ClockConfig+0x260>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	e00f      	b.n	8008bb6 <HAL_RCC_ClockConfig+0xc6>
 8008b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b9e:	fa93 f3a3 	rbit	r3, r3
 8008ba2:	667b      	str	r3, [r7, #100]	; 0x64
 8008ba4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ba8:	663b      	str	r3, [r7, #96]	; 0x60
 8008baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bac:	fa93 f3a3 	rbit	r3, r3
 8008bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bb2:	4b67      	ldr	r3, [pc, #412]	; (8008d50 <HAL_RCC_ClockConfig+0x260>)
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008bba:	65ba      	str	r2, [r7, #88]	; 0x58
 8008bbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bbe:	fa92 f2a2 	rbit	r2, r2
 8008bc2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008bc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008bc6:	fab2 f282 	clz	r2, r2
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	f042 0220 	orr.w	r2, r2, #32
 8008bd0:	b2d2      	uxtb	r2, r2
 8008bd2:	f002 021f 	and.w	r2, r2, #31
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8008bdc:	4013      	ands	r3, r2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d17b      	bne.n	8008cda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e0f3      	b.n	8008dce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d13c      	bne.n	8008c68 <HAL_RCC_ClockConfig+0x178>
 8008bee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bf2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bf6:	fa93 f3a3 	rbit	r3, r3
 8008bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bfe:	fab3 f383 	clz	r3, r3
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	095b      	lsrs	r3, r3, #5
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	f043 0301 	orr.w	r3, r3, #1
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d102      	bne.n	8008c18 <HAL_RCC_ClockConfig+0x128>
 8008c12:	4b4f      	ldr	r3, [pc, #316]	; (8008d50 <HAL_RCC_ClockConfig+0x260>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	e00f      	b.n	8008c38 <HAL_RCC_ClockConfig+0x148>
 8008c18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c20:	fa93 f3a3 	rbit	r3, r3
 8008c24:	647b      	str	r3, [r7, #68]	; 0x44
 8008c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c2e:	fa93 f3a3 	rbit	r3, r3
 8008c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c34:	4b46      	ldr	r3, [pc, #280]	; (8008d50 <HAL_RCC_ClockConfig+0x260>)
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008c3c:	63ba      	str	r2, [r7, #56]	; 0x38
 8008c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c40:	fa92 f2a2 	rbit	r2, r2
 8008c44:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c48:	fab2 f282 	clz	r2, r2
 8008c4c:	b2d2      	uxtb	r2, r2
 8008c4e:	f042 0220 	orr.w	r2, r2, #32
 8008c52:	b2d2      	uxtb	r2, r2
 8008c54:	f002 021f 	and.w	r2, r2, #31
 8008c58:	2101      	movs	r1, #1
 8008c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8008c5e:	4013      	ands	r3, r2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d13a      	bne.n	8008cda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e0b2      	b.n	8008dce <HAL_RCC_ClockConfig+0x2de>
 8008c68:	2302      	movs	r3, #2
 8008c6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	fa93 f3a3 	rbit	r3, r3
 8008c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c76:	fab3 f383 	clz	r3, r3
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	095b      	lsrs	r3, r3, #5
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	f043 0301 	orr.w	r3, r3, #1
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d102      	bne.n	8008c90 <HAL_RCC_ClockConfig+0x1a0>
 8008c8a:	4b31      	ldr	r3, [pc, #196]	; (8008d50 <HAL_RCC_ClockConfig+0x260>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	e00d      	b.n	8008cac <HAL_RCC_ClockConfig+0x1bc>
 8008c90:	2302      	movs	r3, #2
 8008c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	fa93 f3a3 	rbit	r3, r3
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	623b      	str	r3, [r7, #32]
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	fa93 f3a3 	rbit	r3, r3
 8008ca6:	61fb      	str	r3, [r7, #28]
 8008ca8:	4b29      	ldr	r3, [pc, #164]	; (8008d50 <HAL_RCC_ClockConfig+0x260>)
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	2202      	movs	r2, #2
 8008cae:	61ba      	str	r2, [r7, #24]
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	fa92 f2a2 	rbit	r2, r2
 8008cb6:	617a      	str	r2, [r7, #20]
  return result;
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	fab2 f282 	clz	r2, r2
 8008cbe:	b2d2      	uxtb	r2, r2
 8008cc0:	f042 0220 	orr.w	r2, r2, #32
 8008cc4:	b2d2      	uxtb	r2, r2
 8008cc6:	f002 021f 	and.w	r2, r2, #31
 8008cca:	2101      	movs	r1, #1
 8008ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e079      	b.n	8008dce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cda:	4b1d      	ldr	r3, [pc, #116]	; (8008d50 <HAL_RCC_ClockConfig+0x260>)
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f023 0203 	bic.w	r2, r3, #3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	491a      	ldr	r1, [pc, #104]	; (8008d50 <HAL_RCC_ClockConfig+0x260>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008cec:	f7fc fe0c 	bl	8005908 <HAL_GetTick>
 8008cf0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cf2:	e00a      	b.n	8008d0a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cf4:	f7fc fe08 	bl	8005908 <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e061      	b.n	8008dce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d0a:	4b11      	ldr	r3, [pc, #68]	; (8008d50 <HAL_RCC_ClockConfig+0x260>)
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f003 020c 	and.w	r2, r3, #12
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d1eb      	bne.n	8008cf4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d1c:	4b0b      	ldr	r3, [pc, #44]	; (8008d4c <HAL_RCC_ClockConfig+0x25c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0307 	and.w	r3, r3, #7
 8008d24:	683a      	ldr	r2, [r7, #0]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d214      	bcs.n	8008d54 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d2a:	4b08      	ldr	r3, [pc, #32]	; (8008d4c <HAL_RCC_ClockConfig+0x25c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f023 0207 	bic.w	r2, r3, #7
 8008d32:	4906      	ldr	r1, [pc, #24]	; (8008d4c <HAL_RCC_ClockConfig+0x25c>)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d3a:	4b04      	ldr	r3, [pc, #16]	; (8008d4c <HAL_RCC_ClockConfig+0x25c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0307 	and.w	r3, r3, #7
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d005      	beq.n	8008d54 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e040      	b.n	8008dce <HAL_RCC_ClockConfig+0x2de>
 8008d4c:	40022000 	.word	0x40022000
 8008d50:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0304 	and.w	r3, r3, #4
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d008      	beq.n	8008d72 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d60:	4b1d      	ldr	r3, [pc, #116]	; (8008dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	491a      	ldr	r1, [pc, #104]	; (8008dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0308 	and.w	r3, r3, #8
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d009      	beq.n	8008d92 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d7e:	4b16      	ldr	r3, [pc, #88]	; (8008dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	4912      	ldr	r1, [pc, #72]	; (8008dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008d92:	f000 f829 	bl	8008de8 <HAL_RCC_GetSysClockFreq>
 8008d96:	4601      	mov	r1, r0
 8008d98:	4b0f      	ldr	r3, [pc, #60]	; (8008dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008da0:	22f0      	movs	r2, #240	; 0xf0
 8008da2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	fa92 f2a2 	rbit	r2, r2
 8008daa:	60fa      	str	r2, [r7, #12]
  return result;
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	fab2 f282 	clz	r2, r2
 8008db2:	b2d2      	uxtb	r2, r2
 8008db4:	40d3      	lsrs	r3, r2
 8008db6:	4a09      	ldr	r2, [pc, #36]	; (8008ddc <HAL_RCC_ClockConfig+0x2ec>)
 8008db8:	5cd3      	ldrb	r3, [r2, r3]
 8008dba:	fa21 f303 	lsr.w	r3, r1, r3
 8008dbe:	4a08      	ldr	r2, [pc, #32]	; (8008de0 <HAL_RCC_ClockConfig+0x2f0>)
 8008dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008dc2:	4b08      	ldr	r3, [pc, #32]	; (8008de4 <HAL_RCC_ClockConfig+0x2f4>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fc fd5a 	bl	8005880 <HAL_InitTick>
  
  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3778      	adds	r7, #120	; 0x78
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	40021000 	.word	0x40021000
 8008ddc:	0800da10 	.word	0x0800da10
 8008de0:	20000134 	.word	0x20000134
 8008de4:	20000138 	.word	0x20000138

08008de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b08b      	sub	sp, #44	; 0x2c
 8008dec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008dee:	2300      	movs	r3, #0
 8008df0:	61fb      	str	r3, [r7, #28]
 8008df2:	2300      	movs	r3, #0
 8008df4:	61bb      	str	r3, [r7, #24]
 8008df6:	2300      	movs	r3, #0
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008e02:	4b29      	ldr	r3, [pc, #164]	; (8008ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	f003 030c 	and.w	r3, r3, #12
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d002      	beq.n	8008e18 <HAL_RCC_GetSysClockFreq+0x30>
 8008e12:	2b08      	cmp	r3, #8
 8008e14:	d003      	beq.n	8008e1e <HAL_RCC_GetSysClockFreq+0x36>
 8008e16:	e03c      	b.n	8008e92 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008e18:	4b24      	ldr	r3, [pc, #144]	; (8008eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8008e1a:	623b      	str	r3, [r7, #32]
      break;
 8008e1c:	e03c      	b.n	8008e98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008e24:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008e28:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	fa92 f2a2 	rbit	r2, r2
 8008e30:	607a      	str	r2, [r7, #4]
  return result;
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	fab2 f282 	clz	r2, r2
 8008e38:	b2d2      	uxtb	r2, r2
 8008e3a:	40d3      	lsrs	r3, r2
 8008e3c:	4a1c      	ldr	r2, [pc, #112]	; (8008eb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008e3e:	5cd3      	ldrb	r3, [r2, r3]
 8008e40:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008e42:	4b19      	ldr	r3, [pc, #100]	; (8008ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e46:	f003 030f 	and.w	r3, r3, #15
 8008e4a:	220f      	movs	r2, #15
 8008e4c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	fa92 f2a2 	rbit	r2, r2
 8008e54:	60fa      	str	r2, [r7, #12]
  return result;
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	fab2 f282 	clz	r2, r2
 8008e5c:	b2d2      	uxtb	r2, r2
 8008e5e:	40d3      	lsrs	r3, r2
 8008e60:	4a14      	ldr	r2, [pc, #80]	; (8008eb4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008e62:	5cd3      	ldrb	r3, [r2, r3]
 8008e64:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d008      	beq.n	8008e82 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008e70:	4a0e      	ldr	r2, [pc, #56]	; (8008eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	fb02 f303 	mul.w	r3, r2, r3
 8008e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e80:	e004      	b.n	8008e8c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	4a0c      	ldr	r2, [pc, #48]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008e86:	fb02 f303 	mul.w	r3, r2, r3
 8008e8a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8e:	623b      	str	r3, [r7, #32]
      break;
 8008e90:	e002      	b.n	8008e98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008e92:	4b06      	ldr	r3, [pc, #24]	; (8008eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8008e94:	623b      	str	r3, [r7, #32]
      break;
 8008e96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e98:	6a3b      	ldr	r3, [r7, #32]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	372c      	adds	r7, #44	; 0x2c
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	40021000 	.word	0x40021000
 8008eac:	007a1200 	.word	0x007a1200
 8008eb0:	0800da28 	.word	0x0800da28
 8008eb4:	0800da38 	.word	0x0800da38
 8008eb8:	003d0900 	.word	0x003d0900

08008ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ec0:	4b03      	ldr	r3, [pc, #12]	; (8008ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	20000134 	.word	0x20000134

08008ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008eda:	f7ff ffef 	bl	8008ebc <HAL_RCC_GetHCLKFreq>
 8008ede:	4601      	mov	r1, r0
 8008ee0:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ee8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008eec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	fa92 f2a2 	rbit	r2, r2
 8008ef4:	603a      	str	r2, [r7, #0]
  return result;
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	fab2 f282 	clz	r2, r2
 8008efc:	b2d2      	uxtb	r2, r2
 8008efe:	40d3      	lsrs	r3, r2
 8008f00:	4a04      	ldr	r2, [pc, #16]	; (8008f14 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008f02:	5cd3      	ldrb	r3, [r2, r3]
 8008f04:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	40021000 	.word	0x40021000
 8008f14:	0800da20 	.word	0x0800da20

08008f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008f1e:	f7ff ffcd 	bl	8008ebc <HAL_RCC_GetHCLKFreq>
 8008f22:	4601      	mov	r1, r0
 8008f24:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008f2c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008f30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	fa92 f2a2 	rbit	r2, r2
 8008f38:	603a      	str	r2, [r7, #0]
  return result;
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	fab2 f282 	clz	r2, r2
 8008f40:	b2d2      	uxtb	r2, r2
 8008f42:	40d3      	lsrs	r3, r2
 8008f44:	4a04      	ldr	r2, [pc, #16]	; (8008f58 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008f46:	5cd3      	ldrb	r3, [r2, r3]
 8008f48:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	40021000 	.word	0x40021000
 8008f58:	0800da20 	.word	0x0800da20

08008f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b092      	sub	sp, #72	; 0x48
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 80d4 	beq.w	8009128 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f80:	4b4e      	ldr	r3, [pc, #312]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10e      	bne.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f8c:	4b4b      	ldr	r3, [pc, #300]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	4a4a      	ldr	r2, [pc, #296]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f96:	61d3      	str	r3, [r2, #28]
 8008f98:	4b48      	ldr	r3, [pc, #288]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fa0:	60bb      	str	r3, [r7, #8]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008faa:	4b45      	ldr	r3, [pc, #276]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d118      	bne.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008fb6:	4b42      	ldr	r3, [pc, #264]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a41      	ldr	r2, [pc, #260]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fc2:	f7fc fca1 	bl	8005908 <HAL_GetTick>
 8008fc6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fc8:	e008      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fca:	f7fc fc9d 	bl	8005908 <HAL_GetTick>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	2b64      	cmp	r3, #100	; 0x64
 8008fd6:	d901      	bls.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e169      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fdc:	4b38      	ldr	r3, [pc, #224]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d0f0      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008fe8:	4b34      	ldr	r3, [pc, #208]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 8084 	beq.w	8009102 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009002:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009004:	429a      	cmp	r2, r3
 8009006:	d07c      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009008:	4b2c      	ldr	r3, [pc, #176]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009016:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901a:	fa93 f3a3 	rbit	r3, r3
 800901e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009022:	fab3 f383 	clz	r3, r3
 8009026:	b2db      	uxtb	r3, r3
 8009028:	461a      	mov	r2, r3
 800902a:	4b26      	ldr	r3, [pc, #152]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800902c:	4413      	add	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	461a      	mov	r2, r3
 8009032:	2301      	movs	r3, #1
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800903a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800903c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903e:	fa93 f3a3 	rbit	r3, r3
 8009042:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009046:	fab3 f383 	clz	r3, r3
 800904a:	b2db      	uxtb	r3, r3
 800904c:	461a      	mov	r2, r3
 800904e:	4b1d      	ldr	r3, [pc, #116]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009050:	4413      	add	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	461a      	mov	r2, r3
 8009056:	2300      	movs	r3, #0
 8009058:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800905a:	4a18      	ldr	r2, [pc, #96]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800905c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	2b00      	cmp	r3, #0
 8009068:	d04b      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800906a:	f7fc fc4d 	bl	8005908 <HAL_GetTick>
 800906e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009070:	e00a      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009072:	f7fc fc49 	bl	8005908 <HAL_GetTick>
 8009076:	4602      	mov	r2, r0
 8009078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009080:	4293      	cmp	r3, r2
 8009082:	d901      	bls.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e113      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8009088:	2302      	movs	r3, #2
 800908a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	fa93 f3a3 	rbit	r3, r3
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
 8009094:	2302      	movs	r3, #2
 8009096:	623b      	str	r3, [r7, #32]
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	fa93 f3a3 	rbit	r3, r3
 800909e:	61fb      	str	r3, [r7, #28]
  return result;
 80090a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090a2:	fab3 f383 	clz	r3, r3
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	095b      	lsrs	r3, r3, #5
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	f043 0302 	orr.w	r3, r3, #2
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d108      	bne.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80090b6:	4b01      	ldr	r3, [pc, #4]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	e00d      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80090bc:	40021000 	.word	0x40021000
 80090c0:	40007000 	.word	0x40007000
 80090c4:	10908100 	.word	0x10908100
 80090c8:	2302      	movs	r3, #2
 80090ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	fa93 f3a3 	rbit	r3, r3
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	4b78      	ldr	r3, [pc, #480]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d8:	2202      	movs	r2, #2
 80090da:	613a      	str	r2, [r7, #16]
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	fa92 f2a2 	rbit	r2, r2
 80090e2:	60fa      	str	r2, [r7, #12]
  return result;
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	fab2 f282 	clz	r2, r2
 80090ea:	b2d2      	uxtb	r2, r2
 80090ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090f0:	b2d2      	uxtb	r2, r2
 80090f2:	f002 021f 	and.w	r2, r2, #31
 80090f6:	2101      	movs	r1, #1
 80090f8:	fa01 f202 	lsl.w	r2, r1, r2
 80090fc:	4013      	ands	r3, r2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0b7      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009102:	4b6d      	ldr	r3, [pc, #436]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	496a      	ldr	r1, [pc, #424]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009110:	4313      	orrs	r3, r2
 8009112:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009114:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009118:	2b01      	cmp	r3, #1
 800911a:	d105      	bne.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800911c:	4b66      	ldr	r3, [pc, #408]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800911e:	69db      	ldr	r3, [r3, #28]
 8009120:	4a65      	ldr	r2, [pc, #404]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009126:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	2b00      	cmp	r3, #0
 8009132:	d008      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009134:	4b60      	ldr	r3, [pc, #384]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009138:	f023 0203 	bic.w	r2, r3, #3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	495d      	ldr	r1, [pc, #372]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009142:	4313      	orrs	r3, r2
 8009144:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d008      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009152:	4b59      	ldr	r3, [pc, #356]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009156:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	4956      	ldr	r1, [pc, #344]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009160:	4313      	orrs	r3, r2
 8009162:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 0304 	and.w	r3, r3, #4
 800916c:	2b00      	cmp	r3, #0
 800916e:	d008      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009170:	4b51      	ldr	r3, [pc, #324]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009174:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	494e      	ldr	r1, [pc, #312]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800917e:	4313      	orrs	r3, r2
 8009180:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0320 	and.w	r3, r3, #32
 800918a:	2b00      	cmp	r3, #0
 800918c:	d008      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800918e:	4b4a      	ldr	r3, [pc, #296]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009192:	f023 0210 	bic.w	r2, r3, #16
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	4947      	ldr	r1, [pc, #284]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800919c:	4313      	orrs	r3, r2
 800919e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d008      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80091ac:	4b42      	ldr	r3, [pc, #264]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b8:	493f      	ldr	r1, [pc, #252]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d008      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80091ca:	4b3b      	ldr	r3, [pc, #236]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80091cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ce:	f023 0220 	bic.w	r2, r3, #32
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	4938      	ldr	r1, [pc, #224]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80091d8:	4313      	orrs	r3, r2
 80091da:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d008      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80091e8:	4b33      	ldr	r3, [pc, #204]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80091ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	695b      	ldr	r3, [r3, #20]
 80091f4:	4930      	ldr	r1, [pc, #192]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80091f6:	4313      	orrs	r3, r2
 80091f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0310 	and.w	r3, r3, #16
 8009202:	2b00      	cmp	r3, #0
 8009204:	d008      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009206:	4b2c      	ldr	r3, [pc, #176]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	4929      	ldr	r1, [pc, #164]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009214:	4313      	orrs	r3, r2
 8009216:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009220:	2b00      	cmp	r3, #0
 8009222:	d008      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009224:	4b24      	ldr	r3, [pc, #144]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	4921      	ldr	r1, [pc, #132]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009232:	4313      	orrs	r3, r2
 8009234:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800923e:	2b00      	cmp	r3, #0
 8009240:	d008      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009242:	4b1d      	ldr	r3, [pc, #116]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009246:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	491a      	ldr	r1, [pc, #104]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009250:	4313      	orrs	r3, r2
 8009252:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800925c:	2b00      	cmp	r3, #0
 800925e:	d008      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8009260:	4b15      	ldr	r3, [pc, #84]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009264:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926c:	4912      	ldr	r1, [pc, #72]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800926e:	4313      	orrs	r3, r2
 8009270:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d008      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800927e:	4b0e      	ldr	r3, [pc, #56]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928a:	490b      	ldr	r1, [pc, #44]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800928c:	4313      	orrs	r3, r2
 800928e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d008      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800929c:	4b06      	ldr	r3, [pc, #24]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800929e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a8:	4903      	ldr	r1, [pc, #12]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80092aa:	4313      	orrs	r3, r2
 80092ac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3748      	adds	r7, #72	; 0x48
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	40021000 	.word	0x40021000

080092bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e09d      	b.n	800940a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d108      	bne.n	80092e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092de:	d009      	beq.n	80092f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	61da      	str	r2, [r3, #28]
 80092e6:	e005      	b.n	80092f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	d106      	bne.n	8009314 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7f8 fd64 	bl	8001ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2202      	movs	r2, #2
 8009318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800932a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009334:	d902      	bls.n	800933c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009336:	2300      	movs	r3, #0
 8009338:	60fb      	str	r3, [r7, #12]
 800933a:	e002      	b.n	8009342 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800933c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009340:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800934a:	d007      	beq.n	800935c <HAL_SPI_Init+0xa0>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009354:	d002      	beq.n	800935c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800936c:	431a      	orrs	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	431a      	orrs	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	431a      	orrs	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009394:	431a      	orrs	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800939e:	ea42 0103 	orr.w	r1, r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	0c1b      	lsrs	r3, r3, #16
 80093b8:	f003 0204 	and.w	r2, r3, #4
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	f003 0310 	and.w	r3, r3, #16
 80093c4:	431a      	orrs	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ca:	f003 0308 	and.w	r3, r3, #8
 80093ce:	431a      	orrs	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80093d8:	ea42 0103 	orr.w	r1, r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69da      	ldr	r2, [r3, #28]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d101      	bne.n	8009424 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e049      	b.n	80094b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	d106      	bne.n	800943e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7f8 fd11 	bl	8001e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2202      	movs	r2, #2
 8009442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	3304      	adds	r3, #4
 800944e:	4619      	mov	r1, r3
 8009450:	4610      	mov	r0, r2
 8009452:	f000 fd31 	bl	8009eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2201      	movs	r2, #1
 8009472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2201      	movs	r2, #1
 800948a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d001      	beq.n	80094d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e04a      	b.n	800956e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2202      	movs	r2, #2
 80094dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68da      	ldr	r2, [r3, #12]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f042 0201 	orr.w	r2, r2, #1
 80094ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a21      	ldr	r2, [pc, #132]	; (800957c <HAL_TIM_Base_Start_IT+0xbc>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d018      	beq.n	800952c <HAL_TIM_Base_Start_IT+0x6c>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009502:	d013      	beq.n	800952c <HAL_TIM_Base_Start_IT+0x6c>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a1d      	ldr	r2, [pc, #116]	; (8009580 <HAL_TIM_Base_Start_IT+0xc0>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d00e      	beq.n	800952c <HAL_TIM_Base_Start_IT+0x6c>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a1c      	ldr	r2, [pc, #112]	; (8009584 <HAL_TIM_Base_Start_IT+0xc4>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d009      	beq.n	800952c <HAL_TIM_Base_Start_IT+0x6c>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a1a      	ldr	r2, [pc, #104]	; (8009588 <HAL_TIM_Base_Start_IT+0xc8>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d004      	beq.n	800952c <HAL_TIM_Base_Start_IT+0x6c>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a19      	ldr	r2, [pc, #100]	; (800958c <HAL_TIM_Base_Start_IT+0xcc>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d115      	bne.n	8009558 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	689a      	ldr	r2, [r3, #8]
 8009532:	4b17      	ldr	r3, [pc, #92]	; (8009590 <HAL_TIM_Base_Start_IT+0xd0>)
 8009534:	4013      	ands	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2b06      	cmp	r3, #6
 800953c:	d015      	beq.n	800956a <HAL_TIM_Base_Start_IT+0xaa>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009544:	d011      	beq.n	800956a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f042 0201 	orr.w	r2, r2, #1
 8009554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009556:	e008      	b.n	800956a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f042 0201 	orr.w	r2, r2, #1
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	e000      	b.n	800956c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800956a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3714      	adds	r7, #20
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	40012c00 	.word	0x40012c00
 8009580:	40000400 	.word	0x40000400
 8009584:	40000800 	.word	0x40000800
 8009588:	40013400 	.word	0x40013400
 800958c:	40014000 	.word	0x40014000
 8009590:	00010007 	.word	0x00010007

08009594 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e049      	b.n	800963a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d106      	bne.n	80095c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f841 	bl	8009642 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2202      	movs	r2, #2
 80095c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3304      	adds	r3, #4
 80095d0:	4619      	mov	r1, r3
 80095d2:	4610      	mov	r0, r2
 80095d4:	f000 fc70 	bl	8009eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009642:	b480      	push	{r7}
 8009644:	b083      	sub	sp, #12
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800964a:	bf00      	nop
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
	...

08009658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d109      	bne.n	800967c <HAL_TIM_PWM_Start+0x24>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b01      	cmp	r3, #1
 8009672:	bf14      	ite	ne
 8009674:	2301      	movne	r3, #1
 8009676:	2300      	moveq	r3, #0
 8009678:	b2db      	uxtb	r3, r3
 800967a:	e03c      	b.n	80096f6 <HAL_TIM_PWM_Start+0x9e>
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	2b04      	cmp	r3, #4
 8009680:	d109      	bne.n	8009696 <HAL_TIM_PWM_Start+0x3e>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b01      	cmp	r3, #1
 800968c:	bf14      	ite	ne
 800968e:	2301      	movne	r3, #1
 8009690:	2300      	moveq	r3, #0
 8009692:	b2db      	uxtb	r3, r3
 8009694:	e02f      	b.n	80096f6 <HAL_TIM_PWM_Start+0x9e>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b08      	cmp	r3, #8
 800969a:	d109      	bne.n	80096b0 <HAL_TIM_PWM_Start+0x58>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	bf14      	ite	ne
 80096a8:	2301      	movne	r3, #1
 80096aa:	2300      	moveq	r3, #0
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	e022      	b.n	80096f6 <HAL_TIM_PWM_Start+0x9e>
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b0c      	cmp	r3, #12
 80096b4:	d109      	bne.n	80096ca <HAL_TIM_PWM_Start+0x72>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	2b01      	cmp	r3, #1
 80096c0:	bf14      	ite	ne
 80096c2:	2301      	movne	r3, #1
 80096c4:	2300      	moveq	r3, #0
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	e015      	b.n	80096f6 <HAL_TIM_PWM_Start+0x9e>
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b10      	cmp	r3, #16
 80096ce:	d109      	bne.n	80096e4 <HAL_TIM_PWM_Start+0x8c>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b01      	cmp	r3, #1
 80096da:	bf14      	ite	ne
 80096dc:	2301      	movne	r3, #1
 80096de:	2300      	moveq	r3, #0
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	e008      	b.n	80096f6 <HAL_TIM_PWM_Start+0x9e>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	bf14      	ite	ne
 80096f0:	2301      	movne	r3, #1
 80096f2:	2300      	moveq	r3, #0
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e097      	b.n	800982e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d104      	bne.n	800970e <HAL_TIM_PWM_Start+0xb6>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2202      	movs	r2, #2
 8009708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800970c:	e023      	b.n	8009756 <HAL_TIM_PWM_Start+0xfe>
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b04      	cmp	r3, #4
 8009712:	d104      	bne.n	800971e <HAL_TIM_PWM_Start+0xc6>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800971c:	e01b      	b.n	8009756 <HAL_TIM_PWM_Start+0xfe>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2b08      	cmp	r3, #8
 8009722:	d104      	bne.n	800972e <HAL_TIM_PWM_Start+0xd6>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2202      	movs	r2, #2
 8009728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800972c:	e013      	b.n	8009756 <HAL_TIM_PWM_Start+0xfe>
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2b0c      	cmp	r3, #12
 8009732:	d104      	bne.n	800973e <HAL_TIM_PWM_Start+0xe6>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800973c:	e00b      	b.n	8009756 <HAL_TIM_PWM_Start+0xfe>
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b10      	cmp	r3, #16
 8009742:	d104      	bne.n	800974e <HAL_TIM_PWM_Start+0xf6>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2202      	movs	r2, #2
 8009748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800974c:	e003      	b.n	8009756 <HAL_TIM_PWM_Start+0xfe>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2202      	movs	r2, #2
 8009752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2201      	movs	r2, #1
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 ffaa 	bl	800a6b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a33      	ldr	r2, [pc, #204]	; (8009838 <HAL_TIM_PWM_Start+0x1e0>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d013      	beq.n	8009796 <HAL_TIM_PWM_Start+0x13e>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a32      	ldr	r2, [pc, #200]	; (800983c <HAL_TIM_PWM_Start+0x1e4>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00e      	beq.n	8009796 <HAL_TIM_PWM_Start+0x13e>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a30      	ldr	r2, [pc, #192]	; (8009840 <HAL_TIM_PWM_Start+0x1e8>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d009      	beq.n	8009796 <HAL_TIM_PWM_Start+0x13e>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a2f      	ldr	r2, [pc, #188]	; (8009844 <HAL_TIM_PWM_Start+0x1ec>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d004      	beq.n	8009796 <HAL_TIM_PWM_Start+0x13e>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a2d      	ldr	r2, [pc, #180]	; (8009848 <HAL_TIM_PWM_Start+0x1f0>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d101      	bne.n	800979a <HAL_TIM_PWM_Start+0x142>
 8009796:	2301      	movs	r3, #1
 8009798:	e000      	b.n	800979c <HAL_TIM_PWM_Start+0x144>
 800979a:	2300      	movs	r3, #0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d007      	beq.n	80097b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a20      	ldr	r2, [pc, #128]	; (8009838 <HAL_TIM_PWM_Start+0x1e0>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d018      	beq.n	80097ec <HAL_TIM_PWM_Start+0x194>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c2:	d013      	beq.n	80097ec <HAL_TIM_PWM_Start+0x194>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a20      	ldr	r2, [pc, #128]	; (800984c <HAL_TIM_PWM_Start+0x1f4>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d00e      	beq.n	80097ec <HAL_TIM_PWM_Start+0x194>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a1f      	ldr	r2, [pc, #124]	; (8009850 <HAL_TIM_PWM_Start+0x1f8>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d009      	beq.n	80097ec <HAL_TIM_PWM_Start+0x194>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a17      	ldr	r2, [pc, #92]	; (800983c <HAL_TIM_PWM_Start+0x1e4>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d004      	beq.n	80097ec <HAL_TIM_PWM_Start+0x194>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a16      	ldr	r2, [pc, #88]	; (8009840 <HAL_TIM_PWM_Start+0x1e8>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d115      	bne.n	8009818 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	689a      	ldr	r2, [r3, #8]
 80097f2:	4b18      	ldr	r3, [pc, #96]	; (8009854 <HAL_TIM_PWM_Start+0x1fc>)
 80097f4:	4013      	ands	r3, r2
 80097f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2b06      	cmp	r3, #6
 80097fc:	d015      	beq.n	800982a <HAL_TIM_PWM_Start+0x1d2>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009804:	d011      	beq.n	800982a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f042 0201 	orr.w	r2, r2, #1
 8009814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009816:	e008      	b.n	800982a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0201 	orr.w	r2, r2, #1
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	e000      	b.n	800982c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800982a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	40012c00 	.word	0x40012c00
 800983c:	40013400 	.word	0x40013400
 8009840:	40014000 	.word	0x40014000
 8009844:	40014400 	.word	0x40014400
 8009848:	40014800 	.word	0x40014800
 800984c:	40000400 	.word	0x40000400
 8009850:	40000800 	.word	0x40000800
 8009854:	00010007 	.word	0x00010007

08009858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b02      	cmp	r3, #2
 800986c:	d122      	bne.n	80098b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	f003 0302 	and.w	r3, r3, #2
 8009878:	2b02      	cmp	r3, #2
 800987a:	d11b      	bne.n	80098b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f06f 0202 	mvn.w	r2, #2
 8009884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	f003 0303 	and.w	r3, r3, #3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 faed 	bl	8009e7a <HAL_TIM_IC_CaptureCallback>
 80098a0:	e005      	b.n	80098ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fadf 	bl	8009e66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 faf0 	bl	8009e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b04      	cmp	r3, #4
 80098c0:	d122      	bne.n	8009908 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b04      	cmp	r3, #4
 80098ce:	d11b      	bne.n	8009908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f06f 0204 	mvn.w	r2, #4
 80098d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2202      	movs	r2, #2
 80098de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fac3 	bl	8009e7a <HAL_TIM_IC_CaptureCallback>
 80098f4:	e005      	b.n	8009902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fab5 	bl	8009e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fac6 	bl	8009e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	f003 0308 	and.w	r3, r3, #8
 8009912:	2b08      	cmp	r3, #8
 8009914:	d122      	bne.n	800995c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	f003 0308 	and.w	r3, r3, #8
 8009920:	2b08      	cmp	r3, #8
 8009922:	d11b      	bne.n	800995c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f06f 0208 	mvn.w	r2, #8
 800992c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2204      	movs	r2, #4
 8009932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	f003 0303 	and.w	r3, r3, #3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fa99 	bl	8009e7a <HAL_TIM_IC_CaptureCallback>
 8009948:	e005      	b.n	8009956 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fa8b 	bl	8009e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fa9c 	bl	8009e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	f003 0310 	and.w	r3, r3, #16
 8009966:	2b10      	cmp	r3, #16
 8009968:	d122      	bne.n	80099b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	f003 0310 	and.w	r3, r3, #16
 8009974:	2b10      	cmp	r3, #16
 8009976:	d11b      	bne.n	80099b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f06f 0210 	mvn.w	r2, #16
 8009980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2208      	movs	r2, #8
 8009986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	69db      	ldr	r3, [r3, #28]
 800998e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fa6f 	bl	8009e7a <HAL_TIM_IC_CaptureCallback>
 800999c:	e005      	b.n	80099aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fa61 	bl	8009e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fa72 	bl	8009e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d10e      	bne.n	80099dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	f003 0301 	and.w	r3, r3, #1
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d107      	bne.n	80099dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f06f 0201 	mvn.w	r2, #1
 80099d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fa3b 	bl	8009e52 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e6:	2b80      	cmp	r3, #128	; 0x80
 80099e8:	d10e      	bne.n	8009a08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099f4:	2b80      	cmp	r3, #128	; 0x80
 80099f6:	d107      	bne.n	8009a08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 ff08 	bl	800a818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a16:	d10e      	bne.n	8009a36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a22:	2b80      	cmp	r3, #128	; 0x80
 8009a24:	d107      	bne.n	8009a36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fefb 	bl	800a82c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a40:	2b40      	cmp	r3, #64	; 0x40
 8009a42:	d10e      	bne.n	8009a62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4e:	2b40      	cmp	r3, #64	; 0x40
 8009a50:	d107      	bne.n	8009a62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fa20 	bl	8009ea2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	f003 0320 	and.w	r3, r3, #32
 8009a6c:	2b20      	cmp	r3, #32
 8009a6e:	d10e      	bne.n	8009a8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f003 0320 	and.w	r3, r3, #32
 8009a7a:	2b20      	cmp	r3, #32
 8009a7c:	d107      	bne.n	8009a8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f06f 0220 	mvn.w	r2, #32
 8009a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 febb 	bl	800a804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a8e:	bf00      	nop
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
	...

08009a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d101      	bne.n	8009ab6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	e0ff      	b.n	8009cb6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b14      	cmp	r3, #20
 8009ac2:	f200 80f0 	bhi.w	8009ca6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009ac6:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009b21 	.word	0x08009b21
 8009ad0:	08009ca7 	.word	0x08009ca7
 8009ad4:	08009ca7 	.word	0x08009ca7
 8009ad8:	08009ca7 	.word	0x08009ca7
 8009adc:	08009b61 	.word	0x08009b61
 8009ae0:	08009ca7 	.word	0x08009ca7
 8009ae4:	08009ca7 	.word	0x08009ca7
 8009ae8:	08009ca7 	.word	0x08009ca7
 8009aec:	08009ba3 	.word	0x08009ba3
 8009af0:	08009ca7 	.word	0x08009ca7
 8009af4:	08009ca7 	.word	0x08009ca7
 8009af8:	08009ca7 	.word	0x08009ca7
 8009afc:	08009be3 	.word	0x08009be3
 8009b00:	08009ca7 	.word	0x08009ca7
 8009b04:	08009ca7 	.word	0x08009ca7
 8009b08:	08009ca7 	.word	0x08009ca7
 8009b0c:	08009c25 	.word	0x08009c25
 8009b10:	08009ca7 	.word	0x08009ca7
 8009b14:	08009ca7 	.word	0x08009ca7
 8009b18:	08009ca7 	.word	0x08009ca7
 8009b1c:	08009c65 	.word	0x08009c65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68b9      	ldr	r1, [r7, #8]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 fa56 	bl	8009fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	699a      	ldr	r2, [r3, #24]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f042 0208 	orr.w	r2, r2, #8
 8009b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	699a      	ldr	r2, [r3, #24]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f022 0204 	bic.w	r2, r2, #4
 8009b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6999      	ldr	r1, [r3, #24]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	691a      	ldr	r2, [r3, #16]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	619a      	str	r2, [r3, #24]
      break;
 8009b5e:	e0a5      	b.n	8009cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68b9      	ldr	r1, [r7, #8]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fac6 	bl	800a0f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	699a      	ldr	r2, [r3, #24]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	699a      	ldr	r2, [r3, #24]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6999      	ldr	r1, [r3, #24]
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	021a      	lsls	r2, r3, #8
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	430a      	orrs	r2, r1
 8009b9e:	619a      	str	r2, [r3, #24]
      break;
 8009ba0:	e084      	b.n	8009cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68b9      	ldr	r1, [r7, #8]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fb2f 	bl	800a20c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	69da      	ldr	r2, [r3, #28]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f042 0208 	orr.w	r2, r2, #8
 8009bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	69da      	ldr	r2, [r3, #28]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f022 0204 	bic.w	r2, r2, #4
 8009bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69d9      	ldr	r1, [r3, #28]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	691a      	ldr	r2, [r3, #16]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	61da      	str	r2, [r3, #28]
      break;
 8009be0:	e064      	b.n	8009cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68b9      	ldr	r1, [r7, #8]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 fb97 	bl	800a31c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	69da      	ldr	r2, [r3, #28]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	69da      	ldr	r2, [r3, #28]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	69d9      	ldr	r1, [r3, #28]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	021a      	lsls	r2, r3, #8
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	430a      	orrs	r2, r1
 8009c20:	61da      	str	r2, [r3, #28]
      break;
 8009c22:	e043      	b.n	8009cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68b9      	ldr	r1, [r7, #8]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 fbe0 	bl	800a3f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f042 0208 	orr.w	r2, r2, #8
 8009c3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f022 0204 	bic.w	r2, r2, #4
 8009c4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	691a      	ldr	r2, [r3, #16]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009c62:	e023      	b.n	8009cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68b9      	ldr	r1, [r7, #8]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 fc24 	bl	800a4b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	021a      	lsls	r2, r3, #8
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	430a      	orrs	r2, r1
 8009ca2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ca4:	e002      	b.n	8009cac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8009caa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3718      	adds	r7, #24
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop

08009cc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d101      	bne.n	8009cdc <HAL_TIM_ConfigClockSource+0x1c>
 8009cd8:	2302      	movs	r3, #2
 8009cda:	e0b6      	b.n	8009e4a <HAL_TIM_ConfigClockSource+0x18a>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d18:	d03e      	beq.n	8009d98 <HAL_TIM_ConfigClockSource+0xd8>
 8009d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d1e:	f200 8087 	bhi.w	8009e30 <HAL_TIM_ConfigClockSource+0x170>
 8009d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d26:	f000 8086 	beq.w	8009e36 <HAL_TIM_ConfigClockSource+0x176>
 8009d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d2e:	d87f      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x170>
 8009d30:	2b70      	cmp	r3, #112	; 0x70
 8009d32:	d01a      	beq.n	8009d6a <HAL_TIM_ConfigClockSource+0xaa>
 8009d34:	2b70      	cmp	r3, #112	; 0x70
 8009d36:	d87b      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x170>
 8009d38:	2b60      	cmp	r3, #96	; 0x60
 8009d3a:	d050      	beq.n	8009dde <HAL_TIM_ConfigClockSource+0x11e>
 8009d3c:	2b60      	cmp	r3, #96	; 0x60
 8009d3e:	d877      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x170>
 8009d40:	2b50      	cmp	r3, #80	; 0x50
 8009d42:	d03c      	beq.n	8009dbe <HAL_TIM_ConfigClockSource+0xfe>
 8009d44:	2b50      	cmp	r3, #80	; 0x50
 8009d46:	d873      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x170>
 8009d48:	2b40      	cmp	r3, #64	; 0x40
 8009d4a:	d058      	beq.n	8009dfe <HAL_TIM_ConfigClockSource+0x13e>
 8009d4c:	2b40      	cmp	r3, #64	; 0x40
 8009d4e:	d86f      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x170>
 8009d50:	2b30      	cmp	r3, #48	; 0x30
 8009d52:	d064      	beq.n	8009e1e <HAL_TIM_ConfigClockSource+0x15e>
 8009d54:	2b30      	cmp	r3, #48	; 0x30
 8009d56:	d86b      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x170>
 8009d58:	2b20      	cmp	r3, #32
 8009d5a:	d060      	beq.n	8009e1e <HAL_TIM_ConfigClockSource+0x15e>
 8009d5c:	2b20      	cmp	r3, #32
 8009d5e:	d867      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x170>
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d05c      	beq.n	8009e1e <HAL_TIM_ConfigClockSource+0x15e>
 8009d64:	2b10      	cmp	r3, #16
 8009d66:	d05a      	beq.n	8009e1e <HAL_TIM_ConfigClockSource+0x15e>
 8009d68:	e062      	b.n	8009e30 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6818      	ldr	r0, [r3, #0]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	6899      	ldr	r1, [r3, #8]
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	f000 fc7d 	bl	800a678 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	609a      	str	r2, [r3, #8]
      break;
 8009d96:	e04f      	b.n	8009e38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6818      	ldr	r0, [r3, #0]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	6899      	ldr	r1, [r3, #8]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	685a      	ldr	r2, [r3, #4]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	f000 fc66 	bl	800a678 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689a      	ldr	r2, [r3, #8]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009dba:	609a      	str	r2, [r3, #8]
      break;
 8009dbc:	e03c      	b.n	8009e38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6818      	ldr	r0, [r3, #0]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	6859      	ldr	r1, [r3, #4]
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	f000 fbda 	bl	800a584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2150      	movs	r1, #80	; 0x50
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f000 fc33 	bl	800a642 <TIM_ITRx_SetConfig>
      break;
 8009ddc:	e02c      	b.n	8009e38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6818      	ldr	r0, [r3, #0]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	6859      	ldr	r1, [r3, #4]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	461a      	mov	r2, r3
 8009dec:	f000 fbf9 	bl	800a5e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2160      	movs	r1, #96	; 0x60
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 fc23 	bl	800a642 <TIM_ITRx_SetConfig>
      break;
 8009dfc:	e01c      	b.n	8009e38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6818      	ldr	r0, [r3, #0]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	6859      	ldr	r1, [r3, #4]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f000 fbba 	bl	800a584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2140      	movs	r1, #64	; 0x40
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 fc13 	bl	800a642 <TIM_ITRx_SetConfig>
      break;
 8009e1c:	e00c      	b.n	8009e38 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4619      	mov	r1, r3
 8009e28:	4610      	mov	r0, r2
 8009e2a:	f000 fc0a 	bl	800a642 <TIM_ITRx_SetConfig>
      break;
 8009e2e:	e003      	b.n	8009e38 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	73fb      	strb	r3, [r7, #15]
      break;
 8009e34:	e000      	b.n	8009e38 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009e36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b083      	sub	sp, #12
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009e5a:	bf00      	nop
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b083      	sub	sp, #12
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e6e:	bf00      	nop
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e82:	bf00      	nop
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
	...

08009eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a3c      	ldr	r2, [pc, #240]	; (8009fbc <TIM_Base_SetConfig+0x104>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d00f      	beq.n	8009ef0 <TIM_Base_SetConfig+0x38>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ed6:	d00b      	beq.n	8009ef0 <TIM_Base_SetConfig+0x38>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a39      	ldr	r2, [pc, #228]	; (8009fc0 <TIM_Base_SetConfig+0x108>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d007      	beq.n	8009ef0 <TIM_Base_SetConfig+0x38>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a38      	ldr	r2, [pc, #224]	; (8009fc4 <TIM_Base_SetConfig+0x10c>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d003      	beq.n	8009ef0 <TIM_Base_SetConfig+0x38>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a37      	ldr	r2, [pc, #220]	; (8009fc8 <TIM_Base_SetConfig+0x110>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d108      	bne.n	8009f02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a2d      	ldr	r2, [pc, #180]	; (8009fbc <TIM_Base_SetConfig+0x104>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d01b      	beq.n	8009f42 <TIM_Base_SetConfig+0x8a>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f10:	d017      	beq.n	8009f42 <TIM_Base_SetConfig+0x8a>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a2a      	ldr	r2, [pc, #168]	; (8009fc0 <TIM_Base_SetConfig+0x108>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d013      	beq.n	8009f42 <TIM_Base_SetConfig+0x8a>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a29      	ldr	r2, [pc, #164]	; (8009fc4 <TIM_Base_SetConfig+0x10c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d00f      	beq.n	8009f42 <TIM_Base_SetConfig+0x8a>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a28      	ldr	r2, [pc, #160]	; (8009fc8 <TIM_Base_SetConfig+0x110>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d00b      	beq.n	8009f42 <TIM_Base_SetConfig+0x8a>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a27      	ldr	r2, [pc, #156]	; (8009fcc <TIM_Base_SetConfig+0x114>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d007      	beq.n	8009f42 <TIM_Base_SetConfig+0x8a>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a26      	ldr	r2, [pc, #152]	; (8009fd0 <TIM_Base_SetConfig+0x118>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d003      	beq.n	8009f42 <TIM_Base_SetConfig+0x8a>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a25      	ldr	r2, [pc, #148]	; (8009fd4 <TIM_Base_SetConfig+0x11c>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d108      	bne.n	8009f54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	695b      	ldr	r3, [r3, #20]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	689a      	ldr	r2, [r3, #8]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a10      	ldr	r2, [pc, #64]	; (8009fbc <TIM_Base_SetConfig+0x104>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d00f      	beq.n	8009fa0 <TIM_Base_SetConfig+0xe8>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a11      	ldr	r2, [pc, #68]	; (8009fc8 <TIM_Base_SetConfig+0x110>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d00b      	beq.n	8009fa0 <TIM_Base_SetConfig+0xe8>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a10      	ldr	r2, [pc, #64]	; (8009fcc <TIM_Base_SetConfig+0x114>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d007      	beq.n	8009fa0 <TIM_Base_SetConfig+0xe8>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a0f      	ldr	r2, [pc, #60]	; (8009fd0 <TIM_Base_SetConfig+0x118>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d003      	beq.n	8009fa0 <TIM_Base_SetConfig+0xe8>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a0e      	ldr	r2, [pc, #56]	; (8009fd4 <TIM_Base_SetConfig+0x11c>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d103      	bne.n	8009fa8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	691a      	ldr	r2, [r3, #16]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	615a      	str	r2, [r3, #20]
}
 8009fae:	bf00      	nop
 8009fb0:	3714      	adds	r7, #20
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	40012c00 	.word	0x40012c00
 8009fc0:	40000400 	.word	0x40000400
 8009fc4:	40000800 	.word	0x40000800
 8009fc8:	40013400 	.word	0x40013400
 8009fcc:	40014000 	.word	0x40014000
 8009fd0:	40014400 	.word	0x40014400
 8009fd4:	40014800 	.word	0x40014800

08009fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	f023 0201 	bic.w	r2, r3, #1
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a00a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f023 0303 	bic.w	r3, r3, #3
 800a012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f023 0302 	bic.w	r3, r3, #2
 800a024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a2c      	ldr	r2, [pc, #176]	; (800a0e4 <TIM_OC1_SetConfig+0x10c>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d00f      	beq.n	800a058 <TIM_OC1_SetConfig+0x80>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a2b      	ldr	r2, [pc, #172]	; (800a0e8 <TIM_OC1_SetConfig+0x110>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d00b      	beq.n	800a058 <TIM_OC1_SetConfig+0x80>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a2a      	ldr	r2, [pc, #168]	; (800a0ec <TIM_OC1_SetConfig+0x114>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d007      	beq.n	800a058 <TIM_OC1_SetConfig+0x80>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a29      	ldr	r2, [pc, #164]	; (800a0f0 <TIM_OC1_SetConfig+0x118>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d003      	beq.n	800a058 <TIM_OC1_SetConfig+0x80>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a28      	ldr	r2, [pc, #160]	; (800a0f4 <TIM_OC1_SetConfig+0x11c>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d10c      	bne.n	800a072 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	f023 0308 	bic.w	r3, r3, #8
 800a05e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	697a      	ldr	r2, [r7, #20]
 800a066:	4313      	orrs	r3, r2
 800a068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f023 0304 	bic.w	r3, r3, #4
 800a070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a1b      	ldr	r2, [pc, #108]	; (800a0e4 <TIM_OC1_SetConfig+0x10c>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d00f      	beq.n	800a09a <TIM_OC1_SetConfig+0xc2>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a1a      	ldr	r2, [pc, #104]	; (800a0e8 <TIM_OC1_SetConfig+0x110>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d00b      	beq.n	800a09a <TIM_OC1_SetConfig+0xc2>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a19      	ldr	r2, [pc, #100]	; (800a0ec <TIM_OC1_SetConfig+0x114>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d007      	beq.n	800a09a <TIM_OC1_SetConfig+0xc2>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a18      	ldr	r2, [pc, #96]	; (800a0f0 <TIM_OC1_SetConfig+0x118>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d003      	beq.n	800a09a <TIM_OC1_SetConfig+0xc2>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a17      	ldr	r2, [pc, #92]	; (800a0f4 <TIM_OC1_SetConfig+0x11c>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d111      	bne.n	800a0be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	621a      	str	r2, [r3, #32]
}
 800a0d8:	bf00      	nop
 800a0da:	371c      	adds	r7, #28
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	40012c00 	.word	0x40012c00
 800a0e8:	40013400 	.word	0x40013400
 800a0ec:	40014000 	.word	0x40014000
 800a0f0:	40014400 	.word	0x40014400
 800a0f4:	40014800 	.word	0x40014800

0800a0f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	f023 0210 	bic.w	r2, r3, #16
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	699b      	ldr	r3, [r3, #24]
 800a11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a12a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	021b      	lsls	r3, r3, #8
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	f023 0320 	bic.w	r3, r3, #32
 800a146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	011b      	lsls	r3, r3, #4
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	4313      	orrs	r3, r2
 800a152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a28      	ldr	r2, [pc, #160]	; (800a1f8 <TIM_OC2_SetConfig+0x100>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d003      	beq.n	800a164 <TIM_OC2_SetConfig+0x6c>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a27      	ldr	r2, [pc, #156]	; (800a1fc <TIM_OC2_SetConfig+0x104>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d10d      	bne.n	800a180 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a16a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	011b      	lsls	r3, r3, #4
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	4313      	orrs	r3, r2
 800a176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a17e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a1d      	ldr	r2, [pc, #116]	; (800a1f8 <TIM_OC2_SetConfig+0x100>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d00f      	beq.n	800a1a8 <TIM_OC2_SetConfig+0xb0>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a1c      	ldr	r2, [pc, #112]	; (800a1fc <TIM_OC2_SetConfig+0x104>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d00b      	beq.n	800a1a8 <TIM_OC2_SetConfig+0xb0>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a1b      	ldr	r2, [pc, #108]	; (800a200 <TIM_OC2_SetConfig+0x108>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d007      	beq.n	800a1a8 <TIM_OC2_SetConfig+0xb0>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a1a      	ldr	r2, [pc, #104]	; (800a204 <TIM_OC2_SetConfig+0x10c>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d003      	beq.n	800a1a8 <TIM_OC2_SetConfig+0xb0>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a19      	ldr	r2, [pc, #100]	; (800a208 <TIM_OC2_SetConfig+0x110>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d113      	bne.n	800a1d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1ae:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1b6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	621a      	str	r2, [r3, #32]
}
 800a1ea:	bf00      	nop
 800a1ec:	371c      	adds	r7, #28
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	40012c00 	.word	0x40012c00
 800a1fc:	40013400 	.word	0x40013400
 800a200:	40014000 	.word	0x40014000
 800a204:	40014400 	.word	0x40014400
 800a208:	40014800 	.word	0x40014800

0800a20c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	69db      	ldr	r3, [r3, #28]
 800a232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a23a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a23e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f023 0303 	bic.w	r3, r3, #3
 800a246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	4313      	orrs	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	021b      	lsls	r3, r3, #8
 800a260:	697a      	ldr	r2, [r7, #20]
 800a262:	4313      	orrs	r3, r2
 800a264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a27      	ldr	r2, [pc, #156]	; (800a308 <TIM_OC3_SetConfig+0xfc>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d003      	beq.n	800a276 <TIM_OC3_SetConfig+0x6a>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4a26      	ldr	r2, [pc, #152]	; (800a30c <TIM_OC3_SetConfig+0x100>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d10d      	bne.n	800a292 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a27c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	021b      	lsls	r3, r3, #8
 800a284:	697a      	ldr	r2, [r7, #20]
 800a286:	4313      	orrs	r3, r2
 800a288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a290:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a1c      	ldr	r2, [pc, #112]	; (800a308 <TIM_OC3_SetConfig+0xfc>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d00f      	beq.n	800a2ba <TIM_OC3_SetConfig+0xae>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a1b      	ldr	r2, [pc, #108]	; (800a30c <TIM_OC3_SetConfig+0x100>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d00b      	beq.n	800a2ba <TIM_OC3_SetConfig+0xae>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a1a      	ldr	r2, [pc, #104]	; (800a310 <TIM_OC3_SetConfig+0x104>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d007      	beq.n	800a2ba <TIM_OC3_SetConfig+0xae>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a19      	ldr	r2, [pc, #100]	; (800a314 <TIM_OC3_SetConfig+0x108>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d003      	beq.n	800a2ba <TIM_OC3_SetConfig+0xae>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a18      	ldr	r2, [pc, #96]	; (800a318 <TIM_OC3_SetConfig+0x10c>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d113      	bne.n	800a2e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	011b      	lsls	r3, r3, #4
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	011b      	lsls	r3, r3, #4
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	693a      	ldr	r2, [r7, #16]
 800a2e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	621a      	str	r2, [r3, #32]
}
 800a2fc:	bf00      	nop
 800a2fe:	371c      	adds	r7, #28
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr
 800a308:	40012c00 	.word	0x40012c00
 800a30c:	40013400 	.word	0x40013400
 800a310:	40014000 	.word	0x40014000
 800a314:	40014400 	.word	0x40014400
 800a318:	40014800 	.word	0x40014800

0800a31c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a1b      	ldr	r3, [r3, #32]
 800a32a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a34a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a34e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	021b      	lsls	r3, r3, #8
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	4313      	orrs	r3, r2
 800a362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a36a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	031b      	lsls	r3, r3, #12
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	4313      	orrs	r3, r2
 800a376:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a18      	ldr	r2, [pc, #96]	; (800a3dc <TIM_OC4_SetConfig+0xc0>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d00f      	beq.n	800a3a0 <TIM_OC4_SetConfig+0x84>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a17      	ldr	r2, [pc, #92]	; (800a3e0 <TIM_OC4_SetConfig+0xc4>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d00b      	beq.n	800a3a0 <TIM_OC4_SetConfig+0x84>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a16      	ldr	r2, [pc, #88]	; (800a3e4 <TIM_OC4_SetConfig+0xc8>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d007      	beq.n	800a3a0 <TIM_OC4_SetConfig+0x84>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a15      	ldr	r2, [pc, #84]	; (800a3e8 <TIM_OC4_SetConfig+0xcc>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d003      	beq.n	800a3a0 <TIM_OC4_SetConfig+0x84>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a14      	ldr	r2, [pc, #80]	; (800a3ec <TIM_OC4_SetConfig+0xd0>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d109      	bne.n	800a3b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	695b      	ldr	r3, [r3, #20]
 800a3ac:	019b      	lsls	r3, r3, #6
 800a3ae:	697a      	ldr	r2, [r7, #20]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	621a      	str	r2, [r3, #32]
}
 800a3ce:	bf00      	nop
 800a3d0:	371c      	adds	r7, #28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	40012c00 	.word	0x40012c00
 800a3e0:	40013400 	.word	0x40013400
 800a3e4:	40014000 	.word	0x40014000
 800a3e8:	40014400 	.word	0x40014400
 800a3ec:	40014800 	.word	0x40014800

0800a3f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a41e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a434:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	041b      	lsls	r3, r3, #16
 800a43c:	693a      	ldr	r2, [r7, #16]
 800a43e:	4313      	orrs	r3, r2
 800a440:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a17      	ldr	r2, [pc, #92]	; (800a4a4 <TIM_OC5_SetConfig+0xb4>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d00f      	beq.n	800a46a <TIM_OC5_SetConfig+0x7a>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a16      	ldr	r2, [pc, #88]	; (800a4a8 <TIM_OC5_SetConfig+0xb8>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d00b      	beq.n	800a46a <TIM_OC5_SetConfig+0x7a>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a15      	ldr	r2, [pc, #84]	; (800a4ac <TIM_OC5_SetConfig+0xbc>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d007      	beq.n	800a46a <TIM_OC5_SetConfig+0x7a>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a14      	ldr	r2, [pc, #80]	; (800a4b0 <TIM_OC5_SetConfig+0xc0>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d003      	beq.n	800a46a <TIM_OC5_SetConfig+0x7a>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a13      	ldr	r2, [pc, #76]	; (800a4b4 <TIM_OC5_SetConfig+0xc4>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d109      	bne.n	800a47e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a470:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	021b      	lsls	r3, r3, #8
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	621a      	str	r2, [r3, #32]
}
 800a498:	bf00      	nop
 800a49a:	371c      	adds	r7, #28
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	40012c00 	.word	0x40012c00
 800a4a8:	40013400 	.word	0x40013400
 800a4ac:	40014000 	.word	0x40014000
 800a4b0:	40014400 	.word	0x40014400
 800a4b4:	40014800 	.word	0x40014800

0800a4b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	021b      	lsls	r3, r3, #8
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	051b      	lsls	r3, r3, #20
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	4313      	orrs	r3, r2
 800a50a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a18      	ldr	r2, [pc, #96]	; (800a570 <TIM_OC6_SetConfig+0xb8>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d00f      	beq.n	800a534 <TIM_OC6_SetConfig+0x7c>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a17      	ldr	r2, [pc, #92]	; (800a574 <TIM_OC6_SetConfig+0xbc>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d00b      	beq.n	800a534 <TIM_OC6_SetConfig+0x7c>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a16      	ldr	r2, [pc, #88]	; (800a578 <TIM_OC6_SetConfig+0xc0>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d007      	beq.n	800a534 <TIM_OC6_SetConfig+0x7c>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a15      	ldr	r2, [pc, #84]	; (800a57c <TIM_OC6_SetConfig+0xc4>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d003      	beq.n	800a534 <TIM_OC6_SetConfig+0x7c>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a14      	ldr	r2, [pc, #80]	; (800a580 <TIM_OC6_SetConfig+0xc8>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d109      	bne.n	800a548 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a53a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	695b      	ldr	r3, [r3, #20]
 800a540:	029b      	lsls	r3, r3, #10
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	4313      	orrs	r3, r2
 800a546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	621a      	str	r2, [r3, #32]
}
 800a562:	bf00      	nop
 800a564:	371c      	adds	r7, #28
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	40012c00 	.word	0x40012c00
 800a574:	40013400 	.word	0x40013400
 800a578:	40014000 	.word	0x40014000
 800a57c:	40014400 	.word	0x40014400
 800a580:	40014800 	.word	0x40014800

0800a584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6a1b      	ldr	r3, [r3, #32]
 800a594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6a1b      	ldr	r3, [r3, #32]
 800a59a:	f023 0201 	bic.w	r2, r3, #1
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	699b      	ldr	r3, [r3, #24]
 800a5a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	011b      	lsls	r3, r3, #4
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f023 030a 	bic.w	r3, r3, #10
 800a5c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5c2:	697a      	ldr	r2, [r7, #20]
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	693a      	ldr	r2, [r7, #16]
 800a5ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	621a      	str	r2, [r3, #32]
}
 800a5d6:	bf00      	nop
 800a5d8:	371c      	adds	r7, #28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b087      	sub	sp, #28
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	60f8      	str	r0, [r7, #12]
 800a5ea:	60b9      	str	r1, [r7, #8]
 800a5ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	f023 0210 	bic.w	r2, r3, #16
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	699b      	ldr	r3, [r3, #24]
 800a5fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6a1b      	ldr	r3, [r3, #32]
 800a604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a60c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	031b      	lsls	r3, r3, #12
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	4313      	orrs	r3, r2
 800a616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a61e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	011b      	lsls	r3, r3, #4
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	4313      	orrs	r3, r2
 800a628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	693a      	ldr	r2, [r7, #16]
 800a634:	621a      	str	r2, [r3, #32]
}
 800a636:	bf00      	nop
 800a638:	371c      	adds	r7, #28
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a642:	b480      	push	{r7}
 800a644:	b085      	sub	sp, #20
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4313      	orrs	r3, r2
 800a660:	f043 0307 	orr.w	r3, r3, #7
 800a664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	609a      	str	r2, [r3, #8]
}
 800a66c:	bf00      	nop
 800a66e:	3714      	adds	r7, #20
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a678:	b480      	push	{r7}
 800a67a:	b087      	sub	sp, #28
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	021a      	lsls	r2, r3, #8
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	431a      	orrs	r2, r3
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	609a      	str	r2, [r3, #8]
}
 800a6ac:	bf00      	nop
 800a6ae:	371c      	adds	r7, #28
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	f003 031f 	and.w	r3, r3, #31
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6a1a      	ldr	r2, [r3, #32]
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	43db      	mvns	r3, r3
 800a6da:	401a      	ands	r2, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6a1a      	ldr	r2, [r3, #32]
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	f003 031f 	and.w	r3, r3, #31
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a6f0:	431a      	orrs	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	621a      	str	r2, [r3, #32]
}
 800a6f6:	bf00      	nop
 800a6f8:	371c      	adds	r7, #28
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
	...

0800a704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a714:	2b01      	cmp	r3, #1
 800a716:	d101      	bne.n	800a71c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a718:	2302      	movs	r3, #2
 800a71a:	e063      	b.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2202      	movs	r2, #2
 800a728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a2b      	ldr	r2, [pc, #172]	; (800a7f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d004      	beq.n	800a750 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a2a      	ldr	r2, [pc, #168]	; (800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d108      	bne.n	800a762 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a756:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	4313      	orrs	r3, r2
 800a760:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a768:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	4313      	orrs	r3, r2
 800a772:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a1b      	ldr	r2, [pc, #108]	; (800a7f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d018      	beq.n	800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a78e:	d013      	beq.n	800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a18      	ldr	r2, [pc, #96]	; (800a7f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d00e      	beq.n	800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a17      	ldr	r2, [pc, #92]	; (800a7fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d009      	beq.n	800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a12      	ldr	r2, [pc, #72]	; (800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d004      	beq.n	800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a13      	ldr	r2, [pc, #76]	; (800a800 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d10c      	bne.n	800a7d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	40012c00 	.word	0x40012c00
 800a7f4:	40013400 	.word	0x40013400
 800a7f8:	40000400 	.word	0x40000400
 800a7fc:	40000800 	.word	0x40000800
 800a800:	40014000 	.word	0x40014000

0800a804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e040      	b.n	800a8d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a856:	2b00      	cmp	r3, #0
 800a858:	d106      	bne.n	800a868 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f7f7 fb8e 	bl	8001f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2224      	movs	r2, #36	; 0x24
 800a86c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f022 0201 	bic.w	r2, r2, #1
 800a87c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fb2a 	bl	800aed8 <UART_SetConfig>
 800a884:	4603      	mov	r3, r0
 800a886:	2b01      	cmp	r3, #1
 800a888:	d101      	bne.n	800a88e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e022      	b.n	800a8d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fcf4 	bl	800b284 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	689a      	ldr	r2, [r3, #8]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f042 0201 	orr.w	r2, r2, #1
 800a8ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fd7b 	bl	800b3c8 <UART_CheckIdleState>
 800a8d2:	4603      	mov	r3, r0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b0ba      	sub	sp, #232	; 0xe8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a902:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a906:	f640 030f 	movw	r3, #2063	; 0x80f
 800a90a:	4013      	ands	r3, r2
 800a90c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a910:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a914:	2b00      	cmp	r3, #0
 800a916:	d115      	bne.n	800a944 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a91c:	f003 0320 	and.w	r3, r3, #32
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00f      	beq.n	800a944 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a928:	f003 0320 	and.w	r3, r3, #32
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d009      	beq.n	800a944 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 82a3 	beq.w	800ae80 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	4798      	blx	r3
      }
      return;
 800a942:	e29d      	b.n	800ae80 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 8117 	beq.w	800ab7c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a94e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	d106      	bne.n	800a968 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a95a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a95e:	4b85      	ldr	r3, [pc, #532]	; (800ab74 <HAL_UART_IRQHandler+0x298>)
 800a960:	4013      	ands	r3, r2
 800a962:	2b00      	cmp	r3, #0
 800a964:	f000 810a 	beq.w	800ab7c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	2b00      	cmp	r3, #0
 800a972:	d011      	beq.n	800a998 <HAL_UART_IRQHandler+0xbc>
 800a974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00b      	beq.n	800a998 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2201      	movs	r2, #1
 800a986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a98e:	f043 0201 	orr.w	r2, r3, #1
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a99c:	f003 0302 	and.w	r3, r3, #2
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d011      	beq.n	800a9c8 <HAL_UART_IRQHandler+0xec>
 800a9a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9a8:	f003 0301 	and.w	r3, r3, #1
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00b      	beq.n	800a9c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9be:	f043 0204 	orr.w	r2, r3, #4
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9cc:	f003 0304 	and.w	r3, r3, #4
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d011      	beq.n	800a9f8 <HAL_UART_IRQHandler+0x11c>
 800a9d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00b      	beq.n	800a9f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2204      	movs	r2, #4
 800a9e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9ee:	f043 0202 	orr.w	r2, r3, #2
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9fc:	f003 0308 	and.w	r3, r3, #8
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d017      	beq.n	800aa34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aa04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa08:	f003 0320 	and.w	r3, r3, #32
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d105      	bne.n	800aa1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aa10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00b      	beq.n	800aa34 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2208      	movs	r2, #8
 800aa22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa2a:	f043 0208 	orr.w	r2, r3, #8
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d012      	beq.n	800aa66 <HAL_UART_IRQHandler+0x18a>
 800aa40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00c      	beq.n	800aa66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa5c:	f043 0220 	orr.w	r2, r3, #32
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f000 8209 	beq.w	800ae84 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800aa72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa76:	f003 0320 	and.w	r3, r3, #32
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00d      	beq.n	800aa9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aa7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa82:	f003 0320 	and.w	r3, r3, #32
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d007      	beq.n	800aa9a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaae:	2b40      	cmp	r3, #64	; 0x40
 800aab0:	d005      	beq.n	800aabe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aab6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d04f      	beq.n	800ab5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 fd8f 	bl	800b5e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aace:	2b40      	cmp	r3, #64	; 0x40
 800aad0:	d141      	bne.n	800ab56 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3308      	adds	r3, #8
 800aad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aadc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aae0:	e853 3f00 	ldrex	r3, [r3]
 800aae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aaec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3308      	adds	r3, #8
 800aafa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aafe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ab0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ab0e:	e841 2300 	strex	r3, r2, [r1]
 800ab12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ab16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1d9      	bne.n	800aad2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d013      	beq.n	800ab4e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab2a:	4a13      	ldr	r2, [pc, #76]	; (800ab78 <HAL_UART_IRQHandler+0x29c>)
 800ab2c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fc fb8e 	bl	8007254 <HAL_DMA_Abort_IT>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d017      	beq.n	800ab6e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800ab48:	4610      	mov	r0, r2
 800ab4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab4c:	e00f      	b.n	800ab6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f9ac 	bl	800aeac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab54:	e00b      	b.n	800ab6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f9a8 	bl	800aeac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab5c:	e007      	b.n	800ab6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f9a4 	bl	800aeac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800ab6c:	e18a      	b.n	800ae84 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab6e:	bf00      	nop
    return;
 800ab70:	e188      	b.n	800ae84 <HAL_UART_IRQHandler+0x5a8>
 800ab72:	bf00      	nop
 800ab74:	04000120 	.word	0x04000120
 800ab78:	0800b6a9 	.word	0x0800b6a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	f040 8143 	bne.w	800ae0c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ab86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab8a:	f003 0310 	and.w	r3, r3, #16
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 813c 	beq.w	800ae0c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ab94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab98:	f003 0310 	and.w	r3, r3, #16
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 8135 	beq.w	800ae0c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2210      	movs	r2, #16
 800aba8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abb4:	2b40      	cmp	r3, #64	; 0x40
 800abb6:	f040 80b1 	bne.w	800ad1c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800abc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f000 815c 	beq.w	800ae88 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800abd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800abda:	429a      	cmp	r2, r3
 800abdc:	f080 8154 	bcs.w	800ae88 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800abe6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	2b20      	cmp	r3, #32
 800abf2:	f000 8085 	beq.w	800ad00 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac02:	e853 3f00 	ldrex	r3, [r3]
 800ac06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ac0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ac24:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ac2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ac30:	e841 2300 	strex	r3, r2, [r1]
 800ac34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ac38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1da      	bne.n	800abf6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	3308      	adds	r3, #8
 800ac46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac4a:	e853 3f00 	ldrex	r3, [r3]
 800ac4e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ac50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac52:	f023 0301 	bic.w	r3, r3, #1
 800ac56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	3308      	adds	r3, #8
 800ac60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ac64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ac68:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ac6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac70:	e841 2300 	strex	r3, r2, [r1]
 800ac74:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ac76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1e1      	bne.n	800ac40 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3308      	adds	r3, #8
 800ac82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac86:	e853 3f00 	ldrex	r3, [r3]
 800ac8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ac8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	3308      	adds	r3, #8
 800ac9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aca0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aca2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aca6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aca8:	e841 2300 	strex	r3, r2, [r1]
 800acac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800acae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1e3      	bne.n	800ac7c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2220      	movs	r2, #32
 800acb8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800acce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acd0:	f023 0310 	bic.w	r3, r3, #16
 800acd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	461a      	mov	r2, r3
 800acde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ace2:	65bb      	str	r3, [r7, #88]	; 0x58
 800ace4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ace8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acea:	e841 2300 	strex	r3, r2, [r1]
 800acee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800acf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1e4      	bne.n	800acc0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fc fa71 	bl	80071e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	4619      	mov	r1, r3
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 f8d3 	bl	800aec0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad1a:	e0b5      	b.n	800ae88 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f000 80a7 	beq.w	800ae8c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800ad3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f000 80a2 	beq.w	800ae8c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad50:	e853 3f00 	ldrex	r3, [r3]
 800ad54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	461a      	mov	r2, r3
 800ad66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad6a:	647b      	str	r3, [r7, #68]	; 0x44
 800ad6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad72:	e841 2300 	strex	r3, r2, [r1]
 800ad76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1e4      	bne.n	800ad48 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3308      	adds	r3, #8
 800ad84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	e853 3f00 	ldrex	r3, [r3]
 800ad8c:	623b      	str	r3, [r7, #32]
   return(result);
 800ad8e:	6a3b      	ldr	r3, [r7, #32]
 800ad90:	f023 0301 	bic.w	r3, r3, #1
 800ad94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3308      	adds	r3, #8
 800ad9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ada2:	633a      	str	r2, [r7, #48]	; 0x30
 800ada4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ada8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adaa:	e841 2300 	strex	r3, r2, [r1]
 800adae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800adb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1e3      	bne.n	800ad7e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2220      	movs	r2, #32
 800adba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	e853 3f00 	ldrex	r3, [r3]
 800add4:	60fb      	str	r3, [r7, #12]
   return(result);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f023 0310 	bic.w	r3, r3, #16
 800addc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	461a      	mov	r2, r3
 800ade6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800adea:	61fb      	str	r3, [r7, #28]
 800adec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adee:	69b9      	ldr	r1, [r7, #24]
 800adf0:	69fa      	ldr	r2, [r7, #28]
 800adf2:	e841 2300 	strex	r3, r2, [r1]
 800adf6:	617b      	str	r3, [r7, #20]
   return(result);
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1e4      	bne.n	800adc8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800adfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 f85b 	bl	800aec0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae0a:	e03f      	b.n	800ae8c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ae0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00e      	beq.n	800ae36 <HAL_UART_IRQHandler+0x55a>
 800ae18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d008      	beq.n	800ae36 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ae2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fc7a 	bl	800b728 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae34:	e02d      	b.n	800ae92 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ae36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00e      	beq.n	800ae60 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ae42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d008      	beq.n	800ae60 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d01c      	beq.n	800ae90 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	4798      	blx	r3
    }
    return;
 800ae5e:	e017      	b.n	800ae90 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ae60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d012      	beq.n	800ae92 <HAL_UART_IRQHandler+0x5b6>
 800ae6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d00c      	beq.n	800ae92 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 fc2b 	bl	800b6d4 <UART_EndTransmit_IT>
    return;
 800ae7e:	e008      	b.n	800ae92 <HAL_UART_IRQHandler+0x5b6>
      return;
 800ae80:	bf00      	nop
 800ae82:	e006      	b.n	800ae92 <HAL_UART_IRQHandler+0x5b6>
    return;
 800ae84:	bf00      	nop
 800ae86:	e004      	b.n	800ae92 <HAL_UART_IRQHandler+0x5b6>
      return;
 800ae88:	bf00      	nop
 800ae8a:	e002      	b.n	800ae92 <HAL_UART_IRQHandler+0x5b6>
      return;
 800ae8c:	bf00      	nop
 800ae8e:	e000      	b.n	800ae92 <HAL_UART_IRQHandler+0x5b6>
    return;
 800ae90:	bf00      	nop
  }

}
 800ae92:	37e8      	adds	r7, #232	; 0xe8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aea0:	bf00      	nop
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aeb4:	bf00      	nop
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b088      	sub	sp, #32
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	431a      	orrs	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	431a      	orrs	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	69db      	ldr	r3, [r3, #28]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800af06:	f023 030c 	bic.w	r3, r3, #12
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	6812      	ldr	r2, [r2, #0]
 800af0e:	6979      	ldr	r1, [r7, #20]
 800af10:	430b      	orrs	r3, r1
 800af12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	68da      	ldr	r2, [r3, #12]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	430a      	orrs	r2, r1
 800af28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	699b      	ldr	r3, [r3, #24]
 800af2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a1b      	ldr	r3, [r3, #32]
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	4313      	orrs	r3, r2
 800af38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	430a      	orrs	r2, r1
 800af4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4aa8      	ldr	r2, [pc, #672]	; (800b1f4 <UART_SetConfig+0x31c>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d120      	bne.n	800af9a <UART_SetConfig+0xc2>
 800af58:	4ba7      	ldr	r3, [pc, #668]	; (800b1f8 <UART_SetConfig+0x320>)
 800af5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5c:	f003 0303 	and.w	r3, r3, #3
 800af60:	2b03      	cmp	r3, #3
 800af62:	d817      	bhi.n	800af94 <UART_SetConfig+0xbc>
 800af64:	a201      	add	r2, pc, #4	; (adr r2, 800af6c <UART_SetConfig+0x94>)
 800af66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6a:	bf00      	nop
 800af6c:	0800af7d 	.word	0x0800af7d
 800af70:	0800af89 	.word	0x0800af89
 800af74:	0800af8f 	.word	0x0800af8f
 800af78:	0800af83 	.word	0x0800af83
 800af7c:	2301      	movs	r3, #1
 800af7e:	77fb      	strb	r3, [r7, #31]
 800af80:	e0b5      	b.n	800b0ee <UART_SetConfig+0x216>
 800af82:	2302      	movs	r3, #2
 800af84:	77fb      	strb	r3, [r7, #31]
 800af86:	e0b2      	b.n	800b0ee <UART_SetConfig+0x216>
 800af88:	2304      	movs	r3, #4
 800af8a:	77fb      	strb	r3, [r7, #31]
 800af8c:	e0af      	b.n	800b0ee <UART_SetConfig+0x216>
 800af8e:	2308      	movs	r3, #8
 800af90:	77fb      	strb	r3, [r7, #31]
 800af92:	e0ac      	b.n	800b0ee <UART_SetConfig+0x216>
 800af94:	2310      	movs	r3, #16
 800af96:	77fb      	strb	r3, [r7, #31]
 800af98:	e0a9      	b.n	800b0ee <UART_SetConfig+0x216>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a97      	ldr	r2, [pc, #604]	; (800b1fc <UART_SetConfig+0x324>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d124      	bne.n	800afee <UART_SetConfig+0x116>
 800afa4:	4b94      	ldr	r3, [pc, #592]	; (800b1f8 <UART_SetConfig+0x320>)
 800afa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800afac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800afb0:	d011      	beq.n	800afd6 <UART_SetConfig+0xfe>
 800afb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800afb6:	d817      	bhi.n	800afe8 <UART_SetConfig+0x110>
 800afb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afbc:	d011      	beq.n	800afe2 <UART_SetConfig+0x10a>
 800afbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afc2:	d811      	bhi.n	800afe8 <UART_SetConfig+0x110>
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d003      	beq.n	800afd0 <UART_SetConfig+0xf8>
 800afc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afcc:	d006      	beq.n	800afdc <UART_SetConfig+0x104>
 800afce:	e00b      	b.n	800afe8 <UART_SetConfig+0x110>
 800afd0:	2300      	movs	r3, #0
 800afd2:	77fb      	strb	r3, [r7, #31]
 800afd4:	e08b      	b.n	800b0ee <UART_SetConfig+0x216>
 800afd6:	2302      	movs	r3, #2
 800afd8:	77fb      	strb	r3, [r7, #31]
 800afda:	e088      	b.n	800b0ee <UART_SetConfig+0x216>
 800afdc:	2304      	movs	r3, #4
 800afde:	77fb      	strb	r3, [r7, #31]
 800afe0:	e085      	b.n	800b0ee <UART_SetConfig+0x216>
 800afe2:	2308      	movs	r3, #8
 800afe4:	77fb      	strb	r3, [r7, #31]
 800afe6:	e082      	b.n	800b0ee <UART_SetConfig+0x216>
 800afe8:	2310      	movs	r3, #16
 800afea:	77fb      	strb	r3, [r7, #31]
 800afec:	e07f      	b.n	800b0ee <UART_SetConfig+0x216>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a83      	ldr	r2, [pc, #524]	; (800b200 <UART_SetConfig+0x328>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d124      	bne.n	800b042 <UART_SetConfig+0x16a>
 800aff8:	4b7f      	ldr	r3, [pc, #508]	; (800b1f8 <UART_SetConfig+0x320>)
 800affa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b000:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b004:	d011      	beq.n	800b02a <UART_SetConfig+0x152>
 800b006:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b00a:	d817      	bhi.n	800b03c <UART_SetConfig+0x164>
 800b00c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b010:	d011      	beq.n	800b036 <UART_SetConfig+0x15e>
 800b012:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b016:	d811      	bhi.n	800b03c <UART_SetConfig+0x164>
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d003      	beq.n	800b024 <UART_SetConfig+0x14c>
 800b01c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b020:	d006      	beq.n	800b030 <UART_SetConfig+0x158>
 800b022:	e00b      	b.n	800b03c <UART_SetConfig+0x164>
 800b024:	2300      	movs	r3, #0
 800b026:	77fb      	strb	r3, [r7, #31]
 800b028:	e061      	b.n	800b0ee <UART_SetConfig+0x216>
 800b02a:	2302      	movs	r3, #2
 800b02c:	77fb      	strb	r3, [r7, #31]
 800b02e:	e05e      	b.n	800b0ee <UART_SetConfig+0x216>
 800b030:	2304      	movs	r3, #4
 800b032:	77fb      	strb	r3, [r7, #31]
 800b034:	e05b      	b.n	800b0ee <UART_SetConfig+0x216>
 800b036:	2308      	movs	r3, #8
 800b038:	77fb      	strb	r3, [r7, #31]
 800b03a:	e058      	b.n	800b0ee <UART_SetConfig+0x216>
 800b03c:	2310      	movs	r3, #16
 800b03e:	77fb      	strb	r3, [r7, #31]
 800b040:	e055      	b.n	800b0ee <UART_SetConfig+0x216>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a6f      	ldr	r2, [pc, #444]	; (800b204 <UART_SetConfig+0x32c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d124      	bne.n	800b096 <UART_SetConfig+0x1be>
 800b04c:	4b6a      	ldr	r3, [pc, #424]	; (800b1f8 <UART_SetConfig+0x320>)
 800b04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b050:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b054:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b058:	d011      	beq.n	800b07e <UART_SetConfig+0x1a6>
 800b05a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b05e:	d817      	bhi.n	800b090 <UART_SetConfig+0x1b8>
 800b060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b064:	d011      	beq.n	800b08a <UART_SetConfig+0x1b2>
 800b066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b06a:	d811      	bhi.n	800b090 <UART_SetConfig+0x1b8>
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <UART_SetConfig+0x1a0>
 800b070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b074:	d006      	beq.n	800b084 <UART_SetConfig+0x1ac>
 800b076:	e00b      	b.n	800b090 <UART_SetConfig+0x1b8>
 800b078:	2300      	movs	r3, #0
 800b07a:	77fb      	strb	r3, [r7, #31]
 800b07c:	e037      	b.n	800b0ee <UART_SetConfig+0x216>
 800b07e:	2302      	movs	r3, #2
 800b080:	77fb      	strb	r3, [r7, #31]
 800b082:	e034      	b.n	800b0ee <UART_SetConfig+0x216>
 800b084:	2304      	movs	r3, #4
 800b086:	77fb      	strb	r3, [r7, #31]
 800b088:	e031      	b.n	800b0ee <UART_SetConfig+0x216>
 800b08a:	2308      	movs	r3, #8
 800b08c:	77fb      	strb	r3, [r7, #31]
 800b08e:	e02e      	b.n	800b0ee <UART_SetConfig+0x216>
 800b090:	2310      	movs	r3, #16
 800b092:	77fb      	strb	r3, [r7, #31]
 800b094:	e02b      	b.n	800b0ee <UART_SetConfig+0x216>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a5b      	ldr	r2, [pc, #364]	; (800b208 <UART_SetConfig+0x330>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d124      	bne.n	800b0ea <UART_SetConfig+0x212>
 800b0a0:	4b55      	ldr	r3, [pc, #340]	; (800b1f8 <UART_SetConfig+0x320>)
 800b0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b0a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b0ac:	d011      	beq.n	800b0d2 <UART_SetConfig+0x1fa>
 800b0ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b0b2:	d817      	bhi.n	800b0e4 <UART_SetConfig+0x20c>
 800b0b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0b8:	d011      	beq.n	800b0de <UART_SetConfig+0x206>
 800b0ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0be:	d811      	bhi.n	800b0e4 <UART_SetConfig+0x20c>
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d003      	beq.n	800b0cc <UART_SetConfig+0x1f4>
 800b0c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0c8:	d006      	beq.n	800b0d8 <UART_SetConfig+0x200>
 800b0ca:	e00b      	b.n	800b0e4 <UART_SetConfig+0x20c>
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	77fb      	strb	r3, [r7, #31]
 800b0d0:	e00d      	b.n	800b0ee <UART_SetConfig+0x216>
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	77fb      	strb	r3, [r7, #31]
 800b0d6:	e00a      	b.n	800b0ee <UART_SetConfig+0x216>
 800b0d8:	2304      	movs	r3, #4
 800b0da:	77fb      	strb	r3, [r7, #31]
 800b0dc:	e007      	b.n	800b0ee <UART_SetConfig+0x216>
 800b0de:	2308      	movs	r3, #8
 800b0e0:	77fb      	strb	r3, [r7, #31]
 800b0e2:	e004      	b.n	800b0ee <UART_SetConfig+0x216>
 800b0e4:	2310      	movs	r3, #16
 800b0e6:	77fb      	strb	r3, [r7, #31]
 800b0e8:	e001      	b.n	800b0ee <UART_SetConfig+0x216>
 800b0ea:	2310      	movs	r3, #16
 800b0ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	69db      	ldr	r3, [r3, #28]
 800b0f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0f6:	d15c      	bne.n	800b1b2 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 800b0f8:	7ffb      	ldrb	r3, [r7, #31]
 800b0fa:	2b08      	cmp	r3, #8
 800b0fc:	d827      	bhi.n	800b14e <UART_SetConfig+0x276>
 800b0fe:	a201      	add	r2, pc, #4	; (adr r2, 800b104 <UART_SetConfig+0x22c>)
 800b100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b104:	0800b129 	.word	0x0800b129
 800b108:	0800b131 	.word	0x0800b131
 800b10c:	0800b139 	.word	0x0800b139
 800b110:	0800b14f 	.word	0x0800b14f
 800b114:	0800b13f 	.word	0x0800b13f
 800b118:	0800b14f 	.word	0x0800b14f
 800b11c:	0800b14f 	.word	0x0800b14f
 800b120:	0800b14f 	.word	0x0800b14f
 800b124:	0800b147 	.word	0x0800b147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b128:	f7fd fed4 	bl	8008ed4 <HAL_RCC_GetPCLK1Freq>
 800b12c:	61b8      	str	r0, [r7, #24]
        break;
 800b12e:	e013      	b.n	800b158 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b130:	f7fd fef2 	bl	8008f18 <HAL_RCC_GetPCLK2Freq>
 800b134:	61b8      	str	r0, [r7, #24]
        break;
 800b136:	e00f      	b.n	800b158 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b138:	4b34      	ldr	r3, [pc, #208]	; (800b20c <UART_SetConfig+0x334>)
 800b13a:	61bb      	str	r3, [r7, #24]
        break;
 800b13c:	e00c      	b.n	800b158 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b13e:	f7fd fe53 	bl	8008de8 <HAL_RCC_GetSysClockFreq>
 800b142:	61b8      	str	r0, [r7, #24]
        break;
 800b144:	e008      	b.n	800b158 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b14a:	61bb      	str	r3, [r7, #24]
        break;
 800b14c:	e004      	b.n	800b158 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800b14e:	2300      	movs	r3, #0
 800b150:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	77bb      	strb	r3, [r7, #30]
        break;
 800b156:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f000 8084 	beq.w	800b268 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	005a      	lsls	r2, r3, #1
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	085b      	lsrs	r3, r3, #1
 800b16a:	441a      	add	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	fbb2 f3f3 	udiv	r3, r2, r3
 800b174:	b29b      	uxth	r3, r3
 800b176:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	2b0f      	cmp	r3, #15
 800b17c:	d916      	bls.n	800b1ac <UART_SetConfig+0x2d4>
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b184:	d212      	bcs.n	800b1ac <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	b29b      	uxth	r3, r3
 800b18a:	f023 030f 	bic.w	r3, r3, #15
 800b18e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	085b      	lsrs	r3, r3, #1
 800b194:	b29b      	uxth	r3, r3
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	89fb      	ldrh	r3, [r7, #14]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	89fa      	ldrh	r2, [r7, #14]
 800b1a8:	60da      	str	r2, [r3, #12]
 800b1aa:	e05d      	b.n	800b268 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	77bb      	strb	r3, [r7, #30]
 800b1b0:	e05a      	b.n	800b268 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b1b2:	7ffb      	ldrb	r3, [r7, #31]
 800b1b4:	2b08      	cmp	r3, #8
 800b1b6:	d836      	bhi.n	800b226 <UART_SetConfig+0x34e>
 800b1b8:	a201      	add	r2, pc, #4	; (adr r2, 800b1c0 <UART_SetConfig+0x2e8>)
 800b1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1be:	bf00      	nop
 800b1c0:	0800b1e5 	.word	0x0800b1e5
 800b1c4:	0800b1ed 	.word	0x0800b1ed
 800b1c8:	0800b211 	.word	0x0800b211
 800b1cc:	0800b227 	.word	0x0800b227
 800b1d0:	0800b217 	.word	0x0800b217
 800b1d4:	0800b227 	.word	0x0800b227
 800b1d8:	0800b227 	.word	0x0800b227
 800b1dc:	0800b227 	.word	0x0800b227
 800b1e0:	0800b21f 	.word	0x0800b21f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1e4:	f7fd fe76 	bl	8008ed4 <HAL_RCC_GetPCLK1Freq>
 800b1e8:	61b8      	str	r0, [r7, #24]
        break;
 800b1ea:	e021      	b.n	800b230 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1ec:	f7fd fe94 	bl	8008f18 <HAL_RCC_GetPCLK2Freq>
 800b1f0:	61b8      	str	r0, [r7, #24]
        break;
 800b1f2:	e01d      	b.n	800b230 <UART_SetConfig+0x358>
 800b1f4:	40013800 	.word	0x40013800
 800b1f8:	40021000 	.word	0x40021000
 800b1fc:	40004400 	.word	0x40004400
 800b200:	40004800 	.word	0x40004800
 800b204:	40004c00 	.word	0x40004c00
 800b208:	40005000 	.word	0x40005000
 800b20c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b210:	4b1b      	ldr	r3, [pc, #108]	; (800b280 <UART_SetConfig+0x3a8>)
 800b212:	61bb      	str	r3, [r7, #24]
        break;
 800b214:	e00c      	b.n	800b230 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b216:	f7fd fde7 	bl	8008de8 <HAL_RCC_GetSysClockFreq>
 800b21a:	61b8      	str	r0, [r7, #24]
        break;
 800b21c:	e008      	b.n	800b230 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b21e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b222:	61bb      	str	r3, [r7, #24]
        break;
 800b224:	e004      	b.n	800b230 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800b226:	2300      	movs	r3, #0
 800b228:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	77bb      	strb	r3, [r7, #30]
        break;
 800b22e:	bf00      	nop
    }

    if (pclk != 0U)
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d018      	beq.n	800b268 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	085a      	lsrs	r2, r3, #1
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	441a      	add	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	fbb2 f3f3 	udiv	r3, r2, r3
 800b248:	b29b      	uxth	r3, r3
 800b24a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	2b0f      	cmp	r3, #15
 800b250:	d908      	bls.n	800b264 <UART_SetConfig+0x38c>
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b258:	d204      	bcs.n	800b264 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	60da      	str	r2, [r3, #12]
 800b262:	e001      	b.n	800b268 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b274:	7fbb      	ldrb	r3, [r7, #30]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3720      	adds	r7, #32
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	007a1200 	.word	0x007a1200

0800b284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00a      	beq.n	800b2ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	430a      	orrs	r2, r1
 800b2ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b2:	f003 0302 	and.w	r3, r3, #2
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00a      	beq.n	800b2d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	430a      	orrs	r2, r1
 800b2ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	f003 0304 	and.w	r3, r3, #4
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00a      	beq.n	800b2f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	430a      	orrs	r2, r1
 800b2f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f6:	f003 0308 	and.w	r3, r3, #8
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00a      	beq.n	800b314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	430a      	orrs	r2, r1
 800b312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b318:	f003 0310 	and.w	r3, r3, #16
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00a      	beq.n	800b336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	430a      	orrs	r2, r1
 800b334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33a:	f003 0320 	and.w	r3, r3, #32
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00a      	beq.n	800b358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	430a      	orrs	r2, r1
 800b356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b360:	2b00      	cmp	r3, #0
 800b362:	d01a      	beq.n	800b39a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	430a      	orrs	r2, r1
 800b378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b382:	d10a      	bne.n	800b39a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00a      	beq.n	800b3bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	430a      	orrs	r2, r1
 800b3ba:	605a      	str	r2, [r3, #4]
  }
}
 800b3bc:	bf00      	nop
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af02      	add	r7, sp, #8
 800b3ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b3d8:	f7fa fa96 	bl	8005908 <HAL_GetTick>
 800b3dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 0308 	and.w	r3, r3, #8
 800b3e8:	2b08      	cmp	r3, #8
 800b3ea:	d10e      	bne.n	800b40a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3f0:	9300      	str	r3, [sp, #0]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f82d 	bl	800b45a <UART_WaitOnFlagUntilTimeout>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b406:	2303      	movs	r3, #3
 800b408:	e023      	b.n	800b452 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 0304 	and.w	r3, r3, #4
 800b414:	2b04      	cmp	r3, #4
 800b416:	d10e      	bne.n	800b436 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2200      	movs	r2, #0
 800b422:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f817 	bl	800b45a <UART_WaitOnFlagUntilTimeout>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d001      	beq.n	800b436 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b432:	2303      	movs	r3, #3
 800b434:	e00d      	b.n	800b452 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2220      	movs	r2, #32
 800b43a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2220      	movs	r2, #32
 800b440:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b09c      	sub	sp, #112	; 0x70
 800b45e:	af00      	add	r7, sp, #0
 800b460:	60f8      	str	r0, [r7, #12]
 800b462:	60b9      	str	r1, [r7, #8]
 800b464:	603b      	str	r3, [r7, #0]
 800b466:	4613      	mov	r3, r2
 800b468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b46a:	e0a5      	b.n	800b5b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b46c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b472:	f000 80a1 	beq.w	800b5b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b476:	f7fa fa47 	bl	8005908 <HAL_GetTick>
 800b47a:	4602      	mov	r2, r0
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b482:	429a      	cmp	r2, r3
 800b484:	d302      	bcc.n	800b48c <UART_WaitOnFlagUntilTimeout+0x32>
 800b486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d13e      	bne.n	800b50a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b494:	e853 3f00 	ldrex	r3, [r3]
 800b498:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b49c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b4a0:	667b      	str	r3, [r7, #100]	; 0x64
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b4b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4b2:	e841 2300 	strex	r3, r2, [r1]
 800b4b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b4b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1e6      	bne.n	800b48c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3308      	adds	r3, #8
 800b4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4c8:	e853 3f00 	ldrex	r3, [r3]
 800b4cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d0:	f023 0301 	bic.w	r3, r3, #1
 800b4d4:	663b      	str	r3, [r7, #96]	; 0x60
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3308      	adds	r3, #8
 800b4dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b4de:	64ba      	str	r2, [r7, #72]	; 0x48
 800b4e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b4e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4e6:	e841 2300 	strex	r3, r2, [r1]
 800b4ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b4ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1e5      	bne.n	800b4be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2220      	movs	r2, #32
 800b4f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b506:	2303      	movs	r3, #3
 800b508:	e067      	b.n	800b5da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 0304 	and.w	r3, r3, #4
 800b514:	2b00      	cmp	r3, #0
 800b516:	d04f      	beq.n	800b5b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b526:	d147      	bne.n	800b5b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b530:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53a:	e853 3f00 	ldrex	r3, [r3]
 800b53e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b542:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b546:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	461a      	mov	r2, r3
 800b54e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b550:	637b      	str	r3, [r7, #52]	; 0x34
 800b552:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b554:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b558:	e841 2300 	strex	r3, r2, [r1]
 800b55c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1e6      	bne.n	800b532 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	3308      	adds	r3, #8
 800b56a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	e853 3f00 	ldrex	r3, [r3]
 800b572:	613b      	str	r3, [r7, #16]
   return(result);
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	f023 0301 	bic.w	r3, r3, #1
 800b57a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	3308      	adds	r3, #8
 800b582:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b584:	623a      	str	r2, [r7, #32]
 800b586:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b588:	69f9      	ldr	r1, [r7, #28]
 800b58a:	6a3a      	ldr	r2, [r7, #32]
 800b58c:	e841 2300 	strex	r3, r2, [r1]
 800b590:	61bb      	str	r3, [r7, #24]
   return(result);
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1e5      	bne.n	800b564 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2220      	movs	r2, #32
 800b59c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2220      	movs	r2, #32
 800b5a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2220      	movs	r2, #32
 800b5a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e010      	b.n	800b5da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	69da      	ldr	r2, [r3, #28]
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	bf0c      	ite	eq
 800b5c8:	2301      	moveq	r3, #1
 800b5ca:	2300      	movne	r3, #0
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	79fb      	ldrb	r3, [r7, #7]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	f43f af4a 	beq.w	800b46c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3770      	adds	r7, #112	; 0x70
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b095      	sub	sp, #84	; 0x54
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f2:	e853 3f00 	ldrex	r3, [r3]
 800b5f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	461a      	mov	r2, r3
 800b606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b608:	643b      	str	r3, [r7, #64]	; 0x40
 800b60a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b60e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b610:	e841 2300 	strex	r3, r2, [r1]
 800b614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e6      	bne.n	800b5ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	3308      	adds	r3, #8
 800b622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b624:	6a3b      	ldr	r3, [r7, #32]
 800b626:	e853 3f00 	ldrex	r3, [r3]
 800b62a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	f023 0301 	bic.w	r3, r3, #1
 800b632:	64bb      	str	r3, [r7, #72]	; 0x48
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3308      	adds	r3, #8
 800b63a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b63c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b63e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b644:	e841 2300 	strex	r3, r2, [r1]
 800b648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1e5      	bne.n	800b61c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b654:	2b01      	cmp	r3, #1
 800b656:	d118      	bne.n	800b68a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	e853 3f00 	ldrex	r3, [r3]
 800b664:	60bb      	str	r3, [r7, #8]
   return(result);
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	f023 0310 	bic.w	r3, r3, #16
 800b66c:	647b      	str	r3, [r7, #68]	; 0x44
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	461a      	mov	r2, r3
 800b674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b676:	61bb      	str	r3, [r7, #24]
 800b678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67a:	6979      	ldr	r1, [r7, #20]
 800b67c:	69ba      	ldr	r2, [r7, #24]
 800b67e:	e841 2300 	strex	r3, r2, [r1]
 800b682:	613b      	str	r3, [r7, #16]
   return(result);
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1e6      	bne.n	800b658 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2220      	movs	r2, #32
 800b68e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b69c:	bf00      	nop
 800b69e:	3754      	adds	r7, #84	; 0x54
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f7ff fbf0 	bl	800aeac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6cc:	bf00      	nop
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b088      	sub	sp, #32
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	e853 3f00 	ldrex	r3, [r3]
 800b6e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6f0:	61fb      	str	r3, [r7, #28]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	61bb      	str	r3, [r7, #24]
 800b6fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fe:	6979      	ldr	r1, [r7, #20]
 800b700:	69ba      	ldr	r2, [r7, #24]
 800b702:	e841 2300 	strex	r3, r2, [r1]
 800b706:	613b      	str	r3, [r7, #16]
   return(result);
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1e6      	bne.n	800b6dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2220      	movs	r2, #32
 800b712:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f7ff fbbc 	bl	800ae98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b720:	bf00      	nop
 800b722:	3720      	adds	r7, #32
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b744:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800b748:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b750:	b29a      	uxth	r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	b29b      	uxth	r3, r3
 800b756:	43db      	mvns	r3, r3
 800b758:	b29b      	uxth	r3, r3
 800b75a:	4013      	ands	r3, r2
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3714      	adds	r7, #20
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b772:	b084      	sub	sp, #16
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	f107 0014 	add.w	r0, r7, #20
 800b780:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	b004      	add	sp, #16
 800b7b2:	4770      	bx	lr

0800b7b4 <__errno>:
 800b7b4:	4b01      	ldr	r3, [pc, #4]	; (800b7bc <__errno+0x8>)
 800b7b6:	6818      	ldr	r0, [r3, #0]
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	20000140 	.word	0x20000140

0800b7c0 <__libc_init_array>:
 800b7c0:	b570      	push	{r4, r5, r6, lr}
 800b7c2:	4d0d      	ldr	r5, [pc, #52]	; (800b7f8 <__libc_init_array+0x38>)
 800b7c4:	4c0d      	ldr	r4, [pc, #52]	; (800b7fc <__libc_init_array+0x3c>)
 800b7c6:	1b64      	subs	r4, r4, r5
 800b7c8:	10a4      	asrs	r4, r4, #2
 800b7ca:	2600      	movs	r6, #0
 800b7cc:	42a6      	cmp	r6, r4
 800b7ce:	d109      	bne.n	800b7e4 <__libc_init_array+0x24>
 800b7d0:	4d0b      	ldr	r5, [pc, #44]	; (800b800 <__libc_init_array+0x40>)
 800b7d2:	4c0c      	ldr	r4, [pc, #48]	; (800b804 <__libc_init_array+0x44>)
 800b7d4:	f001 fcfa 	bl	800d1cc <_init>
 800b7d8:	1b64      	subs	r4, r4, r5
 800b7da:	10a4      	asrs	r4, r4, #2
 800b7dc:	2600      	movs	r6, #0
 800b7de:	42a6      	cmp	r6, r4
 800b7e0:	d105      	bne.n	800b7ee <__libc_init_array+0x2e>
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}
 800b7e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7e8:	4798      	blx	r3
 800b7ea:	3601      	adds	r6, #1
 800b7ec:	e7ee      	b.n	800b7cc <__libc_init_array+0xc>
 800b7ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7f2:	4798      	blx	r3
 800b7f4:	3601      	adds	r6, #1
 800b7f6:	e7f2      	b.n	800b7de <__libc_init_array+0x1e>
 800b7f8:	0800dc58 	.word	0x0800dc58
 800b7fc:	0800dc58 	.word	0x0800dc58
 800b800:	0800dc58 	.word	0x0800dc58
 800b804:	0800dc5c 	.word	0x0800dc5c

0800b808 <malloc>:
 800b808:	4b02      	ldr	r3, [pc, #8]	; (800b814 <malloc+0xc>)
 800b80a:	4601      	mov	r1, r0
 800b80c:	6818      	ldr	r0, [r3, #0]
 800b80e:	f000 b885 	b.w	800b91c <_malloc_r>
 800b812:	bf00      	nop
 800b814:	20000140 	.word	0x20000140

0800b818 <memcpy>:
 800b818:	440a      	add	r2, r1
 800b81a:	4291      	cmp	r1, r2
 800b81c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b820:	d100      	bne.n	800b824 <memcpy+0xc>
 800b822:	4770      	bx	lr
 800b824:	b510      	push	{r4, lr}
 800b826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b82a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b82e:	4291      	cmp	r1, r2
 800b830:	d1f9      	bne.n	800b826 <memcpy+0xe>
 800b832:	bd10      	pop	{r4, pc}

0800b834 <memset>:
 800b834:	4402      	add	r2, r0
 800b836:	4603      	mov	r3, r0
 800b838:	4293      	cmp	r3, r2
 800b83a:	d100      	bne.n	800b83e <memset+0xa>
 800b83c:	4770      	bx	lr
 800b83e:	f803 1b01 	strb.w	r1, [r3], #1
 800b842:	e7f9      	b.n	800b838 <memset+0x4>

0800b844 <_free_r>:
 800b844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b846:	2900      	cmp	r1, #0
 800b848:	d044      	beq.n	800b8d4 <_free_r+0x90>
 800b84a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b84e:	9001      	str	r0, [sp, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	f1a1 0404 	sub.w	r4, r1, #4
 800b856:	bfb8      	it	lt
 800b858:	18e4      	addlt	r4, r4, r3
 800b85a:	f000 f91b 	bl	800ba94 <__malloc_lock>
 800b85e:	4a1e      	ldr	r2, [pc, #120]	; (800b8d8 <_free_r+0x94>)
 800b860:	9801      	ldr	r0, [sp, #4]
 800b862:	6813      	ldr	r3, [r2, #0]
 800b864:	b933      	cbnz	r3, 800b874 <_free_r+0x30>
 800b866:	6063      	str	r3, [r4, #4]
 800b868:	6014      	str	r4, [r2, #0]
 800b86a:	b003      	add	sp, #12
 800b86c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b870:	f000 b916 	b.w	800baa0 <__malloc_unlock>
 800b874:	42a3      	cmp	r3, r4
 800b876:	d908      	bls.n	800b88a <_free_r+0x46>
 800b878:	6825      	ldr	r5, [r4, #0]
 800b87a:	1961      	adds	r1, r4, r5
 800b87c:	428b      	cmp	r3, r1
 800b87e:	bf01      	itttt	eq
 800b880:	6819      	ldreq	r1, [r3, #0]
 800b882:	685b      	ldreq	r3, [r3, #4]
 800b884:	1949      	addeq	r1, r1, r5
 800b886:	6021      	streq	r1, [r4, #0]
 800b888:	e7ed      	b.n	800b866 <_free_r+0x22>
 800b88a:	461a      	mov	r2, r3
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	b10b      	cbz	r3, 800b894 <_free_r+0x50>
 800b890:	42a3      	cmp	r3, r4
 800b892:	d9fa      	bls.n	800b88a <_free_r+0x46>
 800b894:	6811      	ldr	r1, [r2, #0]
 800b896:	1855      	adds	r5, r2, r1
 800b898:	42a5      	cmp	r5, r4
 800b89a:	d10b      	bne.n	800b8b4 <_free_r+0x70>
 800b89c:	6824      	ldr	r4, [r4, #0]
 800b89e:	4421      	add	r1, r4
 800b8a0:	1854      	adds	r4, r2, r1
 800b8a2:	42a3      	cmp	r3, r4
 800b8a4:	6011      	str	r1, [r2, #0]
 800b8a6:	d1e0      	bne.n	800b86a <_free_r+0x26>
 800b8a8:	681c      	ldr	r4, [r3, #0]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	6053      	str	r3, [r2, #4]
 800b8ae:	4421      	add	r1, r4
 800b8b0:	6011      	str	r1, [r2, #0]
 800b8b2:	e7da      	b.n	800b86a <_free_r+0x26>
 800b8b4:	d902      	bls.n	800b8bc <_free_r+0x78>
 800b8b6:	230c      	movs	r3, #12
 800b8b8:	6003      	str	r3, [r0, #0]
 800b8ba:	e7d6      	b.n	800b86a <_free_r+0x26>
 800b8bc:	6825      	ldr	r5, [r4, #0]
 800b8be:	1961      	adds	r1, r4, r5
 800b8c0:	428b      	cmp	r3, r1
 800b8c2:	bf04      	itt	eq
 800b8c4:	6819      	ldreq	r1, [r3, #0]
 800b8c6:	685b      	ldreq	r3, [r3, #4]
 800b8c8:	6063      	str	r3, [r4, #4]
 800b8ca:	bf04      	itt	eq
 800b8cc:	1949      	addeq	r1, r1, r5
 800b8ce:	6021      	streq	r1, [r4, #0]
 800b8d0:	6054      	str	r4, [r2, #4]
 800b8d2:	e7ca      	b.n	800b86a <_free_r+0x26>
 800b8d4:	b003      	add	sp, #12
 800b8d6:	bd30      	pop	{r4, r5, pc}
 800b8d8:	20000900 	.word	0x20000900

0800b8dc <sbrk_aligned>:
 800b8dc:	b570      	push	{r4, r5, r6, lr}
 800b8de:	4e0e      	ldr	r6, [pc, #56]	; (800b918 <sbrk_aligned+0x3c>)
 800b8e0:	460c      	mov	r4, r1
 800b8e2:	6831      	ldr	r1, [r6, #0]
 800b8e4:	4605      	mov	r5, r0
 800b8e6:	b911      	cbnz	r1, 800b8ee <sbrk_aligned+0x12>
 800b8e8:	f000 f88c 	bl	800ba04 <_sbrk_r>
 800b8ec:	6030      	str	r0, [r6, #0]
 800b8ee:	4621      	mov	r1, r4
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	f000 f887 	bl	800ba04 <_sbrk_r>
 800b8f6:	1c43      	adds	r3, r0, #1
 800b8f8:	d00a      	beq.n	800b910 <sbrk_aligned+0x34>
 800b8fa:	1cc4      	adds	r4, r0, #3
 800b8fc:	f024 0403 	bic.w	r4, r4, #3
 800b900:	42a0      	cmp	r0, r4
 800b902:	d007      	beq.n	800b914 <sbrk_aligned+0x38>
 800b904:	1a21      	subs	r1, r4, r0
 800b906:	4628      	mov	r0, r5
 800b908:	f000 f87c 	bl	800ba04 <_sbrk_r>
 800b90c:	3001      	adds	r0, #1
 800b90e:	d101      	bne.n	800b914 <sbrk_aligned+0x38>
 800b910:	f04f 34ff 	mov.w	r4, #4294967295
 800b914:	4620      	mov	r0, r4
 800b916:	bd70      	pop	{r4, r5, r6, pc}
 800b918:	20000904 	.word	0x20000904

0800b91c <_malloc_r>:
 800b91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b920:	1ccd      	adds	r5, r1, #3
 800b922:	f025 0503 	bic.w	r5, r5, #3
 800b926:	3508      	adds	r5, #8
 800b928:	2d0c      	cmp	r5, #12
 800b92a:	bf38      	it	cc
 800b92c:	250c      	movcc	r5, #12
 800b92e:	2d00      	cmp	r5, #0
 800b930:	4607      	mov	r7, r0
 800b932:	db01      	blt.n	800b938 <_malloc_r+0x1c>
 800b934:	42a9      	cmp	r1, r5
 800b936:	d905      	bls.n	800b944 <_malloc_r+0x28>
 800b938:	230c      	movs	r3, #12
 800b93a:	603b      	str	r3, [r7, #0]
 800b93c:	2600      	movs	r6, #0
 800b93e:	4630      	mov	r0, r6
 800b940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b944:	4e2e      	ldr	r6, [pc, #184]	; (800ba00 <_malloc_r+0xe4>)
 800b946:	f000 f8a5 	bl	800ba94 <__malloc_lock>
 800b94a:	6833      	ldr	r3, [r6, #0]
 800b94c:	461c      	mov	r4, r3
 800b94e:	bb34      	cbnz	r4, 800b99e <_malloc_r+0x82>
 800b950:	4629      	mov	r1, r5
 800b952:	4638      	mov	r0, r7
 800b954:	f7ff ffc2 	bl	800b8dc <sbrk_aligned>
 800b958:	1c43      	adds	r3, r0, #1
 800b95a:	4604      	mov	r4, r0
 800b95c:	d14d      	bne.n	800b9fa <_malloc_r+0xde>
 800b95e:	6834      	ldr	r4, [r6, #0]
 800b960:	4626      	mov	r6, r4
 800b962:	2e00      	cmp	r6, #0
 800b964:	d140      	bne.n	800b9e8 <_malloc_r+0xcc>
 800b966:	6823      	ldr	r3, [r4, #0]
 800b968:	4631      	mov	r1, r6
 800b96a:	4638      	mov	r0, r7
 800b96c:	eb04 0803 	add.w	r8, r4, r3
 800b970:	f000 f848 	bl	800ba04 <_sbrk_r>
 800b974:	4580      	cmp	r8, r0
 800b976:	d13a      	bne.n	800b9ee <_malloc_r+0xd2>
 800b978:	6821      	ldr	r1, [r4, #0]
 800b97a:	3503      	adds	r5, #3
 800b97c:	1a6d      	subs	r5, r5, r1
 800b97e:	f025 0503 	bic.w	r5, r5, #3
 800b982:	3508      	adds	r5, #8
 800b984:	2d0c      	cmp	r5, #12
 800b986:	bf38      	it	cc
 800b988:	250c      	movcc	r5, #12
 800b98a:	4629      	mov	r1, r5
 800b98c:	4638      	mov	r0, r7
 800b98e:	f7ff ffa5 	bl	800b8dc <sbrk_aligned>
 800b992:	3001      	adds	r0, #1
 800b994:	d02b      	beq.n	800b9ee <_malloc_r+0xd2>
 800b996:	6823      	ldr	r3, [r4, #0]
 800b998:	442b      	add	r3, r5
 800b99a:	6023      	str	r3, [r4, #0]
 800b99c:	e00e      	b.n	800b9bc <_malloc_r+0xa0>
 800b99e:	6822      	ldr	r2, [r4, #0]
 800b9a0:	1b52      	subs	r2, r2, r5
 800b9a2:	d41e      	bmi.n	800b9e2 <_malloc_r+0xc6>
 800b9a4:	2a0b      	cmp	r2, #11
 800b9a6:	d916      	bls.n	800b9d6 <_malloc_r+0xba>
 800b9a8:	1961      	adds	r1, r4, r5
 800b9aa:	42a3      	cmp	r3, r4
 800b9ac:	6025      	str	r5, [r4, #0]
 800b9ae:	bf18      	it	ne
 800b9b0:	6059      	strne	r1, [r3, #4]
 800b9b2:	6863      	ldr	r3, [r4, #4]
 800b9b4:	bf08      	it	eq
 800b9b6:	6031      	streq	r1, [r6, #0]
 800b9b8:	5162      	str	r2, [r4, r5]
 800b9ba:	604b      	str	r3, [r1, #4]
 800b9bc:	4638      	mov	r0, r7
 800b9be:	f104 060b 	add.w	r6, r4, #11
 800b9c2:	f000 f86d 	bl	800baa0 <__malloc_unlock>
 800b9c6:	f026 0607 	bic.w	r6, r6, #7
 800b9ca:	1d23      	adds	r3, r4, #4
 800b9cc:	1af2      	subs	r2, r6, r3
 800b9ce:	d0b6      	beq.n	800b93e <_malloc_r+0x22>
 800b9d0:	1b9b      	subs	r3, r3, r6
 800b9d2:	50a3      	str	r3, [r4, r2]
 800b9d4:	e7b3      	b.n	800b93e <_malloc_r+0x22>
 800b9d6:	6862      	ldr	r2, [r4, #4]
 800b9d8:	42a3      	cmp	r3, r4
 800b9da:	bf0c      	ite	eq
 800b9dc:	6032      	streq	r2, [r6, #0]
 800b9de:	605a      	strne	r2, [r3, #4]
 800b9e0:	e7ec      	b.n	800b9bc <_malloc_r+0xa0>
 800b9e2:	4623      	mov	r3, r4
 800b9e4:	6864      	ldr	r4, [r4, #4]
 800b9e6:	e7b2      	b.n	800b94e <_malloc_r+0x32>
 800b9e8:	4634      	mov	r4, r6
 800b9ea:	6876      	ldr	r6, [r6, #4]
 800b9ec:	e7b9      	b.n	800b962 <_malloc_r+0x46>
 800b9ee:	230c      	movs	r3, #12
 800b9f0:	603b      	str	r3, [r7, #0]
 800b9f2:	4638      	mov	r0, r7
 800b9f4:	f000 f854 	bl	800baa0 <__malloc_unlock>
 800b9f8:	e7a1      	b.n	800b93e <_malloc_r+0x22>
 800b9fa:	6025      	str	r5, [r4, #0]
 800b9fc:	e7de      	b.n	800b9bc <_malloc_r+0xa0>
 800b9fe:	bf00      	nop
 800ba00:	20000900 	.word	0x20000900

0800ba04 <_sbrk_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4d06      	ldr	r5, [pc, #24]	; (800ba20 <_sbrk_r+0x1c>)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	602b      	str	r3, [r5, #0]
 800ba10:	f7f9 feae 	bl	8005770 <_sbrk>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_sbrk_r+0x1a>
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_sbrk_r+0x1a>
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	20000908 	.word	0x20000908

0800ba24 <siprintf>:
 800ba24:	b40e      	push	{r1, r2, r3}
 800ba26:	b500      	push	{lr}
 800ba28:	b09c      	sub	sp, #112	; 0x70
 800ba2a:	ab1d      	add	r3, sp, #116	; 0x74
 800ba2c:	9002      	str	r0, [sp, #8]
 800ba2e:	9006      	str	r0, [sp, #24]
 800ba30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba34:	4809      	ldr	r0, [pc, #36]	; (800ba5c <siprintf+0x38>)
 800ba36:	9107      	str	r1, [sp, #28]
 800ba38:	9104      	str	r1, [sp, #16]
 800ba3a:	4909      	ldr	r1, [pc, #36]	; (800ba60 <siprintf+0x3c>)
 800ba3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba40:	9105      	str	r1, [sp, #20]
 800ba42:	6800      	ldr	r0, [r0, #0]
 800ba44:	9301      	str	r3, [sp, #4]
 800ba46:	a902      	add	r1, sp, #8
 800ba48:	f000 f88c 	bl	800bb64 <_svfiprintf_r>
 800ba4c:	9b02      	ldr	r3, [sp, #8]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	701a      	strb	r2, [r3, #0]
 800ba52:	b01c      	add	sp, #112	; 0x70
 800ba54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba58:	b003      	add	sp, #12
 800ba5a:	4770      	bx	lr
 800ba5c:	20000140 	.word	0x20000140
 800ba60:	ffff0208 	.word	0xffff0208

0800ba64 <strcat>:
 800ba64:	b510      	push	{r4, lr}
 800ba66:	4602      	mov	r2, r0
 800ba68:	7814      	ldrb	r4, [r2, #0]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	3201      	adds	r2, #1
 800ba6e:	2c00      	cmp	r4, #0
 800ba70:	d1fa      	bne.n	800ba68 <strcat+0x4>
 800ba72:	3b01      	subs	r3, #1
 800ba74:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba78:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba7c:	2a00      	cmp	r2, #0
 800ba7e:	d1f9      	bne.n	800ba74 <strcat+0x10>
 800ba80:	bd10      	pop	{r4, pc}

0800ba82 <strcpy>:
 800ba82:	4603      	mov	r3, r0
 800ba84:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba88:	f803 2b01 	strb.w	r2, [r3], #1
 800ba8c:	2a00      	cmp	r2, #0
 800ba8e:	d1f9      	bne.n	800ba84 <strcpy+0x2>
 800ba90:	4770      	bx	lr
	...

0800ba94 <__malloc_lock>:
 800ba94:	4801      	ldr	r0, [pc, #4]	; (800ba9c <__malloc_lock+0x8>)
 800ba96:	f000 baf9 	b.w	800c08c <__retarget_lock_acquire_recursive>
 800ba9a:	bf00      	nop
 800ba9c:	2000090c 	.word	0x2000090c

0800baa0 <__malloc_unlock>:
 800baa0:	4801      	ldr	r0, [pc, #4]	; (800baa8 <__malloc_unlock+0x8>)
 800baa2:	f000 baf4 	b.w	800c08e <__retarget_lock_release_recursive>
 800baa6:	bf00      	nop
 800baa8:	2000090c 	.word	0x2000090c

0800baac <__ssputs_r>:
 800baac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab0:	688e      	ldr	r6, [r1, #8]
 800bab2:	429e      	cmp	r6, r3
 800bab4:	4682      	mov	sl, r0
 800bab6:	460c      	mov	r4, r1
 800bab8:	4690      	mov	r8, r2
 800baba:	461f      	mov	r7, r3
 800babc:	d838      	bhi.n	800bb30 <__ssputs_r+0x84>
 800babe:	898a      	ldrh	r2, [r1, #12]
 800bac0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bac4:	d032      	beq.n	800bb2c <__ssputs_r+0x80>
 800bac6:	6825      	ldr	r5, [r4, #0]
 800bac8:	6909      	ldr	r1, [r1, #16]
 800baca:	eba5 0901 	sub.w	r9, r5, r1
 800bace:	6965      	ldr	r5, [r4, #20]
 800bad0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bad8:	3301      	adds	r3, #1
 800bada:	444b      	add	r3, r9
 800badc:	106d      	asrs	r5, r5, #1
 800bade:	429d      	cmp	r5, r3
 800bae0:	bf38      	it	cc
 800bae2:	461d      	movcc	r5, r3
 800bae4:	0553      	lsls	r3, r2, #21
 800bae6:	d531      	bpl.n	800bb4c <__ssputs_r+0xa0>
 800bae8:	4629      	mov	r1, r5
 800baea:	f7ff ff17 	bl	800b91c <_malloc_r>
 800baee:	4606      	mov	r6, r0
 800baf0:	b950      	cbnz	r0, 800bb08 <__ssputs_r+0x5c>
 800baf2:	230c      	movs	r3, #12
 800baf4:	f8ca 3000 	str.w	r3, [sl]
 800baf8:	89a3      	ldrh	r3, [r4, #12]
 800bafa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bafe:	81a3      	strh	r3, [r4, #12]
 800bb00:	f04f 30ff 	mov.w	r0, #4294967295
 800bb04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb08:	6921      	ldr	r1, [r4, #16]
 800bb0a:	464a      	mov	r2, r9
 800bb0c:	f7ff fe84 	bl	800b818 <memcpy>
 800bb10:	89a3      	ldrh	r3, [r4, #12]
 800bb12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb1a:	81a3      	strh	r3, [r4, #12]
 800bb1c:	6126      	str	r6, [r4, #16]
 800bb1e:	6165      	str	r5, [r4, #20]
 800bb20:	444e      	add	r6, r9
 800bb22:	eba5 0509 	sub.w	r5, r5, r9
 800bb26:	6026      	str	r6, [r4, #0]
 800bb28:	60a5      	str	r5, [r4, #8]
 800bb2a:	463e      	mov	r6, r7
 800bb2c:	42be      	cmp	r6, r7
 800bb2e:	d900      	bls.n	800bb32 <__ssputs_r+0x86>
 800bb30:	463e      	mov	r6, r7
 800bb32:	6820      	ldr	r0, [r4, #0]
 800bb34:	4632      	mov	r2, r6
 800bb36:	4641      	mov	r1, r8
 800bb38:	f000 faaa 	bl	800c090 <memmove>
 800bb3c:	68a3      	ldr	r3, [r4, #8]
 800bb3e:	1b9b      	subs	r3, r3, r6
 800bb40:	60a3      	str	r3, [r4, #8]
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	4433      	add	r3, r6
 800bb46:	6023      	str	r3, [r4, #0]
 800bb48:	2000      	movs	r0, #0
 800bb4a:	e7db      	b.n	800bb04 <__ssputs_r+0x58>
 800bb4c:	462a      	mov	r2, r5
 800bb4e:	f000 fab9 	bl	800c0c4 <_realloc_r>
 800bb52:	4606      	mov	r6, r0
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d1e1      	bne.n	800bb1c <__ssputs_r+0x70>
 800bb58:	6921      	ldr	r1, [r4, #16]
 800bb5a:	4650      	mov	r0, sl
 800bb5c:	f7ff fe72 	bl	800b844 <_free_r>
 800bb60:	e7c7      	b.n	800baf2 <__ssputs_r+0x46>
	...

0800bb64 <_svfiprintf_r>:
 800bb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb68:	4698      	mov	r8, r3
 800bb6a:	898b      	ldrh	r3, [r1, #12]
 800bb6c:	061b      	lsls	r3, r3, #24
 800bb6e:	b09d      	sub	sp, #116	; 0x74
 800bb70:	4607      	mov	r7, r0
 800bb72:	460d      	mov	r5, r1
 800bb74:	4614      	mov	r4, r2
 800bb76:	d50e      	bpl.n	800bb96 <_svfiprintf_r+0x32>
 800bb78:	690b      	ldr	r3, [r1, #16]
 800bb7a:	b963      	cbnz	r3, 800bb96 <_svfiprintf_r+0x32>
 800bb7c:	2140      	movs	r1, #64	; 0x40
 800bb7e:	f7ff fecd 	bl	800b91c <_malloc_r>
 800bb82:	6028      	str	r0, [r5, #0]
 800bb84:	6128      	str	r0, [r5, #16]
 800bb86:	b920      	cbnz	r0, 800bb92 <_svfiprintf_r+0x2e>
 800bb88:	230c      	movs	r3, #12
 800bb8a:	603b      	str	r3, [r7, #0]
 800bb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb90:	e0d1      	b.n	800bd36 <_svfiprintf_r+0x1d2>
 800bb92:	2340      	movs	r3, #64	; 0x40
 800bb94:	616b      	str	r3, [r5, #20]
 800bb96:	2300      	movs	r3, #0
 800bb98:	9309      	str	r3, [sp, #36]	; 0x24
 800bb9a:	2320      	movs	r3, #32
 800bb9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bba0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bba4:	2330      	movs	r3, #48	; 0x30
 800bba6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd50 <_svfiprintf_r+0x1ec>
 800bbaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbae:	f04f 0901 	mov.w	r9, #1
 800bbb2:	4623      	mov	r3, r4
 800bbb4:	469a      	mov	sl, r3
 800bbb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbba:	b10a      	cbz	r2, 800bbc0 <_svfiprintf_r+0x5c>
 800bbbc:	2a25      	cmp	r2, #37	; 0x25
 800bbbe:	d1f9      	bne.n	800bbb4 <_svfiprintf_r+0x50>
 800bbc0:	ebba 0b04 	subs.w	fp, sl, r4
 800bbc4:	d00b      	beq.n	800bbde <_svfiprintf_r+0x7a>
 800bbc6:	465b      	mov	r3, fp
 800bbc8:	4622      	mov	r2, r4
 800bbca:	4629      	mov	r1, r5
 800bbcc:	4638      	mov	r0, r7
 800bbce:	f7ff ff6d 	bl	800baac <__ssputs_r>
 800bbd2:	3001      	adds	r0, #1
 800bbd4:	f000 80aa 	beq.w	800bd2c <_svfiprintf_r+0x1c8>
 800bbd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbda:	445a      	add	r2, fp
 800bbdc:	9209      	str	r2, [sp, #36]	; 0x24
 800bbde:	f89a 3000 	ldrb.w	r3, [sl]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	f000 80a2 	beq.w	800bd2c <_svfiprintf_r+0x1c8>
 800bbe8:	2300      	movs	r3, #0
 800bbea:	f04f 32ff 	mov.w	r2, #4294967295
 800bbee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbf2:	f10a 0a01 	add.w	sl, sl, #1
 800bbf6:	9304      	str	r3, [sp, #16]
 800bbf8:	9307      	str	r3, [sp, #28]
 800bbfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbfe:	931a      	str	r3, [sp, #104]	; 0x68
 800bc00:	4654      	mov	r4, sl
 800bc02:	2205      	movs	r2, #5
 800bc04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc08:	4851      	ldr	r0, [pc, #324]	; (800bd50 <_svfiprintf_r+0x1ec>)
 800bc0a:	f7f4 faf9 	bl	8000200 <memchr>
 800bc0e:	9a04      	ldr	r2, [sp, #16]
 800bc10:	b9d8      	cbnz	r0, 800bc4a <_svfiprintf_r+0xe6>
 800bc12:	06d0      	lsls	r0, r2, #27
 800bc14:	bf44      	itt	mi
 800bc16:	2320      	movmi	r3, #32
 800bc18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc1c:	0711      	lsls	r1, r2, #28
 800bc1e:	bf44      	itt	mi
 800bc20:	232b      	movmi	r3, #43	; 0x2b
 800bc22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc26:	f89a 3000 	ldrb.w	r3, [sl]
 800bc2a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc2c:	d015      	beq.n	800bc5a <_svfiprintf_r+0xf6>
 800bc2e:	9a07      	ldr	r2, [sp, #28]
 800bc30:	4654      	mov	r4, sl
 800bc32:	2000      	movs	r0, #0
 800bc34:	f04f 0c0a 	mov.w	ip, #10
 800bc38:	4621      	mov	r1, r4
 800bc3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc3e:	3b30      	subs	r3, #48	; 0x30
 800bc40:	2b09      	cmp	r3, #9
 800bc42:	d94e      	bls.n	800bce2 <_svfiprintf_r+0x17e>
 800bc44:	b1b0      	cbz	r0, 800bc74 <_svfiprintf_r+0x110>
 800bc46:	9207      	str	r2, [sp, #28]
 800bc48:	e014      	b.n	800bc74 <_svfiprintf_r+0x110>
 800bc4a:	eba0 0308 	sub.w	r3, r0, r8
 800bc4e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc52:	4313      	orrs	r3, r2
 800bc54:	9304      	str	r3, [sp, #16]
 800bc56:	46a2      	mov	sl, r4
 800bc58:	e7d2      	b.n	800bc00 <_svfiprintf_r+0x9c>
 800bc5a:	9b03      	ldr	r3, [sp, #12]
 800bc5c:	1d19      	adds	r1, r3, #4
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	9103      	str	r1, [sp, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	bfbb      	ittet	lt
 800bc66:	425b      	neglt	r3, r3
 800bc68:	f042 0202 	orrlt.w	r2, r2, #2
 800bc6c:	9307      	strge	r3, [sp, #28]
 800bc6e:	9307      	strlt	r3, [sp, #28]
 800bc70:	bfb8      	it	lt
 800bc72:	9204      	strlt	r2, [sp, #16]
 800bc74:	7823      	ldrb	r3, [r4, #0]
 800bc76:	2b2e      	cmp	r3, #46	; 0x2e
 800bc78:	d10c      	bne.n	800bc94 <_svfiprintf_r+0x130>
 800bc7a:	7863      	ldrb	r3, [r4, #1]
 800bc7c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc7e:	d135      	bne.n	800bcec <_svfiprintf_r+0x188>
 800bc80:	9b03      	ldr	r3, [sp, #12]
 800bc82:	1d1a      	adds	r2, r3, #4
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	9203      	str	r2, [sp, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	bfb8      	it	lt
 800bc8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc90:	3402      	adds	r4, #2
 800bc92:	9305      	str	r3, [sp, #20]
 800bc94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd60 <_svfiprintf_r+0x1fc>
 800bc98:	7821      	ldrb	r1, [r4, #0]
 800bc9a:	2203      	movs	r2, #3
 800bc9c:	4650      	mov	r0, sl
 800bc9e:	f7f4 faaf 	bl	8000200 <memchr>
 800bca2:	b140      	cbz	r0, 800bcb6 <_svfiprintf_r+0x152>
 800bca4:	2340      	movs	r3, #64	; 0x40
 800bca6:	eba0 000a 	sub.w	r0, r0, sl
 800bcaa:	fa03 f000 	lsl.w	r0, r3, r0
 800bcae:	9b04      	ldr	r3, [sp, #16]
 800bcb0:	4303      	orrs	r3, r0
 800bcb2:	3401      	adds	r4, #1
 800bcb4:	9304      	str	r3, [sp, #16]
 800bcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcba:	4826      	ldr	r0, [pc, #152]	; (800bd54 <_svfiprintf_r+0x1f0>)
 800bcbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcc0:	2206      	movs	r2, #6
 800bcc2:	f7f4 fa9d 	bl	8000200 <memchr>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d038      	beq.n	800bd3c <_svfiprintf_r+0x1d8>
 800bcca:	4b23      	ldr	r3, [pc, #140]	; (800bd58 <_svfiprintf_r+0x1f4>)
 800bccc:	bb1b      	cbnz	r3, 800bd16 <_svfiprintf_r+0x1b2>
 800bcce:	9b03      	ldr	r3, [sp, #12]
 800bcd0:	3307      	adds	r3, #7
 800bcd2:	f023 0307 	bic.w	r3, r3, #7
 800bcd6:	3308      	adds	r3, #8
 800bcd8:	9303      	str	r3, [sp, #12]
 800bcda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcdc:	4433      	add	r3, r6
 800bcde:	9309      	str	r3, [sp, #36]	; 0x24
 800bce0:	e767      	b.n	800bbb2 <_svfiprintf_r+0x4e>
 800bce2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bce6:	460c      	mov	r4, r1
 800bce8:	2001      	movs	r0, #1
 800bcea:	e7a5      	b.n	800bc38 <_svfiprintf_r+0xd4>
 800bcec:	2300      	movs	r3, #0
 800bcee:	3401      	adds	r4, #1
 800bcf0:	9305      	str	r3, [sp, #20]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	f04f 0c0a 	mov.w	ip, #10
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcfe:	3a30      	subs	r2, #48	; 0x30
 800bd00:	2a09      	cmp	r2, #9
 800bd02:	d903      	bls.n	800bd0c <_svfiprintf_r+0x1a8>
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d0c5      	beq.n	800bc94 <_svfiprintf_r+0x130>
 800bd08:	9105      	str	r1, [sp, #20]
 800bd0a:	e7c3      	b.n	800bc94 <_svfiprintf_r+0x130>
 800bd0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd10:	4604      	mov	r4, r0
 800bd12:	2301      	movs	r3, #1
 800bd14:	e7f0      	b.n	800bcf8 <_svfiprintf_r+0x194>
 800bd16:	ab03      	add	r3, sp, #12
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	462a      	mov	r2, r5
 800bd1c:	4b0f      	ldr	r3, [pc, #60]	; (800bd5c <_svfiprintf_r+0x1f8>)
 800bd1e:	a904      	add	r1, sp, #16
 800bd20:	4638      	mov	r0, r7
 800bd22:	f3af 8000 	nop.w
 800bd26:	1c42      	adds	r2, r0, #1
 800bd28:	4606      	mov	r6, r0
 800bd2a:	d1d6      	bne.n	800bcda <_svfiprintf_r+0x176>
 800bd2c:	89ab      	ldrh	r3, [r5, #12]
 800bd2e:	065b      	lsls	r3, r3, #25
 800bd30:	f53f af2c 	bmi.w	800bb8c <_svfiprintf_r+0x28>
 800bd34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd36:	b01d      	add	sp, #116	; 0x74
 800bd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd3c:	ab03      	add	r3, sp, #12
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	462a      	mov	r2, r5
 800bd42:	4b06      	ldr	r3, [pc, #24]	; (800bd5c <_svfiprintf_r+0x1f8>)
 800bd44:	a904      	add	r1, sp, #16
 800bd46:	4638      	mov	r0, r7
 800bd48:	f000 f87a 	bl	800be40 <_printf_i>
 800bd4c:	e7eb      	b.n	800bd26 <_svfiprintf_r+0x1c2>
 800bd4e:	bf00      	nop
 800bd50:	0800da48 	.word	0x0800da48
 800bd54:	0800da52 	.word	0x0800da52
 800bd58:	00000000 	.word	0x00000000
 800bd5c:	0800baad 	.word	0x0800baad
 800bd60:	0800da4e 	.word	0x0800da4e

0800bd64 <_printf_common>:
 800bd64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd68:	4616      	mov	r6, r2
 800bd6a:	4699      	mov	r9, r3
 800bd6c:	688a      	ldr	r2, [r1, #8]
 800bd6e:	690b      	ldr	r3, [r1, #16]
 800bd70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd74:	4293      	cmp	r3, r2
 800bd76:	bfb8      	it	lt
 800bd78:	4613      	movlt	r3, r2
 800bd7a:	6033      	str	r3, [r6, #0]
 800bd7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd80:	4607      	mov	r7, r0
 800bd82:	460c      	mov	r4, r1
 800bd84:	b10a      	cbz	r2, 800bd8a <_printf_common+0x26>
 800bd86:	3301      	adds	r3, #1
 800bd88:	6033      	str	r3, [r6, #0]
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	0699      	lsls	r1, r3, #26
 800bd8e:	bf42      	ittt	mi
 800bd90:	6833      	ldrmi	r3, [r6, #0]
 800bd92:	3302      	addmi	r3, #2
 800bd94:	6033      	strmi	r3, [r6, #0]
 800bd96:	6825      	ldr	r5, [r4, #0]
 800bd98:	f015 0506 	ands.w	r5, r5, #6
 800bd9c:	d106      	bne.n	800bdac <_printf_common+0x48>
 800bd9e:	f104 0a19 	add.w	sl, r4, #25
 800bda2:	68e3      	ldr	r3, [r4, #12]
 800bda4:	6832      	ldr	r2, [r6, #0]
 800bda6:	1a9b      	subs	r3, r3, r2
 800bda8:	42ab      	cmp	r3, r5
 800bdaa:	dc26      	bgt.n	800bdfa <_printf_common+0x96>
 800bdac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bdb0:	1e13      	subs	r3, r2, #0
 800bdb2:	6822      	ldr	r2, [r4, #0]
 800bdb4:	bf18      	it	ne
 800bdb6:	2301      	movne	r3, #1
 800bdb8:	0692      	lsls	r2, r2, #26
 800bdba:	d42b      	bmi.n	800be14 <_printf_common+0xb0>
 800bdbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdc0:	4649      	mov	r1, r9
 800bdc2:	4638      	mov	r0, r7
 800bdc4:	47c0      	blx	r8
 800bdc6:	3001      	adds	r0, #1
 800bdc8:	d01e      	beq.n	800be08 <_printf_common+0xa4>
 800bdca:	6823      	ldr	r3, [r4, #0]
 800bdcc:	68e5      	ldr	r5, [r4, #12]
 800bdce:	6832      	ldr	r2, [r6, #0]
 800bdd0:	f003 0306 	and.w	r3, r3, #6
 800bdd4:	2b04      	cmp	r3, #4
 800bdd6:	bf08      	it	eq
 800bdd8:	1aad      	subeq	r5, r5, r2
 800bdda:	68a3      	ldr	r3, [r4, #8]
 800bddc:	6922      	ldr	r2, [r4, #16]
 800bdde:	bf0c      	ite	eq
 800bde0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bde4:	2500      	movne	r5, #0
 800bde6:	4293      	cmp	r3, r2
 800bde8:	bfc4      	itt	gt
 800bdea:	1a9b      	subgt	r3, r3, r2
 800bdec:	18ed      	addgt	r5, r5, r3
 800bdee:	2600      	movs	r6, #0
 800bdf0:	341a      	adds	r4, #26
 800bdf2:	42b5      	cmp	r5, r6
 800bdf4:	d11a      	bne.n	800be2c <_printf_common+0xc8>
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	e008      	b.n	800be0c <_printf_common+0xa8>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	4652      	mov	r2, sl
 800bdfe:	4649      	mov	r1, r9
 800be00:	4638      	mov	r0, r7
 800be02:	47c0      	blx	r8
 800be04:	3001      	adds	r0, #1
 800be06:	d103      	bne.n	800be10 <_printf_common+0xac>
 800be08:	f04f 30ff 	mov.w	r0, #4294967295
 800be0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be10:	3501      	adds	r5, #1
 800be12:	e7c6      	b.n	800bda2 <_printf_common+0x3e>
 800be14:	18e1      	adds	r1, r4, r3
 800be16:	1c5a      	adds	r2, r3, #1
 800be18:	2030      	movs	r0, #48	; 0x30
 800be1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be1e:	4422      	add	r2, r4
 800be20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be28:	3302      	adds	r3, #2
 800be2a:	e7c7      	b.n	800bdbc <_printf_common+0x58>
 800be2c:	2301      	movs	r3, #1
 800be2e:	4622      	mov	r2, r4
 800be30:	4649      	mov	r1, r9
 800be32:	4638      	mov	r0, r7
 800be34:	47c0      	blx	r8
 800be36:	3001      	adds	r0, #1
 800be38:	d0e6      	beq.n	800be08 <_printf_common+0xa4>
 800be3a:	3601      	adds	r6, #1
 800be3c:	e7d9      	b.n	800bdf2 <_printf_common+0x8e>
	...

0800be40 <_printf_i>:
 800be40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be44:	7e0f      	ldrb	r7, [r1, #24]
 800be46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be48:	2f78      	cmp	r7, #120	; 0x78
 800be4a:	4691      	mov	r9, r2
 800be4c:	4680      	mov	r8, r0
 800be4e:	460c      	mov	r4, r1
 800be50:	469a      	mov	sl, r3
 800be52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be56:	d807      	bhi.n	800be68 <_printf_i+0x28>
 800be58:	2f62      	cmp	r7, #98	; 0x62
 800be5a:	d80a      	bhi.n	800be72 <_printf_i+0x32>
 800be5c:	2f00      	cmp	r7, #0
 800be5e:	f000 80d8 	beq.w	800c012 <_printf_i+0x1d2>
 800be62:	2f58      	cmp	r7, #88	; 0x58
 800be64:	f000 80a3 	beq.w	800bfae <_printf_i+0x16e>
 800be68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be70:	e03a      	b.n	800bee8 <_printf_i+0xa8>
 800be72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be76:	2b15      	cmp	r3, #21
 800be78:	d8f6      	bhi.n	800be68 <_printf_i+0x28>
 800be7a:	a101      	add	r1, pc, #4	; (adr r1, 800be80 <_printf_i+0x40>)
 800be7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be80:	0800bed9 	.word	0x0800bed9
 800be84:	0800beed 	.word	0x0800beed
 800be88:	0800be69 	.word	0x0800be69
 800be8c:	0800be69 	.word	0x0800be69
 800be90:	0800be69 	.word	0x0800be69
 800be94:	0800be69 	.word	0x0800be69
 800be98:	0800beed 	.word	0x0800beed
 800be9c:	0800be69 	.word	0x0800be69
 800bea0:	0800be69 	.word	0x0800be69
 800bea4:	0800be69 	.word	0x0800be69
 800bea8:	0800be69 	.word	0x0800be69
 800beac:	0800bff9 	.word	0x0800bff9
 800beb0:	0800bf1d 	.word	0x0800bf1d
 800beb4:	0800bfdb 	.word	0x0800bfdb
 800beb8:	0800be69 	.word	0x0800be69
 800bebc:	0800be69 	.word	0x0800be69
 800bec0:	0800c01b 	.word	0x0800c01b
 800bec4:	0800be69 	.word	0x0800be69
 800bec8:	0800bf1d 	.word	0x0800bf1d
 800becc:	0800be69 	.word	0x0800be69
 800bed0:	0800be69 	.word	0x0800be69
 800bed4:	0800bfe3 	.word	0x0800bfe3
 800bed8:	682b      	ldr	r3, [r5, #0]
 800beda:	1d1a      	adds	r2, r3, #4
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	602a      	str	r2, [r5, #0]
 800bee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bee8:	2301      	movs	r3, #1
 800beea:	e0a3      	b.n	800c034 <_printf_i+0x1f4>
 800beec:	6820      	ldr	r0, [r4, #0]
 800beee:	6829      	ldr	r1, [r5, #0]
 800bef0:	0606      	lsls	r6, r0, #24
 800bef2:	f101 0304 	add.w	r3, r1, #4
 800bef6:	d50a      	bpl.n	800bf0e <_printf_i+0xce>
 800bef8:	680e      	ldr	r6, [r1, #0]
 800befa:	602b      	str	r3, [r5, #0]
 800befc:	2e00      	cmp	r6, #0
 800befe:	da03      	bge.n	800bf08 <_printf_i+0xc8>
 800bf00:	232d      	movs	r3, #45	; 0x2d
 800bf02:	4276      	negs	r6, r6
 800bf04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf08:	485e      	ldr	r0, [pc, #376]	; (800c084 <_printf_i+0x244>)
 800bf0a:	230a      	movs	r3, #10
 800bf0c:	e019      	b.n	800bf42 <_printf_i+0x102>
 800bf0e:	680e      	ldr	r6, [r1, #0]
 800bf10:	602b      	str	r3, [r5, #0]
 800bf12:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf16:	bf18      	it	ne
 800bf18:	b236      	sxthne	r6, r6
 800bf1a:	e7ef      	b.n	800befc <_printf_i+0xbc>
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	6820      	ldr	r0, [r4, #0]
 800bf20:	1d19      	adds	r1, r3, #4
 800bf22:	6029      	str	r1, [r5, #0]
 800bf24:	0601      	lsls	r1, r0, #24
 800bf26:	d501      	bpl.n	800bf2c <_printf_i+0xec>
 800bf28:	681e      	ldr	r6, [r3, #0]
 800bf2a:	e002      	b.n	800bf32 <_printf_i+0xf2>
 800bf2c:	0646      	lsls	r6, r0, #25
 800bf2e:	d5fb      	bpl.n	800bf28 <_printf_i+0xe8>
 800bf30:	881e      	ldrh	r6, [r3, #0]
 800bf32:	4854      	ldr	r0, [pc, #336]	; (800c084 <_printf_i+0x244>)
 800bf34:	2f6f      	cmp	r7, #111	; 0x6f
 800bf36:	bf0c      	ite	eq
 800bf38:	2308      	moveq	r3, #8
 800bf3a:	230a      	movne	r3, #10
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf42:	6865      	ldr	r5, [r4, #4]
 800bf44:	60a5      	str	r5, [r4, #8]
 800bf46:	2d00      	cmp	r5, #0
 800bf48:	bfa2      	ittt	ge
 800bf4a:	6821      	ldrge	r1, [r4, #0]
 800bf4c:	f021 0104 	bicge.w	r1, r1, #4
 800bf50:	6021      	strge	r1, [r4, #0]
 800bf52:	b90e      	cbnz	r6, 800bf58 <_printf_i+0x118>
 800bf54:	2d00      	cmp	r5, #0
 800bf56:	d04d      	beq.n	800bff4 <_printf_i+0x1b4>
 800bf58:	4615      	mov	r5, r2
 800bf5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf5e:	fb03 6711 	mls	r7, r3, r1, r6
 800bf62:	5dc7      	ldrb	r7, [r0, r7]
 800bf64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf68:	4637      	mov	r7, r6
 800bf6a:	42bb      	cmp	r3, r7
 800bf6c:	460e      	mov	r6, r1
 800bf6e:	d9f4      	bls.n	800bf5a <_printf_i+0x11a>
 800bf70:	2b08      	cmp	r3, #8
 800bf72:	d10b      	bne.n	800bf8c <_printf_i+0x14c>
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	07de      	lsls	r6, r3, #31
 800bf78:	d508      	bpl.n	800bf8c <_printf_i+0x14c>
 800bf7a:	6923      	ldr	r3, [r4, #16]
 800bf7c:	6861      	ldr	r1, [r4, #4]
 800bf7e:	4299      	cmp	r1, r3
 800bf80:	bfde      	ittt	le
 800bf82:	2330      	movle	r3, #48	; 0x30
 800bf84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf8c:	1b52      	subs	r2, r2, r5
 800bf8e:	6122      	str	r2, [r4, #16]
 800bf90:	f8cd a000 	str.w	sl, [sp]
 800bf94:	464b      	mov	r3, r9
 800bf96:	aa03      	add	r2, sp, #12
 800bf98:	4621      	mov	r1, r4
 800bf9a:	4640      	mov	r0, r8
 800bf9c:	f7ff fee2 	bl	800bd64 <_printf_common>
 800bfa0:	3001      	adds	r0, #1
 800bfa2:	d14c      	bne.n	800c03e <_printf_i+0x1fe>
 800bfa4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa8:	b004      	add	sp, #16
 800bfaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfae:	4835      	ldr	r0, [pc, #212]	; (800c084 <_printf_i+0x244>)
 800bfb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bfb4:	6829      	ldr	r1, [r5, #0]
 800bfb6:	6823      	ldr	r3, [r4, #0]
 800bfb8:	f851 6b04 	ldr.w	r6, [r1], #4
 800bfbc:	6029      	str	r1, [r5, #0]
 800bfbe:	061d      	lsls	r5, r3, #24
 800bfc0:	d514      	bpl.n	800bfec <_printf_i+0x1ac>
 800bfc2:	07df      	lsls	r7, r3, #31
 800bfc4:	bf44      	itt	mi
 800bfc6:	f043 0320 	orrmi.w	r3, r3, #32
 800bfca:	6023      	strmi	r3, [r4, #0]
 800bfcc:	b91e      	cbnz	r6, 800bfd6 <_printf_i+0x196>
 800bfce:	6823      	ldr	r3, [r4, #0]
 800bfd0:	f023 0320 	bic.w	r3, r3, #32
 800bfd4:	6023      	str	r3, [r4, #0]
 800bfd6:	2310      	movs	r3, #16
 800bfd8:	e7b0      	b.n	800bf3c <_printf_i+0xfc>
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	f043 0320 	orr.w	r3, r3, #32
 800bfe0:	6023      	str	r3, [r4, #0]
 800bfe2:	2378      	movs	r3, #120	; 0x78
 800bfe4:	4828      	ldr	r0, [pc, #160]	; (800c088 <_printf_i+0x248>)
 800bfe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfea:	e7e3      	b.n	800bfb4 <_printf_i+0x174>
 800bfec:	0659      	lsls	r1, r3, #25
 800bfee:	bf48      	it	mi
 800bff0:	b2b6      	uxthmi	r6, r6
 800bff2:	e7e6      	b.n	800bfc2 <_printf_i+0x182>
 800bff4:	4615      	mov	r5, r2
 800bff6:	e7bb      	b.n	800bf70 <_printf_i+0x130>
 800bff8:	682b      	ldr	r3, [r5, #0]
 800bffa:	6826      	ldr	r6, [r4, #0]
 800bffc:	6961      	ldr	r1, [r4, #20]
 800bffe:	1d18      	adds	r0, r3, #4
 800c000:	6028      	str	r0, [r5, #0]
 800c002:	0635      	lsls	r5, r6, #24
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	d501      	bpl.n	800c00c <_printf_i+0x1cc>
 800c008:	6019      	str	r1, [r3, #0]
 800c00a:	e002      	b.n	800c012 <_printf_i+0x1d2>
 800c00c:	0670      	lsls	r0, r6, #25
 800c00e:	d5fb      	bpl.n	800c008 <_printf_i+0x1c8>
 800c010:	8019      	strh	r1, [r3, #0]
 800c012:	2300      	movs	r3, #0
 800c014:	6123      	str	r3, [r4, #16]
 800c016:	4615      	mov	r5, r2
 800c018:	e7ba      	b.n	800bf90 <_printf_i+0x150>
 800c01a:	682b      	ldr	r3, [r5, #0]
 800c01c:	1d1a      	adds	r2, r3, #4
 800c01e:	602a      	str	r2, [r5, #0]
 800c020:	681d      	ldr	r5, [r3, #0]
 800c022:	6862      	ldr	r2, [r4, #4]
 800c024:	2100      	movs	r1, #0
 800c026:	4628      	mov	r0, r5
 800c028:	f7f4 f8ea 	bl	8000200 <memchr>
 800c02c:	b108      	cbz	r0, 800c032 <_printf_i+0x1f2>
 800c02e:	1b40      	subs	r0, r0, r5
 800c030:	6060      	str	r0, [r4, #4]
 800c032:	6863      	ldr	r3, [r4, #4]
 800c034:	6123      	str	r3, [r4, #16]
 800c036:	2300      	movs	r3, #0
 800c038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c03c:	e7a8      	b.n	800bf90 <_printf_i+0x150>
 800c03e:	6923      	ldr	r3, [r4, #16]
 800c040:	462a      	mov	r2, r5
 800c042:	4649      	mov	r1, r9
 800c044:	4640      	mov	r0, r8
 800c046:	47d0      	blx	sl
 800c048:	3001      	adds	r0, #1
 800c04a:	d0ab      	beq.n	800bfa4 <_printf_i+0x164>
 800c04c:	6823      	ldr	r3, [r4, #0]
 800c04e:	079b      	lsls	r3, r3, #30
 800c050:	d413      	bmi.n	800c07a <_printf_i+0x23a>
 800c052:	68e0      	ldr	r0, [r4, #12]
 800c054:	9b03      	ldr	r3, [sp, #12]
 800c056:	4298      	cmp	r0, r3
 800c058:	bfb8      	it	lt
 800c05a:	4618      	movlt	r0, r3
 800c05c:	e7a4      	b.n	800bfa8 <_printf_i+0x168>
 800c05e:	2301      	movs	r3, #1
 800c060:	4632      	mov	r2, r6
 800c062:	4649      	mov	r1, r9
 800c064:	4640      	mov	r0, r8
 800c066:	47d0      	blx	sl
 800c068:	3001      	adds	r0, #1
 800c06a:	d09b      	beq.n	800bfa4 <_printf_i+0x164>
 800c06c:	3501      	adds	r5, #1
 800c06e:	68e3      	ldr	r3, [r4, #12]
 800c070:	9903      	ldr	r1, [sp, #12]
 800c072:	1a5b      	subs	r3, r3, r1
 800c074:	42ab      	cmp	r3, r5
 800c076:	dcf2      	bgt.n	800c05e <_printf_i+0x21e>
 800c078:	e7eb      	b.n	800c052 <_printf_i+0x212>
 800c07a:	2500      	movs	r5, #0
 800c07c:	f104 0619 	add.w	r6, r4, #25
 800c080:	e7f5      	b.n	800c06e <_printf_i+0x22e>
 800c082:	bf00      	nop
 800c084:	0800da59 	.word	0x0800da59
 800c088:	0800da6a 	.word	0x0800da6a

0800c08c <__retarget_lock_acquire_recursive>:
 800c08c:	4770      	bx	lr

0800c08e <__retarget_lock_release_recursive>:
 800c08e:	4770      	bx	lr

0800c090 <memmove>:
 800c090:	4288      	cmp	r0, r1
 800c092:	b510      	push	{r4, lr}
 800c094:	eb01 0402 	add.w	r4, r1, r2
 800c098:	d902      	bls.n	800c0a0 <memmove+0x10>
 800c09a:	4284      	cmp	r4, r0
 800c09c:	4623      	mov	r3, r4
 800c09e:	d807      	bhi.n	800c0b0 <memmove+0x20>
 800c0a0:	1e43      	subs	r3, r0, #1
 800c0a2:	42a1      	cmp	r1, r4
 800c0a4:	d008      	beq.n	800c0b8 <memmove+0x28>
 800c0a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0ae:	e7f8      	b.n	800c0a2 <memmove+0x12>
 800c0b0:	4402      	add	r2, r0
 800c0b2:	4601      	mov	r1, r0
 800c0b4:	428a      	cmp	r2, r1
 800c0b6:	d100      	bne.n	800c0ba <memmove+0x2a>
 800c0b8:	bd10      	pop	{r4, pc}
 800c0ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0c2:	e7f7      	b.n	800c0b4 <memmove+0x24>

0800c0c4 <_realloc_r>:
 800c0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c8:	4680      	mov	r8, r0
 800c0ca:	4614      	mov	r4, r2
 800c0cc:	460e      	mov	r6, r1
 800c0ce:	b921      	cbnz	r1, 800c0da <_realloc_r+0x16>
 800c0d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	f7ff bc21 	b.w	800b91c <_malloc_r>
 800c0da:	b92a      	cbnz	r2, 800c0e8 <_realloc_r+0x24>
 800c0dc:	f7ff fbb2 	bl	800b844 <_free_r>
 800c0e0:	4625      	mov	r5, r4
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e8:	f000 f81b 	bl	800c122 <_malloc_usable_size_r>
 800c0ec:	4284      	cmp	r4, r0
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	d802      	bhi.n	800c0f8 <_realloc_r+0x34>
 800c0f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0f6:	d812      	bhi.n	800c11e <_realloc_r+0x5a>
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	f7ff fc0e 	bl	800b91c <_malloc_r>
 800c100:	4605      	mov	r5, r0
 800c102:	2800      	cmp	r0, #0
 800c104:	d0ed      	beq.n	800c0e2 <_realloc_r+0x1e>
 800c106:	42bc      	cmp	r4, r7
 800c108:	4622      	mov	r2, r4
 800c10a:	4631      	mov	r1, r6
 800c10c:	bf28      	it	cs
 800c10e:	463a      	movcs	r2, r7
 800c110:	f7ff fb82 	bl	800b818 <memcpy>
 800c114:	4631      	mov	r1, r6
 800c116:	4640      	mov	r0, r8
 800c118:	f7ff fb94 	bl	800b844 <_free_r>
 800c11c:	e7e1      	b.n	800c0e2 <_realloc_r+0x1e>
 800c11e:	4635      	mov	r5, r6
 800c120:	e7df      	b.n	800c0e2 <_realloc_r+0x1e>

0800c122 <_malloc_usable_size_r>:
 800c122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c126:	1f18      	subs	r0, r3, #4
 800c128:	2b00      	cmp	r3, #0
 800c12a:	bfbc      	itt	lt
 800c12c:	580b      	ldrlt	r3, [r1, r0]
 800c12e:	18c0      	addlt	r0, r0, r3
 800c130:	4770      	bx	lr
 800c132:	0000      	movs	r0, r0
 800c134:	0000      	movs	r0, r0
	...

0800c138 <sin>:
 800c138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c13a:	ec53 2b10 	vmov	r2, r3, d0
 800c13e:	4828      	ldr	r0, [pc, #160]	; (800c1e0 <sin+0xa8>)
 800c140:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c144:	4281      	cmp	r1, r0
 800c146:	dc07      	bgt.n	800c158 <sin+0x20>
 800c148:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c1d8 <sin+0xa0>
 800c14c:	2000      	movs	r0, #0
 800c14e:	b005      	add	sp, #20
 800c150:	f85d eb04 	ldr.w	lr, [sp], #4
 800c154:	f000 be6c 	b.w	800ce30 <__kernel_sin>
 800c158:	4822      	ldr	r0, [pc, #136]	; (800c1e4 <sin+0xac>)
 800c15a:	4281      	cmp	r1, r0
 800c15c:	dd09      	ble.n	800c172 <sin+0x3a>
 800c15e:	ee10 0a10 	vmov	r0, s0
 800c162:	4619      	mov	r1, r3
 800c164:	f7f4 f8a0 	bl	80002a8 <__aeabi_dsub>
 800c168:	ec41 0b10 	vmov	d0, r0, r1
 800c16c:	b005      	add	sp, #20
 800c16e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c172:	4668      	mov	r0, sp
 800c174:	f000 f838 	bl	800c1e8 <__ieee754_rem_pio2>
 800c178:	f000 0003 	and.w	r0, r0, #3
 800c17c:	2801      	cmp	r0, #1
 800c17e:	d00c      	beq.n	800c19a <sin+0x62>
 800c180:	2802      	cmp	r0, #2
 800c182:	d011      	beq.n	800c1a8 <sin+0x70>
 800c184:	b9f0      	cbnz	r0, 800c1c4 <sin+0x8c>
 800c186:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c18a:	ed9d 0b00 	vldr	d0, [sp]
 800c18e:	2001      	movs	r0, #1
 800c190:	f000 fe4e 	bl	800ce30 <__kernel_sin>
 800c194:	ec51 0b10 	vmov	r0, r1, d0
 800c198:	e7e6      	b.n	800c168 <sin+0x30>
 800c19a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c19e:	ed9d 0b00 	vldr	d0, [sp]
 800c1a2:	f000 fa2d 	bl	800c600 <__kernel_cos>
 800c1a6:	e7f5      	b.n	800c194 <sin+0x5c>
 800c1a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1ac:	ed9d 0b00 	vldr	d0, [sp]
 800c1b0:	2001      	movs	r0, #1
 800c1b2:	f000 fe3d 	bl	800ce30 <__kernel_sin>
 800c1b6:	ec53 2b10 	vmov	r2, r3, d0
 800c1ba:	ee10 0a10 	vmov	r0, s0
 800c1be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c1c2:	e7d1      	b.n	800c168 <sin+0x30>
 800c1c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1c8:	ed9d 0b00 	vldr	d0, [sp]
 800c1cc:	f000 fa18 	bl	800c600 <__kernel_cos>
 800c1d0:	e7f1      	b.n	800c1b6 <sin+0x7e>
 800c1d2:	bf00      	nop
 800c1d4:	f3af 8000 	nop.w
	...
 800c1e0:	3fe921fb 	.word	0x3fe921fb
 800c1e4:	7fefffff 	.word	0x7fefffff

0800c1e8 <__ieee754_rem_pio2>:
 800c1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ec:	ed2d 8b02 	vpush	{d8}
 800c1f0:	ec55 4b10 	vmov	r4, r5, d0
 800c1f4:	4bca      	ldr	r3, [pc, #808]	; (800c520 <__ieee754_rem_pio2+0x338>)
 800c1f6:	b08b      	sub	sp, #44	; 0x2c
 800c1f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c1fc:	4598      	cmp	r8, r3
 800c1fe:	4682      	mov	sl, r0
 800c200:	9502      	str	r5, [sp, #8]
 800c202:	dc08      	bgt.n	800c216 <__ieee754_rem_pio2+0x2e>
 800c204:	2200      	movs	r2, #0
 800c206:	2300      	movs	r3, #0
 800c208:	ed80 0b00 	vstr	d0, [r0]
 800c20c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c210:	f04f 0b00 	mov.w	fp, #0
 800c214:	e028      	b.n	800c268 <__ieee754_rem_pio2+0x80>
 800c216:	4bc3      	ldr	r3, [pc, #780]	; (800c524 <__ieee754_rem_pio2+0x33c>)
 800c218:	4598      	cmp	r8, r3
 800c21a:	dc78      	bgt.n	800c30e <__ieee754_rem_pio2+0x126>
 800c21c:	9b02      	ldr	r3, [sp, #8]
 800c21e:	4ec2      	ldr	r6, [pc, #776]	; (800c528 <__ieee754_rem_pio2+0x340>)
 800c220:	2b00      	cmp	r3, #0
 800c222:	ee10 0a10 	vmov	r0, s0
 800c226:	a3b0      	add	r3, pc, #704	; (adr r3, 800c4e8 <__ieee754_rem_pio2+0x300>)
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	4629      	mov	r1, r5
 800c22e:	dd39      	ble.n	800c2a4 <__ieee754_rem_pio2+0xbc>
 800c230:	f7f4 f83a 	bl	80002a8 <__aeabi_dsub>
 800c234:	45b0      	cmp	r8, r6
 800c236:	4604      	mov	r4, r0
 800c238:	460d      	mov	r5, r1
 800c23a:	d01b      	beq.n	800c274 <__ieee754_rem_pio2+0x8c>
 800c23c:	a3ac      	add	r3, pc, #688	; (adr r3, 800c4f0 <__ieee754_rem_pio2+0x308>)
 800c23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c242:	f7f4 f831 	bl	80002a8 <__aeabi_dsub>
 800c246:	4602      	mov	r2, r0
 800c248:	460b      	mov	r3, r1
 800c24a:	e9ca 2300 	strd	r2, r3, [sl]
 800c24e:	4620      	mov	r0, r4
 800c250:	4629      	mov	r1, r5
 800c252:	f7f4 f829 	bl	80002a8 <__aeabi_dsub>
 800c256:	a3a6      	add	r3, pc, #664	; (adr r3, 800c4f0 <__ieee754_rem_pio2+0x308>)
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	f7f4 f824 	bl	80002a8 <__aeabi_dsub>
 800c260:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c264:	f04f 0b01 	mov.w	fp, #1
 800c268:	4658      	mov	r0, fp
 800c26a:	b00b      	add	sp, #44	; 0x2c
 800c26c:	ecbd 8b02 	vpop	{d8}
 800c270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c274:	a3a0      	add	r3, pc, #640	; (adr r3, 800c4f8 <__ieee754_rem_pio2+0x310>)
 800c276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27a:	f7f4 f815 	bl	80002a8 <__aeabi_dsub>
 800c27e:	a3a0      	add	r3, pc, #640	; (adr r3, 800c500 <__ieee754_rem_pio2+0x318>)
 800c280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c284:	4604      	mov	r4, r0
 800c286:	460d      	mov	r5, r1
 800c288:	f7f4 f80e 	bl	80002a8 <__aeabi_dsub>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	e9ca 2300 	strd	r2, r3, [sl]
 800c294:	4620      	mov	r0, r4
 800c296:	4629      	mov	r1, r5
 800c298:	f7f4 f806 	bl	80002a8 <__aeabi_dsub>
 800c29c:	a398      	add	r3, pc, #608	; (adr r3, 800c500 <__ieee754_rem_pio2+0x318>)
 800c29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a2:	e7db      	b.n	800c25c <__ieee754_rem_pio2+0x74>
 800c2a4:	f7f4 f802 	bl	80002ac <__adddf3>
 800c2a8:	45b0      	cmp	r8, r6
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	460d      	mov	r5, r1
 800c2ae:	d016      	beq.n	800c2de <__ieee754_rem_pio2+0xf6>
 800c2b0:	a38f      	add	r3, pc, #572	; (adr r3, 800c4f0 <__ieee754_rem_pio2+0x308>)
 800c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b6:	f7f3 fff9 	bl	80002ac <__adddf3>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	460b      	mov	r3, r1
 800c2be:	e9ca 2300 	strd	r2, r3, [sl]
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	f7f3 ffef 	bl	80002a8 <__aeabi_dsub>
 800c2ca:	a389      	add	r3, pc, #548	; (adr r3, 800c4f0 <__ieee754_rem_pio2+0x308>)
 800c2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d0:	f7f3 ffec 	bl	80002ac <__adddf3>
 800c2d4:	f04f 3bff 	mov.w	fp, #4294967295
 800c2d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c2dc:	e7c4      	b.n	800c268 <__ieee754_rem_pio2+0x80>
 800c2de:	a386      	add	r3, pc, #536	; (adr r3, 800c4f8 <__ieee754_rem_pio2+0x310>)
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	f7f3 ffe2 	bl	80002ac <__adddf3>
 800c2e8:	a385      	add	r3, pc, #532	; (adr r3, 800c500 <__ieee754_rem_pio2+0x318>)
 800c2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	460d      	mov	r5, r1
 800c2f2:	f7f3 ffdb 	bl	80002ac <__adddf3>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	e9ca 2300 	strd	r2, r3, [sl]
 800c2fe:	4620      	mov	r0, r4
 800c300:	4629      	mov	r1, r5
 800c302:	f7f3 ffd1 	bl	80002a8 <__aeabi_dsub>
 800c306:	a37e      	add	r3, pc, #504	; (adr r3, 800c500 <__ieee754_rem_pio2+0x318>)
 800c308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30c:	e7e0      	b.n	800c2d0 <__ieee754_rem_pio2+0xe8>
 800c30e:	4b87      	ldr	r3, [pc, #540]	; (800c52c <__ieee754_rem_pio2+0x344>)
 800c310:	4598      	cmp	r8, r3
 800c312:	f300 80d9 	bgt.w	800c4c8 <__ieee754_rem_pio2+0x2e0>
 800c316:	f000 fe49 	bl	800cfac <fabs>
 800c31a:	ec55 4b10 	vmov	r4, r5, d0
 800c31e:	ee10 0a10 	vmov	r0, s0
 800c322:	a379      	add	r3, pc, #484	; (adr r3, 800c508 <__ieee754_rem_pio2+0x320>)
 800c324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c328:	4629      	mov	r1, r5
 800c32a:	f7f4 f975 	bl	8000618 <__aeabi_dmul>
 800c32e:	4b80      	ldr	r3, [pc, #512]	; (800c530 <__ieee754_rem_pio2+0x348>)
 800c330:	2200      	movs	r2, #0
 800c332:	f7f3 ffbb 	bl	80002ac <__adddf3>
 800c336:	f7f4 fc09 	bl	8000b4c <__aeabi_d2iz>
 800c33a:	4683      	mov	fp, r0
 800c33c:	f7f4 f902 	bl	8000544 <__aeabi_i2d>
 800c340:	4602      	mov	r2, r0
 800c342:	460b      	mov	r3, r1
 800c344:	ec43 2b18 	vmov	d8, r2, r3
 800c348:	a367      	add	r3, pc, #412	; (adr r3, 800c4e8 <__ieee754_rem_pio2+0x300>)
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	f7f4 f963 	bl	8000618 <__aeabi_dmul>
 800c352:	4602      	mov	r2, r0
 800c354:	460b      	mov	r3, r1
 800c356:	4620      	mov	r0, r4
 800c358:	4629      	mov	r1, r5
 800c35a:	f7f3 ffa5 	bl	80002a8 <__aeabi_dsub>
 800c35e:	a364      	add	r3, pc, #400	; (adr r3, 800c4f0 <__ieee754_rem_pio2+0x308>)
 800c360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c364:	4606      	mov	r6, r0
 800c366:	460f      	mov	r7, r1
 800c368:	ec51 0b18 	vmov	r0, r1, d8
 800c36c:	f7f4 f954 	bl	8000618 <__aeabi_dmul>
 800c370:	f1bb 0f1f 	cmp.w	fp, #31
 800c374:	4604      	mov	r4, r0
 800c376:	460d      	mov	r5, r1
 800c378:	dc0d      	bgt.n	800c396 <__ieee754_rem_pio2+0x1ae>
 800c37a:	4b6e      	ldr	r3, [pc, #440]	; (800c534 <__ieee754_rem_pio2+0x34c>)
 800c37c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c384:	4543      	cmp	r3, r8
 800c386:	d006      	beq.n	800c396 <__ieee754_rem_pio2+0x1ae>
 800c388:	4622      	mov	r2, r4
 800c38a:	462b      	mov	r3, r5
 800c38c:	4630      	mov	r0, r6
 800c38e:	4639      	mov	r1, r7
 800c390:	f7f3 ff8a 	bl	80002a8 <__aeabi_dsub>
 800c394:	e00f      	b.n	800c3b6 <__ieee754_rem_pio2+0x1ce>
 800c396:	462b      	mov	r3, r5
 800c398:	4622      	mov	r2, r4
 800c39a:	4630      	mov	r0, r6
 800c39c:	4639      	mov	r1, r7
 800c39e:	f7f3 ff83 	bl	80002a8 <__aeabi_dsub>
 800c3a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c3a6:	9303      	str	r3, [sp, #12]
 800c3a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c3ac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c3b0:	f1b8 0f10 	cmp.w	r8, #16
 800c3b4:	dc02      	bgt.n	800c3bc <__ieee754_rem_pio2+0x1d4>
 800c3b6:	e9ca 0100 	strd	r0, r1, [sl]
 800c3ba:	e039      	b.n	800c430 <__ieee754_rem_pio2+0x248>
 800c3bc:	a34e      	add	r3, pc, #312	; (adr r3, 800c4f8 <__ieee754_rem_pio2+0x310>)
 800c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c2:	ec51 0b18 	vmov	r0, r1, d8
 800c3c6:	f7f4 f927 	bl	8000618 <__aeabi_dmul>
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	460d      	mov	r5, r1
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	4639      	mov	r1, r7
 800c3d6:	f7f3 ff67 	bl	80002a8 <__aeabi_dsub>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	4680      	mov	r8, r0
 800c3e0:	4689      	mov	r9, r1
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	4639      	mov	r1, r7
 800c3e6:	f7f3 ff5f 	bl	80002a8 <__aeabi_dsub>
 800c3ea:	4622      	mov	r2, r4
 800c3ec:	462b      	mov	r3, r5
 800c3ee:	f7f3 ff5b 	bl	80002a8 <__aeabi_dsub>
 800c3f2:	a343      	add	r3, pc, #268	; (adr r3, 800c500 <__ieee754_rem_pio2+0x318>)
 800c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	460d      	mov	r5, r1
 800c3fc:	ec51 0b18 	vmov	r0, r1, d8
 800c400:	f7f4 f90a 	bl	8000618 <__aeabi_dmul>
 800c404:	4622      	mov	r2, r4
 800c406:	462b      	mov	r3, r5
 800c408:	f7f3 ff4e 	bl	80002a8 <__aeabi_dsub>
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	4604      	mov	r4, r0
 800c412:	460d      	mov	r5, r1
 800c414:	4640      	mov	r0, r8
 800c416:	4649      	mov	r1, r9
 800c418:	f7f3 ff46 	bl	80002a8 <__aeabi_dsub>
 800c41c:	9a03      	ldr	r2, [sp, #12]
 800c41e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c422:	1ad3      	subs	r3, r2, r3
 800c424:	2b31      	cmp	r3, #49	; 0x31
 800c426:	dc24      	bgt.n	800c472 <__ieee754_rem_pio2+0x28a>
 800c428:	e9ca 0100 	strd	r0, r1, [sl]
 800c42c:	4646      	mov	r6, r8
 800c42e:	464f      	mov	r7, r9
 800c430:	e9da 8900 	ldrd	r8, r9, [sl]
 800c434:	4630      	mov	r0, r6
 800c436:	4642      	mov	r2, r8
 800c438:	464b      	mov	r3, r9
 800c43a:	4639      	mov	r1, r7
 800c43c:	f7f3 ff34 	bl	80002a8 <__aeabi_dsub>
 800c440:	462b      	mov	r3, r5
 800c442:	4622      	mov	r2, r4
 800c444:	f7f3 ff30 	bl	80002a8 <__aeabi_dsub>
 800c448:	9b02      	ldr	r3, [sp, #8]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c450:	f6bf af0a 	bge.w	800c268 <__ieee754_rem_pio2+0x80>
 800c454:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c458:	f8ca 3004 	str.w	r3, [sl, #4]
 800c45c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c460:	f8ca 8000 	str.w	r8, [sl]
 800c464:	f8ca 0008 	str.w	r0, [sl, #8]
 800c468:	f8ca 300c 	str.w	r3, [sl, #12]
 800c46c:	f1cb 0b00 	rsb	fp, fp, #0
 800c470:	e6fa      	b.n	800c268 <__ieee754_rem_pio2+0x80>
 800c472:	a327      	add	r3, pc, #156	; (adr r3, 800c510 <__ieee754_rem_pio2+0x328>)
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	ec51 0b18 	vmov	r0, r1, d8
 800c47c:	f7f4 f8cc 	bl	8000618 <__aeabi_dmul>
 800c480:	4604      	mov	r4, r0
 800c482:	460d      	mov	r5, r1
 800c484:	4602      	mov	r2, r0
 800c486:	460b      	mov	r3, r1
 800c488:	4640      	mov	r0, r8
 800c48a:	4649      	mov	r1, r9
 800c48c:	f7f3 ff0c 	bl	80002a8 <__aeabi_dsub>
 800c490:	4602      	mov	r2, r0
 800c492:	460b      	mov	r3, r1
 800c494:	4606      	mov	r6, r0
 800c496:	460f      	mov	r7, r1
 800c498:	4640      	mov	r0, r8
 800c49a:	4649      	mov	r1, r9
 800c49c:	f7f3 ff04 	bl	80002a8 <__aeabi_dsub>
 800c4a0:	4622      	mov	r2, r4
 800c4a2:	462b      	mov	r3, r5
 800c4a4:	f7f3 ff00 	bl	80002a8 <__aeabi_dsub>
 800c4a8:	a31b      	add	r3, pc, #108	; (adr r3, 800c518 <__ieee754_rem_pio2+0x330>)
 800c4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	460d      	mov	r5, r1
 800c4b2:	ec51 0b18 	vmov	r0, r1, d8
 800c4b6:	f7f4 f8af 	bl	8000618 <__aeabi_dmul>
 800c4ba:	4622      	mov	r2, r4
 800c4bc:	462b      	mov	r3, r5
 800c4be:	f7f3 fef3 	bl	80002a8 <__aeabi_dsub>
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	460d      	mov	r5, r1
 800c4c6:	e75f      	b.n	800c388 <__ieee754_rem_pio2+0x1a0>
 800c4c8:	4b1b      	ldr	r3, [pc, #108]	; (800c538 <__ieee754_rem_pio2+0x350>)
 800c4ca:	4598      	cmp	r8, r3
 800c4cc:	dd36      	ble.n	800c53c <__ieee754_rem_pio2+0x354>
 800c4ce:	ee10 2a10 	vmov	r2, s0
 800c4d2:	462b      	mov	r3, r5
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	f7f3 fee6 	bl	80002a8 <__aeabi_dsub>
 800c4dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c4e0:	e9ca 0100 	strd	r0, r1, [sl]
 800c4e4:	e694      	b.n	800c210 <__ieee754_rem_pio2+0x28>
 800c4e6:	bf00      	nop
 800c4e8:	54400000 	.word	0x54400000
 800c4ec:	3ff921fb 	.word	0x3ff921fb
 800c4f0:	1a626331 	.word	0x1a626331
 800c4f4:	3dd0b461 	.word	0x3dd0b461
 800c4f8:	1a600000 	.word	0x1a600000
 800c4fc:	3dd0b461 	.word	0x3dd0b461
 800c500:	2e037073 	.word	0x2e037073
 800c504:	3ba3198a 	.word	0x3ba3198a
 800c508:	6dc9c883 	.word	0x6dc9c883
 800c50c:	3fe45f30 	.word	0x3fe45f30
 800c510:	2e000000 	.word	0x2e000000
 800c514:	3ba3198a 	.word	0x3ba3198a
 800c518:	252049c1 	.word	0x252049c1
 800c51c:	397b839a 	.word	0x397b839a
 800c520:	3fe921fb 	.word	0x3fe921fb
 800c524:	4002d97b 	.word	0x4002d97b
 800c528:	3ff921fb 	.word	0x3ff921fb
 800c52c:	413921fb 	.word	0x413921fb
 800c530:	3fe00000 	.word	0x3fe00000
 800c534:	0800da7c 	.word	0x0800da7c
 800c538:	7fefffff 	.word	0x7fefffff
 800c53c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c540:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c544:	ee10 0a10 	vmov	r0, s0
 800c548:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c54c:	ee10 6a10 	vmov	r6, s0
 800c550:	460f      	mov	r7, r1
 800c552:	f7f4 fafb 	bl	8000b4c <__aeabi_d2iz>
 800c556:	f7f3 fff5 	bl	8000544 <__aeabi_i2d>
 800c55a:	4602      	mov	r2, r0
 800c55c:	460b      	mov	r3, r1
 800c55e:	4630      	mov	r0, r6
 800c560:	4639      	mov	r1, r7
 800c562:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c566:	f7f3 fe9f 	bl	80002a8 <__aeabi_dsub>
 800c56a:	4b23      	ldr	r3, [pc, #140]	; (800c5f8 <__ieee754_rem_pio2+0x410>)
 800c56c:	2200      	movs	r2, #0
 800c56e:	f7f4 f853 	bl	8000618 <__aeabi_dmul>
 800c572:	460f      	mov	r7, r1
 800c574:	4606      	mov	r6, r0
 800c576:	f7f4 fae9 	bl	8000b4c <__aeabi_d2iz>
 800c57a:	f7f3 ffe3 	bl	8000544 <__aeabi_i2d>
 800c57e:	4602      	mov	r2, r0
 800c580:	460b      	mov	r3, r1
 800c582:	4630      	mov	r0, r6
 800c584:	4639      	mov	r1, r7
 800c586:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c58a:	f7f3 fe8d 	bl	80002a8 <__aeabi_dsub>
 800c58e:	4b1a      	ldr	r3, [pc, #104]	; (800c5f8 <__ieee754_rem_pio2+0x410>)
 800c590:	2200      	movs	r2, #0
 800c592:	f7f4 f841 	bl	8000618 <__aeabi_dmul>
 800c596:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c59a:	ad04      	add	r5, sp, #16
 800c59c:	f04f 0803 	mov.w	r8, #3
 800c5a0:	46a9      	mov	r9, r5
 800c5a2:	2600      	movs	r6, #0
 800c5a4:	2700      	movs	r7, #0
 800c5a6:	4632      	mov	r2, r6
 800c5a8:	463b      	mov	r3, r7
 800c5aa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c5ae:	46c3      	mov	fp, r8
 800c5b0:	3d08      	subs	r5, #8
 800c5b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c5b6:	f7f4 fa97 	bl	8000ae8 <__aeabi_dcmpeq>
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	d1f3      	bne.n	800c5a6 <__ieee754_rem_pio2+0x3be>
 800c5be:	4b0f      	ldr	r3, [pc, #60]	; (800c5fc <__ieee754_rem_pio2+0x414>)
 800c5c0:	9301      	str	r3, [sp, #4]
 800c5c2:	2302      	movs	r3, #2
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	4622      	mov	r2, r4
 800c5c8:	465b      	mov	r3, fp
 800c5ca:	4651      	mov	r1, sl
 800c5cc:	4648      	mov	r0, r9
 800c5ce:	f000 f8df 	bl	800c790 <__kernel_rem_pio2>
 800c5d2:	9b02      	ldr	r3, [sp, #8]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	4683      	mov	fp, r0
 800c5d8:	f6bf ae46 	bge.w	800c268 <__ieee754_rem_pio2+0x80>
 800c5dc:	e9da 2100 	ldrd	r2, r1, [sl]
 800c5e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5e4:	e9ca 2300 	strd	r2, r3, [sl]
 800c5e8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c5ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5f0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c5f4:	e73a      	b.n	800c46c <__ieee754_rem_pio2+0x284>
 800c5f6:	bf00      	nop
 800c5f8:	41700000 	.word	0x41700000
 800c5fc:	0800dafc 	.word	0x0800dafc

0800c600 <__kernel_cos>:
 800c600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c604:	ec57 6b10 	vmov	r6, r7, d0
 800c608:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c60c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c610:	ed8d 1b00 	vstr	d1, [sp]
 800c614:	da07      	bge.n	800c626 <__kernel_cos+0x26>
 800c616:	ee10 0a10 	vmov	r0, s0
 800c61a:	4639      	mov	r1, r7
 800c61c:	f7f4 fa96 	bl	8000b4c <__aeabi_d2iz>
 800c620:	2800      	cmp	r0, #0
 800c622:	f000 8088 	beq.w	800c736 <__kernel_cos+0x136>
 800c626:	4632      	mov	r2, r6
 800c628:	463b      	mov	r3, r7
 800c62a:	4630      	mov	r0, r6
 800c62c:	4639      	mov	r1, r7
 800c62e:	f7f3 fff3 	bl	8000618 <__aeabi_dmul>
 800c632:	4b51      	ldr	r3, [pc, #324]	; (800c778 <__kernel_cos+0x178>)
 800c634:	2200      	movs	r2, #0
 800c636:	4604      	mov	r4, r0
 800c638:	460d      	mov	r5, r1
 800c63a:	f7f3 ffed 	bl	8000618 <__aeabi_dmul>
 800c63e:	a340      	add	r3, pc, #256	; (adr r3, 800c740 <__kernel_cos+0x140>)
 800c640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c644:	4682      	mov	sl, r0
 800c646:	468b      	mov	fp, r1
 800c648:	4620      	mov	r0, r4
 800c64a:	4629      	mov	r1, r5
 800c64c:	f7f3 ffe4 	bl	8000618 <__aeabi_dmul>
 800c650:	a33d      	add	r3, pc, #244	; (adr r3, 800c748 <__kernel_cos+0x148>)
 800c652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c656:	f7f3 fe29 	bl	80002ac <__adddf3>
 800c65a:	4622      	mov	r2, r4
 800c65c:	462b      	mov	r3, r5
 800c65e:	f7f3 ffdb 	bl	8000618 <__aeabi_dmul>
 800c662:	a33b      	add	r3, pc, #236	; (adr r3, 800c750 <__kernel_cos+0x150>)
 800c664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c668:	f7f3 fe1e 	bl	80002a8 <__aeabi_dsub>
 800c66c:	4622      	mov	r2, r4
 800c66e:	462b      	mov	r3, r5
 800c670:	f7f3 ffd2 	bl	8000618 <__aeabi_dmul>
 800c674:	a338      	add	r3, pc, #224	; (adr r3, 800c758 <__kernel_cos+0x158>)
 800c676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67a:	f7f3 fe17 	bl	80002ac <__adddf3>
 800c67e:	4622      	mov	r2, r4
 800c680:	462b      	mov	r3, r5
 800c682:	f7f3 ffc9 	bl	8000618 <__aeabi_dmul>
 800c686:	a336      	add	r3, pc, #216	; (adr r3, 800c760 <__kernel_cos+0x160>)
 800c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68c:	f7f3 fe0c 	bl	80002a8 <__aeabi_dsub>
 800c690:	4622      	mov	r2, r4
 800c692:	462b      	mov	r3, r5
 800c694:	f7f3 ffc0 	bl	8000618 <__aeabi_dmul>
 800c698:	a333      	add	r3, pc, #204	; (adr r3, 800c768 <__kernel_cos+0x168>)
 800c69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69e:	f7f3 fe05 	bl	80002ac <__adddf3>
 800c6a2:	4622      	mov	r2, r4
 800c6a4:	462b      	mov	r3, r5
 800c6a6:	f7f3 ffb7 	bl	8000618 <__aeabi_dmul>
 800c6aa:	4622      	mov	r2, r4
 800c6ac:	462b      	mov	r3, r5
 800c6ae:	f7f3 ffb3 	bl	8000618 <__aeabi_dmul>
 800c6b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6b6:	4604      	mov	r4, r0
 800c6b8:	460d      	mov	r5, r1
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	4639      	mov	r1, r7
 800c6be:	f7f3 ffab 	bl	8000618 <__aeabi_dmul>
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f7f3 fded 	bl	80002a8 <__aeabi_dsub>
 800c6ce:	4b2b      	ldr	r3, [pc, #172]	; (800c77c <__kernel_cos+0x17c>)
 800c6d0:	4598      	cmp	r8, r3
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	460f      	mov	r7, r1
 800c6d6:	dc10      	bgt.n	800c6fa <__kernel_cos+0xfa>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4650      	mov	r0, sl
 800c6de:	4659      	mov	r1, fp
 800c6e0:	f7f3 fde2 	bl	80002a8 <__aeabi_dsub>
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4926      	ldr	r1, [pc, #152]	; (800c780 <__kernel_cos+0x180>)
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	f7f3 fddc 	bl	80002a8 <__aeabi_dsub>
 800c6f0:	ec41 0b10 	vmov	d0, r0, r1
 800c6f4:	b003      	add	sp, #12
 800c6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6fa:	4b22      	ldr	r3, [pc, #136]	; (800c784 <__kernel_cos+0x184>)
 800c6fc:	4920      	ldr	r1, [pc, #128]	; (800c780 <__kernel_cos+0x180>)
 800c6fe:	4598      	cmp	r8, r3
 800c700:	bfcc      	ite	gt
 800c702:	4d21      	ldrgt	r5, [pc, #132]	; (800c788 <__kernel_cos+0x188>)
 800c704:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c708:	2400      	movs	r4, #0
 800c70a:	4622      	mov	r2, r4
 800c70c:	462b      	mov	r3, r5
 800c70e:	2000      	movs	r0, #0
 800c710:	f7f3 fdca 	bl	80002a8 <__aeabi_dsub>
 800c714:	4622      	mov	r2, r4
 800c716:	4680      	mov	r8, r0
 800c718:	4689      	mov	r9, r1
 800c71a:	462b      	mov	r3, r5
 800c71c:	4650      	mov	r0, sl
 800c71e:	4659      	mov	r1, fp
 800c720:	f7f3 fdc2 	bl	80002a8 <__aeabi_dsub>
 800c724:	4632      	mov	r2, r6
 800c726:	463b      	mov	r3, r7
 800c728:	f7f3 fdbe 	bl	80002a8 <__aeabi_dsub>
 800c72c:	4602      	mov	r2, r0
 800c72e:	460b      	mov	r3, r1
 800c730:	4640      	mov	r0, r8
 800c732:	4649      	mov	r1, r9
 800c734:	e7da      	b.n	800c6ec <__kernel_cos+0xec>
 800c736:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c770 <__kernel_cos+0x170>
 800c73a:	e7db      	b.n	800c6f4 <__kernel_cos+0xf4>
 800c73c:	f3af 8000 	nop.w
 800c740:	be8838d4 	.word	0xbe8838d4
 800c744:	bda8fae9 	.word	0xbda8fae9
 800c748:	bdb4b1c4 	.word	0xbdb4b1c4
 800c74c:	3e21ee9e 	.word	0x3e21ee9e
 800c750:	809c52ad 	.word	0x809c52ad
 800c754:	3e927e4f 	.word	0x3e927e4f
 800c758:	19cb1590 	.word	0x19cb1590
 800c75c:	3efa01a0 	.word	0x3efa01a0
 800c760:	16c15177 	.word	0x16c15177
 800c764:	3f56c16c 	.word	0x3f56c16c
 800c768:	5555554c 	.word	0x5555554c
 800c76c:	3fa55555 	.word	0x3fa55555
 800c770:	00000000 	.word	0x00000000
 800c774:	3ff00000 	.word	0x3ff00000
 800c778:	3fe00000 	.word	0x3fe00000
 800c77c:	3fd33332 	.word	0x3fd33332
 800c780:	3ff00000 	.word	0x3ff00000
 800c784:	3fe90000 	.word	0x3fe90000
 800c788:	3fd20000 	.word	0x3fd20000
 800c78c:	00000000 	.word	0x00000000

0800c790 <__kernel_rem_pio2>:
 800c790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c794:	ed2d 8b02 	vpush	{d8}
 800c798:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c79c:	f112 0f14 	cmn.w	r2, #20
 800c7a0:	9308      	str	r3, [sp, #32]
 800c7a2:	9101      	str	r1, [sp, #4]
 800c7a4:	4bc4      	ldr	r3, [pc, #784]	; (800cab8 <__kernel_rem_pio2+0x328>)
 800c7a6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c7a8:	900b      	str	r0, [sp, #44]	; 0x2c
 800c7aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c7ae:	9302      	str	r3, [sp, #8]
 800c7b0:	9b08      	ldr	r3, [sp, #32]
 800c7b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c7b6:	bfa8      	it	ge
 800c7b8:	1ed4      	subge	r4, r2, #3
 800c7ba:	9306      	str	r3, [sp, #24]
 800c7bc:	bfb2      	itee	lt
 800c7be:	2400      	movlt	r4, #0
 800c7c0:	2318      	movge	r3, #24
 800c7c2:	fb94 f4f3 	sdivge	r4, r4, r3
 800c7c6:	f06f 0317 	mvn.w	r3, #23
 800c7ca:	fb04 3303 	mla	r3, r4, r3, r3
 800c7ce:	eb03 0a02 	add.w	sl, r3, r2
 800c7d2:	9b02      	ldr	r3, [sp, #8]
 800c7d4:	9a06      	ldr	r2, [sp, #24]
 800c7d6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800caa8 <__kernel_rem_pio2+0x318>
 800c7da:	eb03 0802 	add.w	r8, r3, r2
 800c7de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c7e0:	1aa7      	subs	r7, r4, r2
 800c7e2:	ae22      	add	r6, sp, #136	; 0x88
 800c7e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c7e8:	2500      	movs	r5, #0
 800c7ea:	4545      	cmp	r5, r8
 800c7ec:	dd13      	ble.n	800c816 <__kernel_rem_pio2+0x86>
 800c7ee:	9b08      	ldr	r3, [sp, #32]
 800c7f0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800caa8 <__kernel_rem_pio2+0x318>
 800c7f4:	aa22      	add	r2, sp, #136	; 0x88
 800c7f6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c7fa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c7fe:	f04f 0800 	mov.w	r8, #0
 800c802:	9b02      	ldr	r3, [sp, #8]
 800c804:	4598      	cmp	r8, r3
 800c806:	dc2f      	bgt.n	800c868 <__kernel_rem_pio2+0xd8>
 800c808:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c80c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800c810:	462f      	mov	r7, r5
 800c812:	2600      	movs	r6, #0
 800c814:	e01b      	b.n	800c84e <__kernel_rem_pio2+0xbe>
 800c816:	42ef      	cmn	r7, r5
 800c818:	d407      	bmi.n	800c82a <__kernel_rem_pio2+0x9a>
 800c81a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c81e:	f7f3 fe91 	bl	8000544 <__aeabi_i2d>
 800c822:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c826:	3501      	adds	r5, #1
 800c828:	e7df      	b.n	800c7ea <__kernel_rem_pio2+0x5a>
 800c82a:	ec51 0b18 	vmov	r0, r1, d8
 800c82e:	e7f8      	b.n	800c822 <__kernel_rem_pio2+0x92>
 800c830:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c834:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c838:	f7f3 feee 	bl	8000618 <__aeabi_dmul>
 800c83c:	4602      	mov	r2, r0
 800c83e:	460b      	mov	r3, r1
 800c840:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c844:	f7f3 fd32 	bl	80002ac <__adddf3>
 800c848:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c84c:	3601      	adds	r6, #1
 800c84e:	9b06      	ldr	r3, [sp, #24]
 800c850:	429e      	cmp	r6, r3
 800c852:	f1a7 0708 	sub.w	r7, r7, #8
 800c856:	ddeb      	ble.n	800c830 <__kernel_rem_pio2+0xa0>
 800c858:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c85c:	f108 0801 	add.w	r8, r8, #1
 800c860:	ecab 7b02 	vstmia	fp!, {d7}
 800c864:	3508      	adds	r5, #8
 800c866:	e7cc      	b.n	800c802 <__kernel_rem_pio2+0x72>
 800c868:	9b02      	ldr	r3, [sp, #8]
 800c86a:	aa0e      	add	r2, sp, #56	; 0x38
 800c86c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c870:	930d      	str	r3, [sp, #52]	; 0x34
 800c872:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c874:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c878:	9c02      	ldr	r4, [sp, #8]
 800c87a:	930c      	str	r3, [sp, #48]	; 0x30
 800c87c:	00e3      	lsls	r3, r4, #3
 800c87e:	930a      	str	r3, [sp, #40]	; 0x28
 800c880:	ab9a      	add	r3, sp, #616	; 0x268
 800c882:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c886:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c88a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800c88e:	ab72      	add	r3, sp, #456	; 0x1c8
 800c890:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c894:	46c3      	mov	fp, r8
 800c896:	46a1      	mov	r9, r4
 800c898:	f1b9 0f00 	cmp.w	r9, #0
 800c89c:	f1a5 0508 	sub.w	r5, r5, #8
 800c8a0:	dc77      	bgt.n	800c992 <__kernel_rem_pio2+0x202>
 800c8a2:	ec47 6b10 	vmov	d0, r6, r7
 800c8a6:	4650      	mov	r0, sl
 800c8a8:	f000 fc0a 	bl	800d0c0 <scalbn>
 800c8ac:	ec57 6b10 	vmov	r6, r7, d0
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c8b6:	ee10 0a10 	vmov	r0, s0
 800c8ba:	4639      	mov	r1, r7
 800c8bc:	f7f3 feac 	bl	8000618 <__aeabi_dmul>
 800c8c0:	ec41 0b10 	vmov	d0, r0, r1
 800c8c4:	f000 fb7c 	bl	800cfc0 <floor>
 800c8c8:	4b7c      	ldr	r3, [pc, #496]	; (800cabc <__kernel_rem_pio2+0x32c>)
 800c8ca:	ec51 0b10 	vmov	r0, r1, d0
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	f7f3 fea2 	bl	8000618 <__aeabi_dmul>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	4630      	mov	r0, r6
 800c8da:	4639      	mov	r1, r7
 800c8dc:	f7f3 fce4 	bl	80002a8 <__aeabi_dsub>
 800c8e0:	460f      	mov	r7, r1
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	f7f4 f932 	bl	8000b4c <__aeabi_d2iz>
 800c8e8:	9004      	str	r0, [sp, #16]
 800c8ea:	f7f3 fe2b 	bl	8000544 <__aeabi_i2d>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	4639      	mov	r1, r7
 800c8f6:	f7f3 fcd7 	bl	80002a8 <__aeabi_dsub>
 800c8fa:	f1ba 0f00 	cmp.w	sl, #0
 800c8fe:	4606      	mov	r6, r0
 800c900:	460f      	mov	r7, r1
 800c902:	dd6d      	ble.n	800c9e0 <__kernel_rem_pio2+0x250>
 800c904:	1e62      	subs	r2, r4, #1
 800c906:	ab0e      	add	r3, sp, #56	; 0x38
 800c908:	9d04      	ldr	r5, [sp, #16]
 800c90a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c90e:	f1ca 0118 	rsb	r1, sl, #24
 800c912:	fa40 f301 	asr.w	r3, r0, r1
 800c916:	441d      	add	r5, r3
 800c918:	408b      	lsls	r3, r1
 800c91a:	1ac0      	subs	r0, r0, r3
 800c91c:	ab0e      	add	r3, sp, #56	; 0x38
 800c91e:	9504      	str	r5, [sp, #16]
 800c920:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c924:	f1ca 0317 	rsb	r3, sl, #23
 800c928:	fa40 fb03 	asr.w	fp, r0, r3
 800c92c:	f1bb 0f00 	cmp.w	fp, #0
 800c930:	dd65      	ble.n	800c9fe <__kernel_rem_pio2+0x26e>
 800c932:	9b04      	ldr	r3, [sp, #16]
 800c934:	2200      	movs	r2, #0
 800c936:	3301      	adds	r3, #1
 800c938:	9304      	str	r3, [sp, #16]
 800c93a:	4615      	mov	r5, r2
 800c93c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c940:	4294      	cmp	r4, r2
 800c942:	f300 809c 	bgt.w	800ca7e <__kernel_rem_pio2+0x2ee>
 800c946:	f1ba 0f00 	cmp.w	sl, #0
 800c94a:	dd07      	ble.n	800c95c <__kernel_rem_pio2+0x1cc>
 800c94c:	f1ba 0f01 	cmp.w	sl, #1
 800c950:	f000 80c0 	beq.w	800cad4 <__kernel_rem_pio2+0x344>
 800c954:	f1ba 0f02 	cmp.w	sl, #2
 800c958:	f000 80c6 	beq.w	800cae8 <__kernel_rem_pio2+0x358>
 800c95c:	f1bb 0f02 	cmp.w	fp, #2
 800c960:	d14d      	bne.n	800c9fe <__kernel_rem_pio2+0x26e>
 800c962:	4632      	mov	r2, r6
 800c964:	463b      	mov	r3, r7
 800c966:	4956      	ldr	r1, [pc, #344]	; (800cac0 <__kernel_rem_pio2+0x330>)
 800c968:	2000      	movs	r0, #0
 800c96a:	f7f3 fc9d 	bl	80002a8 <__aeabi_dsub>
 800c96e:	4606      	mov	r6, r0
 800c970:	460f      	mov	r7, r1
 800c972:	2d00      	cmp	r5, #0
 800c974:	d043      	beq.n	800c9fe <__kernel_rem_pio2+0x26e>
 800c976:	4650      	mov	r0, sl
 800c978:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800cab0 <__kernel_rem_pio2+0x320>
 800c97c:	f000 fba0 	bl	800d0c0 <scalbn>
 800c980:	4630      	mov	r0, r6
 800c982:	4639      	mov	r1, r7
 800c984:	ec53 2b10 	vmov	r2, r3, d0
 800c988:	f7f3 fc8e 	bl	80002a8 <__aeabi_dsub>
 800c98c:	4606      	mov	r6, r0
 800c98e:	460f      	mov	r7, r1
 800c990:	e035      	b.n	800c9fe <__kernel_rem_pio2+0x26e>
 800c992:	4b4c      	ldr	r3, [pc, #304]	; (800cac4 <__kernel_rem_pio2+0x334>)
 800c994:	2200      	movs	r2, #0
 800c996:	4630      	mov	r0, r6
 800c998:	4639      	mov	r1, r7
 800c99a:	f7f3 fe3d 	bl	8000618 <__aeabi_dmul>
 800c99e:	f7f4 f8d5 	bl	8000b4c <__aeabi_d2iz>
 800c9a2:	f7f3 fdcf 	bl	8000544 <__aeabi_i2d>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	ec43 2b18 	vmov	d8, r2, r3
 800c9ae:	4b46      	ldr	r3, [pc, #280]	; (800cac8 <__kernel_rem_pio2+0x338>)
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	f7f3 fe31 	bl	8000618 <__aeabi_dmul>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	4639      	mov	r1, r7
 800c9be:	f7f3 fc73 	bl	80002a8 <__aeabi_dsub>
 800c9c2:	f7f4 f8c3 	bl	8000b4c <__aeabi_d2iz>
 800c9c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9ca:	f84b 0b04 	str.w	r0, [fp], #4
 800c9ce:	ec51 0b18 	vmov	r0, r1, d8
 800c9d2:	f7f3 fc6b 	bl	80002ac <__adddf3>
 800c9d6:	f109 39ff 	add.w	r9, r9, #4294967295
 800c9da:	4606      	mov	r6, r0
 800c9dc:	460f      	mov	r7, r1
 800c9de:	e75b      	b.n	800c898 <__kernel_rem_pio2+0x108>
 800c9e0:	d106      	bne.n	800c9f0 <__kernel_rem_pio2+0x260>
 800c9e2:	1e63      	subs	r3, r4, #1
 800c9e4:	aa0e      	add	r2, sp, #56	; 0x38
 800c9e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c9ea:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c9ee:	e79d      	b.n	800c92c <__kernel_rem_pio2+0x19c>
 800c9f0:	4b36      	ldr	r3, [pc, #216]	; (800cacc <__kernel_rem_pio2+0x33c>)
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f7f4 f896 	bl	8000b24 <__aeabi_dcmpge>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	d13d      	bne.n	800ca78 <__kernel_rem_pio2+0x2e8>
 800c9fc:	4683      	mov	fp, r0
 800c9fe:	2200      	movs	r2, #0
 800ca00:	2300      	movs	r3, #0
 800ca02:	4630      	mov	r0, r6
 800ca04:	4639      	mov	r1, r7
 800ca06:	f7f4 f86f 	bl	8000ae8 <__aeabi_dcmpeq>
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	f000 80c0 	beq.w	800cb90 <__kernel_rem_pio2+0x400>
 800ca10:	1e65      	subs	r5, r4, #1
 800ca12:	462b      	mov	r3, r5
 800ca14:	2200      	movs	r2, #0
 800ca16:	9902      	ldr	r1, [sp, #8]
 800ca18:	428b      	cmp	r3, r1
 800ca1a:	da6c      	bge.n	800caf6 <__kernel_rem_pio2+0x366>
 800ca1c:	2a00      	cmp	r2, #0
 800ca1e:	f000 8089 	beq.w	800cb34 <__kernel_rem_pio2+0x3a4>
 800ca22:	ab0e      	add	r3, sp, #56	; 0x38
 800ca24:	f1aa 0a18 	sub.w	sl, sl, #24
 800ca28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f000 80ad 	beq.w	800cb8c <__kernel_rem_pio2+0x3fc>
 800ca32:	4650      	mov	r0, sl
 800ca34:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800cab0 <__kernel_rem_pio2+0x320>
 800ca38:	f000 fb42 	bl	800d0c0 <scalbn>
 800ca3c:	ab9a      	add	r3, sp, #616	; 0x268
 800ca3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ca42:	ec57 6b10 	vmov	r6, r7, d0
 800ca46:	00ec      	lsls	r4, r5, #3
 800ca48:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800ca4c:	46aa      	mov	sl, r5
 800ca4e:	f1ba 0f00 	cmp.w	sl, #0
 800ca52:	f280 80d6 	bge.w	800cc02 <__kernel_rem_pio2+0x472>
 800ca56:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800caa8 <__kernel_rem_pio2+0x318>
 800ca5a:	462e      	mov	r6, r5
 800ca5c:	2e00      	cmp	r6, #0
 800ca5e:	f2c0 8104 	blt.w	800cc6a <__kernel_rem_pio2+0x4da>
 800ca62:	ab72      	add	r3, sp, #456	; 0x1c8
 800ca64:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ca68:	f8df a064 	ldr.w	sl, [pc, #100]	; 800cad0 <__kernel_rem_pio2+0x340>
 800ca6c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ca70:	f04f 0800 	mov.w	r8, #0
 800ca74:	1baf      	subs	r7, r5, r6
 800ca76:	e0ea      	b.n	800cc4e <__kernel_rem_pio2+0x4be>
 800ca78:	f04f 0b02 	mov.w	fp, #2
 800ca7c:	e759      	b.n	800c932 <__kernel_rem_pio2+0x1a2>
 800ca7e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca82:	b955      	cbnz	r5, 800ca9a <__kernel_rem_pio2+0x30a>
 800ca84:	b123      	cbz	r3, 800ca90 <__kernel_rem_pio2+0x300>
 800ca86:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ca8a:	f8c8 3000 	str.w	r3, [r8]
 800ca8e:	2301      	movs	r3, #1
 800ca90:	3201      	adds	r2, #1
 800ca92:	f108 0804 	add.w	r8, r8, #4
 800ca96:	461d      	mov	r5, r3
 800ca98:	e752      	b.n	800c940 <__kernel_rem_pio2+0x1b0>
 800ca9a:	1acb      	subs	r3, r1, r3
 800ca9c:	f8c8 3000 	str.w	r3, [r8]
 800caa0:	462b      	mov	r3, r5
 800caa2:	e7f5      	b.n	800ca90 <__kernel_rem_pio2+0x300>
 800caa4:	f3af 8000 	nop.w
	...
 800cab4:	3ff00000 	.word	0x3ff00000
 800cab8:	0800dc48 	.word	0x0800dc48
 800cabc:	40200000 	.word	0x40200000
 800cac0:	3ff00000 	.word	0x3ff00000
 800cac4:	3e700000 	.word	0x3e700000
 800cac8:	41700000 	.word	0x41700000
 800cacc:	3fe00000 	.word	0x3fe00000
 800cad0:	0800dc08 	.word	0x0800dc08
 800cad4:	1e62      	subs	r2, r4, #1
 800cad6:	ab0e      	add	r3, sp, #56	; 0x38
 800cad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cadc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cae0:	a90e      	add	r1, sp, #56	; 0x38
 800cae2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cae6:	e739      	b.n	800c95c <__kernel_rem_pio2+0x1cc>
 800cae8:	1e62      	subs	r2, r4, #1
 800caea:	ab0e      	add	r3, sp, #56	; 0x38
 800caec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caf0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800caf4:	e7f4      	b.n	800cae0 <__kernel_rem_pio2+0x350>
 800caf6:	a90e      	add	r1, sp, #56	; 0x38
 800caf8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cafc:	3b01      	subs	r3, #1
 800cafe:	430a      	orrs	r2, r1
 800cb00:	e789      	b.n	800ca16 <__kernel_rem_pio2+0x286>
 800cb02:	3301      	adds	r3, #1
 800cb04:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cb08:	2900      	cmp	r1, #0
 800cb0a:	d0fa      	beq.n	800cb02 <__kernel_rem_pio2+0x372>
 800cb0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb0e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800cb12:	446a      	add	r2, sp
 800cb14:	3a98      	subs	r2, #152	; 0x98
 800cb16:	920a      	str	r2, [sp, #40]	; 0x28
 800cb18:	9a08      	ldr	r2, [sp, #32]
 800cb1a:	18e3      	adds	r3, r4, r3
 800cb1c:	18a5      	adds	r5, r4, r2
 800cb1e:	aa22      	add	r2, sp, #136	; 0x88
 800cb20:	f104 0801 	add.w	r8, r4, #1
 800cb24:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800cb28:	9304      	str	r3, [sp, #16]
 800cb2a:	9b04      	ldr	r3, [sp, #16]
 800cb2c:	4543      	cmp	r3, r8
 800cb2e:	da04      	bge.n	800cb3a <__kernel_rem_pio2+0x3aa>
 800cb30:	461c      	mov	r4, r3
 800cb32:	e6a3      	b.n	800c87c <__kernel_rem_pio2+0xec>
 800cb34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb36:	2301      	movs	r3, #1
 800cb38:	e7e4      	b.n	800cb04 <__kernel_rem_pio2+0x374>
 800cb3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb3c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cb40:	f7f3 fd00 	bl	8000544 <__aeabi_i2d>
 800cb44:	e8e5 0102 	strd	r0, r1, [r5], #8
 800cb48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb4a:	46ab      	mov	fp, r5
 800cb4c:	461c      	mov	r4, r3
 800cb4e:	f04f 0900 	mov.w	r9, #0
 800cb52:	2600      	movs	r6, #0
 800cb54:	2700      	movs	r7, #0
 800cb56:	9b06      	ldr	r3, [sp, #24]
 800cb58:	4599      	cmp	r9, r3
 800cb5a:	dd06      	ble.n	800cb6a <__kernel_rem_pio2+0x3da>
 800cb5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb5e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800cb62:	f108 0801 	add.w	r8, r8, #1
 800cb66:	930a      	str	r3, [sp, #40]	; 0x28
 800cb68:	e7df      	b.n	800cb2a <__kernel_rem_pio2+0x39a>
 800cb6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800cb6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800cb72:	f7f3 fd51 	bl	8000618 <__aeabi_dmul>
 800cb76:	4602      	mov	r2, r0
 800cb78:	460b      	mov	r3, r1
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	4639      	mov	r1, r7
 800cb7e:	f7f3 fb95 	bl	80002ac <__adddf3>
 800cb82:	f109 0901 	add.w	r9, r9, #1
 800cb86:	4606      	mov	r6, r0
 800cb88:	460f      	mov	r7, r1
 800cb8a:	e7e4      	b.n	800cb56 <__kernel_rem_pio2+0x3c6>
 800cb8c:	3d01      	subs	r5, #1
 800cb8e:	e748      	b.n	800ca22 <__kernel_rem_pio2+0x292>
 800cb90:	ec47 6b10 	vmov	d0, r6, r7
 800cb94:	f1ca 0000 	rsb	r0, sl, #0
 800cb98:	f000 fa92 	bl	800d0c0 <scalbn>
 800cb9c:	ec57 6b10 	vmov	r6, r7, d0
 800cba0:	4ba0      	ldr	r3, [pc, #640]	; (800ce24 <__kernel_rem_pio2+0x694>)
 800cba2:	ee10 0a10 	vmov	r0, s0
 800cba6:	2200      	movs	r2, #0
 800cba8:	4639      	mov	r1, r7
 800cbaa:	f7f3 ffbb 	bl	8000b24 <__aeabi_dcmpge>
 800cbae:	b1f8      	cbz	r0, 800cbf0 <__kernel_rem_pio2+0x460>
 800cbb0:	4b9d      	ldr	r3, [pc, #628]	; (800ce28 <__kernel_rem_pio2+0x698>)
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	4639      	mov	r1, r7
 800cbb8:	f7f3 fd2e 	bl	8000618 <__aeabi_dmul>
 800cbbc:	f7f3 ffc6 	bl	8000b4c <__aeabi_d2iz>
 800cbc0:	4680      	mov	r8, r0
 800cbc2:	f7f3 fcbf 	bl	8000544 <__aeabi_i2d>
 800cbc6:	4b97      	ldr	r3, [pc, #604]	; (800ce24 <__kernel_rem_pio2+0x694>)
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f7f3 fd25 	bl	8000618 <__aeabi_dmul>
 800cbce:	460b      	mov	r3, r1
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	4639      	mov	r1, r7
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	f7f3 fb67 	bl	80002a8 <__aeabi_dsub>
 800cbda:	f7f3 ffb7 	bl	8000b4c <__aeabi_d2iz>
 800cbde:	1c65      	adds	r5, r4, #1
 800cbe0:	ab0e      	add	r3, sp, #56	; 0x38
 800cbe2:	f10a 0a18 	add.w	sl, sl, #24
 800cbe6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cbea:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800cbee:	e720      	b.n	800ca32 <__kernel_rem_pio2+0x2a2>
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	4639      	mov	r1, r7
 800cbf4:	f7f3 ffaa 	bl	8000b4c <__aeabi_d2iz>
 800cbf8:	ab0e      	add	r3, sp, #56	; 0x38
 800cbfa:	4625      	mov	r5, r4
 800cbfc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cc00:	e717      	b.n	800ca32 <__kernel_rem_pio2+0x2a2>
 800cc02:	ab0e      	add	r3, sp, #56	; 0x38
 800cc04:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800cc08:	f7f3 fc9c 	bl	8000544 <__aeabi_i2d>
 800cc0c:	4632      	mov	r2, r6
 800cc0e:	463b      	mov	r3, r7
 800cc10:	f7f3 fd02 	bl	8000618 <__aeabi_dmul>
 800cc14:	4b84      	ldr	r3, [pc, #528]	; (800ce28 <__kernel_rem_pio2+0x698>)
 800cc16:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	4639      	mov	r1, r7
 800cc20:	f7f3 fcfa 	bl	8000618 <__aeabi_dmul>
 800cc24:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc28:	4606      	mov	r6, r0
 800cc2a:	460f      	mov	r7, r1
 800cc2c:	e70f      	b.n	800ca4e <__kernel_rem_pio2+0x2be>
 800cc2e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800cc32:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800cc36:	f7f3 fcef 	bl	8000618 <__aeabi_dmul>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc42:	f7f3 fb33 	bl	80002ac <__adddf3>
 800cc46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cc4a:	f108 0801 	add.w	r8, r8, #1
 800cc4e:	9b02      	ldr	r3, [sp, #8]
 800cc50:	4598      	cmp	r8, r3
 800cc52:	dc01      	bgt.n	800cc58 <__kernel_rem_pio2+0x4c8>
 800cc54:	45b8      	cmp	r8, r7
 800cc56:	ddea      	ble.n	800cc2e <__kernel_rem_pio2+0x49e>
 800cc58:	ed9d 7b06 	vldr	d7, [sp, #24]
 800cc5c:	ab4a      	add	r3, sp, #296	; 0x128
 800cc5e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cc62:	ed87 7b00 	vstr	d7, [r7]
 800cc66:	3e01      	subs	r6, #1
 800cc68:	e6f8      	b.n	800ca5c <__kernel_rem_pio2+0x2cc>
 800cc6a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	dc0b      	bgt.n	800cc88 <__kernel_rem_pio2+0x4f8>
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	dc35      	bgt.n	800cce0 <__kernel_rem_pio2+0x550>
 800cc74:	d059      	beq.n	800cd2a <__kernel_rem_pio2+0x59a>
 800cc76:	9b04      	ldr	r3, [sp, #16]
 800cc78:	f003 0007 	and.w	r0, r3, #7
 800cc7c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800cc80:	ecbd 8b02 	vpop	{d8}
 800cc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc88:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800cc8a:	2b03      	cmp	r3, #3
 800cc8c:	d1f3      	bne.n	800cc76 <__kernel_rem_pio2+0x4e6>
 800cc8e:	ab4a      	add	r3, sp, #296	; 0x128
 800cc90:	4423      	add	r3, r4
 800cc92:	9306      	str	r3, [sp, #24]
 800cc94:	461c      	mov	r4, r3
 800cc96:	469a      	mov	sl, r3
 800cc98:	9502      	str	r5, [sp, #8]
 800cc9a:	9b02      	ldr	r3, [sp, #8]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f1aa 0a08 	sub.w	sl, sl, #8
 800cca2:	dc6b      	bgt.n	800cd7c <__kernel_rem_pio2+0x5ec>
 800cca4:	46aa      	mov	sl, r5
 800cca6:	f1ba 0f01 	cmp.w	sl, #1
 800ccaa:	f1a4 0408 	sub.w	r4, r4, #8
 800ccae:	f300 8085 	bgt.w	800cdbc <__kernel_rem_pio2+0x62c>
 800ccb2:	9c06      	ldr	r4, [sp, #24]
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	3408      	adds	r4, #8
 800ccb8:	2100      	movs	r1, #0
 800ccba:	2d01      	cmp	r5, #1
 800ccbc:	f300 809d 	bgt.w	800cdfa <__kernel_rem_pio2+0x66a>
 800ccc0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ccc4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ccc8:	f1bb 0f00 	cmp.w	fp, #0
 800cccc:	f040 809b 	bne.w	800ce06 <__kernel_rem_pio2+0x676>
 800ccd0:	9b01      	ldr	r3, [sp, #4]
 800ccd2:	e9c3 5600 	strd	r5, r6, [r3]
 800ccd6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ccda:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ccde:	e7ca      	b.n	800cc76 <__kernel_rem_pio2+0x4e6>
 800cce0:	3408      	adds	r4, #8
 800cce2:	ab4a      	add	r3, sp, #296	; 0x128
 800cce4:	441c      	add	r4, r3
 800cce6:	462e      	mov	r6, r5
 800cce8:	2000      	movs	r0, #0
 800ccea:	2100      	movs	r1, #0
 800ccec:	2e00      	cmp	r6, #0
 800ccee:	da36      	bge.n	800cd5e <__kernel_rem_pio2+0x5ce>
 800ccf0:	f1bb 0f00 	cmp.w	fp, #0
 800ccf4:	d039      	beq.n	800cd6a <__kernel_rem_pio2+0x5da>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccfc:	9c01      	ldr	r4, [sp, #4]
 800ccfe:	e9c4 2300 	strd	r2, r3, [r4]
 800cd02:	4602      	mov	r2, r0
 800cd04:	460b      	mov	r3, r1
 800cd06:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800cd0a:	f7f3 facd 	bl	80002a8 <__aeabi_dsub>
 800cd0e:	ae4c      	add	r6, sp, #304	; 0x130
 800cd10:	2401      	movs	r4, #1
 800cd12:	42a5      	cmp	r5, r4
 800cd14:	da2c      	bge.n	800cd70 <__kernel_rem_pio2+0x5e0>
 800cd16:	f1bb 0f00 	cmp.w	fp, #0
 800cd1a:	d002      	beq.n	800cd22 <__kernel_rem_pio2+0x592>
 800cd1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd20:	4619      	mov	r1, r3
 800cd22:	9b01      	ldr	r3, [sp, #4]
 800cd24:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cd28:	e7a5      	b.n	800cc76 <__kernel_rem_pio2+0x4e6>
 800cd2a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800cd2e:	eb0d 0403 	add.w	r4, sp, r3
 800cd32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800cd36:	2000      	movs	r0, #0
 800cd38:	2100      	movs	r1, #0
 800cd3a:	2d00      	cmp	r5, #0
 800cd3c:	da09      	bge.n	800cd52 <__kernel_rem_pio2+0x5c2>
 800cd3e:	f1bb 0f00 	cmp.w	fp, #0
 800cd42:	d002      	beq.n	800cd4a <__kernel_rem_pio2+0x5ba>
 800cd44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd48:	4619      	mov	r1, r3
 800cd4a:	9b01      	ldr	r3, [sp, #4]
 800cd4c:	e9c3 0100 	strd	r0, r1, [r3]
 800cd50:	e791      	b.n	800cc76 <__kernel_rem_pio2+0x4e6>
 800cd52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cd56:	f7f3 faa9 	bl	80002ac <__adddf3>
 800cd5a:	3d01      	subs	r5, #1
 800cd5c:	e7ed      	b.n	800cd3a <__kernel_rem_pio2+0x5aa>
 800cd5e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cd62:	f7f3 faa3 	bl	80002ac <__adddf3>
 800cd66:	3e01      	subs	r6, #1
 800cd68:	e7c0      	b.n	800ccec <__kernel_rem_pio2+0x55c>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	e7c5      	b.n	800ccfc <__kernel_rem_pio2+0x56c>
 800cd70:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800cd74:	f7f3 fa9a 	bl	80002ac <__adddf3>
 800cd78:	3401      	adds	r4, #1
 800cd7a:	e7ca      	b.n	800cd12 <__kernel_rem_pio2+0x582>
 800cd7c:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd80:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800cd84:	9b02      	ldr	r3, [sp, #8]
 800cd86:	3b01      	subs	r3, #1
 800cd88:	9302      	str	r3, [sp, #8]
 800cd8a:	4632      	mov	r2, r6
 800cd8c:	463b      	mov	r3, r7
 800cd8e:	4640      	mov	r0, r8
 800cd90:	4649      	mov	r1, r9
 800cd92:	f7f3 fa8b 	bl	80002ac <__adddf3>
 800cd96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	4640      	mov	r0, r8
 800cda0:	4649      	mov	r1, r9
 800cda2:	f7f3 fa81 	bl	80002a8 <__aeabi_dsub>
 800cda6:	4632      	mov	r2, r6
 800cda8:	463b      	mov	r3, r7
 800cdaa:	f7f3 fa7f 	bl	80002ac <__adddf3>
 800cdae:	ed9d 7b08 	vldr	d7, [sp, #32]
 800cdb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cdb6:	ed8a 7b00 	vstr	d7, [sl]
 800cdba:	e76e      	b.n	800cc9a <__kernel_rem_pio2+0x50a>
 800cdbc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cdc0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800cdc4:	4640      	mov	r0, r8
 800cdc6:	4632      	mov	r2, r6
 800cdc8:	463b      	mov	r3, r7
 800cdca:	4649      	mov	r1, r9
 800cdcc:	f7f3 fa6e 	bl	80002ac <__adddf3>
 800cdd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	4640      	mov	r0, r8
 800cdda:	4649      	mov	r1, r9
 800cddc:	f7f3 fa64 	bl	80002a8 <__aeabi_dsub>
 800cde0:	4632      	mov	r2, r6
 800cde2:	463b      	mov	r3, r7
 800cde4:	f7f3 fa62 	bl	80002ac <__adddf3>
 800cde8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cdec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cdf0:	ed84 7b00 	vstr	d7, [r4]
 800cdf4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cdf8:	e755      	b.n	800cca6 <__kernel_rem_pio2+0x516>
 800cdfa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cdfe:	f7f3 fa55 	bl	80002ac <__adddf3>
 800ce02:	3d01      	subs	r5, #1
 800ce04:	e759      	b.n	800ccba <__kernel_rem_pio2+0x52a>
 800ce06:	9b01      	ldr	r3, [sp, #4]
 800ce08:	9a01      	ldr	r2, [sp, #4]
 800ce0a:	601d      	str	r5, [r3, #0]
 800ce0c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ce10:	605c      	str	r4, [r3, #4]
 800ce12:	609f      	str	r7, [r3, #8]
 800ce14:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ce18:	60d3      	str	r3, [r2, #12]
 800ce1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce1e:	6110      	str	r0, [r2, #16]
 800ce20:	6153      	str	r3, [r2, #20]
 800ce22:	e728      	b.n	800cc76 <__kernel_rem_pio2+0x4e6>
 800ce24:	41700000 	.word	0x41700000
 800ce28:	3e700000 	.word	0x3e700000
 800ce2c:	00000000 	.word	0x00000000

0800ce30 <__kernel_sin>:
 800ce30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce34:	ed2d 8b04 	vpush	{d8-d9}
 800ce38:	eeb0 8a41 	vmov.f32	s16, s2
 800ce3c:	eef0 8a61 	vmov.f32	s17, s3
 800ce40:	ec55 4b10 	vmov	r4, r5, d0
 800ce44:	b083      	sub	sp, #12
 800ce46:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ce4a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ce4e:	9001      	str	r0, [sp, #4]
 800ce50:	da06      	bge.n	800ce60 <__kernel_sin+0x30>
 800ce52:	ee10 0a10 	vmov	r0, s0
 800ce56:	4629      	mov	r1, r5
 800ce58:	f7f3 fe78 	bl	8000b4c <__aeabi_d2iz>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	d051      	beq.n	800cf04 <__kernel_sin+0xd4>
 800ce60:	4622      	mov	r2, r4
 800ce62:	462b      	mov	r3, r5
 800ce64:	4620      	mov	r0, r4
 800ce66:	4629      	mov	r1, r5
 800ce68:	f7f3 fbd6 	bl	8000618 <__aeabi_dmul>
 800ce6c:	4682      	mov	sl, r0
 800ce6e:	468b      	mov	fp, r1
 800ce70:	4602      	mov	r2, r0
 800ce72:	460b      	mov	r3, r1
 800ce74:	4620      	mov	r0, r4
 800ce76:	4629      	mov	r1, r5
 800ce78:	f7f3 fbce 	bl	8000618 <__aeabi_dmul>
 800ce7c:	a341      	add	r3, pc, #260	; (adr r3, 800cf84 <__kernel_sin+0x154>)
 800ce7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce82:	4680      	mov	r8, r0
 800ce84:	4689      	mov	r9, r1
 800ce86:	4650      	mov	r0, sl
 800ce88:	4659      	mov	r1, fp
 800ce8a:	f7f3 fbc5 	bl	8000618 <__aeabi_dmul>
 800ce8e:	a33f      	add	r3, pc, #252	; (adr r3, 800cf8c <__kernel_sin+0x15c>)
 800ce90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce94:	f7f3 fa08 	bl	80002a8 <__aeabi_dsub>
 800ce98:	4652      	mov	r2, sl
 800ce9a:	465b      	mov	r3, fp
 800ce9c:	f7f3 fbbc 	bl	8000618 <__aeabi_dmul>
 800cea0:	a33c      	add	r3, pc, #240	; (adr r3, 800cf94 <__kernel_sin+0x164>)
 800cea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea6:	f7f3 fa01 	bl	80002ac <__adddf3>
 800ceaa:	4652      	mov	r2, sl
 800ceac:	465b      	mov	r3, fp
 800ceae:	f7f3 fbb3 	bl	8000618 <__aeabi_dmul>
 800ceb2:	a33a      	add	r3, pc, #232	; (adr r3, 800cf9c <__kernel_sin+0x16c>)
 800ceb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb8:	f7f3 f9f6 	bl	80002a8 <__aeabi_dsub>
 800cebc:	4652      	mov	r2, sl
 800cebe:	465b      	mov	r3, fp
 800cec0:	f7f3 fbaa 	bl	8000618 <__aeabi_dmul>
 800cec4:	a337      	add	r3, pc, #220	; (adr r3, 800cfa4 <__kernel_sin+0x174>)
 800cec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceca:	f7f3 f9ef 	bl	80002ac <__adddf3>
 800cece:	9b01      	ldr	r3, [sp, #4]
 800ced0:	4606      	mov	r6, r0
 800ced2:	460f      	mov	r7, r1
 800ced4:	b9eb      	cbnz	r3, 800cf12 <__kernel_sin+0xe2>
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	4650      	mov	r0, sl
 800cedc:	4659      	mov	r1, fp
 800cede:	f7f3 fb9b 	bl	8000618 <__aeabi_dmul>
 800cee2:	a325      	add	r3, pc, #148	; (adr r3, 800cf78 <__kernel_sin+0x148>)
 800cee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee8:	f7f3 f9de 	bl	80002a8 <__aeabi_dsub>
 800ceec:	4642      	mov	r2, r8
 800ceee:	464b      	mov	r3, r9
 800cef0:	f7f3 fb92 	bl	8000618 <__aeabi_dmul>
 800cef4:	4602      	mov	r2, r0
 800cef6:	460b      	mov	r3, r1
 800cef8:	4620      	mov	r0, r4
 800cefa:	4629      	mov	r1, r5
 800cefc:	f7f3 f9d6 	bl	80002ac <__adddf3>
 800cf00:	4604      	mov	r4, r0
 800cf02:	460d      	mov	r5, r1
 800cf04:	ec45 4b10 	vmov	d0, r4, r5
 800cf08:	b003      	add	sp, #12
 800cf0a:	ecbd 8b04 	vpop	{d8-d9}
 800cf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf12:	4b1b      	ldr	r3, [pc, #108]	; (800cf80 <__kernel_sin+0x150>)
 800cf14:	ec51 0b18 	vmov	r0, r1, d8
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f7f3 fb7d 	bl	8000618 <__aeabi_dmul>
 800cf1e:	4632      	mov	r2, r6
 800cf20:	ec41 0b19 	vmov	d9, r0, r1
 800cf24:	463b      	mov	r3, r7
 800cf26:	4640      	mov	r0, r8
 800cf28:	4649      	mov	r1, r9
 800cf2a:	f7f3 fb75 	bl	8000618 <__aeabi_dmul>
 800cf2e:	4602      	mov	r2, r0
 800cf30:	460b      	mov	r3, r1
 800cf32:	ec51 0b19 	vmov	r0, r1, d9
 800cf36:	f7f3 f9b7 	bl	80002a8 <__aeabi_dsub>
 800cf3a:	4652      	mov	r2, sl
 800cf3c:	465b      	mov	r3, fp
 800cf3e:	f7f3 fb6b 	bl	8000618 <__aeabi_dmul>
 800cf42:	ec53 2b18 	vmov	r2, r3, d8
 800cf46:	f7f3 f9af 	bl	80002a8 <__aeabi_dsub>
 800cf4a:	a30b      	add	r3, pc, #44	; (adr r3, 800cf78 <__kernel_sin+0x148>)
 800cf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf50:	4606      	mov	r6, r0
 800cf52:	460f      	mov	r7, r1
 800cf54:	4640      	mov	r0, r8
 800cf56:	4649      	mov	r1, r9
 800cf58:	f7f3 fb5e 	bl	8000618 <__aeabi_dmul>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	460b      	mov	r3, r1
 800cf60:	4630      	mov	r0, r6
 800cf62:	4639      	mov	r1, r7
 800cf64:	f7f3 f9a2 	bl	80002ac <__adddf3>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	4629      	mov	r1, r5
 800cf70:	f7f3 f99a 	bl	80002a8 <__aeabi_dsub>
 800cf74:	e7c4      	b.n	800cf00 <__kernel_sin+0xd0>
 800cf76:	bf00      	nop
 800cf78:	55555549 	.word	0x55555549
 800cf7c:	3fc55555 	.word	0x3fc55555
 800cf80:	3fe00000 	.word	0x3fe00000
 800cf84:	5acfd57c 	.word	0x5acfd57c
 800cf88:	3de5d93a 	.word	0x3de5d93a
 800cf8c:	8a2b9ceb 	.word	0x8a2b9ceb
 800cf90:	3e5ae5e6 	.word	0x3e5ae5e6
 800cf94:	57b1fe7d 	.word	0x57b1fe7d
 800cf98:	3ec71de3 	.word	0x3ec71de3
 800cf9c:	19c161d5 	.word	0x19c161d5
 800cfa0:	3f2a01a0 	.word	0x3f2a01a0
 800cfa4:	1110f8a6 	.word	0x1110f8a6
 800cfa8:	3f811111 	.word	0x3f811111

0800cfac <fabs>:
 800cfac:	ec51 0b10 	vmov	r0, r1, d0
 800cfb0:	ee10 2a10 	vmov	r2, s0
 800cfb4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cfb8:	ec43 2b10 	vmov	d0, r2, r3
 800cfbc:	4770      	bx	lr
	...

0800cfc0 <floor>:
 800cfc0:	ec51 0b10 	vmov	r0, r1, d0
 800cfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cfcc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cfd0:	2e13      	cmp	r6, #19
 800cfd2:	ee10 5a10 	vmov	r5, s0
 800cfd6:	ee10 8a10 	vmov	r8, s0
 800cfda:	460c      	mov	r4, r1
 800cfdc:	dc32      	bgt.n	800d044 <floor+0x84>
 800cfde:	2e00      	cmp	r6, #0
 800cfe0:	da14      	bge.n	800d00c <floor+0x4c>
 800cfe2:	a333      	add	r3, pc, #204	; (adr r3, 800d0b0 <floor+0xf0>)
 800cfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe8:	f7f3 f960 	bl	80002ac <__adddf3>
 800cfec:	2200      	movs	r2, #0
 800cfee:	2300      	movs	r3, #0
 800cff0:	f7f3 fda2 	bl	8000b38 <__aeabi_dcmpgt>
 800cff4:	b138      	cbz	r0, 800d006 <floor+0x46>
 800cff6:	2c00      	cmp	r4, #0
 800cff8:	da57      	bge.n	800d0aa <floor+0xea>
 800cffa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cffe:	431d      	orrs	r5, r3
 800d000:	d001      	beq.n	800d006 <floor+0x46>
 800d002:	4c2d      	ldr	r4, [pc, #180]	; (800d0b8 <floor+0xf8>)
 800d004:	2500      	movs	r5, #0
 800d006:	4621      	mov	r1, r4
 800d008:	4628      	mov	r0, r5
 800d00a:	e025      	b.n	800d058 <floor+0x98>
 800d00c:	4f2b      	ldr	r7, [pc, #172]	; (800d0bc <floor+0xfc>)
 800d00e:	4137      	asrs	r7, r6
 800d010:	ea01 0307 	and.w	r3, r1, r7
 800d014:	4303      	orrs	r3, r0
 800d016:	d01f      	beq.n	800d058 <floor+0x98>
 800d018:	a325      	add	r3, pc, #148	; (adr r3, 800d0b0 <floor+0xf0>)
 800d01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01e:	f7f3 f945 	bl	80002ac <__adddf3>
 800d022:	2200      	movs	r2, #0
 800d024:	2300      	movs	r3, #0
 800d026:	f7f3 fd87 	bl	8000b38 <__aeabi_dcmpgt>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	d0eb      	beq.n	800d006 <floor+0x46>
 800d02e:	2c00      	cmp	r4, #0
 800d030:	bfbe      	ittt	lt
 800d032:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d036:	fa43 f606 	asrlt.w	r6, r3, r6
 800d03a:	19a4      	addlt	r4, r4, r6
 800d03c:	ea24 0407 	bic.w	r4, r4, r7
 800d040:	2500      	movs	r5, #0
 800d042:	e7e0      	b.n	800d006 <floor+0x46>
 800d044:	2e33      	cmp	r6, #51	; 0x33
 800d046:	dd0b      	ble.n	800d060 <floor+0xa0>
 800d048:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d04c:	d104      	bne.n	800d058 <floor+0x98>
 800d04e:	ee10 2a10 	vmov	r2, s0
 800d052:	460b      	mov	r3, r1
 800d054:	f7f3 f92a 	bl	80002ac <__adddf3>
 800d058:	ec41 0b10 	vmov	d0, r0, r1
 800d05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d060:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d064:	f04f 33ff 	mov.w	r3, #4294967295
 800d068:	fa23 f707 	lsr.w	r7, r3, r7
 800d06c:	4207      	tst	r7, r0
 800d06e:	d0f3      	beq.n	800d058 <floor+0x98>
 800d070:	a30f      	add	r3, pc, #60	; (adr r3, 800d0b0 <floor+0xf0>)
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	f7f3 f919 	bl	80002ac <__adddf3>
 800d07a:	2200      	movs	r2, #0
 800d07c:	2300      	movs	r3, #0
 800d07e:	f7f3 fd5b 	bl	8000b38 <__aeabi_dcmpgt>
 800d082:	2800      	cmp	r0, #0
 800d084:	d0bf      	beq.n	800d006 <floor+0x46>
 800d086:	2c00      	cmp	r4, #0
 800d088:	da02      	bge.n	800d090 <floor+0xd0>
 800d08a:	2e14      	cmp	r6, #20
 800d08c:	d103      	bne.n	800d096 <floor+0xd6>
 800d08e:	3401      	adds	r4, #1
 800d090:	ea25 0507 	bic.w	r5, r5, r7
 800d094:	e7b7      	b.n	800d006 <floor+0x46>
 800d096:	2301      	movs	r3, #1
 800d098:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d09c:	fa03 f606 	lsl.w	r6, r3, r6
 800d0a0:	4435      	add	r5, r6
 800d0a2:	4545      	cmp	r5, r8
 800d0a4:	bf38      	it	cc
 800d0a6:	18e4      	addcc	r4, r4, r3
 800d0a8:	e7f2      	b.n	800d090 <floor+0xd0>
 800d0aa:	2500      	movs	r5, #0
 800d0ac:	462c      	mov	r4, r5
 800d0ae:	e7aa      	b.n	800d006 <floor+0x46>
 800d0b0:	8800759c 	.word	0x8800759c
 800d0b4:	7e37e43c 	.word	0x7e37e43c
 800d0b8:	bff00000 	.word	0xbff00000
 800d0bc:	000fffff 	.word	0x000fffff

0800d0c0 <scalbn>:
 800d0c0:	b570      	push	{r4, r5, r6, lr}
 800d0c2:	ec55 4b10 	vmov	r4, r5, d0
 800d0c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d0ca:	4606      	mov	r6, r0
 800d0cc:	462b      	mov	r3, r5
 800d0ce:	b99a      	cbnz	r2, 800d0f8 <scalbn+0x38>
 800d0d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d0d4:	4323      	orrs	r3, r4
 800d0d6:	d036      	beq.n	800d146 <scalbn+0x86>
 800d0d8:	4b39      	ldr	r3, [pc, #228]	; (800d1c0 <scalbn+0x100>)
 800d0da:	4629      	mov	r1, r5
 800d0dc:	ee10 0a10 	vmov	r0, s0
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	f7f3 fa99 	bl	8000618 <__aeabi_dmul>
 800d0e6:	4b37      	ldr	r3, [pc, #220]	; (800d1c4 <scalbn+0x104>)
 800d0e8:	429e      	cmp	r6, r3
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	460d      	mov	r5, r1
 800d0ee:	da10      	bge.n	800d112 <scalbn+0x52>
 800d0f0:	a32b      	add	r3, pc, #172	; (adr r3, 800d1a0 <scalbn+0xe0>)
 800d0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f6:	e03a      	b.n	800d16e <scalbn+0xae>
 800d0f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d0fc:	428a      	cmp	r2, r1
 800d0fe:	d10c      	bne.n	800d11a <scalbn+0x5a>
 800d100:	ee10 2a10 	vmov	r2, s0
 800d104:	4620      	mov	r0, r4
 800d106:	4629      	mov	r1, r5
 800d108:	f7f3 f8d0 	bl	80002ac <__adddf3>
 800d10c:	4604      	mov	r4, r0
 800d10e:	460d      	mov	r5, r1
 800d110:	e019      	b.n	800d146 <scalbn+0x86>
 800d112:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d116:	460b      	mov	r3, r1
 800d118:	3a36      	subs	r2, #54	; 0x36
 800d11a:	4432      	add	r2, r6
 800d11c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d120:	428a      	cmp	r2, r1
 800d122:	dd08      	ble.n	800d136 <scalbn+0x76>
 800d124:	2d00      	cmp	r5, #0
 800d126:	a120      	add	r1, pc, #128	; (adr r1, 800d1a8 <scalbn+0xe8>)
 800d128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d12c:	da1c      	bge.n	800d168 <scalbn+0xa8>
 800d12e:	a120      	add	r1, pc, #128	; (adr r1, 800d1b0 <scalbn+0xf0>)
 800d130:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d134:	e018      	b.n	800d168 <scalbn+0xa8>
 800d136:	2a00      	cmp	r2, #0
 800d138:	dd08      	ble.n	800d14c <scalbn+0x8c>
 800d13a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d13e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d142:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d146:	ec45 4b10 	vmov	d0, r4, r5
 800d14a:	bd70      	pop	{r4, r5, r6, pc}
 800d14c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d150:	da19      	bge.n	800d186 <scalbn+0xc6>
 800d152:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d156:	429e      	cmp	r6, r3
 800d158:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d15c:	dd0a      	ble.n	800d174 <scalbn+0xb4>
 800d15e:	a112      	add	r1, pc, #72	; (adr r1, 800d1a8 <scalbn+0xe8>)
 800d160:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d1e2      	bne.n	800d12e <scalbn+0x6e>
 800d168:	a30f      	add	r3, pc, #60	; (adr r3, 800d1a8 <scalbn+0xe8>)
 800d16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16e:	f7f3 fa53 	bl	8000618 <__aeabi_dmul>
 800d172:	e7cb      	b.n	800d10c <scalbn+0x4c>
 800d174:	a10a      	add	r1, pc, #40	; (adr r1, 800d1a0 <scalbn+0xe0>)
 800d176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d0b8      	beq.n	800d0f0 <scalbn+0x30>
 800d17e:	a10e      	add	r1, pc, #56	; (adr r1, 800d1b8 <scalbn+0xf8>)
 800d180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d184:	e7b4      	b.n	800d0f0 <scalbn+0x30>
 800d186:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d18a:	3236      	adds	r2, #54	; 0x36
 800d18c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d190:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d194:	4620      	mov	r0, r4
 800d196:	4b0c      	ldr	r3, [pc, #48]	; (800d1c8 <scalbn+0x108>)
 800d198:	2200      	movs	r2, #0
 800d19a:	e7e8      	b.n	800d16e <scalbn+0xae>
 800d19c:	f3af 8000 	nop.w
 800d1a0:	c2f8f359 	.word	0xc2f8f359
 800d1a4:	01a56e1f 	.word	0x01a56e1f
 800d1a8:	8800759c 	.word	0x8800759c
 800d1ac:	7e37e43c 	.word	0x7e37e43c
 800d1b0:	8800759c 	.word	0x8800759c
 800d1b4:	fe37e43c 	.word	0xfe37e43c
 800d1b8:	c2f8f359 	.word	0xc2f8f359
 800d1bc:	81a56e1f 	.word	0x81a56e1f
 800d1c0:	43500000 	.word	0x43500000
 800d1c4:	ffff3cb0 	.word	0xffff3cb0
 800d1c8:	3c900000 	.word	0x3c900000

0800d1cc <_init>:
 800d1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ce:	bf00      	nop
 800d1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1d2:	bc08      	pop	{r3}
 800d1d4:	469e      	mov	lr, r3
 800d1d6:	4770      	bx	lr

0800d1d8 <_fini>:
 800d1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1da:	bf00      	nop
 800d1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1de:	bc08      	pop	{r3}
 800d1e0:	469e      	mov	lr, r3
 800d1e2:	4770      	bx	lr
